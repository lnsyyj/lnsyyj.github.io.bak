<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ceph pg 状态</title>
      <link href="/2020/03/27/ceph-pg-%E7%8A%B6%E6%80%81/"/>
      <url>/2020/03/27/ceph-pg-%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>ceph 14.2.7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * pg states</span><br><span class="line"> */</span><br><span class="line">#define PG_STATE_CREATING           (1ULL &lt;&lt; 0)  // creating</span><br><span class="line">#define PG_STATE_ACTIVE             (1ULL &lt;&lt; 1)  // i am active.  (primary: replicas too)</span><br><span class="line">#define PG_STATE_CLEAN              (1ULL &lt;&lt; 2)  // peers are complete, clean of stray replicas.</span><br><span class="line">#define PG_STATE_DOWN               (1ULL &lt;&lt; 4)  // a needed replica is down, PG offline</span><br><span class="line">#define PG_STATE_RECOVERY_UNFOUND   (1ULL &lt;&lt; 5)  // recovery stopped due to unfound</span><br><span class="line">#define PG_STATE_BACKFILL_UNFOUND   (1ULL &lt;&lt; 6)  // backfill stopped due to unfound</span><br><span class="line">#define PG_STATE_PREMERGE           (1ULL &lt;&lt; 7)  // i am prepare to merging</span><br><span class="line">#define PG_STATE_SCRUBBING          (1ULL &lt;&lt; 8)  // scrubbing</span><br><span class="line">//#define PG_STATE_SCRUBQ           (1ULL &lt;&lt; 9)  // queued for scrub</span><br><span class="line">#define PG_STATE_DEGRADED           (1ULL &lt;&lt; 10) // pg contains objects with reduced redundancy</span><br><span class="line">#define PG_STATE_INCONSISTENT       (1ULL &lt;&lt; 11) // pg replicas are inconsistent (but shouldn&apos;t be)</span><br><span class="line">#define PG_STATE_PEERING            (1ULL &lt;&lt; 12) // pg is (re)peering</span><br><span class="line">#define PG_STATE_REPAIR             (1ULL &lt;&lt; 13) // pg should repair on next scrub</span><br><span class="line">#define PG_STATE_RECOVERING         (1ULL &lt;&lt; 14) // pg is recovering/migrating objects</span><br><span class="line">#define PG_STATE_BACKFILL_WAIT      (1ULL &lt;&lt; 15) // [active] reserving backfill</span><br><span class="line">#define PG_STATE_INCOMPLETE         (1ULL &lt;&lt; 16) // incomplete content, peering failed.</span><br><span class="line">#define PG_STATE_STALE              (1ULL &lt;&lt; 17) // our state for this pg is stale, unknown.</span><br><span class="line">#define PG_STATE_REMAPPED           (1ULL &lt;&lt; 18) // pg is explicitly remapped to different OSDs than CRUSH</span><br><span class="line">#define PG_STATE_DEEP_SCRUB         (1ULL &lt;&lt; 19) // deep scrub: check CRC32 on files</span><br><span class="line">#define PG_STATE_BACKFILLING        (1ULL &lt;&lt; 20) // [active] backfilling pg content</span><br><span class="line">#define PG_STATE_BACKFILL_TOOFULL   (1ULL &lt;&lt; 21) // backfill can&apos;t proceed: too full</span><br><span class="line">#define PG_STATE_RECOVERY_WAIT      (1ULL &lt;&lt; 22) // waiting for recovery reservations</span><br><span class="line">#define PG_STATE_UNDERSIZED         (1ULL &lt;&lt; 23) // pg acting &lt; pool size</span><br><span class="line">#define PG_STATE_ACTIVATING         (1ULL &lt;&lt; 24) // pg is peered but not yet active</span><br><span class="line">#define PG_STATE_PEERED             (1ULL &lt;&lt; 25) // peered, cannot go active, can recover</span><br><span class="line">#define PG_STATE_SNAPTRIM           (1ULL &lt;&lt; 26) // trimming snaps</span><br><span class="line">#define PG_STATE_SNAPTRIM_WAIT      (1ULL &lt;&lt; 27) // queued to trim snaps</span><br><span class="line">#define PG_STATE_RECOVERY_TOOFULL   (1ULL &lt;&lt; 28) // recovery can&apos;t proceed: too full</span><br><span class="line">#define PG_STATE_SNAPTRIM_ERROR     (1ULL &lt;&lt; 29) // error stopped trimming snaps</span><br><span class="line">#define PG_STATE_FORCED_RECOVERY    (1ULL &lt;&lt; 30) // force recovery of this pg before any other</span><br><span class="line">#define PG_STATE_FORCED_BACKFILL    (1ULL &lt;&lt; 31) // force backfill of this pg before any other</span><br><span class="line">#define PG_STATE_FAILED_REPAIR      (1ULL &lt;&lt; 32) // A repair failed to fix all errors</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph运维笔记</title>
      <link href="/2020/03/11/ceph%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/11/ceph%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="OSD"><a href="#OSD" class="headerlink" title="OSD"></a>OSD</h1><h2 id="换盘操作"><a href="#换盘操作" class="headerlink" title="换盘操作"></a>换盘操作</h2><p>1、确保删除OSD时，集群没有接近near full</p><p>2、检查删除OSD时，是否有数据丢失， ceph osd ok-to-stop {osd-num}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">无数据丢失情况</span><br><span class="line">root@ceph:~# ceph osd ok-to-stop 2</span><br><span class="line">OSD(s) 2 are ok to stop without reducing availability or risking data, provided there are no other concurrent failures or interventions.</span><br><span class="line">70 PGs are likely to be degraded (but remain available) as a result.</span><br><span class="line"></span><br><span class="line">有数据丢失情况</span><br><span class="line">root@ceph:~# ceph osd ok-to-stop 2</span><br><span class="line">Error EBUSY: 18 PGs are already too degraded, would become too degraded or might become unavailable</span><br></pre></td></tr></table></figure><p>3、标记OSD out， ceph osd out {osd-num}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@ceph:~# ceph osd out 3</span><br><span class="line">marked out osd.3. </span><br><span class="line"> </span><br><span class="line">root@ceph:~# ceph osd tree</span><br><span class="line">ID CLASS WEIGHT  TYPE NAME     STATUS REWEIGHT PRI-AFF </span><br><span class="line">-1       0.08997 root default                          </span><br><span class="line">-3       0.08997     host ceph                         </span><br><span class="line"> 0   ssd 0.02249         osd.0     up  1.00000 1.00000 </span><br><span class="line"> 1   ssd 0.02249         osd.1     up  1.00000 1.00000 </span><br><span class="line"> 2   ssd 0.02249         osd.2     up  1.00000 1.00000 </span><br><span class="line"> 3   ssd 0.02249         osd.3   down        0 1.00000</span><br></pre></td></tr></table></figure><p>4、停止OSD进程， systemctl stop ceph-osd@{osd-num}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ceph:~# systemctl stop ceph-osd@3</span><br><span class="line"></span><br><span class="line">root@ceph:~# ps -ef | grep ceph-osd</span><br><span class="line">ceph        3334       1  0 10:19 ?        00:00:13 /usr/bin/ceph-osd -f --cluster ceph --id 2 --setuser ceph --setgroup ceph</span><br><span class="line">ceph        3336       1  0 10:19 ?        00:00:10 /usr/bin/ceph-osd -f --cluster ceph --id 0 --setuser ceph --setgroup ceph</span><br><span class="line">ceph        3337       1  0 10:19 ?        00:00:10 /usr/bin/ceph-osd -f --cluster ceph --id 1 --setuser ceph --setgroup ceph</span><br></pre></td></tr></table></figure><p>5、从crush map中删除OSD， ceph osd purge {osd-num} –yes-i-really-mean-it</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ceph:~# ceph osd purge 3 --yes-i-really-mean-it</span><br><span class="line">purged osd.3</span><br><span class="line"></span><br><span class="line">root@ceph:~# ceph osd tree</span><br><span class="line">ID CLASS WEIGHT  TYPE NAME     STATUS REWEIGHT PRI-AFF </span><br><span class="line">-1       0.06747 root default                          </span><br><span class="line">-3       0.06747     host ceph                         </span><br><span class="line"> 0   ssd 0.02249         osd.0     up  1.00000 1.00000 </span><br><span class="line"> 1   ssd 0.02249         osd.1     up  1.00000 1.00000 </span><br><span class="line"> 2   ssd 0.02249         osd.2     up  1.00000 1.00000</span><br></pre></td></tr></table></figure><p>6、从ceph.conf中删除OSD</p><p>7、卸载OSD挂载点， umount /var/lib/ceph/osd/ceph-{osd-num}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /var/lib/ceph/osd/ceph-3</span><br></pre></td></tr></table></figure><p>8、删除/var/lib/ceph/osd/ceph-{osd-num}/目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/ceph/osd/ceph-3/</span><br></pre></td></tr></table></figure><p>9、换盘后，重新添加OSD</p>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慕课网-Go语言语法进阶指南</title>
      <link href="/2020/03/01/%E6%85%95%E8%AF%BE%E7%BD%91-Go%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/"/>
      <url>/2020/03/01/%E6%85%95%E8%AF%BE%E7%BD%91-Go%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>课程地址：<a href="https://www.imooc.com/video/21088" target="_blank" rel="noopener">https://www.imooc.com/video/21088</a></p><p>Golang语言趋势图：<a href="https://www.tiobe.com/tiobe-index/go/" target="_blank" rel="noopener">https://www.tiobe.com/tiobe-index/go/</a></p><h1 id="内建方法"><a href="#内建方法" class="headerlink" title="内建方法"></a>内建方法</h1><p>在任何的包、任何的文件都可以引用这样的方法，无需导入包就可以使用。</p><h2 id="常用的内建方法"><a href="#常用的内建方法" class="headerlink" title="常用的内建方法"></a>常用的内建方法</h2><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">make：创建slice、map、chan （这三种类型必须使用make创建，这三种类型必须要Golang帮我们初始化好，避免在使用中出现问题）</span><br><span class="line">make返回类型引用</span><br><span class="line">（slice类似于数组，数组在golang中是不可变化长度的，slice是可变长度的。map是一个key、value数据结构。chan是管道。）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">makeSlice()</span><br><span class="line">makeMap()</span><br><span class="line">makeChan()</span><br><span class="line">&#125;</span><br><span class="line">// makeSlice 创建切片</span><br><span class="line">func makeSlice()  &#123;</span><br><span class="line">mSlice := make([]string, 3)</span><br><span class="line">mSlice[0] = &quot;dog&quot;</span><br><span class="line">mSlice[1] = &quot;cat&quot;</span><br><span class="line">mSlice[2] = &quot;tiger&quot;</span><br><span class="line">fmt.Println(mSlice)</span><br><span class="line">&#125;</span><br><span class="line">// makeMap 创建map</span><br><span class="line">func makeMap()  &#123;</span><br><span class="line">mMap := make(map[int]string)</span><br><span class="line">mMap[10] = &quot;dog&quot;</span><br><span class="line">mMap[100] = &quot;cat&quot;</span><br><span class="line">fmt.Println(mMap)</span><br><span class="line">&#125;</span><br><span class="line">// makeChan 创建没有缓存的chan</span><br><span class="line">func makeChan() &#123;</span><br><span class="line">mChan := make(chan int)</span><br><span class="line">close(mChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序执行结果：</span><br><span class="line">[dog cat tiger]</span><br><span class="line">map[10:dog 100:cat]</span><br></pre></td></tr></table></figure><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">内存置零</span><br><span class="line">返回传入类型的指针地址</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">NewMap()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewMap() &#123;</span><br><span class="line">mNewMap := new(map[int]string)</span><br><span class="line">mMakeMap := make(map[int]string)</span><br><span class="line">fmt.Println(reflect.TypeOf(mNewMap))</span><br><span class="line">fmt.Println(reflect.TypeOf(mMakeMap))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序执行结果：</span><br><span class="line">*map[int]string</span><br><span class="line">map[int]string</span><br></pre></td></tr></table></figure><h3 id="append-amp-delete-amp-copy"><a href="#append-amp-delete-amp-copy" class="headerlink" title="append &amp; delete &amp; copy"></a>append &amp; delete &amp; copy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">slice -&gt; append &amp; copy</span><br><span class="line">map -&gt; delete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 向切片中添加元素并打印出切片的长度和容量</span><br><span class="line">func main() &#123;</span><br><span class="line">appendElementForSlice()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func appendElementForSlice() &#123;</span><br><span class="line">mIDSlice := make([]string, 2)</span><br><span class="line">mIDSlice[0] = &quot;id-1&quot;</span><br><span class="line">mIDSlice[1] = &quot;id-2&quot;</span><br><span class="line">fmt.Println(&quot;len=&quot;,len(mIDSlice))</span><br><span class="line">fmt.Println(&quot;cap=&quot;,cap(mIDSlice))</span><br><span class="line">mIDSlice = append(mIDSlice, &quot;id-3&quot;)</span><br><span class="line">fmt.Println(mIDSlice)</span><br><span class="line">fmt.Println(&quot;After len=&quot;,len(mIDSlice))</span><br><span class="line">fmt.Println(&quot;After cap=&quot;,cap(mIDSlice))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序执行结果：</span><br><span class="line">len= 2</span><br><span class="line">cap= 2</span><br><span class="line">[id-1 id-2 id-3]</span><br><span class="line">After len= 3</span><br><span class="line">After cap= 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 拷贝切片 test 1</span><br><span class="line">func main() &#123;</span><br><span class="line">copyForSlice()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func copyForSlice() &#123;</span><br><span class="line">mIDSliceDst := make([]string, 2)</span><br><span class="line">mIDSliceDst[0] = &quot;id-dst-1&quot;</span><br><span class="line">mIDSliceDst[1] = &quot;id-dst-2&quot;</span><br><span class="line"></span><br><span class="line">mIDSliceSrc := make([]string, 2)</span><br><span class="line">mIDSliceSrc[0] = &quot;id-src-1&quot;</span><br><span class="line">mIDSliceSrc[1] = &quot;id-src-2&quot;</span><br><span class="line"></span><br><span class="line">copy(mIDSliceDst, mIDSliceSrc)</span><br><span class="line">fmt.Println(mIDSliceDst)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序执行结果：</span><br><span class="line">[id-src-1 id-src-2]</span><br><span class="line"></span><br><span class="line">// 拷贝切片 test 2</span><br><span class="line">func main() &#123;</span><br><span class="line">copyForSlice()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func copyForSlice() &#123;</span><br><span class="line">mIDSliceDst := make([]string, 3)</span><br><span class="line">mIDSliceDst[0] = &quot;id-dst-1&quot;</span><br><span class="line">mIDSliceDst[1] = &quot;id-dst-2&quot;</span><br><span class="line">mIDSliceDst[2] = &quot;id-dst-3&quot;</span><br><span class="line"></span><br><span class="line">mIDSliceSrc := make([]string, 2)</span><br><span class="line">mIDSliceSrc[0] = &quot;id-src-1&quot;</span><br><span class="line">mIDSliceSrc[1] = &quot;id-src-2&quot;</span><br><span class="line"></span><br><span class="line">copy(mIDSliceDst, mIDSliceSrc)</span><br><span class="line">fmt.Println(mIDSliceDst)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序执行结果：</span><br><span class="line">[id-src-1 id-src-2 id-dst-3]</span><br><span class="line"></span><br><span class="line">// 拷贝切片 test 3</span><br><span class="line">func main() &#123;</span><br><span class="line">copyForSlice()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 拷贝切片</span><br><span class="line">func copyForSlice() &#123;</span><br><span class="line">mIDSliceDst := make([]string, 2)</span><br><span class="line">mIDSliceDst[0] = &quot;id-dst-1&quot;</span><br><span class="line">mIDSliceDst[1] = &quot;id-dst-2&quot;</span><br><span class="line"></span><br><span class="line">mIDSliceSrc := make([]string, 3)</span><br><span class="line">mIDSliceSrc[0] = &quot;id-src-1&quot;</span><br><span class="line">mIDSliceSrc[1] = &quot;id-src-2&quot;</span><br><span class="line"></span><br><span class="line">copy(mIDSliceDst, mIDSliceSrc)</span><br><span class="line">fmt.Println(mIDSliceDst)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序执行结果：</span><br><span class="line">[id-src-1 id-src-2]</span><br><span class="line"></span><br><span class="line">说明copy操作不会为mIDSliceDst扩容</span><br><span class="line"></span><br><span class="line">// delete test 1</span><br><span class="line">func main() &#123;</span><br><span class="line">deleteFormMap()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func deleteFormMap() &#123;</span><br><span class="line">mIDMap := make(map[int]string)</span><br><span class="line">mIDMap[0] = &quot;id-1&quot;</span><br><span class="line">mIDMap[1] = &quot;id-2&quot;</span><br><span class="line">delete(mIDMap, 0)</span><br><span class="line">fmt.Println(mIDMap)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序执行结果：</span><br><span class="line">map[1:id-2]</span><br></pre></td></tr></table></figure><h3 id="panic-amp-recover"><a href="#panic-amp-recover" class="headerlink" title="panic &amp; recover"></a>panic &amp; recover</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">处理异常，panic抛出异常，recover捕获异常</span><br><span class="line"></span><br><span class="line">// panic test 1</span><br><span class="line">func main() &#123;</span><br><span class="line">receivePanic()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func receivePanic() &#123;</span><br><span class="line">panic(&quot;I am panic&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序执行结果：</span><br><span class="line">panic: I am panic</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.receivePanic(...)</span><br><span class="line">D:/SourceCode/GitHub/Golang/src/github.com/lnsyyj/gin_test_project/test/main.go:13</span><br><span class="line">main.main()</span><br><span class="line">D:/SourceCode/GitHub/Golang/src/github.com/lnsyyj/gin_test_project/test/main.go:9 +0x40</span><br><span class="line"></span><br><span class="line">// panic test 2</span><br><span class="line">func main() &#123;</span><br><span class="line">receivePanic()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func receivePanic() &#123;</span><br><span class="line">defer func() &#123;</span><br><span class="line">recover()</span><br><span class="line">&#125;()</span><br><span class="line">panic(&quot;I am panic&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序执行结果：</span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br><span class="line">// panic test 3</span><br><span class="line">func main() &#123;</span><br><span class="line">receivePanic()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func receivePanic() &#123;</span><br><span class="line">defer coverPanic()</span><br><span class="line">panic(&quot;I am panic&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func coverPanic() &#123;</span><br><span class="line">message := recover()</span><br><span class="line">switch message.(type) &#123;</span><br><span class="line">case string:</span><br><span class="line">fmt.Println(&quot;string message : &quot;, message)</span><br><span class="line">case error:</span><br><span class="line">fmt.Println(&quot;error message : &quot;, message)</span><br><span class="line">default:</span><br><span class="line">fmt.Println(&quot;unknown panic : &quot;, message)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">程序执行结果：</span><br><span class="line">string message :  I am panic</span><br></pre></td></tr></table></figure><h3 id="len-amp-cap-amp-close"><a href="#len-amp-cap-amp-close" class="headerlink" title="len &amp; cap &amp; close"></a>len &amp; cap &amp; close</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">len -&gt; string、array、slice、map、chan</span><br><span class="line">cap -&gt; slice、array、chan</span><br><span class="line">close -&gt; chan</span><br><span class="line"></span><br><span class="line">// len &amp; cap test</span><br><span class="line">func main() &#123;</span><br><span class="line">getLen()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getLen() &#123;</span><br><span class="line">mIDSliceDst := make([]string, 2, 5)</span><br><span class="line">mIDSliceDst[0] = &quot;id-dst-1&quot;</span><br><span class="line">mIDSliceDst[1] = &quot;id-dst-2&quot;</span><br><span class="line">mIDSliceDst = append(mIDSliceDst, &quot;id-dst-3&quot;)</span><br><span class="line">mIDSliceDst = append(mIDSliceDst, &quot;id-dst-4&quot;)</span><br><span class="line">mIDSliceDst = append(mIDSliceDst, &quot;id-dst-5&quot;)</span><br><span class="line">mIDSliceDst = append(mIDSliceDst, &quot;id-dst-6&quot;)</span><br><span class="line">fmt.Println(&quot;mIDSliceDst len : &quot;, len(mIDSliceDst))</span><br><span class="line">fmt.Println(&quot;mIDSliceDst cap: &quot;, cap(mIDSliceDst))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序执行结果：</span><br><span class="line">mIDSliceDst len :  6</span><br><span class="line">mIDSliceDst cap:  10</span><br><span class="line"></span><br><span class="line">// close test</span><br><span class="line">func main() &#123;</span><br><span class="line">closeChan()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func closeChan() &#123;</span><br><span class="line">mChan := make(chan int, 1)</span><br><span class="line">defer close(mChan)</span><br><span class="line">mChan &lt;- 1</span><br><span class="line">// 业务代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="创建-amp-初始化"><a href="#创建-amp-初始化" class="headerlink" title="创建&amp;初始化"></a>创建&amp;初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">TestForStruct()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Dog struct &#123;</span><br><span class="line">ID int</span><br><span class="line">Name string</span><br><span class="line">Age int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestForStruct() &#123;</span><br><span class="line">// 方式1</span><br><span class="line">var dog Dog</span><br><span class="line">dog.ID = 0</span><br><span class="line">dog.Name = &quot;KiKi&quot;</span><br><span class="line">dog.Age = 3</span><br><span class="line">fmt.Println(dog)</span><br><span class="line">// 方式2</span><br><span class="line">dog_2 := Dog&#123;ID: 1, Name: &quot;Yaya&quot;, Age: 2&#125;</span><br><span class="line">fmt.Println(dog_2)</span><br><span class="line">// 方式3</span><br><span class="line">dog_3 := new(Dog)</span><br><span class="line">dog_3.ID = 3</span><br><span class="line">dog_3.Name = &quot;Tom&quot;</span><br><span class="line">dog_3.Age = 4</span><br><span class="line">fmt.Println(dog_3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序执行结果：</span><br><span class="line">&#123;0 KiKi 3&#125;</span><br><span class="line">&#123;1 Yaya 2&#125;</span><br><span class="line">&amp;&#123;3 Tom 4&#125;</span><br></pre></td></tr></table></figure><h2 id="属性及函数"><a href="#属性及函数" class="headerlink" title="属性及函数"></a>属性及函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">TestForStruct()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Dog struct &#123;</span><br><span class="line">ID int</span><br><span class="line">Name string</span><br><span class="line">Age int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (d *Dog)Run()  &#123;</span><br><span class="line">fmt.Println(&quot;ID : &quot;, d.ID, &quot; Dog is running&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestForStruct() &#123;</span><br><span class="line">// 方式1</span><br><span class="line">var dog Dog</span><br><span class="line">dog.ID = 0</span><br><span class="line">dog.Name = &quot;KiKi&quot;</span><br><span class="line">dog.Age = 3</span><br><span class="line">dog.Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序执行结果：</span><br><span class="line">ID :  0  Dog is running</span><br></pre></td></tr></table></figure><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>imooc gin 学习笔记</title>
      <link href="/2020/02/15/imooc-gin-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/02/15/imooc-gin-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>学习地址：<a href="https://www.imooc.com/video/20215" target="_blank" rel="noopener">https://www.imooc.com/video/20215</a></p><h1 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">golang 1.12</span><br><span class="line">gin 1.4.0</span><br><span class="line">goland</span><br></pre></td></tr></table></figure><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h3 id="安装gin"><a href="#安装gin" class="headerlink" title="安装gin"></a>安装gin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yujiang@yujiangdeMacBook-Pro-13 ~ % mkdir -p $GOPATH/src/github.com/lnsyyj/go_test_project</span><br><span class="line">yujiang@yujiangdeMacBook-Pro-13 ~ % cd $_                                                 </span><br><span class="line">yujiang@yujiangdeMacBook-Pro-13 go_test_project % </span><br><span class="line"></span><br><span class="line">yujiang@yujiangdeMacBook-Pro-13 go_test_project % export GO111MODULE=on</span><br><span class="line">yujiang@yujiangdeMacBook-Pro-13 go_test_project % go mod init</span><br><span class="line">go: creating new go.mod: module github.com/lnsyyj/go_test_project</span><br><span class="line"></span><br><span class="line">yujiang@yujiangdeMacBook-Pro-13 go_test_project % go get -v github.com/gin-gonic/gin@v1.5</span><br></pre></td></tr></table></figure><h3 id="快速开始-1"><a href="#快速开始-1" class="headerlink" title="快速开始"></a>快速开始</h3><p>使用goland，打开/Users/yujiang/go/src/github.com/lnsyyj/go_test_project刚刚创建的项目。启用Enable Go Modules(vgo) integration，如果不启用会找不到刚刚下载的类库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ceph iSCIS gateway 监控</title>
      <link href="/2019/11/27/Ceph-iSCIS-gateway-%E7%9B%91%E6%8E%A7/"/>
      <url>/2019/11/27/Ceph-iSCIS-gateway-%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="监控ISCSI-GATEWAYS"><a href="#监控ISCSI-GATEWAYS" class="headerlink" title="监控ISCSI GATEWAYS"></a>监控ISCSI GATEWAYS</h1><p>Ceph为iSCSI gateway环境提供了一个附加工具，以监视导出的RADOS Block Device (RBD) images的性能。</p><p>gwtop工具是一个类似top的工具，用于显示通过iSCSI导出到客户端的RBD images的聚合性能指标。 这些指标来自Performance Metrics Domain Agent（PMDA）。 来自Linux-IO target (LIO) PMDA的信息用于列出每个已导出的RBD image以及所连接的客户端及其相关的I/O指标。</p><p><strong>Requirements:</strong></p><p>正在运行的Ceph iSCSI gateway</p><p><strong>Installing:</strong></p><p>1、以root用户身份在每个iSCSI gateway节点上安装ceph-iscsi-tools package：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install ceph-iscsi-tools</span><br></pre></td></tr></table></figure><p>2、以root用户身份在每个iSCSI gateway节点上安装performance co-pilot package：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install pcp</span><br></pre></td></tr></table></figure><p>3、以root用户身份在每个iSCSI gateway节点上安装LIO PMDA package：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install pcp-pmda-lio</span><br></pre></td></tr></table></figure><p>4、以root用户身份，在每个iSCSI gateway节点上启用并启动performance co-pilot service：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl enable pmcd</span><br><span class="line"># systemctl start pmcd</span><br></pre></td></tr></table></figure><p>5、以root用户身份注册pcp-pmda-lio agent：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/pcp/pmdas/lio</span><br><span class="line">./Install</span><br></pre></td></tr></table></figure><p>默认情况下，gwtop假定iSCSI gateway configuration object存储在rbd pool中的一个名为gateway.conf的RADOS object中。 此configuration定义了收集性能统计信息的iSCSI gateways。 可以使用-g或-c标志将其覆盖。 有关更多详细信息，请参见gwtop –help。</p><p>LIO configuration决定要从performance co-pilot提取的性能统计信息的类型。 gwtop启动时，它会查看LIO configuration，如果找到user-space disks，则gwtop会自动选择LIO collector。</p><p>示例<code>gwtop</code>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gwtop  2/2 Gateways   CPU% MIN:  4 MAX:  5    Network Total In:    2M  Out:    3M   10:20:00</span><br><span class="line">Capacity:   8G    Disks:   8   IOPS:  503   Clients:  1   Ceph: HEALTH_OK          OSDs:   3</span><br><span class="line">Pool.Image       Src    Size     iops     rMB/s     wMB/s   Client</span><br><span class="line">iscsi.t1703             500M        0      0.00      0.00</span><br><span class="line">iscsi.testme1           500M        0      0.00      0.00</span><br><span class="line">iscsi.testme2           500M        0      0.00      0.00</span><br><span class="line">iscsi.testme3           500M        0      0.00      0.00</span><br><span class="line">iscsi.testme5           500M        0      0.00      0.00</span><br><span class="line">rbd.myhost_1      T       4G      504      1.95      0.00   rh460p(CON)</span><br><span class="line">rbd.test_2                1G        0      0.00      0.00</span><br><span class="line">rbd.testme              500M        0      0.00      0.00</span><br></pre></td></tr></table></figure><p>在Client列中，(CON)表示iSCSI initiator (client)当前已登录iSCSI gateway。 如果显示-multi-，则多个clients映射到单个RBD image。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ceph iSCSI gateway 安装和配置</title>
      <link href="/2019/11/27/Ceph-iSCSI-gateway-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/11/27/Ceph-iSCSI-gateway-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="使用ANSI配置ISCSI-TARGET"><a href="#使用ANSI配置ISCSI-TARGET" class="headerlink" title="使用ANSI配置ISCSI TARGET"></a>使用ANSI配置ISCSI TARGET</h1><p>Ceph iSCSI gateway是iSCSI target node，也是Ceph client node。 Ceph iSCSI gateway可以是独立节点，也可以位于Ceph Object Store Disk (OSD) node上。 完成以下步骤，将安装Ceph iSCSI gateway并将其配置为基本操作。</p><p><strong>要求：</strong></p><ul><li>正在运行的Ceph Luminous（12.2.x）集群或更高版本</li><li>Red Hat Enterprise Linux/CentOS 7.5（或更高版本）； Linux内核v4.16（或更高版本）</li><li>在所有iSCSI gateway节点上安装ceph-iscsi package</li></ul><p><strong>安装：</strong></p><p>在Ansible installer节点（可以是管理节点也可以是专用部署节点）上，执行以下步骤：</p><p>1、以root用户身份安装ceph-ansible package：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install ceph-ansible</span><br></pre></td></tr></table></figure><p>2、在/etc/ansible/hosts文件中为gateway group添加一个entry：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[iscsigws]</span><br><span class="line">ceph-igw-1</span><br><span class="line">ceph-igw-2</span><br></pre></td></tr></table></figure><p>注意如果将iSCSI gateway与OSD部署同一节点，则将OSD节点添加到[iscsigws] section。</p><p><strong>配置：</strong></p><p>ceph-ansible package在/usr/share/ceph-ansible/group_vars/目录中放置了一个名为iscsigws.yml.sample的文件。 创建此示例文件的副本iscsigws.yml。 查看以下Ansible变量和说明，并进行相应更新。 有关高级变量的完整列表，请参见iscsigws.yml.sample。</p><table><thead><tr><th align="left">Variable（变量）</th><th align="left">Meaning/Purpose（含义/目的）</th></tr></thead><tbody><tr><td align="left"><code>seed_monitor</code></td><td align="left">每个gateway都需要访问ceph集群以进行rados和rbd calls。 这意味着iSCSI gateway必须已定义适当的<code>/etc/ceph/</code>目录。 <code>seed_monitor</code> host用于填充iSCSI gateway的<code>/etc/ceph/</code>目录。</td></tr><tr><td align="left"><code>cluster_name</code></td><td align="left">自定义存储集群名称（默认为ceph）</td></tr><tr><td align="left"><code>gateway_keyring</code></td><td align="left">Define a custom keyring name.</td></tr><tr><td align="left"><code>deploy_settings</code></td><td align="left">如果设置为<code>true</code>，则在运行playbook时deploy the settings。</td></tr><tr><td align="left"><code>perform_system_checks</code></td><td align="left">这是一个布尔值，用于检查每个gateway上的multipath和lvm configuration settings。 必须至少在第一次运行时将其设置为true，以确保正确配置了multipathd和lvm。</td></tr><tr><td align="left"><code>api_user</code></td><td align="left">API的用户名。 默认值为admin。</td></tr><tr><td align="left"><code>api_password</code></td><td align="left">使用API的密码。 默认值为admin。</td></tr><tr><td align="left"><code>api_port</code></td><td align="left">使用API的TCP端口号。 默认值为5000。</td></tr><tr><td align="left"><code>api_secure</code></td><td align="left">如果必须使用TLS，则为True。 默认为false。 如果为true，则用户必须创建必要的certificate和key files。 有关详细信息，请参见gwcli man文件。</td></tr><tr><td align="left"><code>trusted_ip_list</code></td><td align="left">有权访问API的IPv4或IPv6地址的列表。 默认情况下，只有iSCSI gateway节点可以访问。</td></tr></tbody></table><p><strong>Deploying:</strong></p><p>在Ansible installer节点上，执行以下步骤。</p><p>1、以root用户身份执行Ansible playbook：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/share/ceph-ansible</span><br><span class="line"># ansible-playbook site.yml --limit iscsigws</span><br></pre></td></tr></table></figure><p>注意Ansible playbook将处理RPM dependencies，设置daemons并安装gwcli，因此可用于创建iSCSI targets并将RBD images导出为LUN。 在以前的版本中，iscsigws.yml可以定义iSCSI target和其他objects，如clients, images和LUNs, 但现在不再支持该功能。</p><p>2、从iSCSI gateway节点验证配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># gwcli ls</span><br></pre></td></tr></table></figure><p>请参阅<a href="https://docs.ceph.com/docs/master/rbd/iscsi-target-cli" target="_blank" rel="noopener">Configuring the iSCSI Target using the Command Line Interface</a>，使用gwcli工具创建gateways, LUNs和clients。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重要提示尝试使用targetcli工具更改配置将导致以下问题，例如ALUA配置错误和路径故障转移问题。 可能会损坏数据，configuration across iSCSI gateways不匹配，WWN information不匹配，这将导致client multipath问题。</span><br></pre></td></tr></table></figure><p><strong>Service Management:</strong></p><p>ceph-iscsi package安装configuration management logic和一个名为rbd-target-api的Systemd service。启用Systemd service后，rbd-target-api将在引导时启动，并将恢复Linux IO状态。Ansible playbook会在部署期间禁用target service。以下是与rbd-target-api Systemd服务交互命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl &lt;start|stop|restart|reload&gt; rbd-target-api</span><br></pre></td></tr></table></figure><ul><li>reload</li></ul><p>reload request将强制rbd-target-api重新读取配置并将其应用于当前正在运行的环境。 通常不需要这样做，因为changes是从Ansible并行部署到所有iSCSI gateway节点的。</p><ul><li>stop</li></ul><p>stop request将关闭gateway的portal interfaces，断开与客户端的连接，并从内核中清除当前的LIO配置。这将使iSCSI gateway返回到clean状态。 当客户端断开连接时，客户端multipathing layer会将active I/O（活动的I/O）重新安排到其他iSCSI gateways。</p><p><strong>Removing the Configuration:</strong></p><p>ceph-ansible package提供了Ansible手册，可删除iSCSI gateway配置和相关的RBD images。 Ansible playbook是/usr/share/ceph-ansible/purge_gateways.yml。 运行此Ansible playbook时，系统会提示您执行清除的类型：</p><p><em>lio</em> :</p><p>在此模式下，将在已定义的所有iSCSI gateways上清除LIO配置。 在Ceph storage集群中，创建的Disks保持不变。</p><p><em>all</em> :</p><p>选择all后，将删除LIO配置以及在iSCSI gateway环境中定义的所有RBD images，其他不相关的RBD images将不会删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">警告清除操作是对iSCSI gateway环境的破坏性操作。</span><br><span class="line"></span><br><span class="line">警告如果RBD images具有snapshots或clones并通过Ceph iSCSI gateway导出，则清除操作将失败。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@rh7-iscsi-client ceph-ansible]# ansible-playbook purge_gateways.yml</span><br><span class="line">Which configuration elements should be purged? (all, lio or abort) [abort]: all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY [Confirm removal of the iSCSI gateway configuration] *********************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GATHERING FACTS ***************************************************************</span><br><span class="line">ok: [localhost]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TASK: [Exit playbook if user aborted the purge] *******************************</span><br><span class="line">skipping: [localhost]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TASK: [set_fact ] *************************************************************</span><br><span class="line">ok: [localhost]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY [Removing the gateway configuration] *************************************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GATHERING FACTS ***************************************************************</span><br><span class="line">ok: [ceph-igw-1]</span><br><span class="line">ok: [ceph-igw-2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TASK: [igw_purge | purging the gateway configuration] *************************</span><br><span class="line">changed: [ceph-igw-1]</span><br><span class="line">changed: [ceph-igw-2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TASK: [igw_purge | deleting configured rbd devices] ***************************</span><br><span class="line">changed: [ceph-igw-1]</span><br><span class="line">changed: [ceph-igw-2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY RECAP ********************************************************************</span><br><span class="line">ceph-igw-1                 : ok=3    changed=2    unreachable=0    failed=0</span><br><span class="line">ceph-igw-2                 : ok=3    changed=2    unreachable=0    failed=0</span><br><span class="line">localhost                  : ok=2    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><h1 id="使用COMMAND-LINE-INTERFACE配置ISCSI-TARGET"><a href="#使用COMMAND-LINE-INTERFACE配置ISCSI-TARGET" class="headerlink" title="使用COMMAND LINE INTERFACE配置ISCSI TARGET"></a>使用COMMAND LINE INTERFACE配置ISCSI TARGET</h1><p>Ceph iSCSI gateway是iSCSI target节点，也是Ceph client节点。 Ceph iSCSI gateway可以是独立节点，也可以位于Ceph Object Store Disk (OSD)节点上。 完成以下步骤，将安装Ceph iSCSI gateway并将其配置为基本操作。</p><p><strong>Requirements:</strong></p><ul><li>正在运行的Ceph Luminous（12.2.x）集群或更高版本</li><li>Red Hat Enterprise Linux/CentOS 7.5（或更高版本）； Linux内核v4.16（或更高版本）</li><li>必须从Linux发行版的软件repository中安装以下软件包：<ul><li>targetcli-2.1.fb47 or newer package</li><li>python-rtslib-2.1.fb68 or newer package</li><li>tcmu-runner-1.4.0 or newer package</li><li>ceph-iscsi-3.2 or newer package</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重要说明：如果存在这些packages的先前版本，则必须在安装较新版本之前首先将其删除。</span><br></pre></td></tr></table></figure><p>在继续Installing section之前，请在Ceph iSCSI gateway节点上执行以下步骤：</p><p>1、如果Ceph iSCSI gateway未在OSD节点上，则将/etc/ceph/中的Ceph配置文件复制到iSCSI gateway 节点。 Ceph配置文件必须存在于/etc/ceph/下的iSCSI gateway节点上。</p><p>2、安装和配置<a href="http://docs.ceph.com/docs/master/start/quick-rbd/#install-ceph" target="_blank" rel="noopener">Ceph Command-line Interface</a></p><p>3、请在防火墙上打开TCP端口3260和5000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意对端口5000的访问应仅限于受信任的内部网络或仅使用gwcli或正在运行ceph-mgr daemons的单个主机。</span><br></pre></td></tr></table></figure><p>4、创建一个新的或使用现有的RADOS Block Device (RBD)。</p><p><strong>Installing:</strong></p><p>如果您使用upstream ceph-iscsi package，请遵循 <a href="https://docs.ceph.com/docs/master/rbd/iscsi-target-cli-manual-install" target="_blank" rel="noopener">manual install instructions</a>。</p><p>对于基于rpm的指令，请执行以下命令：</p><p>1、以root用户身份，在所有iSCSI gateway节点上，安装ceph-iscsi package：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install ceph-iscsi</span><br></pre></td></tr></table></figure><p>2、以root用户身份，在所有iSCSI gateway节点上，安装tcmu-runner package：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install tcmu-runner</span><br></pre></td></tr></table></figure><p><strong>Setup:</strong></p><p>1、gwcli需要一个名称为rbd的pool，因此它可以存储iSCSI配置之类的元数据。 要检查是否已创建此pool，请运行：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ceph osd lspools</span><br></pre></td></tr></table></figure><p>如果不存在，则可以在<a href="http://docs.ceph.com/docs/master/rados/operations/pools/" target="_blank" rel="noopener">RADOS pool operations page</a>上找到创建pool的说明。</p><p>2、在iSCSI gateway节点上，以root身份在/etc/ceph/目录中创建一个名为iscsi-gateway.cfg的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># touch /etc/ceph/iscsi-gateway.cfg</span><br></pre></td></tr></table></figure><p>2.1、编辑iscsi-gateway.cfg文件并添加以下行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[config]</span><br><span class="line"># Name of the Ceph storage cluster. A suitable Ceph configuration file allowing</span><br><span class="line"># access to the Ceph storage cluster from the gateway node is required, if not</span><br><span class="line"># colocated on an OSD node.</span><br><span class="line">cluster_name = ceph</span><br><span class="line"></span><br><span class="line"># Place a copy of the ceph cluster&apos;s admin keyring in the gateway&apos;s /etc/ceph</span><br><span class="line"># drectory and reference the filename here</span><br><span class="line">gateway_keyring = ceph.client.admin.keyring</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># API settings.</span><br><span class="line"># The API supports a number of options that allow you to tailor it to your</span><br><span class="line"># local environment. If you want to run the API under https, you will need to</span><br><span class="line"># create cert/key files that are compatible for each iSCSI gateway node, that is</span><br><span class="line"># not locked to a specific node. SSL cert and key files *must* be called</span><br><span class="line"># &apos;iscsi-gateway.crt&apos; and &apos;iscsi-gateway.key&apos; and placed in the &apos;/etc/ceph/&apos; directory</span><br><span class="line"># on *each* gateway node. With the SSL files in place, you can use &apos;api_secure = true&apos;</span><br><span class="line"># to switch to https mode.</span><br><span class="line"></span><br><span class="line"># To support the API, the bear minimum settings are:</span><br><span class="line">api_secure = false</span><br><span class="line"></span><br><span class="line"># Additional API configuration options are as follows, defaults shown.</span><br><span class="line"># api_user = admin</span><br><span class="line"># api_password = admin</span><br><span class="line"># api_port = 5001</span><br><span class="line"># trusted_ip_list = 192.168.0.10,192.168.0.11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------------------------------------------------</span><br><span class="line"># 翻译如下</span><br><span class="line">[config]</span><br><span class="line">＃Ceph存储集群的名称。如果不位于OSD节点上，则需要一个合适的Ceph配置文件，该文件允许从gateway节点访问Ceph存储群集。</span><br><span class="line">cluster_name = ceph</span><br><span class="line"></span><br><span class="line">＃将ceph集群的admin keyring的副本放置在gateway的/etc/ceph文件夹中，并在此处引用filename</span><br><span class="line">gateway_keyring = ceph.client.admin.keyring</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">＃API设置。</span><br><span class="line">＃API支持许多选项，可让您根据本地环境进行定制。如果要在https下运行API，则需要为每个iSCSI gateway节点创建兼容的cert/key文件，该节点未锁定到特定节点。必须将SSL cert和key文件命名为&apos;iscsi-gateway.crt&apos;和&apos;iscsi-gateway.key&apos;，并放置在每个gateway节点上的&apos;/etc/ceph/&apos;目录中。放置好SSL文件后，您可以使用&apos;api_secure = true&apos;切换到https模式。</span><br><span class="line"></span><br><span class="line">＃为了支持API，至少需要配置如下：</span><br><span class="line">api_secure = false</span><br><span class="line"></span><br><span class="line">＃其他API配置选项如下，显示的默认值。（trusted翻译为信任）</span><br><span class="line"># api_user = admin</span><br><span class="line"># api_password = admin</span><br><span class="line"># api_port = 5001</span><br><span class="line"># trusted_ip_list = 192.168.0.10,192.168.0.11</span><br></pre></td></tr></table></figure><p>注意trusted_ip_list是每个iscsi gateway上IP地址的列表，将用于管理操作，如创建target，lun导出等。该IP可以与用于iSCSI data的IP相同，例如与RBD image之间的READ/WRITE命令，但建议使用单独的IP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重要说明：在所有iSCSI gateway节点上，iscsi-gateway.cfg文件必须相同。</span><br></pre></td></tr></table></figure><p>2.2、以root用户身份将iscsi-gateway.cfg文件复制到所有iSCSI gateway节点。</p><p>2.3、以root用户身份，在所有iSCSI gateway节点上，启用并启动API服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># systemctl daemon-reload</span><br><span class="line"># systemctl enable rbd-target-api</span><br><span class="line"># systemctl start rbd-target-api</span><br></pre></td></tr></table></figure><p><strong>Configuring:</strong></p><p>gwcli将创建和配置iSCSI target和RBD images，并在上一部分中的gateways设置之间复制配置。 较低级别的工具（例如targetcli和rbd）可用于查询本地配置，但不应用于对其进行修改。 下一节将演示如何创建iSCSI target并将RBD image导出为LUN 0。</p><p>1、以root用户身份，在iSCSI gateway节点上，启动iSCSI gateway command-line interface：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># gwcli</span><br></pre></td></tr></table></figure><p>2、转到iscsi-targets并创建名为iqn.2003-01.com.redhat.iscsi-gw:iscsi-igw的目标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; /&gt; cd /iscsi-target</span><br><span class="line">&gt; /iscsi-target&gt;  create iqn.2003-01.com.redhat.iscsi-gw:iscsi-igw</span><br></pre></td></tr></table></figure><p>3、创建iSCSI gateways。 下面使用的IP是用于iSCSI data（如READ和WRITE命令）的IP。 它们可以是trusted_ip_list中列出的用于管理操作相同的IP，但是建议使用不同的IP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; /iscsi-target&gt; cd iqn.2003-01.com.redhat.iscsi-gw:iscsi-igw/gateways</span><br><span class="line">&gt; /iscsi-target...-igw/gateways&gt;  create ceph-gw-1 10.172.19.21</span><br><span class="line">&gt; /iscsi-target...-igw/gateways&gt;  create ceph-gw-2 10.172.19.22</span><br></pre></td></tr></table></figure><p>如果不使用RHEL/CentOS或使用upstream或ceph-iscsi-test kernel，则必须使用skipchecks=true参数。 这将避免Red Hat kernel和rpm checks：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; /iscsi-target&gt; cd iqn.2003-01.com.redhat.iscsi-gw:iscsi-igw/gateways</span><br><span class="line">&gt; /iscsi-target...-igw/gateways&gt;  create ceph-gw-1 10.172.19.21 skipchecks=true</span><br><span class="line">&gt; /iscsi-target...-igw/gateways&gt;  create ceph-gw-2 10.172.19.22 skipchecks=true</span><br></pre></td></tr></table></figure><p>4、在rbd pool中添加名称为disk_1的RBD image：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; /iscsi-target...-igw/gateways&gt; cd /disks</span><br><span class="line">&gt; /disks&gt; create pool=rbd image=disk_1 size=90G</span><br></pre></td></tr></table></figure><p>5、创建一个客户端，使用initiator名称iqn.1994-05.com.redhat:rh7-client：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; /disks&gt; cd /iscsi-target/iqn.2003-01.com.redhat.iscsi-gw:iscsi-igw/hosts</span><br><span class="line">&gt; /iscsi-target...eph-igw/hosts&gt;  create iqn.1994-05.com.redhat:rh7-client</span><br></pre></td></tr></table></figure><p>6、将客户端的CHAP用户名设置为myiscsiusername，将密码设置为myiscsipassword：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; /iscsi-target...at:rh7-client&gt;  auth username=myiscsiusername password=myiscsipassword</span><br></pre></td></tr></table></figure><p>警告必须始终配置CHAP。 如果没有CHAP，target将拒绝任何登录请求。</p><p>7、将disk添加到客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; /iscsi-target...at:rh7-client&gt; disk add rbd/disk_1</span><br></pre></td></tr></table></figure><p>下一步是配置iSCSI initiators。</p><h1 id="手动安装CEPH-ISCSI"><a href="#手动安装CEPH-ISCSI" class="headerlink" title="手动安装CEPH-ISCSI"></a>手动安装CEPH-ISCSI</h1><p><strong>Requirements</strong></p><p>要完成ceph-iscsi的安装，有4个步骤：</p><p>1、从Linux发行版的软件repository安装common packages</p><p>2、安装Git以直接从其Git repositories中获取其余packages</p><p>3、确保使用兼容的kernel</p><p>4、安装ceph-iscsi的所有组件并启动相关的daemons：</p><ul><li>tcmu-runner</li><li>rtslib-fb</li><li>configshell-fb</li><li>targetcli-fb</li><li>ceph-iscsi</li></ul><h3 id="1、安装COMMON-PACKAGES"><a href="#1、安装COMMON-PACKAGES" class="headerlink" title="1、安装COMMON PACKAGES"></a>1、安装COMMON PACKAGES</h3><p>ceph-iscsi和target工具将使用以下packages。 必须从Linux发行版的软件repository中将它们安装在将成为iSCSI gateway的每台计算机上：</p><ul><li>libnl3</li><li>libkmod</li><li>librbd1</li><li>pyparsing</li><li>python kmod</li><li>python pyudev</li><li>python gobject</li><li>python urwid</li><li>python pyparsing</li><li>python rados</li><li>python rbd</li><li>python netifaces</li><li>python crypto</li><li>python requests</li><li>python flask</li><li>pyOpenSSL</li></ul><h3 id="2、安装GIT"><a href="#2、安装GIT" class="headerlink" title="2、安装GIT"></a>2、安装GIT</h3><p>为了安装使用Ceph运行iSCSI所需的所有packages，您需要使用Git直接从其repository中下载它们。 在CentOS/RHEL上执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo yum install git</span><br></pre></td></tr></table></figure><p>在Debian/Ubuntu上执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo apt install git</span><br></pre></td></tr></table></figure><p>要了解有关Git及其工作方式的更多信息，请访问<a href="https://git-scm.com" target="_blank" rel="noopener">https://git-scm.com</a></p><h3 id="3、确保使用了兼容的KERNEL"><a href="#3、确保使用了兼容的KERNEL" class="headerlink" title="3、确保使用了兼容的KERNEL"></a>3、确保使用了兼容的KERNEL</h3><p>确保使用支持Ceph iSCSI patches的kernel：</p><ul><li>具有内核v4.16或更高版本的所有Linux发行版</li><li>Red Hat Enterprise Linux或CentOS 7.5更高版本</li></ul><p>如果您已经在使用兼容的kernel，则可以转到下一步。 但是，如果您不使用兼容的kernel，请查看发行版的文档以获取有关如何构建此kernel的特定说明。 唯一的Ceph iSCSI特定要求是必须启用以下构建选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_TARGET_CORE=m</span><br><span class="line">CONFIG_TCM_USER2=m</span><br><span class="line">CONFIG_ISCSI_TARGET=m</span><br></pre></td></tr></table></figure><h3 id="4、安装CEPH-ISCSI"><a href="#4、安装CEPH-ISCSI" class="headerlink" title="4、安装CEPH-ISCSI"></a>4、安装CEPH-ISCSI</h3><p>最后，可以直接从其Git repositories中获取其余工具，并启动其相关服务</p><p><strong>TCMU-RUNNER</strong></p><p>Installation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; git clone https://github.com/open-iscsi/tcmu-runner</span><br><span class="line">&gt; cd tcmu-runner</span><br></pre></td></tr></table></figure><p>运行以下命令以安装所有必需的依赖项：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ./extra/install_dep.sh</span><br></pre></td></tr></table></figure><p>现在，您可以构建tcmu-runner。 为此，请使用以下构建命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; cmake -Dwith-glfs=false -Dwith-qcow=false -DSUPPORT_SYSTEMD=ON -DCMAKE_INSTALL_PREFIX=/usr</span><br><span class="line">&gt; make install</span><br></pre></td></tr></table></figure><p>启用并启动守护程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl daemon-reload</span><br><span class="line">&gt; systemctl enable tcmu-runner</span><br><span class="line">&gt; systemctl start tcmu-runner</span><br></pre></td></tr></table></figure><p><strong>RTSLIB-FB</strong></p><p>Installation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; git clone https://github.com/open-iscsi/rtslib-fb.git</span><br><span class="line">&gt; cd rtslib-fb</span><br><span class="line">&gt; python setup.py install</span><br></pre></td></tr></table></figure><p><strong>CONFIGSHELL-FB</strong></p><p>Installation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; git clone https://github.com/open-iscsi/configshell-fb.git</span><br><span class="line">&gt; cd configshell-fb</span><br><span class="line">&gt; python setup.py install</span><br></pre></td></tr></table></figure><p><strong>TARGETCLI-FB</strong></p><p>Installation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; git clone https://github.com/open-iscsi/targetcli-fb.git</span><br><span class="line">&gt; cd targetcli-fb</span><br><span class="line">&gt; python setup.py install</span><br><span class="line">&gt; mkdir /etc/target</span><br><span class="line">&gt; mkdir /var/target</span><br></pre></td></tr></table></figure><p>警告ceph-iscsi工具假定它们正在管理系统上的所有targets。 如果已设置targets并由targetcli管理，则必须禁用targets服务。</p><p><strong>CEPH-ISCSI</strong><br>Installation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; git clone https://github.com/ceph/ceph-iscsi.git</span><br><span class="line">&gt; cd ceph-iscsi</span><br><span class="line">&gt; python setup.py install --install-scripts=/usr/bin</span><br><span class="line">&gt; cp usr/lib/systemd/system/rbd-target-gw.service /lib/systemd/system</span><br><span class="line">&gt; cp usr/lib/systemd/system/rbd-target-api.service /lib/systemd/system</span><br></pre></td></tr></table></figure><p>启用并启动daemon：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl daemon-reload</span><br><span class="line">&gt; systemctl enable rbd-target-gw</span><br><span class="line">&gt; systemctl start rbd-target-gw</span><br><span class="line">&gt; systemctl enable rbd-target-api</span><br><span class="line">&gt; systemctl start rbd-target-api</span><br></pre></td></tr></table></figure><p>安装完成。 进入<a href="https://docs.ceph.com/docs/master/rbd/iscsi-target-cli" target="_blank" rel="noopener">main ceph-iscsi CLI page</a>上的setup部分。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 常用操作</title>
      <link href="/2019/11/22/Ubuntu-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/11/22/Ubuntu-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>Ubuntu版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION=&quot;18.04.3 LTS (Bionic Beaver)&quot;</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=&quot;Ubuntu 18.04.3 LTS&quot;</span><br><span class="line">VERSION_ID=&quot;18.04&quot;</span><br><span class="line">HOME_URL=&quot;https://www.ubuntu.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;</span><br><span class="line">PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span><br><span class="line">VERSION_CODENAME=bionic</span><br><span class="line">UBUNTU_CODENAME=bionic</span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>1、add-apt-repository</p><p>add-apt-repository是用于添加apt source.list条目的脚本。它可用于添加任何repository，还提供用于添加Launchpad PPA repository的简写语法（Personal Package Archive，个人软件包存档）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:g2p/storage</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install bcache-tools</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:ansible/ansible-2.8</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install ansible</span><br></pre></td></tr></table></figure><p>2、vim 粘贴串行问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在粘贴前设置（粘贴前不会自动缩进）</span><br><span class="line">set paste</span><br><span class="line"></span><br><span class="line">在粘贴后恢复</span><br><span class="line">set nopaste</span><br></pre></td></tr></table></figure><p>3、安装package常用操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt clean   #清空缓存</span><br><span class="line">sudo apt install -d software_name   #只下载不安装，缓存位置 /var/cache/apt/archives</span><br><span class="line">sudo dpkg -i *.deb</span><br><span class="line"></span><br><span class="line">apt-get install -f   修复损坏的软件包，尝试卸载出错的包，重新安装正确版本</span><br></pre></td></tr></table></figure><h3 id="设置网络"><a href="#设置网络" class="headerlink" title="设置网络"></a>设置网络</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@yujiang-ceph-1:~# cat /etc/netplan/50-cloud-init.yaml </span><br><span class="line"># This file is generated from information provided by</span><br><span class="line"># the datasource.  Changes to it will not persist across an instance.</span><br><span class="line"># To disable cloud-init&apos;s network configuration capabilities, write a file</span><br><span class="line"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span><br><span class="line"># network: &#123;config: disabled&#125;</span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        ens160:</span><br><span class="line">            dhcp4: false</span><br><span class="line">            addresses: [192.168.1.127/24]</span><br><span class="line">            gateway4: 192.168.1.1</span><br><span class="line">            nameservers:</span><br><span class="line">                    addresses: [192.168.1.1, 114.114.114.114]</span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><h3 id="编译deb"><a href="#编译deb" class="headerlink" title="编译deb"></a>编译deb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">解压xz文件</span><br><span class="line">xz -d prometheus_2.1.0+ds-1.debian.tar.xz</span><br><span class="line">tar -xvf prometheus_2.1.0+ds-1.debian.tar</span><br><span class="line"></span><br><span class="line">压缩xz文件</span><br><span class="line">tar cvf prometheus_2.1.0+ds-1.debian.tar debian/</span><br><span class="line">xz -z prometheus_2.1.0+ds-1.debian.tar</span><br><span class="line"></span><br><span class="line">apt-get install debhelper dh-golang golang-github-aws-aws-sdk-go-dev golang-github-azure-azure-sdk-for-go-dev golang-github-azure-go-autorest-dev golang-github-cespare-xxhash-dev golang-github-cockroachdb-cmux-dev golang-github-fsnotify-fsnotify-dev golang-github-go-kit-kit-dev golang-github-gogo-protobuf-dev golang-github-golang-snappy-dev golang-github-gophercloud-gophercloud-dev golang-github-grpc-ecosystem-grpc-gateway-dev golang-github-hashicorp-go-cleanhttp-dev golang-github-hashicorp-serf-dev golang-github-miekg-dns-dev golang-github-mwitkow-go-conntrack-dev golang-github-opentracing-contrib-go-stdlib-dev golang-github-opentracing-opentracing-go-dev golang-github-pkg-errors-dev golang-github-prometheus-client-golang-dev golang-github-prometheus-client-model-dev golang-github-prometheus-common-dev golang-github-prometheus-tsdb-dev golang-github-samuel-go-zookeeper-dev golang-go golang-golang-x-net-dev golang-golang-x-oauth2-google-dev golang-golang-x-time-dev golang-google-api-dev golang-google-genproto-dev golang-google-grpc-dev golang-gopkg-alecthomas-kingpin.v2-dev golang-gopkg-yaml.v2-dev</span><br><span class="line"></span><br><span class="line">    dpkg-buildpackage -uc -us</span><br><span class="line"></span><br><span class="line">dpkg-buildpackage -rfakeroot -Tclean</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ceph 数据recovery流量控制</title>
      <link href="/2019/11/16/Ceph-%E6%95%B0%E6%8D%AErecovery%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
      <url>/2019/11/16/Ceph-%E6%95%B0%E6%8D%AErecovery%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>ceph在扩容或缩容期间会有数据rebalance。如何控制在rebalance时，尽量降低对client IO的影响？调研如下：</p><h1 id="首先，在什么情况下ceph会出现数据rebalance？"><a href="#首先，在什么情况下ceph会出现数据rebalance？" class="headerlink" title="首先，在什么情况下ceph会出现数据rebalance？"></a>首先，在什么情况下ceph会出现数据rebalance？</h1><p>本质上，用户数据写入ceph时，会被切分成大小相等的object，这些object由PG承载，分布到不同的OSD上（每个OSD一般会对应一块硬盘）。数据的迁移会以PG为单位进行，所以当PG发生变化时，就会有数据rebalance。</p><h3 id="那么在什么时候PG会变化呢？"><a href="#那么在什么时候PG会变化呢？" class="headerlink" title="那么在什么时候PG会变化呢？"></a>那么在什么时候PG会变化呢？</h3><p>从用户使用角度讲一般有如下几种场景：</p><ul><li>添加/删除OSD</li><li>重新调整pool的PG数</li></ul><h3 id="Client-IO优先"><a href="#Client-IO优先" class="headerlink" title="Client IO优先"></a>Client IO优先</h3><p>降低recovery的I/O优先级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">调整后</span><br><span class="line">[root@ceph ~]# ceph daemon osd.2 config show | grep osd_recovery_op_priority </span><br><span class="line">    &quot;osd_recovery_op_priority&quot;: &quot;3&quot;,</span><br><span class="line"></span><br><span class="line">使用默认值</span><br><span class="line">[root@ceph ~]# ceph daemon osd.2 config show | grep osd_client_op_priority </span><br><span class="line">    &quot;osd_client_op_priority&quot;: &quot;63&quot;,</span><br></pre></td></tr></table></figure><p>降低recovery的I/O带宽及backfill带宽</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">调整后</span><br><span class="line">[root@ceph ~]# ceph daemon osd.2 config show | grep osd_recovery_max_active</span><br><span class="line">    &quot;osd_recovery_max_active&quot;: &quot;1&quot;,</span><br><span class="line"></span><br><span class="line">调整后</span><br><span class="line">[root@ceph ~]# ceph daemon osd.2 config show | grep osd_recovery_sleep</span><br><span class="line">    &quot;osd_recovery_sleep&quot;: &quot;0.200000&quot;,</span><br></pre></td></tr></table></figure><p>调整相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph ~]# ceph daemon osd.2 config set osd_recovery_op_priority 3</span><br><span class="line">&#123;</span><br><span class="line">    &quot;success&quot;: &quot;osd_recovery_op_priority = &apos;3&apos; (not observed, change may require restart) &quot;</span><br><span class="line">&#125;</span><br><span class="line">[root@ceph ~]# ceph daemon osd.2 config show | grep osd_recovery_op_priority </span><br><span class="line">    &quot;osd_recovery_op_priority&quot;: &quot;3&quot;,</span><br><span class="line"></span><br><span class="line">获取osd ID</span><br><span class="line">[root@ceph ~]# ll /var/run/ceph/ | grep osd | awk &apos;&#123;print $9&#125;&apos; | sed &apos;s/ceph-\(.*\).asok/\1/&apos;</span><br><span class="line">osd.13</span><br><span class="line">osd.2</span><br><span class="line">osd.5</span><br><span class="line">osd.8</span><br></pre></td></tr></table></figure><h3 id="添加OSD时"><a href="#添加OSD时" class="headerlink" title="添加OSD时"></a>添加OSD时</h3><p>1、BACK FILLING</p><p>当新的OSD加入群集时，CRUSH将把placement groups从群集中的OSD重新分配给新添加的OSD。强制新OSD立即接受重新分配的placement groups会给新OSD带来过多的负担。用placement groups backfilling OSD在后台运行。backfilling完成后，新的OSD将在准备就绪后开始处理请求。</p><p>在backfilling操作期间，您可能会看到以下几种状态之一：</p><ul><li>backfill_wait：表示backfilling操作尚未完成，但尚未进行</li><li>backfilling：表示正在进行backfilling操作</li><li>backfill_toofull：表示已请求backfill操作，但由于存储容量不足而无法完成</li></ul><p>如果无法重新backfilled placement group，则可以认为该placement group considered incomplete（不完整）</p><p>backfill_toofull状态可能是瞬态的。随着PG的移动，空间可能变得可用。 backfill_toofull与backfill_wait类似，因为一旦条件发生变化，backfill就可以继续进行。</p><p>Ceph提供了许多设置来管理将placement groups重新分配给OSD（尤其是新OSD）相关的负载峰值。默认情况下，osd_max_backfill设置OSD之间最大并发backfill数为1。backfill full ratio可以使OSD拒绝接受backfill请求（默认为90％），使用ceph osd set-backfillfull-ratio命令进行更改。如果OSD拒绝backfill请求，则osd backfill retry interval使OSD可以重试该请求（默认为30秒后）。OSD还可以设置osd backfill scan min和osd backfill scan max以管理扫描间隔（默认为64和512）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Option(&quot;osd_max_backfills&quot;, Option::TYPE_UINT, Option::LEVEL_ADVANCED)</span><br><span class="line">.set_default(1)</span><br><span class="line">.set_description(&quot;Maximum number of concurrent local and remote backfills or recoveries per OSD &quot;)</span><br><span class="line">.set_long_description(&quot;There can be osd_max_backfills local reservations AND the same remote reservations per OSD. So a value of 1 lets this OSD participate as 1 PG primary in recovery and 1 shard of another recovering PG.&quot;),</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>【1】<a href="https://blog.csdn.net/Linux_kiss/article/details/82857117" target="_blank" rel="noopener">https://blog.csdn.net/Linux_kiss/article/details/82857117</a></p><p>【2】<a href="http://www.zphj1987.com/2017/08/10/Ceph-recover-speed-control/" target="_blank" rel="noopener">http://www.zphj1987.com/2017/08/10/Ceph-recover-speed-control/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QEMU AND BLOCK DEVICES</title>
      <link href="/2019/11/15/QEMU-AND-BLOCK-DEVICES/"/>
      <url>/2019/11/15/QEMU-AND-BLOCK-DEVICES/</url>
      
        <content type="html"><![CDATA[<p>最常见的Ceph Block Device用例是向虚拟机提供block device images。例如，用户可以创建”golden” image。 然后，对image做snapshot。最后，用户clone snapshot（通常多次）。 有关详细信息，请参见 <a href="https://docs.ceph.com/docs/hammer/rbd/rbd-snapshot/" target="_blank" rel="noopener">Snapshots</a>。snapshot的clone具有copy-on-write能力，意味着Ceph可以快速将block device images配置给虚拟机，因为客户端不必在每次启动新虚拟机时都下载整个映像。</p><p><img src="https://docs.ceph.com/docs/hammer/_images/ditaa-4733472b605d45db3caa492c9fa5900204396a2b.png" alt></p><p>Ceph Block Devices可以与QEMU虚拟机集成。 有关QEMU的详细信息，请参阅<a href="http://wiki.qemu.org/Main_Page" target="_blank" rel="noopener">QEMU Open Source Processor Emulator</a>。 有关QEMU文档，请参见<a href="http://wiki.qemu.org/Manual" target="_blank" rel="noopener">QEMU Manual</a>。 有关安装的详细信息，请参见 <a href="https://docs.ceph.com/docs/hammer/install" target="_blank" rel="noopener">Installation</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重要说明要将Ceph Block Devices与QEMU一起使用，你必须能够访问正在运行的Ceph的集群。</span><br></pre></td></tr></table></figure><h1 id="USAGE（用法）"><a href="#USAGE（用法）" class="headerlink" title="USAGE（用法）"></a>USAGE（用法）</h1><p>QEMU命令行要求您指定pool名称和image名称。 您也可以指定snapshot名称。</p><p>QEMU将假设Ceph configuration文件位于默认位置（例如，<code>/etc/ceph/$cluster.conf</code>），并且您以默认的<code>client.admin</code> user身份执行命令，除非您明确指定另一个Ceph configuration文件路径或另一个user。指定user时，QEMU使用<code>ID</code>而不是完整的<code>TYPE:ID</code>。有关详细信息，请参见<a href="https://docs.ceph.com/docs/hammer/rados/operations/user-management#user" target="_blank" rel="noopener">User Management - User</a>。请勿在user ID的开头添加客户端类型（即，<code>client</code>），否则您将收到验证错误。您应该具有admin user的key，或者使用<code>:id={user}</code>选项指定的另一个user的key，存储在默认路径中的keyring文件中。（即，/etc/ceph或具有适当文件所有权和权限的本地目录）用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img &#123;command&#125; [options] rbd:&#123;pool-name&#125;/&#123;image-name&#125;[@snapshot-name][:option1=value1][:option2=value2...]</span><br></pre></td></tr></table></figure><p>例如，指定id和conf选项如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img &#123;command&#125; [options] rbd:glance-pool/maipo:id=glance:conf=/etc/ceph/ceph.conf</span><br></pre></td></tr></table></figure><p>提示：包含<code>:</code>, <code>@</code>, 或 <code>=</code>可以使用\开头的字符进行转义。</p><h1 id="CREATING-IMAGES-WITH-QEMU（使用QEMU创建IMAGES）"><a href="#CREATING-IMAGES-WITH-QEMU（使用QEMU创建IMAGES）" class="headerlink" title="CREATING IMAGES WITH QEMU（使用QEMU创建IMAGES）"></a>CREATING IMAGES WITH QEMU（使用QEMU创建IMAGES）</h1><p>可以从QEMU创建block device image。 必须指定rbd，pool名称和要创建的image名称。 还必须指定image的size。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f raw rbd:&#123;pool-name&#125;/&#123;image-name&#125; &#123;size&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f raw rbd:data/foo 10G</span><br></pre></td></tr></table></figure><p>重要说明：raw data format（原始数据格式）实际上是与RBD一起使用的唯一明智格式选项。从技术上讲，您可以使用其他QEMU支持的格式（例如qcow2或vmdk），但是这样做会增加额外的开销，并且在启用缓存（请参阅下文）时，对于虚拟机实时迁移也将使该卷不安全。</p><h1 id="RESIZING-IMAGES-WITH-QEMU（使用QEMU调整IMAGES大小）"><a href="#RESIZING-IMAGES-WITH-QEMU（使用QEMU调整IMAGES大小）" class="headerlink" title="RESIZING IMAGES WITH QEMU（使用QEMU调整IMAGES大小）"></a>RESIZING IMAGES WITH QEMU（使用QEMU调整IMAGES大小）</h1><p>您可以从QEMU调整block device image的大小。 您必须指定rbd，pool名称以及要调整大小的image名称。 您还必须指定image的size。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img resize rbd:&#123;pool-name&#125;/&#123;image-name&#125; &#123;size&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img resize rbd:data/foo 10G</span><br></pre></td></tr></table></figure><h1 id="RETRIEVING-IMAGE-INFO-WITH-QEMU（使用QEMU检索IMAGE信息）"><a href="#RETRIEVING-IMAGE-INFO-WITH-QEMU（使用QEMU检索IMAGE信息）" class="headerlink" title="RETRIEVING IMAGE INFO WITH QEMU（使用QEMU检索IMAGE信息）"></a>RETRIEVING IMAGE INFO WITH QEMU（使用QEMU检索IMAGE信息）</h1><p>您可以从QEMU中检索block device image信息。 您必须指定rbd，pool名称和image名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img info rbd:&#123;pool-name&#125;/&#123;image-name&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img info rbd:data/foo</span><br></pre></td></tr></table></figure><h1 id="RUNNING-QEMU-WITH-RBD（运行QEMU与RBD）"><a href="#RUNNING-QEMU-WITH-RBD（运行QEMU与RBD）" class="headerlink" title="RUNNING QEMU WITH RBD（运行QEMU与RBD）"></a>RUNNING QEMU WITH RBD（运行QEMU与RBD）</h1><p>QEMU可以将block device从host传递到guest，但是从QEMU 0.15开始，无需将image映射为host上的block device。相反，QEMU可以直接通过librbd作为virtual block device访问image。这样会更好，因为它避免了额外的context（上下文）切换，并且可以利用<a href="https://docs.ceph.com/docs/hammer/rbd/rbd-config-ref/#rbd-cache-config-settings" target="_blank" rel="noopener">RBD caching</a>。</p><p>您可以使用qemu-img将现有的virtual machine images转换为Ceph block device images。例如，如果您有一个qcow2 image，则可以运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -f qcow2 -O raw debian_squeeze.qcow2 rbd:data/squeeze</span><br></pre></td></tr></table></figure><p>要运行从该image启动的virtual machine，可以运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu -m 1024 -drive format=raw,file=rbd:data/squeeze</span><br></pre></td></tr></table></figure><p><a href="https://docs.ceph.com/docs/hammer/rbd/rbd-config-ref/#rbd-cache-config-settings" target="_blank" rel="noopener">RBD caching</a>可以明显提高性能。 从QEMU 1.2开始，QEMU的cache选项控制<code>librbd</code> caching：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu -m 1024 -drive format=rbd,file=rbd:data/squeeze,cache=writeback</span><br></pre></td></tr></table></figure><p>如果您使用的是较旧版本的QEMU，则可以将librbd cache configuration设置为”file”参数的一部分（如任何Ceph配置选项一样）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu -m 1024 -drive format=raw,file=rbd:data/squeeze:rbd_cache=true,cache=writeback</span><br></pre></td></tr></table></figure><p>重要说明：如果设置rbd_cache=true，则必须设置cache=writeback。如果不使用cache=writeback，则QEMU不会将刷新请求发送到librbd，如果QEMU在此配置中异常退出，则 rbd 顶部的文件系统可能会损坏。</p><h1 id="ENABLING-DISCARD-TRIM（启用DISCARD-TRIM）"><a href="#ENABLING-DISCARD-TRIM（启用DISCARD-TRIM）" class="headerlink" title="ENABLING DISCARD/TRIM（启用DISCARD/TRIM）"></a>ENABLING DISCARD/TRIM（启用DISCARD/TRIM）</h1><p>从Ceph 0.46版和QEMU 1.1版开始，Ceph Block Devices支持discard（丢弃）操作。这意味着guest可以发送TRIM请求，让Ceph block device回收未使用的空间。在客户机中mount <code>ext4</code>或<code>XFS</code>时，通过<code>discard</code>选项启用它。</p><p>为了使此功能可供guest使用，必须为block device显式启用它。 为此，必须指定与drive关联的<code>dispatch_granularity</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qemu -m 1024 -drive format=raw,file=rbd:data/squeeze,id=drive1,if=none \</span><br><span class="line">     -device driver=ide-hd,drive=drive1,discard_granularity=512</span><br></pre></td></tr></table></figure><p>请注意，这使用了IDE driver。 virtio driver不支持discard。</p><p>如果使用libvirt，请使用<code>virsh edit</code>编辑domain的配置文件，以包含<code>xmlns:qemu</code>值。然后，添加<code>qemu:commandline</code> block作为该domain的子级。以下示例为如何将<code>qemu id=</code>设置到两个不同的devices，并且discard_granularity值不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;domain type=&apos;kvm&apos; xmlns:qemu=&apos;http://libvirt.org/schemas/domain/qemu/1.0&apos;&gt;</span><br><span class="line">        &lt;qemu:commandline&gt;</span><br><span class="line">                &lt;qemu:arg value=&apos;-set&apos;/&gt;</span><br><span class="line">                &lt;qemu:arg value=&apos;block.scsi0-0-0.discard_granularity=4096&apos;/&gt;</span><br><span class="line">                &lt;qemu:arg value=&apos;-set&apos;/&gt;</span><br><span class="line">                &lt;qemu:arg value=&apos;block.scsi0-0-1.discard_granularity=65536&apos;/&gt;</span><br><span class="line">        &lt;/qemu:commandline&gt;</span><br><span class="line">&lt;/domain&gt;</span><br></pre></td></tr></table></figure><h1 id="QEMU-CACHE-OPTIONS（QEMU缓存选项）"><a href="#QEMU-CACHE-OPTIONS（QEMU缓存选项）" class="headerlink" title="QEMU CACHE OPTIONS（QEMU缓存选项）"></a>QEMU CACHE OPTIONS（QEMU缓存选项）</h1><p>QEMU的cache选项与以下Ceph <a href="https://docs.ceph.com/docs/master/rbd/rbd-config-ref/" target="_blank" rel="noopener">RBD Cache</a>设置相对应。</p><p>Writeback:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbd_cache = true</span><br></pre></td></tr></table></figure><p>Writethrough:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rbd_cache = true</span><br><span class="line">rbd_cache_max_dirty = 0</span><br></pre></td></tr></table></figure><p>None:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbd_cache = false</span><br></pre></td></tr></table></figure><p>QEMU的cache设置会覆盖Ceph的cache设置（包括在Ceph配置文件中设置）。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph ~]# qemu-img create -f raw rbd:rbd/yujiang 10G</span><br><span class="line">Formatting &apos;rbd:rbd/yujiang&apos;, fmt=raw size=10737418240 cluster_size=0 </span><br><span class="line">[root@ceph ~]# rbd info yujiang</span><br><span class="line">rbd image &apos;yujiang&apos;:</span><br><span class="line">size 10GiB in 2560 objects</span><br><span class="line">order 22 (4MiB objects)</span><br><span class="line">block_name_prefix: rbd_data.25dbd6b8b4567</span><br><span class="line">format: 2</span><br><span class="line">features: layering, exclusive-lock, object-map, fast-diff, deep-flatten</span><br><span class="line">flags: </span><br><span class="line">create_timestamp: Fri Nov 15 15:15:20 2019</span><br><span class="line"></span><br><span class="line">[root@ceph ~]# qemu-img resize rbd:rbd/yujiang 20G</span><br><span class="line">Image resized.</span><br><span class="line">[root@ceph ~]# rbd info yujiang</span><br><span class="line">rbd image &apos;yujiang&apos;:</span><br><span class="line">size 20GiB in 5120 objects</span><br><span class="line">order 22 (4MiB objects)</span><br><span class="line">block_name_prefix: rbd_data.25dbd6b8b4567</span><br><span class="line">format: 2</span><br><span class="line">features: layering, exclusive-lock, object-map, fast-diff, deep-flatten</span><br><span class="line">flags: </span><br><span class="line">create_timestamp: Fri Nov 15 15:15:20 2019</span><br><span class="line"></span><br><span class="line">[root@ceph ~]# qemu-img info rbd:rbd/yujiang</span><br><span class="line">image: rbd:rbd/yujiang</span><br><span class="line">file format: raw</span><br><span class="line">virtual size: 20G (21474836480 bytes)</span><br><span class="line">disk size: unavailable</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIC bonding in CentOS 7</title>
      <link href="/2019/11/13/NIC-bonding-in-CentOS-7/"/>
      <url>/2019/11/13/NIC-bonding-in-CentOS-7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph osd blacklist</title>
      <link href="/2019/11/13/ceph-osd-blacklist/"/>
      <url>/2019/11/13/ceph-osd-blacklist/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是OSD-blacklist，如何处理？"><a href="#什么是OSD-blacklist，如何处理？" class="headerlink" title="什么是OSD blacklist，如何处理？"></a>什么是OSD blacklist，如何处理？</h1><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>Red Hat Ceph Storage</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>我正在运行<code>ceph osd dump</code>命令，它确实列出了blacklist items：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ceph osd dump</span><br><span class="line">[...]</span><br><span class="line">blacklist 10.37.192.139:0/1308721908 expires 2019-02-27 10:10:52.049084</span><br></pre></td></tr></table></figure><p>这是什么意思，我该如何解决？</p><h3 id="决议"><a href="#决议" class="headerlink" title="决议"></a>决议</h3><p>尽管有一些控制命令可删除blacklist entries（例如<code>ceph osd blacklist rm ADDRESS[:source_port]</code>），但blacklists通常会自动维护，无需手动干预。因此，您无需采取任何措施。如有疑问，请联系Red Hat支持。</p><h3 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h3><p>blacklist最常用于CephFS场景中，以防止滞后的元数据服务器对OSD上的数据进行不良更改。</p><h3 id="诊断步骤"><a href="#诊断步骤" class="headerlink" title="诊断步骤"></a>诊断步骤</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ceph osd blacklist ls</span><br><span class="line">listed 1 entries</span><br><span class="line">10.37.192.139:0/1308721908 2019-02-27 10:10:52.049084</span><br></pre></td></tr></table></figure><p>该解决方案是Red Hat快速发布计划的一部分，提供了Red Hat工程师在为客户提供支持时创建的庞大解决方案库。 为了使您立即获得所需的知识，这些文章可能以未经编辑的原始形式出现。</p><h1 id="CEPH-FILESYSTEM-CLIENT-EVICTION（CEPH文件系统客户端驱逐）"><a href="#CEPH-FILESYSTEM-CLIENT-EVICTION（CEPH文件系统客户端驱逐）" class="headerlink" title="CEPH FILESYSTEM CLIENT EVICTION（CEPH文件系统客户端驱逐）"></a>CEPH FILESYSTEM CLIENT EVICTION（CEPH文件系统客户端驱逐）</h1><p>当文件系统客户端无响应或行为异常时，可能有必要强制终止其对文件系统的访问。 此过程称为eviction（驱逐）。</p><p>驱逐CephFS客户端会阻止其与MDS daemons和OSD daemons进一步通信。 如果客户端正在对文件系统进行buffered IO，则所有未刷新的数据都将丢失。</p><p>客户端可以自动退出（如果无法及时与MDS通信），也可以手动退出（由系统管理员）。</p><p>客户端驱逐过程适用于各种客户端，包括FUSE mounts，kernel mounts，nfs-ganesha gateways以及任何使用libcephfs的进程。</p><h3 id="AUTOMATIC-CLIENT-EVICTION（自动客户端逐出）"><a href="#AUTOMATIC-CLIENT-EVICTION（自动客户端逐出）" class="headerlink" title="AUTOMATIC CLIENT EVICTION（自动客户端逐出）"></a>AUTOMATIC CLIENT EVICTION（自动客户端逐出）</h3><p>在三种情况下，可能会自动将客户驱逐：</p><ul><li><p>在active MDS daemon上，如果客户端在session_autoclose（文件系统变量）秒（默认为300秒）以上未与MDS通信，则它将自动被驱逐。</p></li><li><p>在active MDS daemon上，如果客户端在mds_cap_revoke_eviction_timeout（配置选项）秒内未响应cap revoke messages。 默认情况下禁用。</p></li><li><p>在MDS启动期间（包括故障转移时），MDS称为reconnect的状态。 在此状态期间，它将等待所有客户端连接到新的MDS daemon。 如果客户端未在时间窗口内这样做（mds_reconnect_timeout，默认为45秒），则将其驱逐。</p></li></ul><p>如果出现以上任何一种情况，warning message将发送到cluster log。</p><h3 id="MANUAL-CLIENT-EVICTION（手动客户端驱逐）"><a href="#MANUAL-CLIENT-EVICTION（手动客户端驱逐）" class="headerlink" title="MANUAL CLIENT EVICTION（手动客户端驱逐）"></a>MANUAL CLIENT EVICTION（手动客户端驱逐）</h3><p>有时，管理员可能希望手动驱逐客户端。 如果客户端死亡，并且管理员不想等待其session超时；或者，如果客户端行为异常并且管理员无权访问客户端节点来卸载它。</p><p>首先检查客户列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ceph tell mds.0 client ls</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 4305,</span><br><span class="line">        &quot;num_leases&quot;: 0,</span><br><span class="line">        &quot;num_caps&quot;: 3,</span><br><span class="line">        &quot;state&quot;: &quot;open&quot;,</span><br><span class="line">        &quot;replay_requests&quot;: 0,</span><br><span class="line">        &quot;completed_requests&quot;: 0,</span><br><span class="line">        &quot;reconnecting&quot;: false,</span><br><span class="line">        &quot;inst&quot;: &quot;client.4305 172.21.9.34:0/422650892&quot;,</span><br><span class="line">        &quot;client_metadata&quot;: &#123;</span><br><span class="line">            &quot;ceph_sha1&quot;: &quot;ae81e49d369875ac8b569ff3e3c456a31b8f3af5&quot;,</span><br><span class="line">            &quot;ceph_version&quot;: &quot;ceph version 12.0.0-1934-gae81e49 (ae81e49d369875ac8b569ff3e3c456a31b8f3af5)&quot;,</span><br><span class="line">            &quot;entity_id&quot;: &quot;0&quot;,</span><br><span class="line">            &quot;hostname&quot;: &quot;senta04&quot;,</span><br><span class="line">            &quot;mount_point&quot;: &quot;/tmp/tmpcMpF1b/mnt.0&quot;,</span><br><span class="line">            &quot;pid&quot;: &quot;29377&quot;,</span><br><span class="line">            &quot;root&quot;: &quot;/&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>一旦识别出要逐出的客户机，就可以使用其唯一ID或各种其他属性来识别它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># These all work</span><br><span class="line">ceph tell mds.0 client evict id=4305</span><br><span class="line">ceph tell mds.0 client evict client_metadata.=4305</span><br></pre></td></tr></table></figure><h3 id="ADVANCED-UN-BLACKLISTING-A-CLIENT（进阶：取消blacklist客户）"><a href="#ADVANCED-UN-BLACKLISTING-A-CLIENT（进阶：取消blacklist客户）" class="headerlink" title="ADVANCED: UN-BLACKLISTING A CLIENT（进阶：取消blacklist客户）"></a>ADVANCED: UN-BLACKLISTING A CLIENT（进阶：取消blacklist客户）</h3><p>通常，列入blacklist的客户端可能无法重新连接到服务器：必须先将其unmount，然后再重新mount。</p><p>但是，在某些情况下，允许被驱逐的客户端尝试重新连接可能会很有用。</p><p>由于CephFS使用RADOS OSD blacklist控制客户端驱逐，因此可以通过从blacklist中删除CephFS客户端来重新连接它们：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ceph osd blacklist ls</span><br><span class="line">listed 1 entries</span><br><span class="line">127.0.0.1:0/3710147553 2018-03-19 11:32:24.716146</span><br><span class="line"></span><br><span class="line">$ ceph osd blacklist rm 127.0.0.1:0/3710147553</span><br><span class="line">un-blacklisting 127.0.0.1:0/3710147553</span><br></pre></td></tr></table></figure><p>如果其他客户端访问了列入blacklist的客户端正在buffered IO的文件，则这样做可能会使数据完整性受到威胁。 也不能保证产生一个功能完备的客户端 — 在驱逐后恢复完全健康的客户端的最佳方法是unmount客户端并重新mount。</p><p>如果您尝试以这种方式重新连接客户端，则在FUSE客户端中将client_reconnect_stale设置为true，以提示客户端尝试重新连接。</p><h3 id="ADVANCED-CONFIGURING-BLACKLISTING（进阶：配置blacklist）"><a href="#ADVANCED-CONFIGURING-BLACKLISTING（进阶：配置blacklist）" class="headerlink" title="ADVANCED: CONFIGURING BLACKLISTING（进阶：配置blacklist）"></a>ADVANCED: CONFIGURING BLACKLISTING（进阶：配置blacklist）</h3><p>如果由于客户端主机速度慢或网络不可靠而频繁驱逐客户端，并且您无法解决根本问题，那么您可能希望要求MDS的严格性降低。</p><p>可以通过放弃其MDS sessions来响应慢速客户端，但允许他们重新打开sessions并允许他们继续与OSD对话。 要启用此模式，请在MDS节点上将mds_session_blacklist_on_timeout设置为false。</p><p>对于手动驱逐的等效行为，请将mds_session_blacklist_on_evict设置为false。</p><p>请注意，如果禁用了blacklist，则驱逐客户端只会对您发送命令的MDS产生影响。 在具有multiple active MDS daemons的系统上，您需要向每个active daemon发送驱逐命令。 启用blacklist（默认设置）后，仅将驱逐命令发送到单个MDS就足够了，因为blacklist会将其传播到其他MDS。</p><h3 id="BACKGROUND-BLACKLISTING-AND-OSD-EPOCH-BARRIER（背景：blacklist和OSD-epoch-barrier）"><a href="#BACKGROUND-BLACKLISTING-AND-OSD-EPOCH-BARRIER（背景：blacklist和OSD-epoch-barrier）" class="headerlink" title="BACKGROUND: BLACKLISTING AND OSD EPOCH BARRIER（背景：blacklist和OSD epoch barrier）"></a>BACKGROUND: BLACKLISTING AND OSD EPOCH BARRIER（背景：blacklist和OSD epoch barrier）</h3><p>在将客户端列入blacklist之后，有必要确保其他客户端和MDS daemons在尝试访问被列入blacklist的客户端可能已访问的任何数据对象之前，具有最新的OSDMap（包括blacklist entry）。</p><p>使用内部的”osdmap epoch barrier”机制可以确保这一点。</p><p>barrier的目的是确保当我们分发任何允许touching相同 RADOS objects的功能时，分发的客户端必须具有最新的 OSD map，不与已cancel的操作（来自 ENOSPC）或blacklist客户端（逐出）进行竞争。</p><p>更具体地说，设置epoch barrier的情况是：</p><ul><li>Client eviction — 客户端驱逐（客户端被列入blacklist，其他客户端必须等待post-blacklist epoch后才能touch相同的objects）。</li><li>客户端中的OSD map full flag handling（客户端可以从pre-full epoch取消某些OSD操作，因此其他客户端必须等到full epoch或更晚才能touching相同的objects）。</li><li>MDS启动，因为我们不持续维护barrier epoch，因此，必须假定重新启动后始终需要最新的OSD map。</li></ul><p>请注意，这是简单的global value。 我们可以在每个inode的基础上进行维护。 但是我们没有，因为：</p><ul><li>它将更加复杂。</li><li>每个inode将使用额外的4个字节的内存。</li><li>因为几乎每个人都拥有最新的OSD map，所以效率不会更高。 而且，在大多数情况下，每个人都会轻而易举地克服这一barrier，而不是waiting。</li><li>在极少数情况下遇到barrier，因此很少会看到每个inode粒度带来好处。</li></ul><p>epoch barrier与所有capability messages一起发送，并指示message的接收者避免在看到OSD epoch之前向OSD发送更多的RADOS操作。 这主要适用于客户端（将其数据直接写到文件中），但也适用于MDS，因为诸如文件大小probing和文件删除之类的操作是直接从MDS完成的。</p><h1 id="blacklist相关命令"><a href="#blacklist相关命令" class="headerlink" title="blacklist相关命令"></a>blacklist相关命令</h1><h3 id="1、从blacklist中添加（可选项，直到-lt-expire-gt-秒后）或删除-lt-addr-gt-，默认3600秒"><a href="#1、从blacklist中添加（可选项，直到-lt-expire-gt-秒后）或删除-lt-addr-gt-，默认3600秒" class="headerlink" title="1、从blacklist中添加（可选项，直到&lt;expire&gt;秒后）或删除&lt;addr&gt;，默认3600秒"></a>1、从blacklist中添加（可选项，直到<code>&lt;expire&gt;</code>秒后）或删除<code>&lt;addr&gt;</code>，默认3600秒</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osd blacklist add|rm &lt;EntityAddr&gt; &#123;&lt;float[0.0-]&gt;&#125;                   add (optionally until &lt;expire&gt; seconds from now) or remove &lt;addr&gt; from blacklist</span><br></pre></td></tr></table></figure><p>实验1，添加删除blacklist测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph3 ~]# ceph osd blacklist add 10.20.10.28</span><br><span class="line">blacklisting 10.20.10.28:0/0 until 2019-11-13 12:55:53.700776 (3600 sec)</span><br><span class="line">[root@ceph3 ~]# ceph osd blacklist add 10.20.10.13 6000</span><br><span class="line">blacklisting 10.20.10.13:0/0 until 2019-11-13 13:36:16.575894 (6000 sec)</span><br><span class="line"></span><br><span class="line">[root@ceph3 ~]# ceph osd blacklist ls</span><br><span class="line">listed 2 entries</span><br><span class="line">10.20.10.13:0/0 2019-11-13 13:36:16.575894</span><br><span class="line">10.20.10.28:0/0 2019-11-13 12:55:53.700776</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@ceph3 ~]# ceph osd blacklist ls</span><br><span class="line">listed 1 entries</span><br><span class="line">10.20.10.28:0/0 2019-11-13 10:23:00.029669</span><br></pre></td></tr></table></figure><p>实验2，当client在blacklist中时，在client端尝试mount cephfs（ceph-client  10.20.10.2）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1、将ceph-client加入blacklist</span><br><span class="line">[root@ceph1 ~]# ceph osd blacklist add 10.20.10.2</span><br><span class="line">[root@ceph1 ~]# ceph osd blacklist ls</span><br><span class="line">listed 1 entries</span><br><span class="line">10.20.10.2:0/0 2019-11-13 15:42:54.260358</span><br><span class="line"></span><br><span class="line">2、ceph-client尝试mount cephfs</span><br><span class="line">[root@ceph-client ~]# ceph-fuse /root/ceph-fuse/ --verbose</span><br><span class="line">ceph-fuse[1664]: starting ceph client</span><br><span class="line">2019-11-13 14:45:18.902688 7f8f3b0db0c0 -1 init, newargv = 0x55c15933c000 newargc=10</span><br><span class="line">ceph-fuse[1664]: ceph mount failed with (1) Operation not permitted</span><br><span class="line"></span><br><span class="line">3、将ceph-client从blacklist中删除</span><br><span class="line">[root@ceph1 ~]# ceph osd blacklist rm 10.20.10.2</span><br><span class="line">un-blacklisting 10.20.10.2:0/0</span><br><span class="line"></span><br><span class="line">[root@ceph-client ~]# ceph-fuse /root/ceph-fuse/ </span><br><span class="line">ceph-fuse[1704]: starting ceph client</span><br><span class="line">2019-11-13 14:49:16.400939 7f9326c7c0c0 -1 init, newargv = 0x557665de4ea0 newargc=9</span><br><span class="line">ceph-fuse[1704]: starting fuse</span><br><span class="line"></span><br><span class="line">[root@ceph-client ~]# df -Th</span><br><span class="line">ceph-fuse      fuse.ceph-fuse   93G     0   93G   0% /root/ceph-fuse</span><br></pre></td></tr></table></figure><h3 id="2、清除所有列入blacklist的客户端"><a href="#2、清除所有列入blacklist的客户端" class="headerlink" title="2、清除所有列入blacklist的客户端"></a>2、清除所有列入blacklist的客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osd blacklist clear                   clear all blacklisted clients</span><br></pre></td></tr></table></figure><p>实验1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph3 ~]# ceph osd blacklist add 10.20.10.28</span><br><span class="line">blacklisting 10.20.10.28:0/0 until 2019-11-13 12:53:48.463948 (3600 sec)</span><br><span class="line">[root@ceph3 ~]# ceph osd blacklist add 10.20.10.13</span><br><span class="line">blacklisting 10.20.10.13:0/0 until 2019-11-13 12:53:56.846733 (3600 sec)</span><br><span class="line"></span><br><span class="line">[root@ceph3 ~]# ceph osd blacklist ls</span><br><span class="line">listed 2 entries</span><br><span class="line">10.20.10.13:0/0 2019-11-13 12:53:56.846733</span><br><span class="line">10.20.10.28:0/0 2019-11-13 12:53:48.463948</span><br><span class="line"></span><br><span class="line">[root@ceph3 ~]# ceph osd blacklist clear</span><br><span class="line"> removed all blacklist entries</span><br><span class="line"></span><br><span class="line">[root@ceph3 ~]# ceph osd blacklist ls</span><br><span class="line">listed 0 entries</span><br></pre></td></tr></table></figure><h3 id="3、显示列入blacklist的客户端"><a href="#3、显示列入blacklist的客户端" class="headerlink" title="3、显示列入blacklist的客户端"></a>3、显示列入blacklist的客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osd blacklist ls --format json                   show blacklisted clients</span><br></pre></td></tr></table></figure><p>实验1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph1 ~]# ceph osd blacklist ls --format json</span><br><span class="line">listed 1 entries</span><br><span class="line"></span><br><span class="line">[&#123;&quot;addr&quot;:&quot;10.20.10.2:0/0&quot;,&quot;until&quot;:&quot;2019-11-13 17:10:56.217959&quot;&#125;]</span><br><span class="line"></span><br><span class="line">/0 表示：AsyncMessenger stuff approximately unique ID set by the Constructor for use in entity_addr_t</span><br></pre></td></tr></table></figure><h3 id="4、如果客户端在session-autoclose-lt-value-gt-秒（默认为300秒）以上未与MDS通信，则它将自动被驱逐。"><a href="#4、如果客户端在session-autoclose-lt-value-gt-秒（默认为300秒）以上未与MDS通信，则它将自动被驱逐。" class="headerlink" title="4、如果客户端在session_autoclose &lt;value&gt;秒（默认为300秒）以上未与MDS通信，则它将自动被驱逐。"></a>4、如果客户端在<code>session_autoclose &lt;value&gt;</code>秒（默认为300秒）以上未与MDS通信，则它将自动被驱逐。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs set &lt;fs_name&gt; max_mds|max_file_size|allow_new_snaps|inline_data|cluster_down|allow_multimds|allow_dirfrags| balancer|standby_count_wanted|session_timeout|session_autoclose &lt;val&gt; &#123;&lt;confirm&gt;&#125;set fs parameter &lt;var&gt; to &lt;val&gt;</span><br></pre></td></tr></table></figure><p>实验1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph1 ~]# ceph fs set cephfs session_autoclose 400</span><br></pre></td></tr></table></figure><h3 id="5、获取有关一个文件系统的信息"><a href="#5、获取有关一个文件系统的信息" class="headerlink" title="5、获取有关一个文件系统的信息"></a>5、获取有关一个文件系统的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph fs get &lt;fs_name&gt; --format json</span><br></pre></td></tr></table></figure><p>实验1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph1 ~]# ceph fs get cephfs --format json</span><br><span class="line">&#123;</span><br><span class="line">&quot;mdsmap&quot;: &#123;</span><br><span class="line">&quot;epoch&quot;: 19,</span><br><span class="line">&quot;flags&quot;: 12,</span><br><span class="line">&quot;ever_allowed_features&quot;: 0,</span><br><span class="line">&quot;explicitly_allowed_features&quot;: 0,</span><br><span class="line">&quot;created&quot;: &quot;2019-11-11 11:16:05.316461&quot;,</span><br><span class="line">&quot;modified&quot;: &quot;2019-11-13 15:59:17.551876&quot;,</span><br><span class="line">&quot;tableserver&quot;: 0,</span><br><span class="line">&quot;root&quot;: 0,</span><br><span class="line">&quot;session_timeout&quot;: 60,</span><br><span class="line">&quot;session_autoclose&quot;: 400,</span><br><span class="line">&quot;max_file_size&quot;: 1099511627776,</span><br><span class="line">&quot;last_failure&quot;: 0,</span><br><span class="line">&quot;last_failure_osd_epoch&quot;: 104,</span><br><span class="line">&quot;compat&quot;: &#123;</span><br><span class="line">&quot;compat&quot;: &#123;&#125;,</span><br><span class="line">&quot;ro_compat&quot;: &#123;&#125;,</span><br><span class="line">&quot;incompat&quot;: &#123;</span><br><span class="line">&quot;feature_1&quot;: &quot;base v0.20&quot;,</span><br><span class="line">&quot;feature_2&quot;: &quot;client writeable ranges&quot;,</span><br><span class="line">&quot;feature_3&quot;: &quot;default file layouts on dirs&quot;,</span><br><span class="line">&quot;feature_4&quot;: &quot;dir inode in separate object&quot;,</span><br><span class="line">&quot;feature_5&quot;: &quot;mds uses versioned encoding&quot;,</span><br><span class="line">&quot;feature_6&quot;: &quot;dirfrag is stored in omap&quot;,</span><br><span class="line">&quot;feature_8&quot;: &quot;no anchor table&quot;,</span><br><span class="line">&quot;feature_9&quot;: &quot;file layout v2&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;max_mds&quot;: 1,</span><br><span class="line">&quot;in&quot;: [0],</span><br><span class="line">&quot;up&quot;: &#123;</span><br><span class="line">&quot;mds_0&quot;: 4335</span><br><span class="line">&#125;,</span><br><span class="line">&quot;failed&quot;: [],</span><br><span class="line">&quot;damaged&quot;: [],</span><br><span class="line">&quot;stopped&quot;: [],</span><br><span class="line">&quot;info&quot;: &#123;</span><br><span class="line">&quot;gid_4335&quot;: &#123;</span><br><span class="line">&quot;gid&quot;: 4335,</span><br><span class="line">&quot;name&quot;: &quot;ceph2&quot;,</span><br><span class="line">&quot;rank&quot;: 0,</span><br><span class="line">&quot;incarnation&quot;: 14,</span><br><span class="line">&quot;state&quot;: &quot;up:active&quot;,</span><br><span class="line">&quot;state_seq&quot;: 41535,</span><br><span class="line">&quot;addr&quot;: &quot;10.20.10.13:6804/622620898&quot;,</span><br><span class="line">&quot;standby_for_rank&quot;: 0,</span><br><span class="line">&quot;standby_for_fscid&quot;: -1,</span><br><span class="line">&quot;standby_for_name&quot;: &quot;&quot;,</span><br><span class="line">&quot;standby_replay&quot;: true,</span><br><span class="line">&quot;export_targets&quot;: [],</span><br><span class="line">&quot;features&quot;: 4611087853746454523</span><br><span class="line">&#125;,</span><br><span class="line">&quot;gid_4456&quot;: &#123;</span><br><span class="line">&quot;gid&quot;: 4456,</span><br><span class="line">&quot;name&quot;: &quot;ceph3&quot;,</span><br><span class="line">&quot;rank&quot;: 0,</span><br><span class="line">&quot;incarnation&quot;: 0,</span><br><span class="line">&quot;state&quot;: &quot;up:standby-replay&quot;,</span><br><span class="line">&quot;state_seq&quot;: 2,</span><br><span class="line">&quot;addr&quot;: &quot;10.20.10.25:6805/1639008809&quot;,</span><br><span class="line">&quot;standby_for_rank&quot;: 0,</span><br><span class="line">&quot;standby_for_fscid&quot;: -1,</span><br><span class="line">&quot;standby_for_name&quot;: &quot;&quot;,</span><br><span class="line">&quot;standby_replay&quot;: true,</span><br><span class="line">&quot;export_targets&quot;: [],</span><br><span class="line">&quot;features&quot;: 4611087853746454523</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;data_pools&quot;: [6],</span><br><span class="line">&quot;metadata_pool&quot;: 7,</span><br><span class="line">&quot;enabled&quot;: true,</span><br><span class="line">&quot;fs_name&quot;: &quot;cephfs&quot;,</span><br><span class="line">&quot;balancer&quot;: &quot;&quot;,</span><br><span class="line">&quot;standby_count_wanted&quot;: 1</span><br><span class="line">&#125;,</span><br><span class="line">&quot;id&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="blacklist相关配置"><a href="#blacklist相关配置" class="headerlink" title="blacklist相关配置"></a>blacklist相关配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">MON相关配置</span><br><span class="line">客户端blacklist entries保留在OSD map中的持续时间（以秒为单位）</span><br><span class="line">    Option(&quot;mon_osd_blacklist_default_expire&quot;, Option::TYPE_FLOAT, Option::LEVEL_ADVANCED)</span><br><span class="line">    .set_default(1_hr)</span><br><span class="line">    .add_service(&quot;mon&quot;)</span><br><span class="line">    .set_description(&quot;Duration in seconds that blacklist entries for clients remain in the OSD map&quot;),</span><br><span class="line"></span><br><span class="line">MDS daemons的blacklist entries保留在OSD map中的持续时间（以秒为单位）</span><br><span class="line">    Option(&quot;mon_mds_blacklist_interval&quot;, Option::TYPE_FLOAT, Option::LEVEL_DEV)</span><br><span class="line">    .set_default(1_day)</span><br><span class="line">    .set_min(1_hr)</span><br><span class="line">    .add_service(&quot;mon&quot;)</span><br><span class="line">    .set_description(&quot;Duration in seconds that blacklist entries for MDS daemons remain in the OSD map&quot;),</span><br><span class="line"></span><br><span class="line">RBD相关配置</span><br><span class="line">是否将损坏锁的客户端列入blacklist</span><br><span class="line">    Option(&quot;rbd_blacklist_on_break_lock&quot;, Option::TYPE_BOOL, Option::LEVEL_ADVANCED)</span><br><span class="line">    .set_default(true)</span><br><span class="line">    .set_description(&quot;whether to blacklist clients whose lock was broken&quot;),</span><br><span class="line"></span><br><span class="line">blacklist的秒数 - OSD 默认值为 0</span><br><span class="line">    Option(&quot;rbd_blacklist_expire_seconds&quot;, Option::TYPE_UINT, Option::LEVEL_ADVANCED)</span><br><span class="line">    .set_default(0)</span><br><span class="line">    .set_description(&quot;number of seconds to blacklist - set to 0 for OSD default&quot;),</span><br><span class="line"></span><br><span class="line">MDS相关配置</span><br><span class="line">是否将sessions已过期的客户端列入blacklist</span><br><span class="line">    Option(&quot;mds_session_blacklist_on_timeout&quot;, Option::TYPE_BOOL, Option::LEVEL_ADVANCED)</span><br><span class="line">    .set_default(true)</span><br><span class="line">    .set_description(&quot;blacklist clients whose sessions have become stale&quot;),</span><br><span class="line"></span><br><span class="line">是否将被逐出的客户端列入blacklist</span><br><span class="line">    Option(&quot;mds_session_blacklist_on_evict&quot;, Option::TYPE_BOOL, Option::LEVEL_ADVANCED)</span><br><span class="line">    .set_default(true)</span><br><span class="line">    .set_description(&quot;blacklist clients that have been evicted&quot;),</span><br><span class="line"></span><br><span class="line">数秒后，没有响应MDS的“cap revoke messages”的客户端将被驱逐。（默认为0，表示关闭该功能）</span><br><span class="line">    Option(&quot;mds_cap_revoke_eviction_timeout&quot;, Option::TYPE_FLOAT, Option::LEVEL_ADVANCED)</span><br><span class="line">     .set_default(0)</span><br><span class="line">     .set_description(&quot;number of seconds after which clients which have not responded to cap revoke messages by the MDS are evicted.&quot;),</span><br><span class="line"></span><br><span class="line">MDS重新连接恢复状态期间等待客户端重新连接的超时时间（以秒为单位）</span><br><span class="line">    Option(&quot;mds_reconnect_timeout&quot;, Option::TYPE_FLOAT, Option::LEVEL_ADVANCED)</span><br><span class="line">    .set_default(45)</span><br><span class="line">    .set_description(&quot;timeout in seconds to wait for clients to reconnect during MDS reconnect recovery state&quot;),</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>【1】<a href="https://access.redhat.com/solutions/3944931" target="_blank" rel="noopener">https://access.redhat.com/solutions/3944931</a></p><p>【2】<a href="https://docs.ceph.com/docs/mimic/cephfs/eviction/" target="_blank" rel="noopener">https://docs.ceph.com/docs/mimic/cephfs/eviction/</a></p><h1 id="接口（CLI后加–format-json可以以json格式输出结果）"><a href="#接口（CLI后加–format-json可以以json格式输出结果）" class="headerlink" title="接口（CLI后加–format json可以以json格式输出结果）"></a>接口（CLI后加–format json可以以json格式输出结果）</h1><p>1、添加客户端到blacklist（add (optionally until <code>&lt;expire&gt;</code>seconds from now)<code>&lt;addr&gt;</code>from blacklist）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osd blacklist add &lt;EntityAddr&gt; &#123;&lt;float[0.0-]&gt;&#125;</span><br></pre></td></tr></table></figure><p>2、从blacklist中删除客户端（remove <code>&lt;addr&gt;</code> from blacklist）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osd blacklist rm &lt;EntityAddr&gt;</span><br></pre></td></tr></table></figure><p>3、清除所有列入blacklist的客户端（clear all blacklisted clients）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osd blacklist clear</span><br></pre></td></tr></table></figure><p>4、显示列入blacklist的客户端（show blacklisted clients）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osd blacklist ls</span><br></pre></td></tr></table></figure><p>5、设置session_autoclose，客户端在指定秒数未与MDS通信，则驱逐接口，加入blacklist（set fs parameter <code>&lt;var&gt;</code>to <code>&lt;val&gt;</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs set &lt;fs_name&gt; session_autoclose &lt;val&gt;</span><br></pre></td></tr></table></figure><p>6、获取有关一个文件系统的session_autoclose信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph fs get &lt;fs_name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>udev设备管理</title>
      <link href="/2019/10/29/udev%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/"/>
      <url>/2019/10/29/udev%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Linuxcast学习笔记，视频地址：<a href="https://www.youtube.com/watch?v=eV4InZop--0" target="_blank" rel="noopener">https://www.youtube.com/watch?v=eV4InZop--0</a></p><h1 id="udev是什么"><a href="#udev是什么" class="headerlink" title="udev是什么"></a>udev是什么</h1><p>udev是动态管理设备的机制（/dev/目录下的设备）。udev允许我们自己写一些rule配置文件来控制udev默认的行为动作。默认配置文件在/etc/udev/目录下，在/etc/udev/rules.d/下为默认rule。如70-persistent-net.rules文件，udev在工作时，每次检查/etc/udev/rules.d/目录下的配置文件，并且按照数字的顺序来加载并应用这些配置。</p><p>udev允许我们在一个设备连接到计算机的时候，或者已经连接上，或者卸载的时候执行一些特殊的动作。（设备连接时、设备连接上、设备断开时）</p><h1 id="如何使用udev修改设备默认名称"><a href="#如何使用udev修改设备默认名称" class="headerlink" title="如何使用udev修改设备默认名称"></a>如何使用udev修改设备默认名称</h1><p>如果我们想修改一个设备，那么我们需要唯一的定位一个设备，通过udevadm命令。通常serial（串号）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph2 ~]# udevadm info -a -n /dev/vdc</span><br><span class="line"></span><br><span class="line">Udevadm info starts with the device specified by the devpath and then</span><br><span class="line">walks up the chain of parent devices. It prints for every device</span><br><span class="line">found, all possible attributes in the udev rules key format.</span><br><span class="line">A rule to match, can be composed by the attributes of the device</span><br><span class="line">and the attributes from one single parent device.</span><br><span class="line"></span><br><span class="line">  looking at device &apos;/devices/pci0000:00/0000:00:09.0/virtio4/block/vdc&apos;:</span><br><span class="line">    KERNEL==&quot;vdc&quot;</span><br><span class="line">    SUBSYSTEM==&quot;block&quot;</span><br><span class="line">    DRIVER==&quot;&quot;</span><br><span class="line">    ATTR&#123;ro&#125;==&quot;0&quot;</span><br><span class="line">    ATTR&#123;size&#125;==&quot;104857600&quot;</span><br><span class="line">    ATTR&#123;stat&#125;==&quot;    7223       11   474136    19244   400088    30660  1866945   871549        0   840441   872404&quot;</span><br><span class="line">    ATTR&#123;cache_type&#125;==&quot;write back&quot;</span><br><span class="line">    ATTR&#123;range&#125;==&quot;16&quot;</span><br><span class="line">    ATTR&#123;discard_alignment&#125;==&quot;0&quot;</span><br><span class="line">    ATTR&#123;ext_range&#125;==&quot;256&quot;</span><br><span class="line">    ATTR&#123;serial&#125;==&quot;e850ae75-fcb2-4432-a&quot;</span><br><span class="line">    ATTR&#123;alignment_offset&#125;==&quot;0&quot;</span><br><span class="line">    ATTR&#123;inflight&#125;==&quot;       0        0&quot;</span><br><span class="line">    ATTR&#123;removable&#125;==&quot;0&quot;</span><br><span class="line">    ATTR&#123;capability&#125;==&quot;50&quot;</span><br><span class="line"></span><br><span class="line">  looking at parent device &apos;/devices/pci0000:00/0000:00:09.0/virtio4&apos;:</span><br><span class="line">    KERNELS==&quot;virtio4&quot;</span><br><span class="line">    SUBSYSTEMS==&quot;virtio&quot;</span><br><span class="line">    DRIVERS==&quot;virtio_blk&quot;</span><br><span class="line">    ATTRS&#123;device&#125;==&quot;0x0002&quot;</span><br><span class="line">    ATTRS&#123;features&#125;==&quot;0010101001110000000000000000110010000000000000000000000000000000&quot;</span><br><span class="line">    ATTRS&#123;status&#125;==&quot;0x0000000f&quot;</span><br><span class="line">    ATTRS&#123;vendor&#125;==&quot;0x1af4&quot;</span><br><span class="line"></span><br><span class="line">  looking at parent device &apos;/devices/pci0000:00/0000:00:09.0&apos;:</span><br><span class="line">    KERNELS==&quot;0000:00:09.0&quot;</span><br><span class="line">    SUBSYSTEMS==&quot;pci&quot;</span><br><span class="line">    DRIVERS==&quot;virtio-pci&quot;</span><br><span class="line">    ATTRS&#123;irq&#125;==&quot;10&quot;</span><br><span class="line">    ATTRS&#123;subsystem_vendor&#125;==&quot;0x1af4&quot;</span><br><span class="line">    ATTRS&#123;broken_parity_status&#125;==&quot;0&quot;</span><br><span class="line">    ATTRS&#123;class&#125;==&quot;0x010000&quot;</span><br><span class="line">    ATTRS&#123;driver_override&#125;==&quot;(null)&quot;</span><br><span class="line">    ATTRS&#123;consistent_dma_mask_bits&#125;==&quot;64&quot;</span><br><span class="line">    ATTRS&#123;dma_mask_bits&#125;==&quot;64&quot;</span><br><span class="line">    ATTRS&#123;local_cpus&#125;==&quot;f&quot;</span><br><span class="line">    ATTRS&#123;device&#125;==&quot;0x1001&quot;</span><br><span class="line">    ATTRS&#123;enable&#125;==&quot;1&quot;</span><br><span class="line">    ATTRS&#123;msi_bus&#125;==&quot;&quot;</span><br><span class="line">    ATTRS&#123;local_cpulist&#125;==&quot;0-3&quot;</span><br><span class="line">    ATTRS&#123;vendor&#125;==&quot;0x1af4&quot;</span><br><span class="line">    ATTRS&#123;subsystem_device&#125;==&quot;0x0002&quot;</span><br><span class="line">    ATTRS&#123;numa_node&#125;==&quot;-1&quot;</span><br><span class="line">    ATTRS&#123;d3cold_allowed&#125;==&quot;0&quot;</span><br><span class="line"></span><br><span class="line">  looking at parent device &apos;/devices/pci0000:00&apos;:</span><br><span class="line">    KERNELS==&quot;pci0000:00&quot;</span><br><span class="line">    SUBSYSTEMS==&quot;&quot;</span><br><span class="line">    DRIVERS==&quot;&quot;</span><br></pre></td></tr></table></figure><p> 在/etc/udev/rules.d/下创建rule，99-linuxcast.rules，编辑规则。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KERNEL==&quot;sd*&quot;, ATTR&#123;serial&#125;==&quot;e850ae75-fcb2-4432-a&quot;, NAME=&quot;yujiangvdc%n&quot;</span><br></pre></td></tr></table></figure><p>KERNEL意思是内核识别出来这个设备是什么名字，两个等号==是做比较，一个等号=是赋值。</p><p>通过KERNEL与ATTR{serial}就可以唯一定位到一个设备，要把这个设备修改为其他名字用NAME，udev会自动把%n替换成分区号。</p>]]></content>
      
      
      
        <tags>
            
            <tag> udev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph L to N 升级总结</title>
      <link href="/2019/10/25/ceph-L-to-N-%E5%8D%87%E7%BA%A7%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/25/ceph-L-to-N-%E5%8D%87%E7%BA%A7%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.ceph.com/docs/master/releases/nautilus/" target="_blank" rel="noopener">官方原文</a></p><p><a href="https://pve.proxmox.com/wiki/Ceph_Luminous_to_Nautilus" target="_blank" rel="noopener">参考1</a></p><h3 id="从Luminous之前的版本进行升级（比如jewel版本）"><a href="#从Luminous之前的版本进行升级（比如jewel版本）" class="headerlink" title="从Luminous之前的版本进行升级（比如jewel版本）"></a>从Luminous之前的版本进行升级（比如jewel版本）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">必须先升级到Luminous（12.2.z），然后再尝试升级到Nautilus。 另外，您的集群必须在运行Luminous的同时至少完成了所有PG的一次scrub，并在OSD map中设置了recovery_deletes和purged_snapdirs flags。</span><br><span class="line"></span><br><span class="line">[root@ceph1 ~]# ceph osd dump | grep ^flags</span><br><span class="line">flags sortbitwise,recovery_deletes,purged_snapdirs</span><br><span class="line"></span><br><span class="line">recovery_deletes flags：Ceph现在在recovery过程中处理delete操作，而不是在peering过程中。以前，将down或out超过15分钟的OSD带回到群集中会导致placement group peering时间延长。peering过程需要很长时间才能完成，因为delete操作是在合并placement group日志作为peering过程的一部分时内联处理的。结果，对处于peering状态的placement group的操作被blocked。通过此更新，Ceph可以在正常recovery过程中而不是peering过程中处理delete操作。结果可以使peering过程更快完成，并且操作不再blocked。（This was fixed with the help of Red Hat Ceph Storage feature request #1452780 and this was released in 2.4 errata version 10.2.7-32.el7cp.）</span><br><span class="line"></span><br><span class="line">purged_snapdirs flags：一旦snapsets全部转换，则设置purged_snapdirs OSDMap flags，这样可以更轻松地测试upgrade + conversion是否已完成。特别是，micim+将能够更简单地测试该flags，而无需等待完整的PG统计信息来知道升级到luminous以外的版本是否安全。</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、在从Luminous升级到Nautilus的过程中，将monitors升级到Nautilus后，将无法使用Luminous ceph-osd daemon创建新的OSD。避免在升级过程中添加或替换任何OSD。</span><br><span class="line">2、避免在升级过程中创建任何RADOS pools。</span><br><span class="line">3、您可以使用ceph version(s)命令在每个阶段监视升级进度，该命令将告诉您每种ceph daemon正在运行的ceph版本。</span><br></pre></td></tr></table></figure><h1 id="自研管理平台用到的接口，对比输出是否有修改，以免影响前台功能"><a href="#自研管理平台用到的接口，对比输出是否有修改，以免影响前台功能" class="headerlink" title="自研管理平台用到的接口，对比输出是否有修改，以免影响前台功能"></a>自研管理平台用到的接口，对比输出是否有修改，以免影响前台功能</h1><h1 id="Ceph节点升级过程"><a href="#Ceph节点升级过程" class="headerlink" title="Ceph节点升级过程"></a>Ceph节点升级过程</h1><p>1、确认OSD map包含recovery_deletes和purged_snapdirs flags（否则，将导致您的monitor daemons在启动时拒绝加入quorum，从而使其无法运行）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">执行命令：ceph osd dump | grep ^flags</span><br><span class="line">命令输出：flags sortbitwise,recovery_deletes,purged_snapdirs</span><br><span class="line"></span><br><span class="line">如果没有recovery_deletes和purged_snapdirs flags需要手动触发pg scrub，并等待大约24-48小时（根据数据量评估）</span><br><span class="line">执行命令：ceph pg dump pgs_brief | cut -d &quot; &quot; -f 1 | xargs -n1 ceph pg scrub</span><br></pre></td></tr></table></figure><p>2、确保集群稳定，集群状态HEALTH_OK，没有down掉的OSD或无法恢复的OSD。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">执行命令：ceph health detail</span><br><span class="line">命令输出：HEALTH_OK</span><br><span class="line"></span><br><span class="line">执行命令：ceph osd tree | grep down</span><br><span class="line">命令输出：空</span><br><span class="line"></span><br><span class="line">执行命令：ceph osd tree | grep out</span><br><span class="line">命令输出：空</span><br></pre></td></tr></table></figure><p>3、设置noout flags</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">执行命令：ceph osd set noout</span><br><span class="line">命令输出：noout is set</span><br><span class="line"></span><br><span class="line">执行命令：ceph health detail</span><br><span class="line">命令输出：</span><br><span class="line">HEALTH_WARN noout flag(s) set</span><br><span class="line">OSDMAP_FLAGS noout flag(s) set</span><br></pre></td></tr></table></figure><p>4、配置centos ceph 14 Luminous mirror</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5、升级monitors（通过安装新ceph packages并重新启动monitor daemons来升级monitors）</p><p>在<strong>每个monitors主机上</strong>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5.1、安装monitor packages</span><br><span class="line">执行命令：yum install ceph-mon</span><br><span class="line">命令输出：提示安装ceph-mon以及依赖</span><br><span class="line"></span><br><span class="line">5.2、重启ceph monitor服务</span><br><span class="line">执行命令：systemctl restart ceph-mon.target</span><br><span class="line">命令输出：空</span><br></pre></td></tr></table></figure><p>monitors启动之后，查找nautilus字符串来验证monitor升级是否完成。确保有min_mon_release 14 (nautilus)字样，如果没有说明尚未升级和重启monitor。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">执行命令：ceph mon dump | grep min_mon_release</span><br><span class="line">命令输出：</span><br><span class="line">dumped monmap epoch 2</span><br><span class="line">min_mon_release 14 (nautilus)</span><br></pre></td></tr></table></figure><p>6、升级ceph-mgr（通过安装新ceph packages并重新启动ceph-mgr daemons来升级ceph-mgr）</p><p>如果使用Ceph Dashboard需要安装ceph-mgr-dashboard package。</p><p>在<strong>每个ceph-mgr主机上</strong>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">6.1、安装ceph-mgr packages</span><br><span class="line">执行命令：yum install ceph-mgr</span><br><span class="line">命令输出：提示安装ceph-mgr以及依赖</span><br><span class="line"></span><br><span class="line">6.2、安装ceph-mgr-dashboard packages</span><br><span class="line">执行命令：yum install ceph-mgr-dashboard</span><br><span class="line">命令输出：提示安装ceph-mgr-dashboard以及依赖</span><br><span class="line"></span><br><span class="line">6.3、重启ceph mgr服务</span><br><span class="line">执行命令：systemctl restart ceph-mgr.target</span><br><span class="line">命令输出：空</span><br></pre></td></tr></table></figure><p>通过ceph -s验证ceph-mgr daemons是否正在运行（确保mgr状态active，standbys mgr加入）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">执行命令：ceph -s</span><br><span class="line">命令输出：</span><br><span class="line">...</span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum community-ceph-2,community-ceph-3,community-ceph-1 (age 25m)</span><br><span class="line">    mgr: community-ceph-2(active, since 3d), standbys: community-ceph-3, community-ceph-1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>7、升级ceph-osd（通过安装新ceph packages并重新启动ceph-osd daemons来升级ceph-osd）</p><p>在<strong>每个ceph-osd主机上</strong>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">7.1、安装ceph-osd packages</span><br><span class="line">执行命令：yum install ceph-osd</span><br><span class="line">命令输出：提示安装ceph-osd以及依赖</span><br><span class="line"></span><br><span class="line">7.2、重启ceph osd服务</span><br><span class="line">执行命令：systemctl restart ceph-osd.target</span><br><span class="line">命令输出：空</span><br></pre></td></tr></table></figure><p>查看OSD升级的进度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">执行命令：ceph osd versions</span><br><span class="line">命令输出：</span><br><span class="line">&#123;</span><br><span class="line">   &quot;ceph version 12.2.x (...) luminous (stable)&quot;: 2,</span><br><span class="line">   &quot;ceph version 14.2.4 (...) nautilus (stable)&quot;: 4,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用ceph-volume接管ceph-disk创建的OSD，在<strong>每个OSD主机上</strong>执行，<strong>执行前确保每个OSD都正在运行，无down或out的OSD</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">1、确保OSD运行正常</span><br><span class="line">执行命令：ceph osd tree | grep down</span><br><span class="line">命令输出：空</span><br><span class="line">执行命令：ceph osd tree | grep out</span><br><span class="line">命令输出：空</span><br><span class="line"></span><br><span class="line">2、所有使用ceph-disk创建的并正在运行的OSDs，从OSD data partition或directory中捕获元数据</span><br><span class="line">执行命令：ceph-volume simple scan</span><br><span class="line">命令输出：</span><br><span class="line"></span><br><span class="line">执行命令后，会生成类似/etc/ceph/osd/0-ab0a204a-42e3-4a47-ab4c-0888edf429cb.json文件，文件内容为：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;active&quot;: &quot;ok&quot;, </span><br><span class="line">    &quot;block&quot;: &#123;</span><br><span class="line">        &quot;path&quot;: &quot;/dev/disk/by-partuuid/0818811f-d70e-4ff0-91c9-58cd701c9a19&quot;, </span><br><span class="line">        &quot;uuid&quot;: &quot;0818811f-d70e-4ff0-91c9-58cd701c9a19&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;block_uuid&quot;: &quot;0818811f-d70e-4ff0-91c9-58cd701c9a19&quot;, </span><br><span class="line">    &quot;bluefs&quot;: 1, </span><br><span class="line">    &quot;ceph_fsid&quot;: &quot;c4051efa-1997-43ef-8497-fb02bdf08233&quot;, </span><br><span class="line">    &quot;cluster_name&quot;: &quot;ceph&quot;, </span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;path&quot;: &quot;/dev/vdc1&quot;, </span><br><span class="line">        &quot;uuid&quot;: &quot;ab0a204a-42e3-4a47-ab4c-0888edf429cb&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;fsid&quot;: &quot;ab0a204a-42e3-4a47-ab4c-0888edf429cb&quot;, </span><br><span class="line">    &quot;keyring&quot;: &quot;AQB1FLFdXVHVARAARTKkxT1xgrDNU/QECUqdxA==&quot;, </span><br><span class="line">    &quot;kv_backend&quot;: &quot;rocksdb&quot;, </span><br><span class="line">    &quot;magic&quot;: &quot;ceph osd volume v026&quot;, </span><br><span class="line">    &quot;mkfs_done&quot;: &quot;yes&quot;, </span><br><span class="line">    &quot;ready&quot;: &quot;ready&quot;, </span><br><span class="line">    &quot;systemd&quot;: &quot;&quot;, </span><br><span class="line">    &quot;type&quot;: &quot;bluestore&quot;, </span><br><span class="line">    &quot;whoami&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3、使systemd units可以mount已配置的devices，并启动Ceph OSD</span><br><span class="line">执行命令：ceph-volume simple activate --all</span><br><span class="line">命令输出：</span><br><span class="line">--&gt; activating OSD specified in /etc/ceph/osd/1-fe327306-54a4-4362-870d-92d28cf65e42.json</span><br><span class="line">Running command: ln -snf /dev/vdc2 /var/lib/ceph/osd/ceph-1/block</span><br><span class="line">Running command: chown -R ceph:ceph /dev/vdc2</span><br><span class="line">Running command: systemctl enable ceph-volume@simple-1-fe327306-54a4-4362-870d-92d28cf65e42</span><br><span class="line">Running command: ln -sf /dev/null /etc/systemd/system/ceph-disk@.service</span><br><span class="line">--&gt; All ceph-disk systemd units have been disabled to prevent OSDs getting triggered by UDEV events</span><br><span class="line">Running command: systemctl enable --runtime ceph-osd@1</span><br><span class="line">Running command: systemctl start ceph-osd@1</span><br><span class="line">--&gt; Successfully activated OSD 1 with FSID fe327306-54a4-4362-870d-92d28cf65e42</span><br><span class="line"></span><br><span class="line">4、重启每个OSD主机，确认OSD是否开机自启</span><br><span class="line">执行命令：reboot</span><br><span class="line">命令输出：无</span><br></pre></td></tr></table></figure><p>8、升级ceph-mds（通过安装新ceph packages并重新启动ceph-mds daemons来升级ceph-mds）</p><p>在<strong>每个ceph-mds主机上</strong>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">记录rank数量，并将ranks数减少到1，通过ceph mds stat命令输出可以查看rank数量。</span><br><span class="line">&#123;0=ceph3=up:active&#125;代表rank数为1，&#123;0=ceph3=up:active,1=ceph2=up:active&#125;代表rank数为2，以此类推。</span><br><span class="line"></span><br><span class="line">8.1、查看当前rank数量</span><br><span class="line">执行命令：ceph mds stat</span><br><span class="line">命令输出：cephfs-1/1/1 up  &#123;0=ceph3=up:active&#125;, 2 up:standby</span><br><span class="line">如果rank为2，命令输出为：cephfs-2/2/2 up  &#123;0=ceph3=up:active,1=ceph2=up:active&#125;, 1 up:standby</span><br><span class="line"></span><br><span class="line">8.2、查看cephfs名称</span><br><span class="line">执行命令：ceph fs ls</span><br><span class="line">命令输出：name: cephfs, metadata pool: cephfs_metadata, data pools: [cephfs_data ]</span><br><span class="line"></span><br><span class="line">8.3、将ranks数减少到1</span><br><span class="line">执行命令：ceph fs set &lt;fs_name&gt; max_mds 1</span><br><span class="line">命令输出：空</span><br><span class="line"></span><br><span class="line">8.4、通过定期检查状态，等待集群停用所有non-zero ranks，当&#123;0=ceph3=up:active&#125;时为已停用所有non-zero ranks</span><br><span class="line">执行命令：ceph status</span><br><span class="line">命令输出：cephfs-1/1/1 up  &#123;0=ceph3=up:active&#125;, 2 up:standby</span><br><span class="line"></span><br><span class="line">8.5、使用以下命令使所有standby MDS daemons在适当的主机offline</span><br><span class="line">执行命令：systemctl stop ceph-mds@&lt;daemon_name&gt;</span><br><span class="line">命令输出：空</span><br><span class="line"></span><br><span class="line">8.6、确认只有一个MDS处于online，并且cephfs只有一个rank 0</span><br><span class="line">执行命令：ceph status</span><br><span class="line">命令输出：</span><br><span class="line">...</span><br><span class="line">    mds: cephfs-1/1/1 up  &#123;0=ceph3=up:active&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">8.7、通过安装新packages并重新启动daemon来升级MDS daemon（在每个mds节点上执行）</span><br><span class="line">执行命令：yum install ceph-mds</span><br><span class="line">命令输出：提示安装ceph-mds以及依赖</span><br><span class="line"></span><br><span class="line">执行命令：systemctl restart ceph-mds.target</span><br><span class="line">命令输出：空</span><br><span class="line"></span><br><span class="line">8.8、重新启动所有已的offline standby MDS daemons</span><br><span class="line">执行命令：systemctl restart ceph-mds.target</span><br><span class="line">命令输出：空</span><br><span class="line"></span><br><span class="line">8.9、恢复max_mds原始值</span><br><span class="line">执行命令：ceph fs set &lt;fs_name&gt; max_mds &lt;original_max_mds&gt;</span><br><span class="line">命令输出：空</span><br></pre></td></tr></table></figure><p>9、升级ceph-radosgw（通过安装新ceph packages并重新启动ceph-radosgw daemons来升级ceph-radosgw）</p><p>在<strong>每个ceph-radosgw主机上</strong>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5.1、安装radosgw packages</span><br><span class="line">执行命令：yum install ceph-radosgw</span><br><span class="line">命令输出：提示安装ceph-radosgw以及依赖</span><br><span class="line"></span><br><span class="line">5.2、重启ceph radosgw服务</span><br><span class="line">执行命令：systemctl restart ceph-radosgw.target</span><br><span class="line">命令输出：空</span><br></pre></td></tr></table></figure><p>10、启用所有Nautilus的新功能来完成升级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行命令：ceph osd require-osd-release nautilus</span><br><span class="line">命令输出：空</span><br></pre></td></tr></table></figure><p>11、清除noout flags</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行命令：ceph osd unset noout</span><br><span class="line">命令输出：noout is unset</span><br></pre></td></tr></table></figure><p>12、启用新的 v2 network protocol</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行命令：ceph mon enable-msgr2</span><br><span class="line">命令输出：空</span><br></pre></td></tr></table></figure><h1 id="Client节点升级过程"><a href="#Client节点升级过程" class="headerlink" title="Client节点升级过程"></a>Client节点升级过程</h1><p>1、Client节点升级package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行命令：yum install ceph-common librados2 librbd1 python-rbd python-rados -y</span><br><span class="line">命令输出：提示安装ceph-common librados2 librbd1 python-rbd python-rados以及依赖</span><br></pre></td></tr></table></figure><p>2、Client节点确认升级后的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行命令：ceph --version</span><br><span class="line">命令输出：ceph version 14.2.4 (75f4de193b3ea58512f204623e6c5a16e6c1e1ba) nautilus (stable)</span><br></pre></td></tr></table></figure><h1 id="Ceph端升级后修复"><a href="#Ceph端升级后修复" class="headerlink" title="Ceph端升级后修复"></a>Ceph端升级后修复</h1><h3 id="1、Legacy-BlueStore-stats-reporting-detected-on-6-OSD-s"><a href="#1、Legacy-BlueStore-stats-reporting-detected-on-6-OSD-s" class="headerlink" title="1、Legacy BlueStore stats reporting detected on 6 OSD(s)"></a>1、Legacy BlueStore stats reporting detected on 6 OSD(s)</h3><p>问题描述：</p><p>​    使用ceph -s命令查看集群状态时，出现Legacy BlueStore stats reporting detected on 6 OSD(s)</p><p>解决办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop ceph-osd@$OSDID</span><br><span class="line">ceph-bluestore-tool repair –path /var/lib/ceph/osd/ceph-$OSDID</span><br><span class="line">systemctl start ceph-osd@$OSDID</span><br></pre></td></tr></table></figure><p>参考资料：</p><p>【1】<a href="http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-July/036002.html" target="_blank" rel="noopener">http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-July/036002.html</a></p><p>关于执行ceph-bluestore-tool repair报错问题确认：<a href="https://tracker.ceph.com/issues/42297" target="_blank" rel="noopener">https://tracker.ceph.com/issues/42297</a></p><h3 id="2、3-monitors-have-not-enabled-msgr2"><a href="#2、3-monitors-have-not-enabled-msgr2" class="headerlink" title="2、3 monitors have not enabled msgr2"></a>2、3 monitors have not enabled msgr2</h3><p>问题描述：</p><p>​    使用ceph -s命令查看集群状态时，出现 3 monitors have not enabled msgr2</p><p>解决办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph mon enable-msgr2</span><br><span class="line">systemctl restart ceph-mon@ceph1.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>samba</title>
      <link href="/2019/10/21/samba/"/>
      <url>/2019/10/21/samba/</url>
      
        <content type="html"><![CDATA[<p>系统环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.4.1708 (Core)</span><br></pre></td></tr></table></figure><h1 id="samba安装"><a href="#samba安装" class="headerlink" title="samba安装"></a>samba安装</h1><p>安装samba</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y samba</span><br><span class="line"></span><br><span class="line">samba Version 4.9.1</span><br></pre></td></tr></table></figure><h1 id="Ceph-KRBD使用samba"><a href="#Ceph-KRBD使用samba" class="headerlink" title="Ceph KRBD使用samba"></a>Ceph KRBD使用samba</h1><p>1、首先创建pool</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool create rbd 8</span><br></pre></td></tr></table></figure><p>2、在pool中创建rbd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rbd create --size 10G rbd/rbd-1</span><br><span class="line"></span><br><span class="line"># rbd info rbd/rbd-1</span><br><span class="line">rbd image &apos;rbd-1&apos;:</span><br><span class="line">size 10GiB in 2560 objects</span><br><span class="line">order 22 (4MiB objects)</span><br><span class="line">block_name_prefix: rbd_data.10c06b8b4567</span><br><span class="line">format: 2</span><br><span class="line">features: layering, exclusive-lock, object-map, fast-diff, deep-flatten</span><br><span class="line">flags: </span><br><span class="line">create_timestamp: Wed Oct 23 10:04:16 2019</span><br></pre></td></tr></table></figure><p>3、在linux上创建挂载点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ceph-rbd-1-mountpoint</span><br></pre></td></tr></table></figure><p>4、map pool中的rbd到linux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rbd map rbd/rbd-1</span><br><span class="line"></span><br><span class="line"># lsmod | grep rbd</span><br><span class="line">rbd                    83733  2 </span><br><span class="line">libceph               306742  1 rbd</span><br><span class="line"></span><br><span class="line"># sudo rbd showmapped</span><br><span class="line">id pool image snap device    </span><br><span class="line">0  rbd  rbd-1 -    /dev/rbd0</span><br></pre></td></tr></table></figure><p>5、格式化文件系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.xfs /dev/rbd/rbd/rbd-1</span><br></pre></td></tr></table></figure><p>6、mount到挂载点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/rbd/rbd/rbd-1 /root/ceph-rbd-1-mountpoint/</span><br><span class="line"></span><br><span class="line"># df -Th</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/rbd0      xfs        10G   33M   10G   1% /root/ceph-rbd-1-mountpoint</span><br></pre></td></tr></table></figure><p>7、samba预操作（关闭防火墙）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line">持久化关闭selinux</span><br><span class="line">vim /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><p>8、配置samba（samba默认会共享linux home目录，如果自定义需要自己配置），并重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/samba/smb.conf</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">        workgroup = SAMBA</span><br><span class="line">        security = user</span><br><span class="line">        passdb backend = tdbsam</span><br><span class="line">        printing = cups</span><br><span class="line">        printcap name = cups</span><br><span class="line">        load printers = yes</span><br><span class="line">        cups options = raw</span><br><span class="line"></span><br><span class="line">[homes]</span><br><span class="line">        comment = Home Directories</span><br><span class="line">        valid users = %S, %D%w%S</span><br><span class="line">        browseable = No</span><br><span class="line">        read only = No</span><br><span class="line">        inherit acls = Yes</span><br><span class="line">        writable = Yes</span><br><span class="line"></span><br><span class="line">[ceph]</span><br><span class="line">        comment = ceph</span><br><span class="line">        path = /root/ceph-rbd-1-mountpoint/</span><br><span class="line">        valid users = %S, %D%w%S</span><br><span class="line">        browseable = No</span><br><span class="line">        read only = No</span><br><span class="line">        inherit acls = Yes</span><br><span class="line">        writable = Yes</span><br><span class="line"></span><br><span class="line">[printers]</span><br><span class="line">        comment = All Printers</span><br><span class="line">        path = /var/tmp</span><br><span class="line">        printable = Yes</span><br><span class="line">        create mask = 0600</span><br><span class="line">        browseable = No</span><br><span class="line"></span><br><span class="line">[print$]</span><br><span class="line">        comment = Printer Drivers</span><br><span class="line">        path = /var/lib/samba/drivers</span><br><span class="line">        write list = @printadmin root</span><br><span class="line">        force group = @printadmin</span><br><span class="line">        create mask = 0664</span><br><span class="line">        directory mask = 0775</span><br><span class="line"></span><br><span class="line">systemctl restart smb</span><br></pre></td></tr></table></figure><p>9、为samba添加ceph用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbpasswd -a ceph</span><br></pre></td></tr></table></figure><p>10、客户端访问samba</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\10.20.10.23\ceph</span><br></pre></td></tr></table></figure><p>window清除samba连接，重新登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\JiangYu&gt;net use</span><br><span class="line">会记录新的网络连接。</span><br><span class="line">状态       本地        远程                      网络</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">OK                     \\10.20.10.23\IPC$        Microsoft Windows Network</span><br><span class="line">命令成功完成。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\JiangYu&gt;net use \\10.20.10.23\IPC$ /del</span><br><span class="line">\\10.20.10.23\IPC$ 已经删除。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\JiangYu&gt;net use</span><br><span class="line">会记录新的网络连接。</span><br><span class="line">列表是空的。</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/samba/linuxcast-smb-%E7%99%BB%E5%BD%95%E5%90%8E%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6-1.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/samba/linuxcast-smb-%E7%99%BB%E5%BD%95%E5%90%8E%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6-2.png" alt></p><p>11、因为是使用root用户创建的ceph-rbd-1-mountpoint目录，所以ceph用户没有权限对这个目录进行写操作，需要修改目录所有者，修改后就可以对这个目录进行创建文件等写操作了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown ceph:ceph ceph-rbd-1-mountpoint/</span><br></pre></td></tr></table></figure><h1 id="samba配置"><a href="#samba配置" class="headerlink" title="samba配置"></a>samba配置</h1><p>1、查看配置文件帮助手册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man smb.conf 5</span><br></pre></td></tr></table></figure><p>2、smb.conf配置文件语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;或#开头为注释</span><br></pre></td></tr></table></figure><p>3、检查配置文件语法命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testparm /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><p>4、Security-Enhanced Linux (SELinux) Notes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">启用samba_domain_controller Boolean以允许Samba PDC使用useradd和groupadd二进制。以root用户身份运行以下命令以启用此Boolean：</span><br><span class="line">setsebool -P samba_domain_controller on</span><br><span class="line"></span><br><span class="line">如果要通过Samba共享home directories，请打开samba_enable_home_dirs Boolean。以root用户身份运行以下命令以启用此Boolean：</span><br><span class="line">setsebool -P samba_enable_home_dirs on</span><br><span class="line"></span><br><span class="line">如果创建新directories，例如新的顶级directories，请使用samba_share_t对其进行标记，以便SELinux允许Samba对其进行读写。不要使用samba_share_t标记系统目录，例如/etc/和/home/，因为这样的目录应该已经具有SELinux label了。</span><br><span class="line"></span><br><span class="line">运行&quot;ls -ldZ /path/to/directory&quot;命令以查看给定目录的当前SELinux label。</span><br><span class="line"></span><br><span class="line">仅在创建的文件和目录上设置SELinux labels。使用chcon命令临时更改label：</span><br><span class="line">chcon -t samba_share_t /path/to/directory</span><br><span class="line"></span><br><span class="line">重新标记文件系统或运行诸如restorecon之类的命令时，通过chcon进行的更改将丢失。</span><br><span class="line"></span><br><span class="line">使用samba_export_all_ro或samba_export_all_rw Boolean共享系统目录。 </span><br><span class="line">要共享这样的目录并仅允许只读权限：</span><br><span class="line">setsebool -P samba_export_all_ro on</span><br><span class="line">要共享此类目录并允许读写权限：</span><br><span class="line">setsebool -P samba_export_all_rw on</span><br><span class="line"></span><br><span class="line">要运行脚本（preexec/root prexec/print command/...），请将它们复制到/var/lib/samba/scripts/目录中，以便SELinux允许smbd运行它们。</span><br><span class="line">注意，如果将脚本移动到/var/lib/samba/scripts/，它们将保留其现有的SELinux labels，这些labels可能是SELinux不允许smbd运行的labels。复制脚本将得到正确的SELinux labels。</span><br><span class="line">以root用户身份运行&quot;restorecon -R -v /var/lib/samba/scripts&quot;命令，以将正确的SELinux labels应用于这些文件。</span><br></pre></td></tr></table></figure><p>5、配置文件段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">#======================= Global Settings =====================================</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line"></span><br><span class="line"># ----------------------- Network-Related Options -------------------------</span><br><span class="line">#</span><br><span class="line"># workgroup = Windows NT domain name 或 workgroup name, 例如, MYGROUP.</span><br><span class="line">#</span><br><span class="line"># server string = 等效于Windows NT Description字段（用于描述）.</span><br><span class="line">#</span><br><span class="line"># netbios name = 用于指定不与hostname绑定的server name，最多15个字符。</span><br><span class="line">#</span><br><span class="line"># interfaces = 用于将Samba配置为侦听多个network interfaces。如果您有多个interfaces，则可以使用&quot;interfaces =&quot;选项来配置Samba侦听哪些interface。 切勿忽略localhost interface (lo)。</span><br><span class="line">#</span><br><span class="line"># hosts allow = 允许连接的主机。This option can also be used on a per-share basis.</span><br><span class="line">#</span><br><span class="line"># hosts deny = 不允许主机连接。 This option can also be used on a per-share basis.</span><br><span class="line">#</span><br><span class="line">workgroup = MYGROUP</span><br><span class="line">server string = Samba Server Version %v</span><br><span class="line"></span><br><span class="line">;netbios name = MYSERVER</span><br><span class="line"></span><br><span class="line">;interfaces = lo eth0 192.168.12.2/24 192.168.13.2/24</span><br><span class="line">;hosts allow = 127. 192.168.12. 192.168.13.</span><br><span class="line"></span><br><span class="line"># --------------------------- Logging Options -----------------------------</span><br><span class="line">#</span><br><span class="line"># log file = 指定日志文件写入的位置以及它们的拆分方式。</span><br><span class="line">#</span><br><span class="line"># max log size = 指定允许的最大日志文件大小。 日志文件达到&quot;max log size&quot;指定的大小时，将对其进行rotated。</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># log files split per-machine:</span><br><span class="line">log file = /var/log/samba/log.%m</span><br><span class="line"># maximum size of 50KB per log file, then rotate:</span><br><span class="line">max log size = 50</span><br><span class="line"></span><br><span class="line"># ----------------------- Standalone Server Options ------------------------</span><br><span class="line">#</span><br><span class="line"># security = Samba运行的模式。可以将其设置为user, share (不建议使用), 或 server (不建议使用).</span><br><span class="line">#</span><br><span class="line"># passdb backend = 用于存储用户信息的backend（后端）。新安装应使用tdbsam或ldapsam。tdbsam不需要其他配置。&quot;smbpasswd&quot;可用于向后兼容。</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">security = user</span><br><span class="line">passdb backend = tdbsam</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------- Domain Members Options ------------------------</span><br><span class="line">#</span><br><span class="line"># security = 必须设置为 domain 或 ads.</span><br><span class="line">#</span><br><span class="line"># passdb backend = 用于存储用户信息的backend（后端）。新安装应使用tdbsam或ldapsam。tdbsam不需要其他配置。&quot;smbpasswd&quot;可用于向后兼容。</span><br><span class="line">#</span><br><span class="line"># realm = 当设置了&quot;security = ads&quot;选项时才会用到该选项。</span><br><span class="line">#</span><br><span class="line"># password server = 当设置了&quot;security = server&quot;选项或无法使用DNS定位Domain Controller时，才使用此选项。参数列表可以包括My_PDC_Name, [My_BDC_Name], 和[My_Next_BDC_Name]</span><br><span class="line">#</span><br><span class="line"># password server = My_PDC_Name [My_BDC_Name] [My_Next_BDC_Name]</span><br><span class="line">#</span><br><span class="line"># 使用 &quot;password server = *&quot; 自动定位 Domain Controllers.</span><br><span class="line"></span><br><span class="line">;security = domain</span><br><span class="line">;passdb backend = tdbsam</span><br><span class="line">;realm = MY_REALM</span><br><span class="line"></span><br><span class="line">;password server = &lt;NT-Server-Name&gt;</span><br><span class="line"></span><br><span class="line"># ----------------------- Domain Controller Options ------------------------</span><br><span class="line">#</span><br><span class="line"># security = 必须将domain controllers设置为user。</span><br><span class="line">#</span><br><span class="line"># passdb backend = 用于存储用户信息的backend（后端）。新安装应使用tdbsam或ldapsam。tdbsam不需要其他配置。&quot;smbpasswd&quot;可用于向后兼容。</span><br><span class="line">#</span><br><span class="line"># domain master = 将Samba指定为Domain Master Browser，从而允许Samba整理subnets之间的browse lists。 如果您已经有Windows NT domain controller执行此任务，请不要使用&quot;domain master&quot;选项。</span><br><span class="line">#</span><br><span class="line"># domain logons = 允许Samba为Windows workstations提供网络登录服务。</span><br><span class="line">#</span><br><span class="line"># logon script = 指定在登录时在客户端上运行的脚本。 必须在名为NETLOGON的共享中提供这些脚本。</span><br><span class="line">#</span><br><span class="line"># logon path = 指定（使用UNC path）用户配置文件的存储位置。</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">;security = user</span><br><span class="line">;passdb backend = tdbsam</span><br><span class="line"></span><br><span class="line">;domain master = yes</span><br><span class="line">;domain logons = yes</span><br><span class="line"></span><br><span class="line"># 以下登录脚本名称由machine name确定(%m):</span><br><span class="line">;logon script = %m.bat</span><br><span class="line"># 以下登录脚本名称由UNIX user确定:</span><br><span class="line">;logon script = %u.bat</span><br><span class="line">;logon path = \\%L\Profiles\%u</span><br><span class="line"># 使用empty path禁用profile support</span><br><span class="line">;logon path =</span><br><span class="line"></span><br><span class="line"># 可以在domain controller或独立machine上使用各种脚本来添加或删除相应的UNIX帐户：</span><br><span class="line"></span><br><span class="line">;add user script = /usr/sbin/useradd &quot;%u&quot; -n -g users</span><br><span class="line">;add group script = /usr/sbin/groupadd &quot;%g&quot;</span><br><span class="line">;add machine script = /usr/sbin/useradd -n -c &quot;Workstation (%u)&quot; -M -d /nohome -s /bin/false &quot;%u&quot;</span><br><span class="line">;delete user script = /usr/sbin/userdel &quot;%u&quot;</span><br><span class="line">;delete user from group script = /usr/sbin/userdel &quot;%u&quot; &quot;%g&quot;</span><br><span class="line">;delete group script = /usr/sbin/groupdel &quot;%g&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------- Browser Control Options ----------------------------</span><br><span class="line">#</span><br><span class="line"># local master = 设置为no时，Samba不会成为网络上的master browser。 设置为yes时，将应用常规election（选举） rules。</span><br><span class="line">#</span><br><span class="line"># os level = 确定服务器在master browser选举中的优先级。 默认值应该合理。</span><br><span class="line">#</span><br><span class="line"># preferred master = 设置为yes时，Samba会在启动时强制进行local browser选举（并使其赢得选举的几率略高）。</span><br><span class="line">#</span><br><span class="line">;local master = no</span><br><span class="line">;os level = 33</span><br><span class="line">;preferred master = yes</span><br><span class="line"></span><br><span class="line">#----------------------------- Name Resolution -------------------------------</span><br><span class="line">#</span><br><span class="line"># 本节详细介绍了对 Windows Internet Name Service (WINS) 的支持.</span><br><span class="line">#</span><br><span class="line"># 注意：Samba可以是WINS服务器，也可以是WINS客户端，但不能同时是两者。</span><br><span class="line">#</span><br><span class="line"># wins support = 设置为yes时，Samba的NMBD组件启用其WINS服务器。</span><br><span class="line">#</span><br><span class="line"># wins server = 告诉Samba的NMBD组件是WINS客户端。</span><br><span class="line">#</span><br><span class="line"># wins proxy = 设置为yes时，Samba代表不支持WINS的客户端回答name resolution查询。 为此，网络上至少必须有一个WINS服务器。 默认为no。</span><br><span class="line">#</span><br><span class="line"># dns proxy = 设置为yes时，Samba尝试通过DNS nslookups解析NetBIOS名称。</span><br><span class="line"></span><br><span class="line">;wins support = yes</span><br><span class="line">;wins server = w.x.y.z</span><br><span class="line">;wins proxy = yes</span><br><span class="line"></span><br><span class="line">;dns proxy = yes</span><br><span class="line"></span><br><span class="line"># --------------------------- Printing Options -----------------------------</span><br><span class="line">#</span><br><span class="line"># 本部分中的选项使您可以配置non-default（非默认） printing system。</span><br><span class="line">#</span><br><span class="line"># load printers = 设置为yes时，将自动加载printers列表，而不是单独进行设置。</span><br><span class="line">#</span><br><span class="line"># cups options = 允许您将选项传递到CUPS库。 例如，将此选项设置为raw，则可以在Windows客户端上使用驱动程序。</span><br><span class="line">#</span><br><span class="line"># printcap name = 用于指定备用的printcap文件。</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">load printers = yes</span><br><span class="line">cups options = raw</span><br><span class="line"></span><br><span class="line">;printcap name = /etc/printcap</span><br><span class="line"># 自动获取UNIX System V系统上的printers列表：</span><br><span class="line">;printcap name = lpstat</span><br><span class="line">;printing = cups</span><br><span class="line"></span><br><span class="line"># --------------------------- File System Options ---------------------------</span><br><span class="line">#</span><br><span class="line"># 如果文件系统支持扩展属性，并且启用了这些属性（通常通过&quot;user_xattr&quot; mount选项），则可以取消注释本节中的选项。</span><br><span class="line"># 这些选项允许管理员指定DOS属性存储在扩展属性中，并且还确保Samba不会更改permission bits。</span><br><span class="line">#</span><br><span class="line"># 注意：这些选项可以按per-share使用。 全局设置它们（在[global]部分中）使它们成为所有共享的默认值。</span><br><span class="line"></span><br><span class="line">;map archive = no</span><br><span class="line">;map hidden = no</span><br><span class="line">;map read only = no</span><br><span class="line">;map system = no</span><br><span class="line">;store dos attributes = yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#============================ Share Definitions ==============================</span><br><span class="line"></span><br><span class="line">[homes]</span><br><span class="line">comment = Home Directories</span><br><span class="line">browseable = no</span><br><span class="line">writable = yes</span><br><span class="line">;valid users = %S</span><br><span class="line">;valid users = MYDOMAIN\%S</span><br><span class="line"></span><br><span class="line">[printers]</span><br><span class="line">comment = All Printers</span><br><span class="line">path = /var/spool/samba</span><br><span class="line">browseable = no</span><br><span class="line">guest ok = no</span><br><span class="line">writable = no</span><br><span class="line">printable = yes</span><br><span class="line"></span><br><span class="line"># 取消注释以下内容，并为Domain Logons创建netlogon目录：</span><br><span class="line">;[netlogon]</span><br><span class="line">;comment = Network Logon Service</span><br><span class="line">;path = /var/lib/samba/netlogon</span><br><span class="line">;guest ok = yes</span><br><span class="line">;writable = no</span><br><span class="line">;share modes = no</span><br><span class="line"></span><br><span class="line"># 取消注释以下内容以提供特定的roaming profile share。</span><br><span class="line"># 默认为使用用户的home目录：</span><br><span class="line">;[Profiles]</span><br><span class="line">;path = /var/lib/samba/profiles</span><br><span class="line">;browseable = no</span><br><span class="line">;guest ok = yes</span><br><span class="line"></span><br><span class="line"># 一个只读公共目录，但&quot;staff&quot; group中的用户（具有写权限）除外：</span><br><span class="line">;[public]</span><br><span class="line">;comment = Public Stuff</span><br><span class="line">;path = /home/samba</span><br><span class="line">;public = yes</span><br><span class="line">;writable = no</span><br><span class="line">;printable = no</span><br><span class="line">;write list = +staff</span><br></pre></td></tr></table></figure><p>6、用户操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">smbpasswd -a 增加用户（linux系统用户）</span><br><span class="line">smbpasswd -d 冻结用户</span><br><span class="line">smbpasswd -e 解冻用户</span><br><span class="line">smbpasswd -n 将用户的密码设置成空.</span><br></pre></td></tr></table></figure><h1 id="LinuxCast笔记"><a href="#LinuxCast笔记" class="headerlink" title="LinuxCast笔记"></a>LinuxCast笔记</h1><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/samba/linuxcast-smb-1.png" alt></p><p><img src="https://github.com/lnsyyj/lnsyyj.github.io/blob/hexo/Blog/source/_posts/samba/linuxcast-smb-2.png?raw=true" alt></p><p><img src="https://github.com/lnsyyj/lnsyyj.github.io/blob/hexo/Blog/source/_posts/samba/linuxcast-smb-3.png?raw=true" alt></p><p><img src="https://github.com/lnsyyj/lnsyyj.github.io/blob/hexo/Blog/source/_posts/samba/linuxcast-smb-4.png?raw=true" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/samba/linuxcast-smb-5.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/samba/linuxcast-smb-6.png" alt></p><p><img src="https://github.com/lnsyyj/lnsyyj.github.io/blob/hexo/Blog/source/_posts/samba/linuxcast-smb-7.png?raw=true" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/samba/linuxcast-smb-9.png" alt></p><p><img src="https://github.com/lnsyyj/lnsyyj.github.io/blob/hexo/Blog/source/_posts/samba/linuxcast-smb-10.png?raw=true" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/samba/linuxcast-smb-11.png" alt></p><h1 id="samba相关rpm"><a href="#samba相关rpm" class="headerlink" title="samba相关rpm"></a>samba相关rpm</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">Name        : ctdb</span><br><span class="line">Summary     : A Clustered Database based on Samba&apos;s Trivial Database (TDB)</span><br><span class="line">Description : CTDB是Samba和其他项目用来存储临时数据的TDB数据库的集群实现。如果应用程序已经在使用TDB来存储临时数据，则很容易将该应用程序转换为群集感知型，而使用CTDB。</span><br><span class="line"></span><br><span class="line">Name        : samba-client</span><br><span class="line">Summary     : Samba client programs</span><br><span class="line">Description : samba-client package提供了一些SMB/CIFS客户端，以补充Linux中内置的SMB/CIFS filesystem。这些客户端允许访问SMB/CIFS shares并打印到SMB/CIFS printers。</span><br><span class="line"></span><br><span class="line">Name        : samba-devel</span><br><span class="line">Summary     : Developer tools for Samba libraries</span><br><span class="line">Description : samba-devel package包含开发Samba套件时的SMB，RPC和其他程序所需libraries的header files。</span><br><span class="line"></span><br><span class="line">Name        : samba-vfs-glusterfs</span><br><span class="line">Summary     : Samba VFS module for GlusterFS</span><br><span class="line">Description : 包含GlusterFS集成Samba VFS的模块。</span><br><span class="line"></span><br><span class="line">Name        : ctdb-tests</span><br><span class="line">Summary     : CTDB clustered database test suite</span><br><span class="line">Description : CTDB的测试套件。CTDB是Samba和其他项目用来存储临时数据的TDB数据库的集群实现。如果应用程序已经在使用TDB来存储临时数据，则很容易将该应用程序转换为群集感知型，而使用CTDB。</span><br><span class="line"></span><br><span class="line">Name        : samba-client-libs</span><br><span class="line">Summary     : Samba client libraries</span><br><span class="line">Description : samba-client-libs package包含SMB/CIFS客户端所需的internal libraries。</span><br><span class="line"></span><br><span class="line">Name        : samba-krb5-printing</span><br><span class="line">Summary     : Samba CUPS backend for printing with Kerberos</span><br><span class="line">Description : 如果您需要 Kerberos 进行print jobs，通过 SMB后端连接到printer cups，则需要安装该软件包。它将允许cups访问发出print job的用户的 Kerberos credentials cache。</span><br><span class="line"></span><br><span class="line">Name        : samba-winbind</span><br><span class="line">Summary     : Samba winbind</span><br><span class="line">Description : samba-winbind package提供了winbind NSS library和一些客户端工具。 Winbind使Linux成为Windows domains中的正式成员，并在Linux上使用Windows user和group帐户。</span><br><span class="line"></span><br><span class="line">Name        : libsmbclient</span><br><span class="line">Summary     : The SMB client library</span><br><span class="line">Description : libsmbclient包含来自Samba套件的SMB客户端library。</span><br><span class="line"></span><br><span class="line">Name        : samba-common-libs</span><br><span class="line">Summary     : Libraries used by both Samba servers and clients</span><br><span class="line">Description : samba-common-libs package包含SMB/CIFS客户端所需的internal libraries。</span><br><span class="line"></span><br><span class="line">Name        : samba-libs</span><br><span class="line">Summary     : Samba libraries</span><br><span class="line">Description : samba-libs package包含Samba套件的SMB，RPC和其他协议所需的libraries。</span><br><span class="line"></span><br><span class="line">Name        : samba-winbind-clients</span><br><span class="line">Summary     : Samba winbind clients</span><br><span class="line">Description : samba-winbind-clients package提供wbinfo和ntlm_auth工具。</span><br><span class="line"></span><br><span class="line">Name        : libsmbclient-devel</span><br><span class="line">Summary     : Developer tools for the SMB client library</span><br><span class="line">Description : libsmbclient-devel package包含开发相关Samba套件的SMB client library link所需的header files和libraries。</span><br><span class="line"></span><br><span class="line">Name        : samba-common-tools</span><br><span class="line">Summary     : Tools for Samba servers and clients</span><br><span class="line">Description : samba-common-tools package包含用于Samba servers和SMB/CIFS clients的工具。</span><br><span class="line"></span><br><span class="line">Name        : samba-python</span><br><span class="line">Summary     : Samba Python libraries</span><br><span class="line">Description : samba-python package包含Python程序中使用SMB，RPC和其他Samba提供的协议的程序所需的Python libraries。</span><br><span class="line"></span><br><span class="line">Name        : samba-winbind-krb5-locator</span><br><span class="line">Summary     : Samba winbind krb5 locator</span><br><span class="line">Description : winbind krb5 locator是系统kerberos library的plugin，以允许本地kerberos library使用与samba和winbind相同的KDC。</span><br><span class="line"></span><br><span class="line">Name        : libwbclient</span><br><span class="line">Summary     : The winbind client library</span><br><span class="line">Description : libwbclient package包含Samba套件中的winbind client library。</span><br><span class="line"></span><br><span class="line">Name        : samba-dc</span><br><span class="line">Summary     : Samba AD Domain Controller</span><br><span class="line">Description : samba-dc package提供AD Domain Controller功能</span><br><span class="line"></span><br><span class="line">Name        : samba-python-test</span><br><span class="line">Summary     : Samba Python libraries</span><br><span class="line">Description : samba-python-test package包含Samba test suite使用的Python libraries。 如果要运行全套Samba测试，则需要安装此package。</span><br><span class="line"></span><br><span class="line">Name        : samba-winbind-modules</span><br><span class="line">Summary     : Samba winbind modules</span><br><span class="line">Description : samba-winbind-modules package提供了与Winbind Daemon通信所需的NSS library和PAM module。</span><br><span class="line"></span><br><span class="line">Name        : libwbclient-devel</span><br><span class="line">Summary     : Developer tools for the winbind library</span><br><span class="line">Description : libwbclient-devel package为wbclient library提供了developer tools。</span><br><span class="line"></span><br><span class="line">Name        : samba-dc-libs</span><br><span class="line">Summary     : Samba AD Domain Controller Libraries</span><br><span class="line">Description : samba-dc-libs package包含DC去链接SMB，RPC和其他协议所需的库。</span><br><span class="line"></span><br><span class="line">Name        : samba-test</span><br><span class="line">Summary     : Testing tools for Samba servers and clients</span><br><span class="line">Description : samba-test为Samba的server和client packages提供测试工具。</span><br><span class="line"></span><br><span class="line">Name        : samba</span><br><span class="line">Summary     : Server and Client software to interoperate with Windows machines</span><br><span class="line">Description : Samba is the standard Windows interoperability suite of programs</span><br><span class="line">            : for Linux and Unix.</span><br><span class="line"></span><br><span class="line">Name        : samba-debuginfo</span><br><span class="line">Summary     : Debug information for package samba</span><br><span class="line">Description : 该软件包提供了samba软件包的debug information。</span><br><span class="line"></span><br><span class="line">Name        : samba-test-libs</span><br><span class="line">Summary     : Libraries need by the testing tools for Samba servers and clients</span><br><span class="line">Description : samba-test-libs提供测试工具所需的libraries。</span><br><span class="line"></span><br><span class="line">Name        : samba-common</span><br><span class="line">Summary     : Samba servers 和 clients使用的文件</span><br><span class="line">Description : samba-common提供Samba的server和client packages所需的文件。</span><br><span class="line"></span><br><span class="line">Name        : samba-pidl</span><br><span class="line">Summary     : Perl IDL编译器</span><br><span class="line">Description : samba-pidl package包含Samba和Wireshark用于解析IDL和类似协议的Perl IDL编译器</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>【1】<a href="https://blog.csdn.net/skdkjzz/article/details/42101363" target="_blank" rel="noopener">https://blog.csdn.net/skdkjzz/article/details/42101363</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ceph DISKPREDICTION MODULE</title>
      <link href="/2019/10/21/Ceph-DISKPREDICTION-MODULE/"/>
      <url>/2019/10/21/Ceph-DISKPREDICTION-MODULE/</url>
      
        <content type="html"><![CDATA[<h3 id="DISKPREDICTION-MODULE"><a href="#DISKPREDICTION-MODULE" class="headerlink" title="DISKPREDICTION MODULE"></a>DISKPREDICTION MODULE</h3><p>磁盘预测模块支持两种模式：cloud mode和local mode。 在cloud mode下，磁盘和Ceph操作状态信息是从Ceph群集中收集的，并通过Internet发送到基于云的DiskPrediction服务器。 DiskPrediction服务器分析数据，并提供Ceph群集的性能和磁盘运行状况的分析和预测结果。</p><p>local mode不需要任何外部服务器即可进行数据分析和输出结果。 在local mode下，磁盘<em>diskprediction</em> module将内部predictor module用于磁盘预测服务，然后将磁盘预测结果返回给Ceph系统。</p><p>Local predictor: 70% 的准确性</p><p>Cloud predictor for free: 95% 的准确性</p><h1 id="ENABLING"><a href="#ENABLING" class="headerlink" title="ENABLING"></a>ENABLING</h1><p>运行以下命令以在Ceph环境中启用磁盘预测模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph mgr module enable diskprediction_cloud</span><br><span class="line">ceph mgr module enable diskprediction_local</span><br></pre></td></tr></table></figure><p>选择预测模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph config set global device_failure_prediction_mode local</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph config set global device_failure_prediction_mode cloud</span><br></pre></td></tr></table></figure><p>要禁用预测，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph config set global device_failure_prediction_mode none</span><br></pre></td></tr></table></figure><h1 id="CONNECTION-SETTINGS"><a href="#CONNECTION-SETTINGS" class="headerlink" title="CONNECTION SETTINGS"></a>CONNECTION SETTINGS</h1><p>connection settings用于Ceph和DiskPrediction服务器之间的连接。</p><h3 id="LOCAL-MODE"><a href="#LOCAL-MODE" class="headerlink" title="LOCAL MODE"></a>LOCAL MODE</h3><p>diskprediction module利用Ceph设备运行状况检查来收集磁盘运行状况指标，并使用内部predictor module来生成磁盘故障预测并返回Ceph。 因此，在local mode下不需要连接设置。 local predictor module至少需要六个设备健康状况数据集才能实施预测。</p><p>运行以下命令以使用本地预测变量预测设备的预期寿命。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ceph device predict-life-expectancy &lt;device id&gt;</span><br><span class="line"></span><br><span class="line">[root@community-ceph-1 ~]# ceph device predict-life-expectancy 0d2a946c-413f-43f4-b</span><br><span class="line">unknown</span><br></pre></td></tr></table></figure><h3 id="CLOUD-MODE"><a href="#CLOUD-MODE" class="headerlink" title="CLOUD MODE"></a>CLOUD MODE</h3><p>在cloud mode下，需要用户注册。 用户必须在<a href="https://www.diskprophet.com/#/上注册其帐户，以接收以下DiskPrediction服务器信息以进行连接设置。" target="_blank" rel="noopener">https://www.diskprophet.com/#/上注册其帐户，以接收以下DiskPrediction服务器信息以进行连接设置。</a></p><p>Certificate file path: 确认用户注册后，系统将发送一封确认电子邮件，其中包括证书文件下载链接。 下载证书文件并将其保存到Ceph系统。 运行以下命令来验证文件。 如果没有证书文件验证，则无法完成连接设置。</p><p>DiskPrediction server: DiskPrediction服务器名称。 如果需要，它可以是IP地址。</p><p>Connection account: 用于在Ceph和DiskPrediction服务器之间建立连接的帐户名</p><p>Connection password: 用于在Ceph和DiskPrediction服务器之间建立连接的密码</p><p>运行以下命令以完成连接设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device set-cloud-prediction-config &lt;diskprediction_server&gt; &lt;connection_account&gt; &lt;connection_password&gt; &lt;certificate file path&gt;</span><br></pre></td></tr></table></figure><p>您可以使用以下命令显示连接设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device show-prediction-config</span><br></pre></td></tr></table></figure><p>其他可选配置设置如下：</p><p>diskprediction_upload_metrics_interval: 指示定期将Ceph性能指标发送到DiskPrediction服务器的频率。 默认值为10分钟。</p><p>diskprediction_upload_smart_interval: 指示定期将Ceph物理设备信息发送到DiskPrediction服务器的频率。 默认值为12小时。</p><p>diskprediction_retrieve_prediction_interval: 指示Ceph有时会定期从DiskPrediction服务器检索物理设备预测数据。 默认值为12小时。</p><h1 id="DISKPREDICTION-DATA"><a href="#DISKPREDICTION-DATA" class="headerlink" title="DISKPREDICTION DATA"></a>DISKPREDICTION DATA</h1><p>diskprediction module主动向/从DiskPrediction服务器发送/检索以下数据。</p><h3 id="METRICS-DATA"><a href="#METRICS-DATA" class="headerlink" title="METRICS DATA"></a>METRICS DATA</h3><ul><li>Ceph cluster status</li></ul><table><thead><tr><th align="left">key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">cluster_health</td><td align="left">Ceph health check status</td></tr><tr><td align="left">num_mon</td><td align="left">Number of monitor node</td></tr><tr><td align="left">num_mon_quorum</td><td align="left">Number of monitors in quorum</td></tr><tr><td align="left">num_osd</td><td align="left">Total number of OSD</td></tr><tr><td align="left">num_osd_up</td><td align="left">Number of OSDs that are up</td></tr><tr><td align="left">num_osd_in</td><td align="left">Number of OSDs that are in cluster</td></tr><tr><td align="left">osd_epoch</td><td align="left">Current epoch of OSD map</td></tr><tr><td align="left">osd_bytes</td><td align="left">Total capacity of cluster in bytes</td></tr><tr><td align="left">osd_bytes_used</td><td align="left">Number of used bytes on cluster</td></tr><tr><td align="left">osd_bytes_avail</td><td align="left">Number of available bytes on cluster</td></tr><tr><td align="left">num_pool</td><td align="left">Number of pools</td></tr><tr><td align="left">num_pg</td><td align="left">Total number of placement groups</td></tr><tr><td align="left">num_pg_active_clean</td><td align="left">Number of placement groups in active+clean state</td></tr><tr><td align="left">num_pg_active</td><td align="left">Number of placement groups in active state</td></tr><tr><td align="left">num_pg_peering</td><td align="left">Number of placement groups in peering state</td></tr><tr><td align="left">num_object</td><td align="left">Total number of objects on cluster</td></tr><tr><td align="left">num_object_degraded</td><td align="left">Number of degraded (missing replicas) objects</td></tr><tr><td align="left">num_object_misplaced</td><td align="left">Number of misplaced (wrong location in the cluster) objects</td></tr><tr><td align="left">num_object_unfound</td><td align="left">Number of unfound objects</td></tr><tr><td align="left">num_bytes</td><td align="left">Total number of bytes of all objects</td></tr><tr><td align="left">num_mds_up</td><td align="left">Number of MDSs that are up</td></tr><tr><td align="left">num_mds_in</td><td align="left">Number of MDS that are in cluster</td></tr><tr><td align="left">num_mds_failed</td><td align="left">Number of failed MDS</td></tr><tr><td align="left">mds_epoch</td><td align="left">Current epoch of MDS map</td></tr></tbody></table><ul><li>Ceph mon/osd performance counts  </li></ul><p>Mon:</p><table><thead><tr><th align="left">key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">num_sessions</td><td align="left">Current number of opened monitor sessions</td></tr><tr><td align="left">session_add</td><td align="left">Number of created monitor sessions</td></tr><tr><td align="left">session_rm</td><td align="left">Number of remove_session calls in monitor</td></tr><tr><td align="left">session_trim</td><td align="left">Number of trimed monitor sessions</td></tr><tr><td align="left">num_elections</td><td align="left">Number of elections monitor took part in</td></tr><tr><td align="left">election_call</td><td align="left">Number of elections started by monitor</td></tr><tr><td align="left">election_win</td><td align="left">Number of elections won by monitor</td></tr><tr><td align="left">election_lose</td><td align="left">Number of elections lost by monitor</td></tr></tbody></table><p>Osd:</p><table><thead><tr><th align="left">key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">op_wip</td><td align="left">Replication operations currently being processed (primary)</td></tr><tr><td align="left">op_in_bytes</td><td align="left">Client operations total write size</td></tr><tr><td align="left">op_r</td><td align="left">Client read operations</td></tr><tr><td align="left">op_out_bytes</td><td align="left">Client operations total read size</td></tr><tr><td align="left">op_w</td><td align="left">Client write operations</td></tr><tr><td align="left">op_latency</td><td align="left">Latency of client operations (including queue time)</td></tr><tr><td align="left">op_process_latency</td><td align="left">Latency of client operations (excluding queue time)</td></tr><tr><td align="left">op_r_latency</td><td align="left">Latency of read operation (including queue time)</td></tr><tr><td align="left">op_r_process_latency</td><td align="left">Latency of read operation (excluding queue time)</td></tr><tr><td align="left">op_w_in_bytes</td><td align="left">Client data written</td></tr><tr><td align="left">op_w_latency</td><td align="left">Latency of write operation (including queue time)</td></tr><tr><td align="left">op_w_process_latency</td><td align="left">Latency of write operation (excluding queue time)</td></tr><tr><td align="left">op_rw</td><td align="left">Client read-modify-write operations</td></tr><tr><td align="left">op_rw_in_bytes</td><td align="left">Client read-modify-write operations write in</td></tr><tr><td align="left">op_rw_out_bytes</td><td align="left">Client read-modify-write operations read out</td></tr><tr><td align="left">op_rw_latency</td><td align="left">Latency of read-modify-write operation (including queue time)</td></tr><tr><td align="left">op_rw_process_latency</td><td align="left">Latency of read-modify-write operation (excluding queue time)</td></tr></tbody></table><ul><li>Ceph pool statistics</li></ul><table><thead><tr><th align="left">key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">bytes_used</td><td align="left">Per pool bytes used</td></tr><tr><td align="left">max_avail</td><td align="left">Max available number of bytes in the pool</td></tr><tr><td align="left">objects</td><td align="left">Number of objects in the pool</td></tr><tr><td align="left">wr_bytes</td><td align="left">Number of bytes written in the pool</td></tr><tr><td align="left">dirty</td><td align="left">Number of bytes dirty in the pool</td></tr><tr><td align="left">rd_bytes</td><td align="left">Number of bytes read in the pool</td></tr><tr><td align="left">stored_raw</td><td align="left">Bytes used in pool including copies made</td></tr></tbody></table><ul><li>Ceph physical device metadata</li></ul><table><thead><tr><th align="left">key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">disk_domain_id</td><td align="left">Physical device identify id</td></tr><tr><td align="left">disk_name</td><td align="left">Device attachment name</td></tr><tr><td align="left">disk_wwn</td><td align="left">Device wwn</td></tr><tr><td align="left">model</td><td align="left">Device model name</td></tr><tr><td align="left">serial_number</td><td align="left">Device serial number</td></tr><tr><td align="left">size</td><td align="left">Device size</td></tr><tr><td align="left">vendor</td><td align="left">Device vendor name</td></tr></tbody></table><ul><li>Ceph each objects correlation information</li><li>The module agent information</li><li>The module agent cluster information</li><li>The module agent host information</li></ul><h3 id="SMART-DATA"><a href="#SMART-DATA" class="headerlink" title="SMART DATA"></a>SMART DATA</h3><ul><li>Ceph physical device SMART data (provided by Ceph <em>devicehealth</em> module)</li></ul><h3 id="PREDICTION-DATA"><a href="#PREDICTION-DATA" class="headerlink" title="PREDICTION DATA"></a>PREDICTION DATA</h3><ul><li>Ceph physical device prediction data</li></ul><h1 id="RECEIVING-PREDICTED-HEALTH-STATUS-FROM-A-CEPH-OSD-DISK-DRIVE（从CEPH-OSD磁盘驱动器中接收预期的健康状况）"><a href="#RECEIVING-PREDICTED-HEALTH-STATUS-FROM-A-CEPH-OSD-DISK-DRIVE（从CEPH-OSD磁盘驱动器中接收预期的健康状况）" class="headerlink" title="RECEIVING PREDICTED HEALTH STATUS FROM A CEPH OSD DISK DRIVE（从CEPH OSD磁盘驱动器中接收预期的健康状况）"></a>RECEIVING PREDICTED HEALTH STATUS FROM A CEPH OSD DISK DRIVE（从CEPH OSD磁盘驱动器中接收预期的健康状况）</h1><p>您可以使用以下命令从Ceph OSD磁盘驱动器接收预测的健康状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device get-predicted-status &lt;device id&gt;</span><br></pre></td></tr></table></figure><p>get-predicted-status命令返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;near_failure&quot;: &quot;Good&quot;,</span><br><span class="line">    &quot;disk_wwn&quot;: &quot;5000011111111111&quot;,</span><br><span class="line">    &quot;serial_number&quot;: &quot;111111111&quot;,</span><br><span class="line">    &quot;predicted&quot;: &quot;2018-05-30 18:33:12&quot;,</span><br><span class="line">    &quot;attachment&quot;: &quot;sdb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Attribute</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">near_failure</td><td align="left">The disk failure prediction state: Good/Warning/Bad/Unknown</td></tr><tr><td align="left">disk_wwn</td><td align="left">Disk WWN number</td></tr><tr><td align="left">serial_number</td><td align="left">Disk serial number</td></tr><tr><td align="left">predicted</td><td align="left">Predicted date</td></tr><tr><td align="left">attachment</td><td align="left">device name on the local system</td></tr></tbody></table><p>磁盘故障预测状态的near_failure属性在下表中指示磁盘预期寿命。</p><table><thead><tr><th align="left">near_failure</th><th align="left">Life expectancy (weeks)</th></tr></thead><tbody><tr><td align="left">Good</td><td align="left">&gt; 6 weeks</td></tr><tr><td align="left">Warning</td><td align="left">2 weeks ~ 6 weeks</td></tr><tr><td align="left">Bad</td><td align="left">&lt; 2 weeks</td></tr></tbody></table><h1 id="DEBUGGING"><a href="#DEBUGGING" class="headerlink" title="DEBUGGING"></a>DEBUGGING</h1><p>如果要调试DiskPrediction module映射到Ceph日志记录级别，请使用以下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mgr]</span><br><span class="line"></span><br><span class="line">    debug mgr = 20</span><br></pre></td></tr></table></figure><p>将日志记录设置为管理器调试时，模块将打印出带有前缀mgr [diskprediction]的日志记录消息，以便于过滤。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ceph DEVICE MANAGEMENT</title>
      <link href="/2019/10/21/Ceph-DEVICE-MANAGEMENT/"/>
      <url>/2019/10/21/Ceph-DEVICE-MANAGEMENT/</url>
      
        <content type="html"><![CDATA[<h3 id="DEVICE-MANAGEMENT"><a href="#DEVICE-MANAGEMENT" class="headerlink" title="DEVICE MANAGEMENT"></a>DEVICE MANAGEMENT</h3><p>Ceph跟踪哪个daemons消耗了哪些hardware storage devices（例如HDD，SSD），并收集有关这些devices的运行状况指标，以提供预测和/或自动响应硬件故障的工具。</p><h1 id="DEVICE-TRACKING"><a href="#DEVICE-TRACKING" class="headerlink" title="DEVICE TRACKING"></a>DEVICE TRACKING</h1><p>您可以查询哪些存储设备正在使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ceph device ls</span><br><span class="line"></span><br><span class="line">DEVICE               HOST:DEV                       DAEMONS LIFE EXPECTANCY </span><br><span class="line">0d2a946c-413f-43f4-b community-ceph-2.novalocal:vdc osd.0</span><br><span class="line">451e48d6-913e-4f93-a community-ceph-1.novalocal:vdd osd.5</span><br><span class="line">935b6018-1dfe-4cf9-8 community-ceph-1.novalocal:vdc osd.2</span><br><span class="line">abe09d21-d950-47b0-9 community-ceph-2.novalocal:vdd osd.3</span><br><span class="line">bf37729e-9d83-48e9-9 community-ceph-3.novalocal:vdc osd.1</span><br><span class="line">d48dcf29-fe58-4e3e-a community-ceph-3.novalocal:vdd osd.4</span><br></pre></td></tr></table></figure><p>您还可以按daemon或host列出devices：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ceph device ls-by-daemon &lt;daemon&gt;</span><br><span class="line">ceph device ls-by-host &lt;host&gt;</span><br><span class="line"></span><br><span class="line">[root@community-ceph-1 ~]# ceph device ls-by-daemon osd.0</span><br><span class="line">DEVICE               HOST:DEV                       EXPECTED FAILURE </span><br><span class="line">0d2a946c-413f-43f4-b community-ceph-2.novalocal:vdc                  </span><br><span class="line"></span><br><span class="line">[root@community-ceph-1 ~]# ceph device ls-by-host community-ceph-2.novalocal</span><br><span class="line">DEVICE               DEV DAEMONS EXPECTED FAILURE </span><br><span class="line">0d2a946c-413f-43f4-b vdc osd.0                    </span><br><span class="line">abe09d21-d950-47b0-9 vdd osd.3</span><br></pre></td></tr></table></figure><p>对于任何单个设备，您可以通过以下方式查询有关其位置以及如何使用它的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ceph device info &lt;devid&gt;</span><br><span class="line"></span><br><span class="line">[root@community-ceph-1 ~]# ceph device info 0d2a946c-413f-43f4-b</span><br><span class="line">device 0d2a946c-413f-43f4-b</span><br><span class="line">attachment community-ceph-2.novalocal:vdc</span><br><span class="line">daemons osd.0</span><br></pre></td></tr></table></figure><h1 id="ENABLING-MONITORING"><a href="#ENABLING-MONITORING" class="headerlink" title="ENABLING MONITORING"></a>ENABLING MONITORING</h1><p>Ceph还可以监视与您的设备关联的健康指标。 例如，SATA硬盘实现了一个称为SMART的标准，该标准提供了有关设备使用情况和运行状况的内部指标，例如开机小时数，电源循环次数或不可恢复的读取错误。 其他设备类型（例如SAS和NVMe）实现了一组相似的指标（通过略有不同的标准）。 Ceph可以通过smartctl工具收集所有这些信息。</p><p>您可以通过以下方式启用或禁用运行状况监视：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device monitoring on</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device monitoring off</span><br></pre></td></tr></table></figure><h1 id="SCRAPING"><a href="#SCRAPING" class="headerlink" title="SCRAPING"></a>SCRAPING</h1><p>如果启用了监视，则将定期自动scraped指标。 该间隔可以配置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph config set mgr mgr/devicehealth/scrape_frequency &lt;seconds&gt;</span><br></pre></td></tr></table></figure><p>默认值为每24小时scrape一次。</p><p>您可以使用以下方法手动触发所有设备的scrape：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device scrape-health-metrics</span><br></pre></td></tr></table></figure><p>单个设备可以用以下方式scraped：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device scrape-health-metrics &lt;device-id&gt;</span><br></pre></td></tr></table></figure><p>或单个daemon的设备可以通过以下方式进行scraped：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device scrape-daemon-health-metrics &lt;who&gt;</span><br></pre></td></tr></table></figure><p>可以使用以下命令检索设备的存储健康指标（可选地，用于特定时间戳）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device get-health-metrics &lt;devid&gt; [sample-timestamp]</span><br></pre></td></tr></table></figure><h1 id="FAILURE-PREDICTION"><a href="#FAILURE-PREDICTION" class="headerlink" title="FAILURE PREDICTION"></a>FAILURE PREDICTION</h1><p>Ceph可以根据其收集的健康指标预测预期寿命和设备故障。 共有三种模式：</p><ul><li>none: 禁用设备故障预测。</li><li>local: 使用来自ceph-mgr daemon的预训练预测模型</li><li>cloud: 使用ProphetStor运行的外部云服务共享设备运行状况和性能指标，并使用其免费服务或付费服务进行更准确的预测</li></ul><p>预测模式可以配置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph config set global device_failure_prediction_mode &lt;mode&gt;</span><br></pre></td></tr></table></figure><p>预测通常在后台定期进行，因此填充预期寿命值可能需要一些时间。 您可以从以下输出中看到所有设备的预期寿命：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device ls</span><br></pre></td></tr></table></figure><p>您还可以使用以下方法查询特定设备的metadata：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device info &lt;devid&gt;</span><br></pre></td></tr></table></figure><p>您可以使用以下命令显式地强制预测设备的预期寿命：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device predict-life-expectancy &lt;devid&gt;</span><br></pre></td></tr></table></figure><p>如果您未使用Ceph的内部设备故障预测，但是拥有一些有关设备故障的外部信息源，则可以通过以下方式告知Ceph设备的预期寿命：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device set-life-expectancy &lt;devid&gt; &lt;from&gt; [&lt;to&gt;]</span><br></pre></td></tr></table></figure><p>预期寿命以时间间隔表示，因此不确定性可以以宽间隔的形式表示。 间隔结束也可以不指定。</p><h1 id="HEALTH-ALERTS"><a href="#HEALTH-ALERTS" class="headerlink" title="HEALTH ALERTS"></a>HEALTH ALERTS</h1><p>mgr/devicehealth/warn_threshold控制在生成运行状况警告之前，预期的设备故障必须多长时间。</p><p>可以使用以下方法检查所有设备的存储预期寿命，并生成任何适当的健康警报：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph device check-health</span><br></pre></td></tr></table></figure><h1 id="AUTOMATIC-MITIGATION"><a href="#AUTOMATIC-MITIGATION" class="headerlink" title="AUTOMATIC MITIGATION"></a>AUTOMATIC MITIGATION</h1><p>如果启用了mgr/devicehealth/self_heal选项（默认情况下），则对于预计将很快发现故障的设备，模块将通过将设备标记为“out”来自动将数据迁移到这些设备之外。</p><p>mgr/devicehealth/mark_out_threshold控制在我们将osd自动标记为“out”之前，预期的设备故障必须多长时间。</p><h3 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h3><h3 id="https-docs-ceph-com-docs-master-rados-operations-devices-devices"><a href="#https-docs-ceph-com-docs-master-rados-operations-devices-devices" class="headerlink" title="https://docs.ceph.com/docs/master/rados/operations/devices/#devices"></a><a href="https://docs.ceph.com/docs/master/rados/operations/devices/#devices" target="_blank" rel="noopener">https://docs.ceph.com/docs/master/rados/operations/devices/#devices</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ceph版本升级新特性</title>
      <link href="/2019/10/16/Ceph%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2019/10/16/Ceph%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="V14-2-0-NAUTILUS-MAJOR-CHANGES-FROM-MIMIC"><a href="#V14-2-0-NAUTILUS-MAJOR-CHANGES-FROM-MIMIC" class="headerlink" title="V14.2.0 NAUTILUS MAJOR CHANGES FROM MIMIC"></a>V14.2.0 NAUTILUS MAJOR CHANGES FROM MIMIC</h1><p>参考：</p><p>【1】<a href="https://docs.ceph.com/docs/master/releases/nautilus/" target="_blank" rel="noopener">https://docs.ceph.com/docs/master/releases/nautilus/</a></p><p>【2】<a href="https://blog.csdn.net/Z_Stand/article/details/89739908" target="_blank" rel="noopener">https://blog.csdn.net/Z_Stand/article/details/89739908</a></p><p>这是Ceph Nautilus的第一个稳定版本。</p><ul><li><p>Dashboard</p><p><a href="https://docs.ceph.com/docs/master/mgr/dashboard/#mgr-dashboard" target="_blank" rel="noopener">Ceph Dashboard</a>增加了许多新功能：</p><ul><li>Support for multiple users / roles</li><li>SSO (SAMLv2) for user authentication</li><li>Auditing support（审计支持）</li><li>New landing page, showing more metrics and health info</li><li>I18N support（国际化）</li><li>REST API documentation with Swagger API</li><li>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。作者：天马行空LQ<br>  链接：<a href="https://www.jianshu.com/p/66a14ea07622" target="_blank" rel="noopener">https://www.jianshu.com/p/66a14ea07622</a><br>来源：简书<br>  著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li></ul><p>Ceph management新功能：</p><ul><li>OSD management (mark as down/out, change OSD settings, recovery profiles)</li><li>Cluster config settings editor</li><li>Ceph Pool management (create/modify/delete)</li><li><a href="https://www.oschina.net/news/2609" target="_blank" rel="noopener">ECP</a> management</li><li>RBD mirroring configuration</li><li>Embedded Grafana Dashboards (derived from Ceph Metrics)</li><li>CRUSH map viewer</li><li>NFS Ganesha management</li><li>iSCSI target management (via <a href="https://docs.ceph.com/docs/master/rbd/iscsi-overview/#ceph-iscsi" target="_blank" rel="noopener">Ceph iSCSI Gateway</a>)</li><li>RBD QoS configuration</li><li>Ceph Manager (ceph-mgr) module management</li><li>Prometheus alert Management</li></ul></li></ul><p>而且，Ceph Dashboard现在被拆分到ceph-mgr-dashboard的package。 如果您的package management software在安装ceph-mgr时失败，则可能需要单独安装ceph-mgr-dashboard。</p><ul><li><p>RADOS</p><ul><li>现在可以随时减少每个pool的placement groups (PGs)数，并且可以根据群集利用率或管理员提示<a href="https://docs.ceph.com/docs/master/rados/operations/placement-groups/#pg-autoscaler" target="_blank" rel="noopener">自动调整PG数</a>。</li><li>新的<a href="https://docs.ceph.com/docs/master/rados/configuration/msgr2/#msgr2" target="_blank" rel="noopener">v2 wire protocol</a>支持线路加密</li><li>群集可以跟踪OSD和Monitor daemons消耗的物理<a href="https://docs.ceph.com/docs/master/rados/operations/devices/#devices" target="_blank" rel="noopener">存储设备</a>以及运行状况指标（即SMART），并且群集可以通过预先训练的预测模型或者基于云预测服务来<a href="https://docs.ceph.com/docs/master/mgr/diskprediction/#diskprediction" target="_blank" rel="noopener">报告预测的HDD或SSD故障</a>。</li><li>可通过ceph osd numa-status命令轻松监视OSD daemons的NUMA节点，并通过osd_numa_node config选项进行配置。</li><li>现在，当使用BlueStore OSD时，空间利用率将按object data，omap data和internal metadata，pool以及压缩前和压缩后的大小进行细分。</li><li>在执行recovery和backfill时，OSD可以更有效地选择重要的PG和objects优先处理。</li><li>在设备出现问题以后，像recovery这种长期运行在后台的进程，可以使用ceph status命令查看进度。</li><li>增加了一个实验性的（耦合层） <a href="https://www.usenix.org/conference/fast18/presentation/vajha" target="_blank" rel="noopener">Coupled-Layer “Clay” erasure code</a> plugin，该plugin可减少大多数recovery操作所需的网络带宽和IO。</li></ul></li><li><p>RGW</p><ul><li>S3 lifecycle可以在storage classes与tiering层之间转换</li><li>Beast取代了civetweb成为默认的web frontend，从而提高了整体性能。</li><li>支持新的publish/subscribe基础架构，允许RGW将events推送至serverless frameworks如knative或data pipelies如Kafka。</li><li>新增一系列身份验证功能，使用OAuth2和OpenID::connect的STS联合以及OPA（开放策略代理）身份验证委派原型。</li><li>新的archive zone federation功能可将所有objects（包括历史记录）完全保留在一个单独的zone中。</li></ul></li><li><p>CephFS</p><ul><li>对于具有large caches和large RAM并长期运行的客户端，MDS的稳定性已大大提高。Cache trimming（调整）和client capability recall现在受到限制，以防止MDS过载。</li><li>现在可以在Rook管理的群集环境中通过NFS-Ganesha导出CephFS。Ceph负责管理集群并确保高可用性和可伸缩性。 <a href="https://ceph.com/community/deploying-a-cephnfs-server-cluster-with-rook/" target="_blank" rel="noopener">入门演示</a>。 预计在未来Nautilus的次要版本中实现此功能的更多自动化。</li><li>MDS mds_standby_for_*，mon_force_standby_active和mds_standby_replay配置选项已过时。 相反，操作者现在可以在CephFS文件系统上<a href="https://docs.ceph.com/docs/master/cephfs/standby/#mds-standby-replay" target="_blank" rel="noopener">设置新的</a>allow_standby_replay标志。 该设置会使文件系统由standbys变为standby-replay，并且任何可用的rank都会生效。（一个 rank 可看作是一个元数据分片）</li><li>MDS支持客户端释放缓存的同时释放自己的存储端缓存，这个过程可由MDS admin socket命令 <code>cache drop</code>来完成</li><li>现在可以检查MDS中正在进行的scrub的进度。 此外，scrub可能会暂停或中止。 有关更多信息，请参见<a href="https://docs.ceph.com/docs/master/cephfs/scrub/#mds-scrub" target="_blank" rel="noopener">scrub文档</a>。</li><li>通过<code>ceph volume</code> command-line-interface提供了一个用于创建volumes的新interface。</li><li>新的<a href="https://docs.ceph.com/docs/master/cephfs/cephfs-shell/" target="_blank" rel="noopener">cephfs-shell工具</a>可用于处理CephFS文件系统而无需mounting。</li><li>为了简洁，清楚和有用，已重新格式化了来自ceph status与CephFS相关的输出。</li><li>Lazy IO已进行了改进。客户端可以使用ceph_open C/C++ API的新CEPH_O_LAZY flag将其打开或通过配置选项client_force_lazyio将其打开。（LazyIO放松了POSIX语义。 即使文件由多个客户端上的多个应用程序打开，也允许缓冲的读/写操作。 应用程序负责自己管理缓存的一致性。自Nautilus发行以来，Libcephfs支持LazyIO。）</li><li>现在可以通过ceph fs fail命令快速关闭CephFS文件系统。有关更多信息，请参见 <a href="https://docs.ceph.com/docs/master/cephfs/administration/#cephfs-administration" target="_blank" rel="noopener">the administration page</a>。</li></ul></li><li><p>RBD</p><ul><li>Images可以在尽量短的停机时间内迁移，以帮助在pool之间移动images或移动到新的layouts。</li><li>新的rbd perf image iotop和rbd perf image iostat命令为所有RBD images提供了类似于iotop和iostat的IO监视器。</li><li>现在，ceph-mgr Prometheus exporter新增一个用于所有RBD images的IO监视器。</li><li>支持pool中的单独image namespaces，以便进行租户隔离。</li></ul></li><li><p>Misc</p><ul><li>Ceph 拥有一组新的<a href="https://docs.ceph.com/docs/master/mgr/orchestrator_cli/#orchestrator-cli-module" target="_blank" rel="noopener">orchestrator modules</a>，可直接与外部orchestrators像ceph-ansible, DeepSea, Rook, or simply ssh通过一致的CLI interface(and, eventually, Dashboard) 进行交互。</li></ul></li></ul><h1 id="V13-2-0-MIMIC-MAJOR-CHANGES-FROM-LUMINOUS"><a href="#V13-2-0-MIMIC-MAJOR-CHANGES-FROM-LUMINOUS" class="headerlink" title="V13.2.0 MIMIC MAJOR CHANGES FROM LUMINOUS"></a>V13.2.0 MIMIC MAJOR CHANGES FROM LUMINOUS</h1><ul><li><p>Dashboard</p><ul><li>Ceph Luminous中引入的（只读）Ceph manager dashboard已由<a href="https://openattic.org/" target="_blank" rel="noopener">openATTIC</a> Ceph management tool新实现取代，提供了具有<a href="https://docs.ceph.com/docs/master/mgr/dashboard/#mgr-dashboard" target="_blank" rel="noopener">许多其他管理功能</a>。</li></ul></li><li><p>RADOS</p><ul><li>现在，配置选项可以由monitor集中存储和管理。</li><li>进行recovery或rebalancing操作时，monitor daemon占用的disk space大大减少。</li><li>当OSD从最近的故障中恢复时，异步恢复功能可减少请求的tail latency（少量响应的延迟高于均值，我们把这些响应称为尾延迟）。</li><li>scrub时OSD冲突请求抢占tail latency减少。</li></ul></li><li><p>RGW</p><ul><li>RGW可以将zone （或subset of buckets）复制到外部云存储服务（例如S3）。</li><li>RGW在versioned buckets功能上支持S3 multi-factor authentication API。<ul><li>AWS Multi-Factor Authentication（MFA）它在用户名和密码的基础上增加了一层额外的保护。启用MFA后，当用户登录AWS网站时，系统将提示他们输入用户名和密码以及来自其AWS MFA设备的身份验证代码。这些因素综合在一起，为您的AWS账户设置和资源提供了更高的安全性。</li></ul></li><li>版本控制是在相同的存储桶中保留对象的多个变量的方法。对于 Amazon S3 桶中存储的每个对象，您可以使用版本控制功能来保存、检索和还原它们的各个版本。使用版本控制能够轻松从用户意外操作和应用程序故障中恢复数据。</li><li>Beast frontend不再进行实验，被认为是稳定的并可以使用。</li></ul></li><li><p>CephFS</p><ul><li>Snapshots与多个MDS daemons结合使用时，现在稳定。</li></ul></li><li><p>RBD</p><ul><li>Image clones不再需要明确的protect和unprotect步骤。</li><li>可以将Images deep-copied（包括与parent image和associated snapshots的任何克隆链接）到新pool或修改data layouts。</li></ul></li><li><p>Misc</p><ul><li>由于在Stretch中缺少GCC 8，我们已删除了Mimic的Debian构建。我们希望Debian的构建将在2019年初发布Buster后回归，并希望在Buster可用后构建最终的Luminous发行版（以及以后的Mimic point发行版）。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AUTOSCALING PLACEMENT GROUPS</title>
      <link href="/2019/10/15/AUTOSCALING-PLACEMENT-GROUPS/"/>
      <url>/2019/10/15/AUTOSCALING-PLACEMENT-GROUPS/</url>
      
        <content type="html"><![CDATA[<h1 id="AUTOSCALING-PLACEMENT-GROUPS"><a href="#AUTOSCALING-PLACEMENT-GROUPS" class="headerlink" title="AUTOSCALING PLACEMENT GROUPS"></a>AUTOSCALING PLACEMENT GROUPS</h1><p>Placement groups (PGs)是ceph分布数据的内部实现。您可以通过启用pg-autoscaling允许根据集群的使用方式提出建议或自动调整PG。</p><p>系统中的每个pool都有一个pg_autoscale_mode属性，可以将其设置为off，on或warn。</p><ul><li><p>off: Disable该pool的autoscaling，<a href="https://docs.ceph.com/docs/master/rados/operations/placement-groups/#choosing-number-of-placement-groups" target="_blank" rel="noopener">Choosing the number of Placement Groups</a></p></li><li><p>on: 为指定的pool启用PG count自动调整。</p></li><li><p>warn: 当调整PG count时提出health alerts</p></li></ul><p>要为已有的pool设置autoscaling mode，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &lt;pool-name&gt; pg_autoscale_mode &lt;mode&gt;</span><br></pre></td></tr></table></figure><p>例如，要对池foo启用autoscaling，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set foo pg_autoscale_mode on</span><br></pre></td></tr></table></figure><p>您还可以使用以下命令配置默认pg_autoscale_mode，该默认pg_autoscale_mode应用于以后创建的任何pool：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph config set global osd_pool_default_pg_autoscale_mode &lt;mode&gt;</span><br></pre></td></tr></table></figure><h3 id="VIEWING-PG-SCALING-RECOMMENDATIONS"><a href="#VIEWING-PG-SCALING-RECOMMENDATIONS" class="headerlink" title="VIEWING PG SCALING RECOMMENDATIONS"></a>VIEWING PG SCALING RECOMMENDATIONS</h3><p>您可以使用以下命令查看每个pool，pool的相对利用率以及对PG count的任何建议更改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool autoscale-status</span><br></pre></td></tr></table></figure><p>输出将类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POOL                         SIZE  TARGET SIZE  RATE  RAW CAPACITY   RATIO  TARGET RATIO  BIAS  PG_NUM  NEW PG_NUM  AUTOSCALE </span><br><span class="line">cephfs_metadata             1540k                3.0        594.0G  0.0000                 4.0       8              warn      </span><br><span class="line">default.rgw.meta            1536k                3.0        594.0G  0.0000                 1.0       8              warn      </span><br><span class="line">cephfs_data                    0                 3.0        594.0G  0.0000                 1.0       8              warn      </span><br><span class="line">default.rgw.buckets.index      0                 3.0        594.0G  0.0000                 1.0       8              warn      </span><br><span class="line">default.rgw.control            0                 3.0        594.0G  0.0000                 1.0       8              warn      </span><br><span class="line">yujiang                        0        553.2G   1.0        594.0G  0.9313                 1.0     512              on        </span><br><span class="line">.rgw.root                   1344k                3.0        594.0G  0.0000                 1.0       8              warn      </span><br><span class="line">rbd                        576.0k                3.0        594.0G  0.0000                 1.0       4              on        </span><br><span class="line">default.rgw.log                0                 3.0        594.0G  0.0000                 1.0       8              warn</span><br></pre></td></tr></table></figure><p>SIZE是存储在pool中的数据量。TARGET SIZE（如果存在）是管理员希望最终存储在该pool中的数据量。系统使用两个值中的较大者进行计算。</p><p>RATE是pool的multiplier（乘数或倍数），它确定要消耗多少raw（原始） storage capacity。例如，3个副本池的比率为3.0，而k=4，m=2擦除编码池的比率为1.5。</p><p>RAW CAPACITY是OSD上负责存储该pool（可能还有其他pool）数据的raw storage capacity的总量。RATIO是该pool消耗的总容量的比率（即ratio = size * rate / raw capacity）。</p><p>TARGET RATIO（如果存在）是管理员指定他们希望该pool使用的存储空间的比率。系统使用actual ratio和target ratio中的较大者进行计算。 如果同时指定了target size bytes和ratio ，则ratio优先。</p><p>PG_NUM是该pool的当前PG数。系统认为应将pool的pg_num更改为NEW PG_NUM（如果存在）。它始终是2的幂，并且仅在“理想”值与当前值的差异大于3倍时才存在。</p><p>最后一列，AUTOSCALE，是pool pg_autoscale_mode，on, off或warn。</p><h3 id="AUTOMATED-SCALING"><a href="#AUTOMATED-SCALING" class="headerlink" title="AUTOMATED SCALING"></a>AUTOMATED SCALING</h3><p>最简单的方法是允许集群根据使用情况自动扩展PG。Ceph将查看可用的总存储量和整个系统的target PG数量，查看每个pool中存储了多少数据并尝试分配相应的PG。该系统的方法相对保守，只有当当前 PG （pg_num） 的数量比它认为的要小 3 倍以上时，才会对pool进行更改。</p><p>每个 OSD 的target PG 数基于可配置的 mon_target_pg_per_osd（默认值：100），可通过以下功能进行调整：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph config set global mon_target_pg_per_osd 100</span><br></pre></td></tr></table></figure><p>autoscaler根据每个per-subtree分析pool并进行调整。由于每个pool可能映射到不同的 CRUSH rule，并且每个rule可以跨不同的设备分发数据，所以Ceph将考虑独立使用层次结构的每个subtree。例如，映射到ssd类的OSD的pool和映射到hdd类的OSD的pool将分别具有最佳PG counts，具体取决于这些相应设备类型的数量。</p><h3 id="SPECIFYING-EXPECTED-POOL-SIZE（指定预期的pool大小）"><a href="#SPECIFYING-EXPECTED-POOL-SIZE（指定预期的pool大小）" class="headerlink" title="SPECIFYING EXPECTED POOL SIZE（指定预期的pool大小）"></a>SPECIFYING EXPECTED POOL SIZE（指定预期的pool大小）</h3><p>首次创建集群或pool时，它将占用集群总容量的一小部分，并在系统中显示只需要少量的placement groups。但是，在大多数情况下，集群管理员最好知道哪些pool会随着时间的推移消耗大部分系统容量。通过向ceph提供这些信息，可以从一开始就使用更适当数量的pg，从而防止pg-num中的后续更改以及在进行调整时与移动数据相关的开销。</p><p>pool的target size*可通过两种方式指定：按pool的绝对大小（即字节）或群集总容量的ratio（比率）指定。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set mypool target_size_bytes 100T</span><br></pre></td></tr></table></figure><p>会告诉系统mypool预计会占用100 TiB的空间。 或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set mypool target_size_ratio .9</span><br></pre></td></tr></table></figure><p>告诉系统mypool预计会消耗群集总容量的90％。</p><p>您还可以使用ceph osd pool create命令的可选<code>--target-size-bytes &lt;bytes&gt;</code>或<code>--target-size-ratio &lt;ratio&gt;</code>参数在创建时设置pool的target size。</p><p>请注意，如果指定了不可能的target size值（例如，容量大于整个群集的容量或ratio(s)之和大于1.0），则会引发health警告（POOL_TARET_SIZE_RATIO_OVERCOMMITTED或POOL_TARGET_SIZE_BYTES_OVERCOMMITTED）。<a href="https://www.mail-archive.com/ceph-users@lists.ceph.com/msg56416.html" target="_blank" rel="noopener">https://www.mail-archive.com/ceph-users@lists.ceph.com/msg56416.html</a></p><h3 id="SPECIFYING-BOUNDS-ON-A-POOL’S-PGS（在pool的PGS上指定界限）"><a href="#SPECIFYING-BOUNDS-ON-A-POOL’S-PGS（在pool的PGS上指定界限）" class="headerlink" title="SPECIFYING BOUNDS ON A POOL’S PGS（在pool的PGS上指定界限）"></a>SPECIFYING BOUNDS ON A POOL’S PGS（在pool的PGS上指定界限）</h3><p>也可以为一个pool指定最小数量的PG。设置下限可防止Ceph将PG编号减少（或建议减少）到配置的编号以下。</p><p>您可以使用以下方法设置pool的最小PG数量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &lt;pool-name&gt; pg_num_min &lt;num&gt;</span><br></pre></td></tr></table></figure><p>您还可以使用ceph osd pool create命令的可选<code>--pg-num-min &lt;num&gt;</code>参数指定创建pool时的最小PG count。</p><h1 id="A-PRESELECTION-OF-PG-NUM"><a href="#A-PRESELECTION-OF-PG-NUM" class="headerlink" title="A PRESELECTION OF PG_NUM"></a>A PRESELECTION OF PG_NUM</h1><p>使用以下方法创建新pool时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool create &#123;pool-name&#125; [pg_num]</span><br></pre></td></tr></table></figure><p>选择pg_num的值是可选的。 如果您未指定pg_num，则集群可以（默认情况下）根据pool中存储的数据为您自动对其进行调整（请参见上文， <a href="https://docs.ceph.com/docs/master/rados/operations/placement-groups/#pg-autoscaler" target="_blank" rel="noopener">Autoscaling placement groups</a>）。</p><p>或者，可以显式提供pg_num。 但是，是否指定pg_num值并不影响群集是否自动调整该值。 要启用或禁用自动调整，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;pool-name&#125; pg_autoscaler_mode (on|off|warn)</span><br></pre></td></tr></table></figure><p>传统上，每个OSD PG的”rule of thumb”为100。使用balancer的附加功能（默认情况下也启用的），每个OSD大约50 PG可能是合理的。autoscaler通常为您提供：</p><ul><li>使每个pool中的PG与pool中的数据成比例</li><li>考虑到每个PG在OSD上的replication或erasuring-coding，最终每个OSD会有50-100个PG</li></ul><h1 id="HOW-ARE-PLACEMENT-GROUPS-USED（如何使用PLACEMENT-GROUPS）"><a href="#HOW-ARE-PLACEMENT-GROUPS-USED（如何使用PLACEMENT-GROUPS）" class="headerlink" title="HOW ARE PLACEMENT GROUPS USED（如何使用PLACEMENT GROUPS）"></a>HOW ARE PLACEMENT GROUPS USED（如何使用PLACEMENT GROUPS）</h1><p>placement group (PG)聚集pool中的objects，因为以每个object为基础跟踪object placement和object metadata在计算上是昂贵的，即，具有数百万个object的系统无法实际以每个object为基础跟踪placement。</p><p><img src="https://docs.ceph.com/docs/master/_images/ditaa-1fde157d24b63e3b465d96eb6afea22078c85a90.png" alt></p><p>Ceph客户端将计算object应位于哪个placement group中。它通过hashing object ID并根据定义的pool中PG的数量和pool ID进行操作来实现此目的。有关详细信息，请参见 <a href="https://docs.ceph.com/docs/master/architecture#mapping-pgs-to-osds" target="_blank" rel="noopener">Mapping PGs to OSDs</a>。</p><p>placement group中object的内容存储在一组OSD中。 例如，在大小为2的replicated pool中，每个placement group将在两个OSD上存储objects，如下所示。</p><p><img src="https://docs.ceph.com/docs/master/_images/ditaa-3c86866fb6edc99dad6ccf51e25e536806f0b079.png" alt></p><p>如果OSD #2失败，则将另一个分配给Placement Group #1，并用OSD #1中所有objects的副本填充。 如果pool大小从2更改为3，则会将一个额外的OSD分配给该placement group，并将接收该placement group中所有objects的副本。</p><p>Placement groups不拥有OSD； 他们与同一资源pool甚至其他资源pool中的其他placement groups共享它。 如果OSD #2失败，则Placement Group #2还必须使用OSD #3恢复objects的副本。</p><p>当placement groups的数量增加时，将为新的placement groups分配OSD。CRUSH函数的结果也将更改，并且先前placement groups中的某些objects将被复制到新的placement groups中，并从旧的placement groups中删除。</p><h1 id="PLACEMENT-GROUPS-TRADEOFFS（权衡）"><a href="#PLACEMENT-GROUPS-TRADEOFFS（权衡）" class="headerlink" title="PLACEMENT GROUPS TRADEOFFS（权衡）"></a>PLACEMENT GROUPS TRADEOFFS（权衡）</h1><p>数据持久性以及所有OSD之间的均匀分配都需要更多的placement groups，但应将其数量减少到最少，以节省CPU和内存。</p><h3 id="DATA-DURABILITY（数据持久性）"><a href="#DATA-DURABILITY（数据持久性）" class="headerlink" title="DATA DURABILITY（数据持久性）"></a>DATA DURABILITY（数据持久性）</h3><p>OSD发生故障后，数据丢失的风险会增加，直到完全恢复其中包含的数据为止。 假设有一种情况会导致单个placement group中的数据永久丢失：</p><ul><li>OSD失败，并且它包含的object的所有副本均丢失。对于placement group中的所有objects，副本的数量突然从3个减少到2个。</li><li>Ceph通过选择一个新的OSD重新创建所有objects的第三个副本，开始对该placement group的恢复。</li><li>在同一placement group内的另一个OSD在新OSD完全填充第三份副本之前发生故障。 这样，某些objects将只有一个幸存副本。</li><li>Ceph选择了另一个OSD并保持复制objects以恢复所需的副本数。</li><li>在同一placement group中的第三个OSD在恢复完成之前发生故障。 如果此OSD包含object的唯一剩余副本，则它将永久丢失。</li></ul><p>在三个副本pool中包含10个OSD和512个placement groups的集群中，CRUSH将为每个placement groups提供三个OSD。 最后，每个OSD将托管(512 * 3) / 10 = ~150 Placement Groups。 当第一个OSD发生故障时，以上情况将同时启动所有150个placement groups的恢复。</p><p>恢复的150个placement groups可能均匀分布在剩余的9个OSD上。 因此，每个剩余的OSD可能会将objects的副本发送给所有其他objects，并且还可能会接收一些要存储的新objects，因为它们已成为新placement group的一部分。</p><p>完成恢复所需的时间完全取决于Ceph集群的架构。 假设每个OSD由一台机器上的1TB SSD托管，并且所有OSD都连接到10Gb/s交换机，并且单个OSD的恢复在M分钟内完成。 如果每台计算机使用不带SSD journal的spinners和1Gb/s交换机的两个OSD，则速度至少要慢一个数量级。</p><p>在这种大小的集群中，placement groups的数量几乎对数据持久性没有影响。 可能是128或8192，恢复速度不会变慢或变快。</p><p>但是，将相同的Ceph集群增加到20个OSD而不是10个OSD可能会加快恢复速度，从而显着提高数据的持久性。 现在，每个OSD只能参与约75个placement groups，而不是只有10个OSD时的约150个placement groups，并且仍然需要全部19个剩余OSD执行相同数量的object副本才能恢复。 但是，如果10个OSD必须每个复制大约100GB，则现在它们必须每个复制50GB。 如果网络是瓶颈，恢复将以两倍的速度进行。 换句话说，当OSD数量增加时，恢复速度会更快。</p><p>如果该群集增长到40个OSD，则每个OSD将仅托管约35个placement groups。 如果OSD死亡，则恢复将保持更快的速度，除非它被另一个瓶颈阻塞。 但是，如果该集群增长到200个OSD，则每个OSD将仅托管约7个placement groups。 如果OSD死亡，则将在这些placement groups中的最多约21 (7 * 3)个OSD之间进行恢复：恢复将比有40个OSD时花费的时间更长，这意味着应增加placement groups的数量。</p><p>无论恢复时间有多短，第二个OSD在进行过程中都有可能发生故障。 在上述10个OSD群集中，如果它们中的任何一个失败，则〜17个placement groups（即，正在恢复〜150/9个placement groups）将只有一个幸存副本。 并且如果剩余的8个OSD中的任何一个失败，则两个placement groups的最后一个objects很可能会丢失（即〜17/8个placement groups，仅恢复了一个剩余副本）。</p><p>当群集的大小增加到20个OSD时，丢失三个OSD损坏的Placement Groups的数量将减少。 第二个OSD丢失将降级〜4个（即恢复到约75个/ 19个Placement Groups），而不是〜17个，而第三个OSD丢失则仅在它是包含尚存副本的四个OSD之一时才丢失数据。 换句话说，如果在恢复时间范围内丢失一个OSD的概率为0.0001％，则它从具有10个OSD的群集中的17 * 10 * 0.0001％变为具有20个OSD的群集中的4 * 20 * 0.0001％。</p><p>简而言之，更多的OSD意味着恢复更快，较低的级联故障风险，从而导致Placement Group的永久丢失。 就数据持久性而言，在少于50个OSD的群集中，具有512或4096个Placement Group大致等效。</p><p>注意：向集群添加的新OSD可能需要很长时间才能分配有分配给它的placement groups。 但是，不会降低任何object的质量，也不会影响集群中包含的数据的持久性。</p><h3 id="OBJECT-DISTRIBUTION-WITHIN-A-POOL（pool内的object分布）"><a href="#OBJECT-DISTRIBUTION-WITHIN-A-POOL（pool内的object分布）" class="headerlink" title="OBJECT DISTRIBUTION WITHIN A POOL（pool内的object分布）"></a>OBJECT DISTRIBUTION WITHIN A POOL（pool内的object分布）</h3><p>理想情况下，object均匀地分布在每个placement group中。 由于CRUSH计算每个object的placement group，但实际上不知道该placement group内每个OSD中存储了多少数据，因此placement group数与OSD数之比可能会显着影响数据的分布。</p><p>例如，如果在三个副本pool中有一个用于十个OSD的placement group，则仅使用三个OSD，因为CRUSH别无选择。 当有更多的placement group可用时，object更有可能在其中均匀分布。 CRUSH还尽一切努力在所有现有的placement group中平均分配OSD。</p><p>只要Placement Groups比OSD多一个或两个数量级，则分布应该均匀。 例如，用于3个OSD的256个Placement Groups，用于10个OSD的512或1024个Placement Groups等。</p><p>数据分布不均可能是由OSD与placement groups之间的比率以外的因素引起的。 由于CRUSH未考虑object的大小，因此一些非常大的object可能会造成不平衡。 假设有100万个4K object（总计4GB）均匀分布在10个OSD的1024个placement groups中。 他们将在每个OSD上使用4GB / 10 = 400MB。 如果将一个400MB object添加到pool中，则支持放置object的placement groups的三个OSD将填充400MB + 400MB = 800MB，而其余七个将仅占据400MB。</p><h3 id="MEMORY-CPU-AND-NETWORK-USAGE（内存，CPU和网络使用情况）"><a href="#MEMORY-CPU-AND-NETWORK-USAGE（内存，CPU和网络使用情况）" class="headerlink" title="MEMORY, CPU AND NETWORK USAGE（内存，CPU和网络使用情况）"></a>MEMORY, CPU AND NETWORK USAGE（内存，CPU和网络使用情况）</h3><p>对于每个placement group，OSD和MON始终需要内存，网络和CPU，并且在恢复期间甚至更多。 通过对placement group内的object进行聚类objects来共享此开销是它们存在的主要原因之一。</p><p>最小化placement groups的数量可以节省大量资源。</p><h1 id="CHOOSING-THE-NUMBER-OF-PLACEMENT-GROUPS（选择PLACEMENT-GROUPS的数量）"><a href="#CHOOSING-THE-NUMBER-OF-PLACEMENT-GROUPS（选择PLACEMENT-GROUPS的数量）" class="headerlink" title="CHOOSING THE NUMBER OF PLACEMENT GROUPS（选择PLACEMENT GROUPS的数量）"></a>CHOOSING THE NUMBER OF PLACEMENT GROUPS（选择PLACEMENT GROUPS的数量）</h1><p>如果您有超过50个OSD，我们建议每个OSD大约有50-100个placement groups，以平衡资源使用，数据持久性和分发。 如果OSD少于50个，则最好在上述<a href="https://docs.ceph.com/docs/master/rados/operations/placement-groups/#preselection" target="_blank" rel="noopener">preselection</a>中进行选择。 对于单个objects pool，可以使用以下公式获取baseline：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">             (OSDs * 100)</span><br><span class="line">Total PGs =  ------------</span><br><span class="line">              pool size</span><br></pre></td></tr></table></figure><p>pool size是replicated pools的副本数或erasure coded pools的K + M总和（由ceph osd erasure-code-profile get返回）。</p><p>然后，您应该检查设计Ceph集群的方式，以最大程度地提高<a href="https://docs.ceph.com/docs/master/rados/operations/placement-groups/#data-durability" target="_blank" rel="noopener">数据持久性</a>，<a href="https://docs.ceph.com/docs/master/rados/operations/placement-groups/#object-distribution" target="_blank" rel="noopener">对象分配</a>并最小化<a href="https://docs.ceph.com/docs/master/rados/operations/placement-groups/#resource-usage" target="_blank" rel="noopener">资源使用</a>。</p><p>结果应始终四舍五入到最接近的2的幂。</p><p>只有2的幂可以平衡placement groups之间的objects数量。 其他值将导致OSD上的数据分布不均。</p><p>例如，对于具有200个OSD和3个副本的pool大小的集群，您可以按以下方式估计PG的数量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(200 * 100)</span><br><span class="line">----------- = 6667. Nearest power of 2: 8192</span><br><span class="line">     3</span><br></pre></td></tr></table></figure><p>当使用多个data pools存储objects时，需要确保在每个pool的placement groups数量与每个OSD的placement groups数量之间取得平衡，以便获得合理的placement groups总数，从而为每个OSD提供合理的低偏差而不会增加系统资源的负担或使对等进程太慢。</p><p>例如，一个10个pool的集群，每个pool在十个OSD上具有512个placement groups，则总共有5120个placement groups分布在十个OSD上，即每个OSD 512个placement groups。 那不会使用太多资源。 但是，如果创建了1000个pool，每个pool有512个placement groups，则OSD将分别处理约50,000个placement groups，这将需要更多的资源和时间来进行对等。</p><p>您可能会发现<a href="http://ceph.com/pgcalc/" target="_blank" rel="noopener">PGCalc</a>工具很有帮助。</p><h1 id="SET-THE-NUMBER-OF-PLACEMENT-GROUPS（设置PLACEMENT-GROUPS数）"><a href="#SET-THE-NUMBER-OF-PLACEMENT-GROUPS（设置PLACEMENT-GROUPS数）" class="headerlink" title="SET THE NUMBER OF PLACEMENT GROUPS（设置PLACEMENT GROUPS数）"></a>SET THE NUMBER OF PLACEMENT GROUPS（设置PLACEMENT GROUPS数）</h1><p>要设置pool中的placement groups数量，必须在创建pool时指定placement groups的数量。有关详细信息，请参见<a href="https://docs.ceph.com/docs/master/rados/operations/pools#createpool" target="_blank" rel="noopener">Create a Pool</a>。 即使在创建pool之后，您也可以使用以下方法更改placement groups的数量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;pool-name&#125; pg_num &#123;pg_num&#125;</span><br></pre></td></tr></table></figure><p>增加placement groups的数量之后，还必须增加placement（pgp_num）的数量，然后集群才能重新平衡。 pgp_num将是CRUSH算法考虑placement的placement groups的数量。 pg_num的增加会拆分placement groups，但是数据将不会迁移到较新的placement groups，直到placement的placement groups为止。 pgp_num增加了。 pgp_num应该等于pg_num。 要增加用于placement的placement groups的数量，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;pool-name&#125; pgp_num &#123;pgp_num&#125;</span><br></pre></td></tr></table></figure><p>当减少PG的数量时，将自动为您调整pgp_num。</p><h1 id="GET-THE-NUMBER-OF-PLACEMENT-GROUPS（获取PLACEMENT-GROUPS数）"><a href="#GET-THE-NUMBER-OF-PLACEMENT-GROUPS（获取PLACEMENT-GROUPS数）" class="headerlink" title="GET THE NUMBER OF PLACEMENT GROUPS（获取PLACEMENT GROUPS数）"></a>GET THE NUMBER OF PLACEMENT GROUPS（获取PLACEMENT GROUPS数）</h1><p>要获取pool中的placement groups数，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool get &#123;pool-name&#125; pg_num</span><br></pre></td></tr></table></figure><h1 id="GET-A-CLUSTER’S-PG-STATISTICS（获取集群的PG统计信息）"><a href="#GET-A-CLUSTER’S-PG-STATISTICS（获取集群的PG统计信息）" class="headerlink" title="GET A CLUSTER’S PG STATISTICS（获取集群的PG统计信息）"></a>GET A CLUSTER’S PG STATISTICS（获取集群的PG统计信息）</h1><p>要获取集群中placement groups的统计信息，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph pg dump [--format &#123;format&#125;]</span><br></pre></td></tr></table></figure><p>有效格式为plain（默认）和json。</p><h1 id="GET-STATISTICS-FOR-STUCK-PGS（获取STUCK-PGS的统计信息）"><a href="#GET-STATISTICS-FOR-STUCK-PGS（获取STUCK-PGS的统计信息）" class="headerlink" title="GET STATISTICS FOR STUCK PGS（获取STUCK PGS的统计信息）"></a>GET STATISTICS FOR STUCK PGS（获取STUCK PGS的统计信息）</h1><p>要获取所有处于指定状态的placement groups的统计信息，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph pg dump_stuck inactive|unclean|stale|undersized|degraded [--format &lt;format&gt;] [-t|--threshold &lt;seconds&gt;]</span><br></pre></td></tr></table></figure><p>Inactive Placement groups无法处理读写，因为它们正在等待OSD包含最新数据。</p><p>Unclean Placement groups包含的object未复制所需的次数。。 他们应该正在恢复。</p><p>Stale Placement groups处于未知状态—承载这些PG的OSD在一段时间内未向monitor报告（由mon_osd_report_timeout配置）。</p><p>有效格式为plain（默认）和json。 阈值定义placement group在将其包括在返回的统计信息之前卡住的最小秒数（默认为300秒）。</p><h1 id="GET-A-PG-MAP"><a href="#GET-A-PG-MAP" class="headerlink" title="GET A PG MAP"></a>GET A PG MAP</h1><p>要获取特placement group map，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph pg map &#123;pg-id&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph pg map 1.6c</span><br></pre></td></tr></table></figure><p>Ceph将返回placement group map，placement group和OSD状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osdmap e13 pg 1.6c (1.6c) -&gt; up [1,0] acting [1,0]</span><br></pre></td></tr></table></figure><h1 id="GET-A-PGS-STATISTICS（获取PGS统计信息）"><a href="#GET-A-PGS-STATISTICS（获取PGS统计信息）" class="headerlink" title="GET A PGS STATISTICS（获取PGS统计信息）"></a>GET A PGS STATISTICS（获取PGS统计信息）</h1><p>要检索特定placement group的统计信息，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph pg &#123;pg-id&#125; query</span><br></pre></td></tr></table></figure><h1 id="SCRUB-A-PLACEMENT-GROUP"><a href="#SCRUB-A-PLACEMENT-GROUP" class="headerlink" title="SCRUB A PLACEMENT GROUP"></a>SCRUB A PLACEMENT GROUP</h1><p>要scrub a placement group，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph pg scrub &#123;pg-id&#125;</span><br></pre></td></tr></table></figure><p>Ceph检查primary和任何replica nodes生成的placement group中所有objects的目录进行比较，以确保没有丢失或不匹配的objects，并且它们的内容一致。 假设所有副本都匹配，则扫描可确保所有与snapshot-related的object metadata都是一致的。 通过日志报告错误。</p><p>要清理特定pool中的所有placement groups，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool scrub &#123;pool-name&#125;</span><br></pre></td></tr></table></figure><h1 id="PRIORITIZE-BACKFILL-RECOVERY-OF-A-PLACEMENT-GROUP-S-（优先考虑PLACEMENT-GROUP的BACKFILL-RECOVERY）"><a href="#PRIORITIZE-BACKFILL-RECOVERY-OF-A-PLACEMENT-GROUP-S-（优先考虑PLACEMENT-GROUP的BACKFILL-RECOVERY）" class="headerlink" title="PRIORITIZE BACKFILL/RECOVERY OF A PLACEMENT GROUP(S)（优先考虑PLACEMENT GROUP的BACKFILL/RECOVERY）"></a>PRIORITIZE BACKFILL/RECOVERY OF A PLACEMENT GROUP(S)（优先考虑PLACEMENT GROUP的BACKFILL/RECOVERY）</h1><p>您可能会遇到这样的情况，即一堆placement groups需要recovery和/或backfill，并且某些特定的groups保存的数据比其他的更为重要（例如，那些PG可能保存正在运行的机器使用的images的数据，而其他PG可能由不活动的机器使用/较少的相关数据）。 在这种情况下，您可能希望优先考虑恢复这些groups，以便更早恢复存储在这些groups上的数据的性能和/或可用性。 为此（在backfill或recovery期间将特定的placement group(s)标记为优先），请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph pg force-recovery &#123;pg-id&#125; [&#123;pg-id #2&#125;] [&#123;pg-id #3&#125; ...]</span><br><span class="line">ceph pg force-backfill &#123;pg-id&#125; [&#123;pg-id #2&#125;] [&#123;pg-id #3&#125; ...]</span><br></pre></td></tr></table></figure><p>这将导致Ceph首先在其他placement groups之前对指定的placement groups执行recovery或backfill。 这不会中断当前正在进行的backfill或recovery，但会导致尽快处理指定的PG。 如果您改变主意或优先考虑wrong groups，请使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph pg cancel-force-recovery &#123;pg-id&#125; [&#123;pg-id #2&#125;] [&#123;pg-id #3&#125; ...]</span><br><span class="line">ceph pg cancel-force-backfill &#123;pg-id&#125; [&#123;pg-id #2&#125;] [&#123;pg-id #3&#125; ...]</span><br></pre></td></tr></table></figure><p>这将从这些PG中删除“force” flag，并将以默认顺序对其进行处理。 同样，这不会影响当前正在处理的placement groups，只会影响仍在排队的placement groups。</p><p>recovery或backfill group后，将自动清除“force” flag。</p><p>同样，您可以使用以下命令强制Ceph首先对指定pool中的所有placement groups执行recovery或backfill：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool force-recovery &#123;pool-name&#125;</span><br><span class="line">ceph osd pool force-backfill &#123;pool-name&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool cancel-force-recovery &#123;pool-name&#125;</span><br><span class="line">ceph osd pool cancel-force-backfill &#123;pool-name&#125;</span><br></pre></td></tr></table></figure><p>如果您改变主意，则可以恢复到默认的recovery或backfill优先级。</p><p>请注意，这些命令可能会破坏Ceph内部优先级计算的顺序，因此请谨慎使用！ 特别是，如果您有多个当前共享相同底层OSD的pool，并且某些特定pool中的数据比其他pool更重要，我们建议您使用以下命令以更好的顺序重新排列所有pool的recovery/backfill优先级：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;pool-name&#125; recovery_priority &#123;value&#125;</span><br></pre></td></tr></table></figure><p>例如，如果您有10个pool，则可以将最重要的一个优先级设置为10，下一个9，等等。或者您可以不理会大多数pool，而说3个重要的pool分别设置为优先级1或优先级3、2、1。</p><h1 id="REVERT-LOST（永不消失）"><a href="#REVERT-LOST（永不消失）" class="headerlink" title="REVERT LOST（永不消失）"></a>REVERT LOST（永不消失）</h1><p>如果集群丢失了一个或多个object，并且您决定放弃对丢失数据的搜索，则必须将unfound的object标记为lost。</p><p>如果已查询所有可能的位置并且仍然丢失了objects，则可能必须放弃丢失的objects。</p><p>当前唯一受支持的选项是“revert”，它可以回滚到该object的先前版本，或者（如果是新object）则完全忘记它。 要将“unfound”的object标记为“lost”，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph pg &#123;pg-id&#125; mark_unfound_lost revert|delete</span><br></pre></td></tr></table></figure><p>重要说明：请谨慎使用此功能，因为它可能会使期望object存在的应用程序感到困惑。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph 问题列表</title>
      <link href="/2019/10/14/ceph-%E9%97%AE%E9%A2%98%E5%88%97%E8%A1%A8/"/>
      <url>/2019/10/14/ceph-%E9%97%AE%E9%A2%98%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h1><h2 id="Ceph升级（L-to-N）引发的问题"><a href="#Ceph升级（L-to-N）引发的问题" class="headerlink" title="Ceph升级（L to N）引发的问题"></a>Ceph升级（L to N）引发的问题</h2><table><thead><tr><th>问题ID</th><th>1</th></tr></thead><tbody><tr><td>问题出现版本</td><td>pre-14.2.3</td></tr><tr><td>问题现象</td><td>…<br>POOLS:<br>    POOL                           ID      STORED      OBJECTS     USED        %USED     MAX AVAIL <br>    data                             0      63 TiB      44.59M      63 TiB     30.21        48 TiB <br>…<br>but when one OSD was updated it changed to<br>POOLS:<br>    POOL                           ID      STORED      OBJECTS     USED        %USED     MAX AVAIL <br>    data                             0     558 GiB      43.50M    <br>1.7 TiB      1.22        45 TiB</td></tr><tr><td>问题触发条件</td><td>1、从nautilus之前的集群进行了升级<br>2、然后，您提供一个或多个新的BlueStore OSD，或在升级的OSD上运行“ceph-bluestore-tool repair”。</td></tr><tr><td>问题原因</td><td>根本原因是，从Nautilus开始，BlueStore维护了每个池的使用情况统计信息，但是它需要对磁盘上的格式进行少量更改。<br>除非您运行ceph-bluestore-tool修复，否则升级后的OSD不会拥有新的统计信息。<br>问题在于，一旦* any * OSD报告了er-pool统计信息，mon就开始使用新的统计信息（而不是等到* all * OSD都在这样做）。</td></tr><tr><td>问题解决办法</td><td>为避免此问题，可以<br>1、升级后不要置备新的BlueStore OSD<br>2、更新所有OSD，以保留新的每个池统计信息。现有的BlueStore OSD可以通过以下方式转换：<br>     systemctl stop ceph-osd@$N<br>     ceph-bluestore-tool repair –path /var/lib/ceph/osd/ceph-$N<br>     systemctl start ceph-osd@$N<br>请注意，FileStore根本不支持新版每个池统计信息，因此，如果集群中有文FileStore OSD，则没有解决方法。无需将文件存储OSD替换为bluestore。<br>修复程序[1]正在通过QA检查，将在14.2.3中出现； 它不会在14.2.2完整发布。</td></tr><tr><td>ceph-users地址</td><td><a href="http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-July/035889.html" target="_blank" rel="noopener">http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-July/035889.html</a><br><a href="https://github.com/ceph/ceph/pull/28978" target="_blank" rel="noopener">https://github.com/ceph/ceph/pull/28978</a><br><a href="https://tracker.ceph.com/versions/574" target="_blank" rel="noopener">https://tracker.ceph.com/versions/574</a></td></tr><tr><td>备注</td><td></td></tr><tr><td>实践修复</td><td></td></tr><tr><td>问题修复版本（社区计划）</td><td>14.2.3</td></tr></tbody></table><table><thead><tr><th>问题ID</th><th>2</th></tr></thead><tbody><tr><td>问题出现版本</td><td>14.2.2</td></tr><tr><td>问题现象</td><td>Legacy BlueStore stats reporting detected on 6 OSD(s)</td></tr><tr><td>问题触发条件</td><td>1、从nautilus之前的集群进行了升级</td></tr><tr><td>问题原因</td><td></td></tr><tr><td>问题解决办法</td><td>systemctl stop ceph-osd@$OSDID<br>ceph-bluestore-tool repair –path /var/lib/ceph/osd/ceph-$OSDID<br>systemctl start ceph-osd@$OSDID</td></tr><tr><td>ceph-users地址</td><td><a href="http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-July/036010.html" target="_blank" rel="noopener">http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-July/036010.html</a></td></tr><tr><td>备注</td><td>可以静默告警 bluestore warn on legacy statfs = false</td></tr><tr><td>实践修复</td><td>[root@ceph1 ~]# systemctl stop <a href="mailto:ceph-osd@1.service" target="_blank" rel="noopener">ceph-osd@1.service</a><br>[root@ceph1 ~]# ceph-bluestore-tool repair –path /var/lib/ceph/osd/ceph-1/<br>2019-10-14 15:39:53.940 7f87c8114f80 -1 bluestore(/var/lib/ceph/osd/ceph-1) fsck error: legacy statfs record found, removing<br>2019-10-14 15:39:53.940 7f87c8114f80 -1 bluestore(/var/lib/ceph/osd/ceph-1) fsck error: missing Pool StatFS record for pool 2<br>2019-10-14 15:39:53.940 7f87c8114f80 -1 bluestore(/var/lib/ceph/osd/ceph-1) fsck error: missing Pool StatFS record for pool ffffffffffffffff<br>repair success<br>[root@ceph1 ~]# systemctl start <a href="mailto:ceph-osd@1.service" target="_blank" rel="noopener">ceph-osd@1.service</a></td></tr><tr><td>问题修复版本（社区计划）</td><td></td></tr></tbody></table><table><thead><tr><th>问题ID</th><th>3</th></tr></thead><tbody><tr><td>问题出现版本</td><td>14.2.2</td></tr><tr><td>问题现象</td><td>Legacy BlueStore stats reporting detected on 6 OSD(s)</td></tr><tr><td>问题触发条件</td><td>1、从nautilus之前的集群进行了升级</td></tr><tr><td>问题原因</td><td></td></tr><tr><td>问题解决办法</td><td>systemctl stop ceph-osd@$OSDID<br>ceph-bluestore-tool repair –path /var/lib/ceph/osd/ceph-$OSDID<br>systemctl start ceph-osd@$OSDID</td></tr><tr><td>ceph-users地址</td><td><a href="http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-July/036002.html" target="_blank" rel="noopener">http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-July/036002.html</a></td></tr><tr><td>备注</td><td>可以静默告警 bluestore warn on legacy statfs = false</td></tr><tr><td>实践修复</td><td></td></tr><tr><td>问题修复版本（社区计划）</td><td></td></tr></tbody></table><table><thead><tr><th>问题ID</th><th>4</th></tr></thead><tbody><tr><td>问题出现版本</td><td>14.2.4</td></tr><tr><td>问题现象</td><td>3 monitors have not enabled msgr2告警</td></tr><tr><td>问题触发条件</td><td>1、从nautilus之前的集群进行了升级</td></tr><tr><td>问题原因</td><td>messenger v2 protocol（msgr2）是Ceph’s on-wire protocol第二次主要修订。</td></tr><tr><td>问题解决办法</td><td>ceph mon enable-msgr2<br>systemctl restart <a href="mailto:ceph-mon@ceph1.service" target="_blank" rel="noopener">ceph-mon@ceph1.service</a></td></tr><tr><td>ceph-users地址</td><td></td></tr><tr><td>备注</td><td></td></tr><tr><td>实践修复</td><td>ceph mon enable-msgr2<br>systemctl restart <a href="mailto:ceph-mon@ceph1.service" target="_blank" rel="noopener">ceph-mon@ceph1.service</a></td></tr><tr><td>问题修复版本（社区计划）</td><td></td></tr></tbody></table><table><thead><tr><th>问题ID</th><th>5</th></tr></thead><tbody><tr><td>问题出现版本</td><td></td></tr><tr><td>问题现象</td><td></td></tr><tr><td>问题触发条件</td><td></td></tr><tr><td>问题原因</td><td></td></tr><tr><td>问题解决办法</td><td></td></tr><tr><td>ceph-users地址</td><td></td></tr><tr><td>备注</td><td></td></tr><tr><td>实践修复</td><td></td></tr><tr><td>问题修复版本（社区计划）</td><td></td></tr></tbody></table><table><thead><tr><th>问题ID</th><th></th></tr></thead><tbody><tr><td>问题出现版本</td><td></td></tr><tr><td>问题现象</td><td></td></tr><tr><td>问题触发条件</td><td></td></tr><tr><td>问题原因</td><td></td></tr><tr><td>问题解决办法</td><td></td></tr><tr><td>ceph-users地址</td><td></td></tr><tr><td>备注</td><td></td></tr><tr><td>实践修复</td><td></td></tr><tr><td>问题修复版本（社区计划）</td><td></td></tr></tbody></table><table><thead><tr><th>问题ID</th><th></th></tr></thead><tbody><tr><td>问题出现版本</td><td></td></tr><tr><td>问题现象</td><td></td></tr><tr><td>问题触发条件</td><td></td></tr><tr><td>问题原因</td><td></td></tr><tr><td>问题解决办法</td><td></td></tr><tr><td>ceph-users地址</td><td></td></tr><tr><td>备注</td><td></td></tr><tr><td>实践修复</td><td></td></tr><tr><td>问题修复版本（社区计划）</td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ceph MESSENGER V2</title>
      <link href="/2019/10/14/Ceph-MESSENGER-V2/"/>
      <url>/2019/10/14/Ceph-MESSENGER-V2/</url>
      
        <content type="html"><![CDATA[<h1 id="WHAT-IS-IT"><a href="#WHAT-IS-IT" class="headerlink" title="WHAT IS IT"></a>WHAT IS IT</h1><p>messenger v2 protocol（msgr2）是Ceph’s on-wire protocol第二次主要修订。它具有几个关键功能：</p><ul><li>安全模式，对通过网络传递的所有数据进行加密</li><li>改进了authentication payloads的封装，未来可以集成新的authentication模式（例如Kerberos）</li><li>改进了早期的advertisement和negotiation（协商）功能，支持未来的protocol（协议）修订</li></ul><p>Ceph daemons现在可以绑定到多个端口，从而允许旧版Ceph客户端和支持v2的新客户端连接到同一集群。</p><p>默认情况下，monitors现在绑定到新的v2协议的新IANA分配端口3300（ce4h或0xce4），同时还绑定到旧的默认端口6789（旧的v1协议）。</p><h1 id="ADDRESS-FORMATS"><a href="#ADDRESS-FORMATS" class="headerlink" title="ADDRESS FORMATS"></a>ADDRESS FORMATS</h1><p>在nautilus之前，所有网络地址都呈现为1.2.3.4:567/89012，其中有一个IP地址，一个端口和一个随机数，以唯一地标识网络上的客户端或daemon 。 从nautilus开始，我们现在具有三种不同的地址类型：</p><ul><li><p>v2：<code>v2:1.2.3.4:578/89012</code>标识daemon绑定到新v2协议的端口</p></li><li><p>v1：<code>v1:1.2.3.4:578/89012</code>标识绑定到旧版v1协议的端口的daemon。 以前使用任何前缀显示的任何地址现在都显示为v1: address。</p></li><li><p>TYPE_ANY地址标识表示客户端可以支持两种协议版本。 在nautilus之前，客户端将显示为<code>1.2.3.4:0/123456</code>，其中端口0表示它们是客户端，并且不接受连接。 从Nautilus开始，这些客户端现在在内部由TYPE_ANY address表示，并且仍显示为不带前缀，因为它们可能会使用v2或v1协议连接到daemons，具体取决于daemons使用的协议。</p></li></ul><p>因为daemons现在绑定到多个端口，所以现在用地址向量而不是单个地址来描述它们。 例如，在Nautilus cluster上dump monitor map会有如下输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph1 ~]# ceph mon dump</span><br><span class="line">epoch 1</span><br><span class="line">fsid 50fcf227-be32-4bcb-8b41-34ca8370bd16</span><br><span class="line">last_changed 2019-02-25 11:10:46.700821</span><br><span class="line">created 2019-02-25 11:10:46.700821</span><br><span class="line">min_mon_release 14 (nautilus)</span><br><span class="line">0: [v2:10.0.0.10:3300/0,v1:10.0.0.10:6789/0] mon.foo</span><br><span class="line">1: [v2:10.0.0.11:3300/0,v1:10.0.0.11:6789/0] mon.bar</span><br><span class="line">2: [v2:10.0.0.12:3300/0,v1:10.0.0.12:6789/0] mon.baz</span><br></pre></td></tr></table></figure><p>方括号或地址向量表示可以在多个端口（和协议）上访问同一daemon。如果可能，任何连接到该daemon的客户端或其他daemon都将使用v2协议（listed first）； 否则，它将返回到旧版v1协议。 旧版客户端将仅看到v1地址，并且将继续使用v1协议进行连接。</p><p>从Nautilus开始，mon_host配置选项和<code>-m &lt;mon-host&gt;</code>命令行选项支持相同的带括号的地址向量语法。</p><h2 id="BIND-CONFIGURATION-OPTIONS"><a href="#BIND-CONFIGURATION-OPTIONS" class="headerlink" title="BIND CONFIGURATION OPTIONS"></a>BIND CONFIGURATION OPTIONS</h2><p>两个新的配置选项控制是否使用v1 and/or v2协议：</p><ul><li>ms_bind_msgr1 [default: true]控制daemon是否绑定到使用v1协议的端口</li><li>ms_bind_msgr2 [default: true]控制daemon是否绑定到使用v2协议的端口</li></ul><p>同样，两个选项控制是否使用IPv4和IPv6地址：</p><ul><li>ms_bind_ipv4 [默认值：true]控制daemon是否绑定到IPv4地址</li><li>ms_bind_ipv6 [默认值：false]控制daemon是否绑定到IPv6地址</li></ul><h1 id="CONNECTION-MODES"><a href="#CONNECTION-MODES" class="headerlink" title="CONNECTION MODES"></a>CONNECTION MODES</h1><p>v2协议支持两种连接模式：</p><ul><li><p>crc模式提供：</p><ul><li>建立连接时进行强大的初始身份验证（通过cephx，双方相互认证，防止中间人或窃听者进入）</li><li>CRC32C完整性检查，以防止由于flaky hardware或cosmic rays引起的位翻转</li></ul><p>crc模式不提供：</p><ul><li>加密（网络上的窃听者可以看到所有经过身份验证后的流量）</li><li>免受恶意中间人的攻击（只要他们调整crc32c的值以使其匹配，就可以故意修改流量）</li></ul></li><li><p>secure模式提供：</p><ul><li>建立连接时进行强大的初始身份验证（通过cephx，双方相互认证，防止中间人或窃听者进入）</li><li>对所有认证后流量完全加密，包括加密完整性检查。</li></ul><p>在Nautilus中，secure模式使用<a href="https://en.wikipedia.org/wiki/Galois/Counter_Mode" target="_blank" rel="noopener">AES-GCM</a> stream cipher，这在现代处理器上通常非常快（例如，比SHA-256 cryptographic hash更快）。</p></li></ul><h2 id="CONNECTION-MODE-CONFIGURATION-OPTIONS"><a href="#CONNECTION-MODE-CONFIGURATION-OPTIONS" class="headerlink" title="CONNECTION MODE CONFIGURATION OPTIONS"></a>CONNECTION MODE CONFIGURATION OPTIONS</h2><p>对于大多数连接，有一些选项可以控制使用哪种模式：</p><ul><li>ms_cluster_mode用于Ceph daemons之间的集群内通信的连接模式（或允许的模式）。 如果列出了多个模式，则首选第一个列出的模式。</li><li>ms_service_mode是客户端连接到群集时允许使用的模式的列表。</li><li>ms_client_mode是按优先顺序排列的连接模式列表，供客户端在与Ceph群集通信时使用（或允许）。</li></ul><p>有一组并行的选项专门适用于monitors，允许管理员设置与monitors通信的不同（通常更安全）要求。</p><ul><li>ms_mon_cluster_mode是monitors之间使用的连接模式（或允许的模式）。</li><li>ms_mon_service_mode是客户端或其他Ceph daemons连接到monitors时允许使用的模式的列表。</li><li>ms_mon_client_mode是按优先顺序排列的连接模式列表，供客户端或non-monitor daemons在连接monitors时使用。</li></ul><h1 id="TRANSITIONING-FROM-V1-ONLY-TO-V2-PLUS-V1"><a href="#TRANSITIONING-FROM-V1-ONLY-TO-V2-PLUS-V1" class="headerlink" title="TRANSITIONING FROM V1-ONLY TO V2-PLUS-V1"></a>TRANSITIONING FROM V1-ONLY TO V2-PLUS-V1</h1><p>默认情况下，从Nautilus 14.2.z开始，ms_bind_msgr2为true。 但是，在monitors开始使用v2之前，只有有限的服务可以使用v2地址。</p><p>对于大多数用户，monitors已绑定到v1协议的默认旧版端口6789。 在这种情况下，启用v2非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph mon enable-msgr2</span><br></pre></td></tr></table></figure><p>如果monitors绑定到non-standard端口，则需要为v2明确指定其端口。例如，如果monitors mon.a绑定到1.2.3.4:1111，并且您想要在端口1112上添加v2，则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph mon set-addrs a [v2:1.2.3.4:1112,v1:1.2.3.4:1111]</span><br></pre></td></tr></table></figure><p>monitors绑定到v2后，每个daemon将在下一次重新启动时开始使用v2地址。</p><h1 id="UPDATING-CEPH-CONF-AND-MON-HOST"><a href="#UPDATING-CEPH-CONF-AND-MON-HOST" class="headerlink" title="UPDATING CEPH.CONF AND MON_HOST"></a>UPDATING CEPH.CONF AND MON_HOST</h1><p>在Nautilus之前，CLI用户或daemon通常将通过/etc/ceph/ceph.conf中的mon_host选项发现monitors。 此选项的语法从Nautilus开始扩展，以允许支持新的方括号列表格式。 例如，像这样的旧行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mon_host = 10.0.0.1:6789,10.0.0.2:6789,10.0.0.3:6789</span><br></pre></td></tr></table></figure><p>可以更改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mon_host = [v2:10.0.0.1:3300/0,v1:10.0.0.1:6789/0],[v2:10.0.0.2:3300/0,v1:10.0.0.2:6789/0],[v2:10.0.0.3:3300/0,v1:10.0.0.3:6789/0]</span><br></pre></td></tr></table></figure><p>但是，使用默认端口（3300和6789）时，可以将其省略：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mon_host = 10.0.0.1,10.0.0.2,10.0.0.3</span><br></pre></td></tr></table></figure><p>一旦在monitors上启用了v2，可能需要更新ceph.conf以不指定任何端口（这通常是最简单的），或者显式指定v2和v1地址。 但是请注意，Nautilus和更高版本才能理解新的带括号语法，因此请不要在尚未升级其ceph packages的主机上进行此更改。</p><p>当更新ceph.conf时，请注意新的<code>ceph config generate-minimal-conf</code>命令（它生成一个简单的配置文件，其中包含足够的信息来访问monitors）而<code>ceph config assimilate-conf</code>（将配置文件选项移动到monitors’配置数据库中）可能会有所帮助。 例如，：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># ceph config assimilate-conf &lt; /etc/ceph/ceph.conf</span><br><span class="line"># ceph config generate-minimal-config &gt; /etc/ceph/ceph.conf.new</span><br><span class="line"># cat /etc/ceph/ceph.conf.new</span><br><span class="line"># minimal ceph.conf for 0e5a806b-0ce5-4bc6-b949-aa6f68f5c2a3</span><br><span class="line">[global]</span><br><span class="line">        fsid = 0e5a806b-0ce5-4bc6-b949-aa6f68f5c2a3</span><br><span class="line">        mon_host = [v2:10.0.0.1:3300/0,v1:10.0.0.1:6789/0]</span><br><span class="line"># mv /etc/ceph/ceph.conf.new /etc/ceph/ceph.conf</span><br></pre></td></tr></table></figure><h1 id="PROTOCOL"><a href="#PROTOCOL" class="headerlink" title="PROTOCOL"></a>PROTOCOL</h1><p>有关v2 wire protocol的详细说明，请参见<a href="https://docs.ceph.com/docs/nautilus/dev/msgr2/#msgr2-protocol" target="_blank" rel="noopener">msgr2 protocol</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UPGRADING CEPH</title>
      <link href="/2019/10/12/UPGRADING-CEPH/"/>
      <url>/2019/10/12/UPGRADING-CEPH/</url>
      
        <content type="html"><![CDATA[<h1 id="SUMMARY"><a href="#SUMMARY" class="headerlink" title="SUMMARY"></a>SUMMARY</h1><p>您可以在群集处于online并in service状态时升级Ceph群集中的daemons！某些类型的daemons依赖于其他daemon。例如，Ceph<br>Metadata Servers和Ceph Object Gateways依赖于Ceph<br>Monitors和Ceph OSD Daemons。我们建议按以下顺序升级：</p><p>1、Ceph Deploy</p><p>2、Ceph Monitors</p><p>3、Ceph OSD Daemons</p><p>4、Ceph Metadata Servers</p><p>5、Ceph Object Gateways</p><p>通常，我们建议升级所有daemons以确保它们都在同一版本上（例如，所有ceph-mon daemons，所有ceph-osd daemons等）。我们还建议您先升级集群中的所有daemons，然后再尝试使用新功能。</p><p><a href="https://docs.ceph.com/docs/master/install/upgrading-ceph/#upgrade-procedures" target="_blank" rel="noopener">Upgrade Procedures</a>比较简单，在升级之前需要查看<a href="https://docs.ceph.com/docs/master/releases" target="_blank" rel="noopener">release notes document of your release</a>。基础过程包括三个步骤：</p><p>1、 在admin节点上使用ceph-deploy为多个host升级packages（使用ceph-deploy install命令），或者登陆到每个host使用package manager升级Ceph package。例如，在升级Monitors时，ceph-deploy语法可能如下所示： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ceph-deploy install --release &#123;release-name&#125; ceph-node1[ ceph-node2]</span><br><span class="line"></span><br><span class="line">ceph-deploy install --release firefly mon1 mon2 mon3</span><br></pre></td></tr></table></figure><p>注意：ceph-deploy install命令会将指定节点中的packages从旧版本升级到你指定的版本。（该工具不存在ceph-deploy upgrade命令）</p><p>2、 登陆到每个Ceph节点，然后重新启动每个Ceph daemon，有关详细信息，请参见<a href="https://docs.ceph.com/docs/master/rados/operations/operating" target="_blank" rel="noopener">Operating a Cluster</a>。</p><p>3、 确保您的群集healthy。有关详细信息，请参见<a href="https://docs.ceph.com/docs/master/rados/operations/monitoring" target="_blank" rel="noopener">Monitoring a Cluster</a>。</p><p><code>重要说明：升级daemon后，将无法降级。</code></p><h1 id="CEPH-DEPLOY"><a href="#CEPH-DEPLOY" class="headerlink" title="CEPH DEPLOY"></a>CEPH DEPLOY</h1><p>在升级Ceph daemons之前，先升级ceph-deploy工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install -U ceph-deploy</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ceph-deploy</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install ceph-deploy python-pushy</span><br></pre></td></tr></table></figure><h1 id="UPGRADE-PROCEDURES"><a href="#UPGRADE-PROCEDURES" class="headerlink" title="UPGRADE PROCEDURES"></a>UPGRADE PROCEDURES</h1><p>以下各节描述了升级过程。</p><p>重要说明：每个Ceph版本可能都有一些其他步骤。在开始升级daemons之前，请详细阅读<a href="https://docs.ceph.com/docs/master/releases" target="_blank" rel="noopener">release notes document of your release</a>。</p><h2 id="UPGRADING-MONITORS"><a href="#UPGRADING-MONITORS" class="headerlink" title="UPGRADING MONITORS"></a>UPGRADING MONITORS</h2><p>要升级monitors，执行以下步骤：</p><p>1、为每个daemon instance升级Ceph package。</p><p>可以使用ceph-deploy一次指定所有的monitor节点。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph-deploy install --release &#123;release-name&#125; ceph-node1[ ceph-node2]</span><br><span class="line">ceph-deploy install --release hammer mon1 mon2 mon3</span><br></pre></td></tr></table></figure><p>你也可以在每个节点上使用<a href="https://docs.ceph.com/docs/master/install/install-storage-cluster/" target="_blank" rel="noopener">distro’s package manager</a>。对于Debian/Ubuntu，在每个主机上执行以下步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;osd-host&#125;</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install ceph</span><br></pre></td></tr></table></figure><p>对于CentOS/Red Hat，执行以下步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;osd-host&#125;</span><br><span class="line">sudo yum update &amp;&amp; sudo yum install ceph</span><br></pre></td></tr></table></figure><p>2、重新启动每个monitor，对于Ubuntu</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo restart ceph-mon id=&#123;hostname&#125;</span><br></pre></td></tr></table></figure><p>对于CentOS/Red Hat/Debian，使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ceph restart &#123;mon-id&#125;</span><br></pre></td></tr></table></figure><p>对于CentOS/Red Hat通过ceph-deploy部署的集群，monitor ID通常为mon.{hostname}。</p><p>3、确保每个monitor都重新quorum</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph mon stat</span><br></pre></td></tr></table></figure><p>确保你已完成所有Ceph Monitor的升级步骤。</p><h2 id="UPGRADING-AN-OSD"><a href="#UPGRADING-AN-OSD" class="headerlink" title="UPGRADING AN OSD"></a>UPGRADING AN OSD</h2><p>要升级Ceph OSD Daemon，请执行以下步骤：</p><p>1、 升级Ceph OSD Daemon package。</p><p>可以使用ceph-deploy一次指定所有的monitor节点。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph-deploy install --release &#123;release-name&#125; ceph-node1[ ceph-node2]</span><br><span class="line">ceph-deploy install --release hammer osd1 osd2 osd3</span><br></pre></td></tr></table></figure><p>你也可以在每个节点上使用<a href="https://docs.ceph.com/docs/master/install/install-storage-cluster/" target="_blank" rel="noopener">distro’s package manager</a>。对于Debian/Ubuntu，在每个主机上执行以下步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;osd-host&#125;</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install ceph</span><br></pre></td></tr></table></figure><p>对于CentOS / Red Hat，执行以下步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;osd-host&#125;</span><br><span class="line">sudo yum update &amp;&amp; sudo yum install ceph</span><br></pre></td></tr></table></figure><p>2、重新启动OSD，其中N是OSD number。对于Ubuntu，请使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo restart ceph-osd id=N</span><br></pre></td></tr></table></figure><p>对于主机上的多个OSD，可以使用Upstart重新启动所有OSD。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo restart ceph-osd-all</span><br></pre></td></tr></table></figure><p>对于CentOS/Red Hat/Debian，使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ceph restart N</span><br></pre></td></tr></table></figure><p>3、确保每个升级的Ceph OSD Daemon都已重新加入集群：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd stat</span><br></pre></td></tr></table></figure><p>确保你已完成所有Ceph OSD Daemons的升级步骤。</p><h2 id="UPGRADING-A-METADATA-SERVER"><a href="#UPGRADING-A-METADATA-SERVER" class="headerlink" title="UPGRADING A METADATA SERVER"></a>UPGRADING A METADATA SERVER</h2><p>要升级Ceph Metadata Server，请执行以下步骤：</p><p>1、升级Ceph Metadata Server package。可以使用ceph-deploy一次指定所有的Ceph Metadata Server节点，或在每个节点上使用package manager。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph-deploy install --release &#123;release-name&#125; ceph-node1</span><br><span class="line">ceph-deploy install --release hammer mds1</span><br></pre></td></tr></table></figure><p>要手动升级packages，请在每个Debian/Ubuntu节点上执行以下步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;mon-host&#125;</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install ceph-mds</span><br></pre></td></tr></table></figure><p>或在CentOS/Red Hat节点上执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;mon-host&#125;</span><br><span class="line">sudo yum update &amp;&amp; sudo yum install ceph-mds</span><br></pre></td></tr></table></figure><p>2、重新启动metadata server。对于Ubuntu，请使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo restart ceph-mds id=&#123;hostname&#125;</span><br></pre></td></tr></table></figure><p>对于CentOS/Red Hat/Debian，使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ceph restart mds.&#123;hostname&#125;</span><br></pre></td></tr></table></figure><p>对于使用ceph-deploy部署的集群，name通常是您在创建时指定的name或hostname。</p><p>3、确保metadata server已启动并正在运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph mds stat</span><br></pre></td></tr></table></figure><h2 id="UPGRADING-A-CLIENT"><a href="#UPGRADING-A-CLIENT" class="headerlink" title="UPGRADING A CLIENT"></a>UPGRADING A CLIENT</h2><p>升级packages并在Ceph集群上重新启动daemons后，我们建议您也升级client节点上的ceph-common和client libraries（librbd1和librados2）。</p><p>1、 升级package。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;client-host&#125;</span><br><span class="line">apt-get update &amp;&amp; sudo apt-get install ceph-common librados2 librbd1 python-rados python-rbd</span><br></pre></td></tr></table></figure><p>2、确保已升级为新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph --version</span><br></pre></td></tr></table></figure><p>如果没有升级为最新版本，则需要卸载，auto remove dependencies并重新安装。</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="升级Ceph服务端package"><a href="#升级Ceph服务端package" class="headerlink" title="升级Ceph服务端package"></a>升级Ceph服务端package</h2><h3 id="升级可能带来的影响"><a href="#升级可能带来的影响" class="headerlink" title="升级可能带来的影响"></a>升级可能带来的影响</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）服务端升级可能会影响客户业务，导致业务中断一定时间。如果cephfs或rgw前端有流量（install ceph package时会自动停掉mds与rgw service），请先将升级节点流量先转向其他节点。</span><br><span class="line">（2）如果容器中有ceph client packages，同样需要逐一转走流量，再升级</span><br></pre></td></tr></table></figure><p><a href="https://docs.ceph.com/docs/master/releases/nautilus/" target="_blank" rel="noopener">原文</a></p><h3 id="UPGRADING-FROM-PRE-LUMINOUS-RELEASES-LIKE-JEWEL"><a href="#UPGRADING-FROM-PRE-LUMINOUS-RELEASES-LIKE-JEWEL" class="headerlink" title="UPGRADING FROM PRE-LUMINOUS RELEASES (LIKE JEWEL)"></a>UPGRADING FROM PRE-LUMINOUS RELEASES (LIKE JEWEL)</h3><p>您必须先升级到Luminous（12.2.z），然后再尝试升级到Nautilus。 另外，您的集群必须在运行Luminous的同时至少完成了所有PG的一次scrub，并在OSD map中设置了recovery_deletes和purged_snapdirs标志。</p><h3 id="UPGRADING-FROM-MIMIC-OR-LUMINOUS"><a href="#UPGRADING-FROM-MIMIC-OR-LUMINOUS" class="headerlink" title="UPGRADING FROM MIMIC OR LUMINOUS"></a>UPGRADING FROM MIMIC OR LUMINOUS</h3><p><strong>NOTES</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在从Luminous升级到Nautilus的过程中，将monitors升级到Nautilus后，将无法使用Luminous ceph-osd daemon创建新的OSD。我们建议您避免在升级过程中添加或替换任何OSD。</span><br><span class="line">我们建议您避免在升级过程中创建任何RADOS pools。</span><br><span class="line">您可以使用ceph version(s)命令在每个阶段监视升级进度，该命令将告诉您每种daemon正在运行的ceph版本。</span><br></pre></td></tr></table></figure><h3 id="UPGRADE-COMPATIBILITY-NOTES（升级兼容性说明）"><a href="#UPGRADE-COMPATIBILITY-NOTES（升级兼容性说明）" class="headerlink" title="UPGRADE COMPATIBILITY NOTES（升级兼容性说明）"></a>UPGRADE COMPATIBILITY NOTES（升级兼容性说明）</h3><p>这些更改发生在Mimic和Nautilus版本之间。</p><ul><li><p>ceph pg stat输出已修改为json格式，以匹配ceph df输出：</p><ul><li>“raw_bytes” field renamed to “total_bytes”</li><li>“raw_bytes_avail” field renamed to “total_bytes_avail”</li><li>“raw_bytes_avail” field renamed to “total_bytes_avail”</li><li>“raw_bytes_used” field renamed to “total_bytes_raw_used”</li><li>添加了“total_bytes_used” field 来表示分配给block(slow) device上data objects的（所有OSD）空间</li></ul></li><li><p>ceph df [detail]输出（GLOBAL section）格式进行了修改：</p><ul><li>新的‘USED’ column显示了分配给block(slow) device上data objects的（所有OSD）空间</li><li>现在，‘RAW USED’ 是‘USED’空间与为Ceph目的在块设备上分配/保留的空间之和。BlueStore的BlueFS部分。</li></ul></li></ul><h3 id="INSTRUCTIONS（使用说明）"><a href="#INSTRUCTIONS（使用说明）" class="headerlink" title="INSTRUCTIONS（使用说明）"></a>INSTRUCTIONS（使用说明）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">1、如果您的集群最初安装的是Luminous之前的版本，请确保在运行Luminous时集群已完成对所有PG的至少一次完整scrub。否则，将导致您的monitor daemons在启动时拒绝加入quorum，从而使其无法运行。如果不确定Luminous集群是否已完成所有PG的完全scrub，则可以通过运行以下命令检查集群的状态：</span><br><span class="line">ceph osd dump | grep ^flags(OSD map必须包含recovery_deletes和purged_snapdirs标志)</span><br><span class="line"></span><br><span class="line">如果您的OSD map不包含这两个标志，则只需等待大约24-48小时，在标准群集配置中，应该有充足的时间，以便至少一次scrub所有placement groups，然后重复上述过程 重新检查。</span><br><span class="line">如果您刚刚完成了对Luminous的升级，并且想在短时间内进行升级到Mimic，可以使用shell命令在所有placement groups上强制执行scrub，例如：</span><br><span class="line">ceph pg dump pgs_brief | cut -d &quot; &quot; -f 1 | xargs -n1 ceph pg scrub</span><br><span class="line">您应该考虑到这种强制性scrub可能会对您的Ceph客户的性能产生负面影响。</span><br><span class="line"></span><br><span class="line">2、确保您的群集stable且healthy（没有宕机或无法恢复的OSD）。 （可选，但推荐。）</span><br><span class="line"></span><br><span class="line">3、在升级期间设置noout标志。 （可选，但建议使用。）</span><br><span class="line">ceph osd set noout</span><br><span class="line"></span><br><span class="line">4、通过安装新软件包并重新启动monitor daemons来升级monitors。 例如，在每个monitors主机上，：</span><br><span class="line">systemctl restart ceph-mon.target</span><br><span class="line">所有monitors启动之后，通过在mon map中查找nautilus字符串来验证monitor升级是否完成。 命令：</span><br><span class="line">ceph mon dump | grep min_mon_release</span><br><span class="line">应报告：</span><br><span class="line">min_mon_release 14 (nautilus)</span><br><span class="line">如果不是，则表示尚未升级和重新启动monitors，或者quorum不包括所有monitors。</span><br><span class="line"></span><br><span class="line">5、通过安装新packages并重新启动所有manager daemons来升级ceph-mgr daemons。 例如，在每个manager主机上，：</span><br><span class="line">systemctl restart ceph-mgr.target</span><br><span class="line">请注意，如果您使用的是Ceph Dashboard，则升级ceph-mgr package后可能需要单独安装ceph-mgr-dashboard。ceph-mgr-dashboard的安装脚本将自动为您重新启动manager daemons。 因此，在这种情况下，您可以跳过该步骤以重新启动daemons。</span><br><span class="line">通过检查ceph -s来验证ceph-mgr daemons是否正在运行：</span><br><span class="line"># ceph -s</span><br><span class="line">...</span><br><span class="line">  services:</span><br><span class="line">   mon: 3 daemons, quorum foo,bar,baz</span><br><span class="line">   mgr: foo(active), standbys: bar, baz</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">6、通过安装新packages并在所有OSD主机上重新启动ceph-osd daemons来升级所有OSD：</span><br><span class="line">systemctl restart ceph-osd.target</span><br><span class="line">您可以使用ceph versions或ceph osd versions命令监视OSD升级的进度：</span><br><span class="line"># ceph osd versions</span><br><span class="line">&#123;</span><br><span class="line">   &quot;ceph version 13.2.5 (...) mimic (stable)&quot;: 12,</span><br><span class="line">   &quot;ceph version 14.2.0 (...) nautilus (stable)&quot;: 22,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">7、如果集群中通过ceph-disk部署了OSD（例如，几乎所有在Mimic版本之前创建的OSD），您都需要让ceph-volume承担启动daemons的责任。 在包含OSD的每个主机上，确保OSD当前正在运行，然后：</span><br><span class="line">ceph-volume simple scan   （所有使用ceph-disk创建的并正在运行的OSDs，从OSD data partition或directory中捕获元数据）</span><br><span class="line">ceph-volume simple activate --all （使systemd units可以mount已配置的devices，并启动Ceph OSD）</span><br><span class="line">我们建议按照此步骤重新启动每个OSD主机，以验证OSD是否自动启动。</span><br><span class="line">请注意，ceph-volume不具有与ceph-disk相同的hot-plug功能，后者通过udev events自动检测到新连接的磁盘。如果运行上述scan命令时OSD当前未running，或者将基于ceph-disk的OSD移至新主机，或者重新安装了主机OSD，或者/etc/ceph/osd目录丢失， 您将需要显式扫描每个ceph-disk OSD的主数据分区。例如，：</span><br><span class="line">ceph-volume simple scan /dev/sdb1</span><br><span class="line">输出将包括相应的ceph-volume simple activate命令以启用OSD。</span><br><span class="line"></span><br><span class="line">8、升级所有CephFS MDS daemons。 对于每个CephFS file system，</span><br><span class="line">8.1将ranks数减少到1。（如果您打算稍后还原它，请首先记录MDS守护程序的原始数量）：</span><br><span class="line">ceph status</span><br><span class="line">ceph fs set &lt;fs_name&gt; max_mds 1</span><br><span class="line">8.2 通过定期检查状态，等待集群停用所有non-zero ranks：</span><br><span class="line">ceph status</span><br><span class="line">8.3 使用以下命令使所有standby MDS daemons在适当的主机上offline：</span><br><span class="line">systemctl stop ceph-mds@&lt;daemon_name&gt;</span><br><span class="line">8.4 确认只有一个MDS处于online，并且您的FS的rank 0：</span><br><span class="line">ceph status</span><br><span class="line">8.5 通过安装新packages并重新启动daemon来升级剩余的MDS daemon：</span><br><span class="line">systemctl restart ceph-mds.target</span><br><span class="line"></span><br><span class="line">8.6 重新启动所有已offline的standby MDS daemons</span><br><span class="line">systemctl start ceph-mds.target</span><br><span class="line"></span><br><span class="line">8.7 恢复该volume的max_mds原始值：</span><br><span class="line">ceph fs set &lt;fs_name&gt; max_mds &lt;original_max_mds&gt;</span><br><span class="line"></span><br><span class="line">9、通过升级packages并在所有主机上重新启动daemons来升级所有radosgw daemons：</span><br><span class="line">systemctl restart ceph-radosgw.target</span><br><span class="line"></span><br><span class="line">10、禁用Nautilus之前的OSD并启用所有Nautilus的新功能来完成升级：</span><br><span class="line">ceph osd require-osd-release nautilus</span><br><span class="line"></span><br><span class="line">11、如果您一开始设置noout，请确保清除它：</span><br><span class="line">ceph osd unset noout</span><br><span class="line"></span><br><span class="line">12、使用ceph health验证集群是否healthy</span><br><span class="line">如果您的CRUSH tunables（可调参数）早于Hammer，Ceph现在将发出健康警告。 如果您看到有这种效果的健康警报，则可以使用以下方法还原此更改：</span><br><span class="line">ceph config set mon mon_crush_min_required_version firefly</span><br><span class="line">但是，如果Ceph没有警报，那么我们建议您也将所有现有的CRUSH buckets都切换到straw2，这是Hammer版本中重新添加的。如果您有任何“straw” buckets，这将导致少量的数据移动，但通常不会太严重。</span><br><span class="line">ceph osd getcrushmap -o backup-crushmap</span><br><span class="line">ceph osd crush set-all-straw-buckets-to-straw2</span><br><span class="line">如果有问题，您可以还原：</span><br><span class="line">ceph osd setcrushmap -i backup-crushmap</span><br><span class="line">移至“straw2” buckets将解锁一些最新功能，例如在Luminous中crush-compat balancer mode（https://docs.ceph.com/docs/master/rados/operations/balancer/#balancer）。</span><br><span class="line"></span><br><span class="line">13、要启用新的 v2 network protocol，请发出以下命令：</span><br><span class="line">ceph mon enable-msgr2</span><br><span class="line">指示所有与旧版v1 protocol绑定到旧的默认端口6789的monitors，同时也绑定到新的3300 v2 protocol端口。要查看是否所有monitors都已更新，请执行以下操作：</span><br><span class="line">ceph mon dump</span><br><span class="line">并确认每个monitors都显示v2:和v1:地址。</span><br><span class="line"></span><br><span class="line">14、对于已升级的每个主机，应更新ceph.conf文件，使其不指定monitor端口（如果您在默认端口上运行monitor），或者显式引用v2和v1地址和端口。 如果仅列出了v1 IP和端口，则一切仍将起作用，但是在得知monitor也使用v2协议后，每个CLI实例或daemon都将需要重新连接，这会减慢速度并阻止完全过渡到v2协议。</span><br><span class="line">这也是将ceph.conf中的所有配置选项完全转换到集群的配置数据库中的好时机。 在每个主机上，您可以使用以下命令通过以下命令将所有选项导入monitor：</span><br><span class="line">ceph config assimilate-conf -i /etc/ceph/ceph.conf</span><br><span class="line">您可以通过以下方式查看集群的配置数据库：</span><br><span class="line">ceph config dump</span><br><span class="line">要为每个主机创建一个最小但足够的ceph.conf，请执行以下操作：</span><br><span class="line">ceph config generate-minimal-conf &gt; /etc/ceph/ceph.conf.new</span><br><span class="line">mv /etc/ceph/ceph.conf.new /etc/ceph/ceph.conf</span><br><span class="line">确保仅在已升级到Nautilus的主机上使用此新配置，因为它可能包含mon_host值，该值包含Nautilus能理解的IP地址的新v2:和v1:前缀。</span><br><span class="line">有关更多信息，请参阅https://docs.ceph.com/docs/master/rados/configuration/msgr2/#msgr2-ceph-conf</span><br><span class="line"></span><br><span class="line">15、考虑启用telemetry module以将匿名使用情况统计信息和崩溃信息发送给Ceph upstream developers。 查看将要报告的内容（实际上没有向任何人发送任何信息），请执行以下操作：</span><br><span class="line">ceph mgr module enable telemetry</span><br><span class="line">ceph telemetry show</span><br><span class="line">如果您对所报告的数据感到满意，则可以选择使用以下方法自动报告high-level cluster metadata：</span><br><span class="line">ceph telemetry on</span><br><span class="line">有关telemetry module的更多信息，请参见文档：https://docs.ceph.com/docs/master/mgr/telemetry/#telemetry</span><br></pre></td></tr></table></figure><p>1、查看当前环境与版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph2 ~]# ceph -v</span><br><span class="line">ceph version 12.2.12 (1436006594665279fe734b4c15d7e08c13ebd777) luminous (stable)</span><br><span class="line"></span><br><span class="line">[root@ceph2 ~]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br><span class="line"></span><br><span class="line">[root@ceph2 ~]# uname -a</span><br><span class="line">Linux ceph2 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"></span><br><span class="line">[root@ceph2 ~]# ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    id:     c4051efa-1997-43ef-8497-fb02bdf08233</span><br><span class="line">    health: HEALTH_OK</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum ceph1,ceph3,ceph2</span><br><span class="line">    mgr: ceph2(active), standbys: ceph3, ceph1</span><br><span class="line">    mds: cephfs-1/1/1 up  &#123;0=ceph1=up:active&#125;, 2 up:standby</span><br><span class="line">    osd: 6 osds: 6 up, 6 in</span><br><span class="line">    rgw: 3 daemons active</span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   7 pools, 176 pgs</span><br><span class="line">    objects: 244 objects, 5.27KiB</span><br><span class="line">    usage:   6.04GiB used, 293GiB / 299GiB avail</span><br><span class="line">    pgs:     176 active+clean</span><br><span class="line"> </span><br><span class="line">  io:</span><br><span class="line">    client:   2.00KiB/s rd, 0B/s wr, 1op/s rd, 1op/s wr</span><br><span class="line"></span><br><span class="line">[root@ceph2 ~]# ceph osd tree</span><br><span class="line">ID CLASS WEIGHT  TYPE NAME      STATUS REWEIGHT PRI-AFF </span><br><span class="line">-1       0.29214 root default                           </span><br><span class="line">-5       0.09738     host ceph1                         </span><br><span class="line"> 1   hdd 0.04869         osd.1      up  1.00000 1.00000 </span><br><span class="line"> 4   hdd 0.04869         osd.4      up  1.00000 1.00000 </span><br><span class="line">-7       0.09738     host ceph2                         </span><br><span class="line"> 2   hdd 0.04869         osd.2      up  1.00000 1.00000 </span><br><span class="line"> 5   hdd 0.04869         osd.5      up  1.00000 1.00000 </span><br><span class="line">-3       0.09738     host ceph3                         </span><br><span class="line"> 0   hdd 0.04869         osd.0      up  1.00000 1.00000 </span><br><span class="line"> 3   hdd 0.04869         osd.3      up  1.00000 1.00000 </span><br><span class="line"> </span><br><span class="line">[root@ceph2 ~]# rpm -qa | grep ceph</span><br><span class="line">libcephfs2-12.2.12-0.el7.x86_64</span><br><span class="line">ceph-common-12.2.12-0.el7.x86_64</span><br><span class="line">ceph-radosgw-12.2.12-0.el7.x86_64</span><br><span class="line">ceph-base-12.2.12-0.el7.x86_64</span><br><span class="line">ceph-osd-12.2.12-0.el7.x86_64</span><br><span class="line">ceph-mds-12.2.12-0.el7.x86_64</span><br><span class="line">python-cephfs-12.2.12-0.el7.x86_64</span><br><span class="line">ceph-selinux-12.2.12-0.el7.x86_64</span><br><span class="line">ceph-mon-12.2.12-0.el7.x86_64</span><br><span class="line">ceph-mgr-12.2.12-0.el7.x86_64</span><br><span class="line"></span><br><span class="line">[root@ceph2 ~]# rpm -qa | grep rbd</span><br><span class="line">python-rbd-12.2.12-0.el7.x86_64</span><br><span class="line">librbd1-12.2.12-0.el7.x86_64</span><br><span class="line"></span><br><span class="line">[root@ceph2 ~]# rpm -qa | grep rados</span><br><span class="line">ceph-radosgw-12.2.12-0.el7.x86_64</span><br><span class="line">librados2-12.2.12-0.el7.x86_64</span><br><span class="line">python-rados-12.2.12-0.el7.x86_64</span><br><span class="line">libradosstriper1-12.2.12-0.el7.x86_64</span><br></pre></td></tr></table></figure><p>2、修改每台ceph节点的ceph mirror，L版地址修改为N版地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph2 ~]# vim /etc/yum.repos.d/ceph_stable.repo </span><br><span class="line">[ceph_stable]</span><br><span class="line">baseurl = http://mirrors.163.com/ceph/rpm-nautilus/el7/$basearch</span><br><span class="line">gpgcheck = 1</span><br><span class="line">gpgkey = http://mirrors.163.com/ceph/keys/release.asc</span><br><span class="line">name = Ceph Stable repo</span><br></pre></td></tr></table></figure><p>3、设置noout 标志停机维护</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph2 ~]# ceph osd set noout</span><br><span class="line"></span><br><span class="line">[root@ceph2 ~]# ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    id:     c4051efa-1997-43ef-8497-fb02bdf08233</span><br><span class="line">    health: HEALTH_WARN</span><br><span class="line">            insufficient standby MDS daemons available</span><br><span class="line">            noout flag(s) set</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum ceph1,ceph3,ceph2</span><br><span class="line">    mgr: ceph1(active), standbys: ceph3, ceph2</span><br><span class="line">    mds: cephfs-1/1/1 up  &#123;0=ceph2=up:active&#125;</span><br><span class="line">    osd: 6 osds: 6 up, 6 in</span><br><span class="line">         flags noout</span><br><span class="line">    rgw: 2 daemons active</span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   7 pools, 176 pgs</span><br><span class="line">    objects: 245 objects, 5.30KiB</span><br><span class="line">    usage:   6.05GiB used, 293GiB / 299GiB avail</span><br><span class="line">    pgs:     176 active+clean</span><br></pre></td></tr></table></figure><p>4、升级每台ceph节点的 ceph packages（一个节点一个节点的升）</p><p>升级顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、Ceph Monitors</span><br><span class="line">2、Ceph Mgr</span><br><span class="line">3、Ceph OSD Daemons</span><br><span class="line">4、Ceph Metadata Servers</span><br><span class="line">5、Ceph Object Gateways</span><br></pre></td></tr></table></figure><p>升级命令（<code>注意：安装过程中rgw与mds服务会自动被stop</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph2 ~]# yum install ceph</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Determining fastest mirrors</span><br><span class="line">epel/x86_64/metalink                                                                                                                                                                                                  | 6.5 kB  00:00:00     </span><br><span class="line"> * base: mirrors.huaweicloud.com</span><br><span class="line"> * epel: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.huaweicloud.com</span><br><span class="line"> * updates: mirrors.huaweicloud.com</span><br><span class="line">base                                                                                                                                                                                                                  | 3.6 kB  00:00:00     </span><br><span class="line">ceph_stable                                                                                                                                                                                                           | 2.9 kB  00:00:00     </span><br><span class="line">epel                                                                                                                                                                                                                  | 5.3 kB  00:00:00     </span><br><span class="line">extras                                                                                                                                                                                                                | 2.9 kB  00:00:00     </span><br><span class="line">updates                                                                                                                                                                                                               | 2.9 kB  00:00:00     </span><br><span class="line">(1/8): epel/x86_64/group_gz                                                                                                                                                                                           |  88 kB  00:00:00     </span><br><span class="line">(2/8): ceph_stable/x86_64/primary_db                                                                                                                                                                                  | 192 kB  00:00:01     </span><br><span class="line">(3/8): base/7/x86_64/group_gz                                                                                                                                                                                         | 165 kB  00:00:01     </span><br><span class="line">(4/8): epel/x86_64/updateinfo                                                                                                                                                                                         | 1.0 MB  00:00:02     </span><br><span class="line">(5/8): extras/7/x86_64/primary_db                                                                                                                                                                                     | 152 kB  00:00:01     </span><br><span class="line">(6/8): base/7/x86_64/primary_db                                                                                                                                                                                       | 6.0 MB  00:00:04     </span><br><span class="line">(7/8): updates/7/x86_64/primary_db                                                                                                                                                                                    | 1.9 MB  00:00:05     </span><br><span class="line">(8/8): epel/x86_64/primary_db                                                                                                                                                                                         | 6.9 MB  00:00:16     </span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package ceph.x86_64 2:14.2.4-0.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: ceph-osd = 2:14.2.4-0.el7 for package: 2:ceph-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: ceph-mds = 2:14.2.4-0.el7 for package: 2:ceph-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: ceph-mgr = 2:14.2.4-0.el7 for package: 2:ceph-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: ceph-mon = 2:14.2.4-0.el7 for package: 2:ceph-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package ceph-mds.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package ceph-mds.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: ceph-base = 2:14.2.4-0.el7 for package: 2:ceph-mds-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: librdmacm.so.1()(64bit) for package: 2:ceph-mds-14.2.4-0.el7.x86_64</span><br><span class="line">---&gt; Package ceph-mgr.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package ceph-mgr.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: python-bcrypt for package: 2:ceph-mgr-14.2.4-0.el7.x86_64</span><br><span class="line">---&gt; Package ceph-mon.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package ceph-mon.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">---&gt; Package ceph-osd.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package ceph-osd.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: libstoragemgmt for package: 2:ceph-osd-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package ceph-base.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">--&gt; Processing Dependency: ceph-base = 2:12.2.12-0.el7 for package: 2:ceph-selinux-12.2.12-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: ceph-base = 2:12.2.12-0.el7 for package: 2:ceph-selinux-12.2.12-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: ceph-base = 2:12.2.12-0.el7 for package: 2:ceph-radosgw-12.2.12-0.el7.x86_64</span><br><span class="line">---&gt; Package ceph-base.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: librados2 = 2:14.2.4-0.el7 for package: 2:ceph-base-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libcephfs2 = 2:14.2.4-0.el7 for package: 2:ceph-base-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: librgw2 = 2:14.2.4-0.el7 for package: 2:ceph-base-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: librbd1 = 2:14.2.4-0.el7 for package: 2:ceph-base-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: ceph-common = 2:14.2.4-0.el7 for package: 2:ceph-base-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: liboath.so.0(LIBOATH_1.10.0)(64bit) for package: 2:ceph-base-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: liboath.so.0(LIBOATH_1.12.0)(64bit) for package: 2:ceph-base-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: liboath.so.0(LIBOATH_1.2.0)(64bit) for package: 2:ceph-base-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: liboath.so.0()(64bit) for package: 2:ceph-base-14.2.4-0.el7.x86_64</span><br><span class="line">---&gt; Package librdmacm.x86_64 0:22.1-3.el7 will be installed</span><br><span class="line">---&gt; Package libstoragemgmt.x86_64 0:1.7.3-3.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: libstoragemgmt-python for package: libstoragemgmt-1.7.3-3.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libyajl.so.2()(64bit) for package: libstoragemgmt-1.7.3-3.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libconfig.so.9()(64bit) for package: libstoragemgmt-1.7.3-3.el7.x86_64</span><br><span class="line">---&gt; Package python2-bcrypt.x86_64 0:3.1.6-2.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: python-cffi for package: python2-bcrypt-3.1.6-2.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: python2-six for package: python2-bcrypt-3.1.6-2.el7.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package ceph-common.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package ceph-common.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: libradosstriper1 = 2:14.2.4-0.el7 for package: 2:ceph-common-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: python-cephfs = 2:14.2.4-0.el7 for package: 2:ceph-common-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: python-rbd = 2:14.2.4-0.el7 for package: 2:ceph-common-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: python-ceph-argparse = 2:14.2.4-0.el7 for package: 2:ceph-common-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: python-rados = 2:14.2.4-0.el7 for package: 2:ceph-common-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: python-rgw = 2:14.2.4-0.el7 for package: 2:ceph-common-14.2.4-0.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: librabbitmq.so.4()(64bit) for package: 2:ceph-common-14.2.4-0.el7.x86_64</span><br><span class="line">---&gt; Package ceph-radosgw.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package ceph-radosgw.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">---&gt; Package ceph-selinux.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package ceph-selinux.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: selinux-policy-base &gt;= 3.13.1-229.el7_6.15 for package: 2:ceph-selinux-14.2.4-0.el7.x86_64</span><br><span class="line">---&gt; Package libcephfs2.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package libcephfs2.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">---&gt; Package libconfig.x86_64 0:1.4.9-5.el7 will be installed</span><br><span class="line">---&gt; Package liboath.x86_64 0:2.6.2-1.el7 will be installed</span><br><span class="line">---&gt; Package librados2.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package librados2.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">---&gt; Package librbd1.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package librbd1.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">---&gt; Package librgw2.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package librgw2.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">---&gt; Package libstoragemgmt-python.noarch 0:1.7.3-3.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: libstoragemgmt-python-clibs for package: libstoragemgmt-python-1.7.3-3.el7.noarch</span><br><span class="line">---&gt; Package python-cffi.x86_64 0:1.6.0-5.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: python-pycparser for package: python-cffi-1.6.0-5.el7.x86_64</span><br><span class="line">---&gt; Package python2-six.noarch 0:1.9.0-0.el7 will be installed</span><br><span class="line">---&gt; Package yajl.x86_64 0:2.0.4-4.el7 will be installed</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package librabbitmq.x86_64 0:0.8.0-2.el7 will be installed</span><br><span class="line">---&gt; Package libradosstriper1.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package libradosstriper1.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">---&gt; Package libstoragemgmt-python-clibs.x86_64 0:1.7.3-3.el7 will be installed</span><br><span class="line">---&gt; Package python-ceph-argparse.x86_64 2:14.2.4-0.el7 will be installed</span><br><span class="line">---&gt; Package python-cephfs.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package python-cephfs.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">---&gt; Package python-pycparser.noarch 0:2.14-1.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: python-ply for package: python-pycparser-2.14-1.el7.noarch</span><br><span class="line">---&gt; Package python-rados.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package python-rados.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">---&gt; Package python-rbd.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package python-rbd.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">---&gt; Package python-rgw.x86_64 2:12.2.12-0.el7 will be updated</span><br><span class="line">---&gt; Package python-rgw.x86_64 2:14.2.4-0.el7 will be an update</span><br><span class="line">---&gt; Package selinux-policy-targeted.noarch 0:3.13.1-229.el7 will be updated</span><br><span class="line">---&gt; Package selinux-policy-targeted.noarch 0:3.13.1-252.el7.1 will be an update</span><br><span class="line">--&gt; Processing Dependency: selinux-policy = 3.13.1-252.el7.1 for package: selinux-policy-targeted-3.13.1-252.el7.1.noarch</span><br><span class="line">--&gt; Processing Dependency: selinux-policy = 3.13.1-252.el7.1 for package: selinux-policy-targeted-3.13.1-252.el7.1.noarch</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package python-ply.noarch 0:3.4-11.el7 will be installed</span><br><span class="line">---&gt; Package selinux-policy.noarch 0:3.13.1-229.el7 will be updated</span><br><span class="line">---&gt; Package selinux-policy.noarch 0:3.13.1-252.el7.1 will be an update</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">=============================================================================================================================================================================================================================================</span><br><span class="line"> Package                                                              Arch                                            Version                                                     Repository                                            Size</span><br><span class="line">=============================================================================================================================================================================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> ceph                                                                 x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          3.0 k</span><br><span class="line">Installing for dependencies:</span><br><span class="line"> libconfig                                                            x86_64                                          1.4.9-5.el7                                                 base                                                  59 k</span><br><span class="line"> liboath                                                              x86_64                                          2.6.2-1.el7                                                 epel                                                  51 k</span><br><span class="line"> librabbitmq                                                          x86_64                                          0.8.0-2.el7                                                 base                                                  37 k</span><br><span class="line"> librdmacm                                                            x86_64                                          22.1-3.el7                                                  base                                                  63 k</span><br><span class="line"> libstoragemgmt                                                       x86_64                                          1.7.3-3.el7                                                 base                                                 243 k</span><br><span class="line"> libstoragemgmt-python                                                noarch                                          1.7.3-3.el7                                                 base                                                 167 k</span><br><span class="line"> libstoragemgmt-python-clibs                                          x86_64                                          1.7.3-3.el7                                                 base                                                  19 k</span><br><span class="line"> python-ceph-argparse                                                 x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                           36 k</span><br><span class="line"> python-cffi                                                          x86_64                                          1.6.0-5.el7                                                 base                                                 218 k</span><br><span class="line"> python-ply                                                           noarch                                          3.4-11.el7                                                  base                                                 123 k</span><br><span class="line"> python-pycparser                                                     noarch                                          2.14-1.el7                                                  base                                                 104 k</span><br><span class="line"> python2-bcrypt                                                       x86_64                                          3.1.6-2.el7                                                 epel                                                  39 k</span><br><span class="line"> python2-six                                                          noarch                                          1.9.0-0.el7                                                 epel                                                 2.9 k</span><br><span class="line"> yajl                                                                 x86_64                                          2.0.4-4.el7                                                 base                                                  39 k</span><br><span class="line">Updating for dependencies:</span><br><span class="line"> ceph-base                                                            x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          5.4 M</span><br><span class="line"> ceph-common                                                          x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                           18 M</span><br><span class="line"> ceph-mds                                                             x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          1.8 M</span><br><span class="line"> ceph-mgr                                                             x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          1.5 M</span><br><span class="line"> ceph-mon                                                             x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          4.5 M</span><br><span class="line"> ceph-osd                                                             x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                           16 M</span><br><span class="line"> ceph-radosgw                                                         x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          5.3 M</span><br><span class="line"> ceph-selinux                                                         x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                           21 k</span><br><span class="line"> libcephfs2                                                           x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          480 k</span><br><span class="line"> librados2                                                            x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          3.3 M</span><br><span class="line"> libradosstriper1                                                     x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          342 k</span><br><span class="line"> librbd1                                                              x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          1.6 M</span><br><span class="line"> librgw2                                                              x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          4.6 M</span><br><span class="line"> python-cephfs                                                        x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                           91 k</span><br><span class="line"> python-rados                                                         x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          190 k</span><br><span class="line"> python-rbd                                                           x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                          171 k</span><br><span class="line"> python-rgw                                                           x86_64                                          2:14.2.4-0.el7                                              ceph_stable                                           76 k</span><br><span class="line"> selinux-policy                                                       noarch                                          3.13.1-252.el7.1                                            updates                                              492 k</span><br><span class="line"> selinux-policy-targeted                                              noarch                                          3.13.1-252.el7.1                                            updates                                              7.0 M</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">=============================================================================================================================================================================================================================================</span><br><span class="line">Install  1 Package  (+14 Dependent packages)</span><br><span class="line">Upgrade             ( 19 Dependent packages)</span><br><span class="line"></span><br><span class="line">Total download size: 72 M</span><br><span class="line">Is this ok [y/d/N]: y</span><br><span class="line">Downloading packages:</span><br><span class="line">Delta RPMs disabled because /usr/bin/applydeltarpm not installed.</span><br><span class="line">(1/34): ceph-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                                  | 3.0 kB  00:00:00     </span><br><span class="line">(2/34): ceph-common-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                           |  18 MB  00:00:19     </span><br><span class="line">(3/34): ceph-mds-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                              | 1.8 MB  00:00:01     </span><br><span class="line">(4/34): ceph-mgr-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                              | 1.5 MB  00:00:03     </span><br><span class="line">(5/34): ceph-mon-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                              | 4.5 MB  00:00:05     </span><br><span class="line">(6/34): ceph-osd-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                              |  16 MB  00:00:14     </span><br><span class="line">(7/34): ceph-radosgw-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                          | 5.3 MB  00:00:07     </span><br><span class="line">(8/34): ceph-selinux-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                          |  21 kB  00:00:00     </span><br><span class="line">(9/34): libconfig-1.4.9-5.el7.x86_64.rpm                                                                                                                                                                              |  59 kB  00:00:00     </span><br><span class="line">(10/34): librabbitmq-0.8.0-2.el7.x86_64.rpm                                                                                                                                                                           |  37 kB  00:00:00     </span><br><span class="line">(11/34): libcephfs2-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                           | 480 kB  00:00:00     </span><br><span class="line">(12/34): librados2-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                            | 3.3 MB  00:00:05     </span><br><span class="line">(13/34): libradosstriper1-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                     | 342 kB  00:00:00     </span><br><span class="line">(14/34): librdmacm-22.1-3.el7.x86_64.rpm                                                                                                                                                                              |  63 kB  00:00:00     </span><br><span class="line">(15/34): liboath-2.6.2-1.el7.x86_64.rpm                                                                                                                                                                               |  51 kB  00:00:07     </span><br><span class="line">(16/34): librbd1-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                              | 1.6 MB  00:00:01     </span><br><span class="line">(17/34): libstoragemgmt-python-1.7.3-3.el7.noarch.rpm                                                                                                                                                                 | 167 kB  00:00:00     </span><br><span class="line">(18/34): libstoragemgmt-1.7.3-3.el7.x86_64.rpm                                                                                                                                                                        | 243 kB  00:00:00     </span><br><span class="line">(19/34): libstoragemgmt-python-clibs-1.7.3-3.el7.x86_64.rpm                                                                                                                                                           |  19 kB  00:00:00     </span><br><span class="line">(20/34): librgw2-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                              | 4.6 MB  00:00:02     </span><br><span class="line">(21/34): python-ceph-argparse-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                 |  36 kB  00:00:00     </span><br><span class="line">(22/34): python-ply-3.4-11.el7.noarch.rpm                                                                                                                                                                             | 123 kB  00:00:00     </span><br><span class="line">(23/34): python-cffi-1.6.0-5.el7.x86_64.rpm                                                                                                                                                                           | 218 kB  00:00:00     </span><br><span class="line">(24/34): python-cephfs-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                        |  91 kB  00:00:00     </span><br><span class="line">(25/34): python-pycparser-2.14-1.el7.noarch.rpm                                                                                                                                                                       | 104 kB  00:00:00     </span><br><span class="line">(26/34): python-rados-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                         | 190 kB  00:00:00     </span><br><span class="line">(27/34): python-rbd-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                           | 171 kB  00:00:00     </span><br><span class="line">(28/34): python2-six-1.9.0-0.el7.noarch.rpm                                                                                                                                                                           | 2.9 kB  00:00:00     </span><br><span class="line">(29/34): python2-bcrypt-3.1.6-2.el7.x86_64.rpm                                                                                                                                                                        |  39 kB  00:00:00     </span><br><span class="line">(30/34): python-rgw-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                           |  76 kB  00:00:00     </span><br><span class="line">(31/34): selinux-policy-3.13.1-252.el7.1.noarch.rpm                                                                                                                                                                   | 492 kB  00:00:00     </span><br><span class="line">(32/34): yajl-2.0.4-4.el7.x86_64.rpm                                                                                                                                                                                  |  39 kB  00:00:00     </span><br><span class="line">(33/34): selinux-policy-targeted-3.13.1-252.el7.1.noarch.rpm                                                                                                                                                          | 7.0 MB  00:00:02     </span><br><span class="line">(34/34): ceph-base-14.2.4-0.el7.x86_64.rpm                                                                                                                                                                            | 5.4 MB  00:01:13     </span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Total                                                                                                                                                                                                        1.0 MB/s |  72 MB  00:01:13     </span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  Installing : librdmacm-22.1-3.el7.x86_64                                                                                                                                                                                              1/53 </span><br><span class="line">  Updating   : 2:librados2-14.2.4-0.el7.x86_64                                                                                                                                                                                          2/53 </span><br><span class="line">  Updating   : 2:python-rados-14.2.4-0.el7.x86_64                                                                                                                                                                                       3/53 </span><br><span class="line">  Installing : liboath-2.6.2-1.el7.x86_64                                                                                                                                                                                               4/53 </span><br><span class="line">  Updating   : 2:librbd1-14.2.4-0.el7.x86_64                                                                                                                                                                                            5/53 </span><br><span class="line">  Updating   : 2:libcephfs2-14.2.4-0.el7.x86_64                                                                                                                                                                                         6/53 </span><br><span class="line">  Installing : librabbitmq-0.8.0-2.el7.x86_64                                                                                                                                                                                           7/53 </span><br><span class="line">  Updating   : 2:librgw2-14.2.4-0.el7.x86_64                                                                                                                                                                                            8/53 </span><br><span class="line">  Installing : 2:python-ceph-argparse-14.2.4-0.el7.x86_64                                                                                                                                                                               9/53 </span><br><span class="line">  Installing : yajl-2.0.4-4.el7.x86_64                                                                                                                                                                                                 10/53 </span><br><span class="line">  Updating   : 2:python-cephfs-14.2.4-0.el7.x86_64                                                                                                                                                                                     11/53 </span><br><span class="line">  Updating   : 2:python-rgw-14.2.4-0.el7.x86_64                                                                                                                                                                                        12/53 </span><br><span class="line">  Updating   : 2:python-rbd-14.2.4-0.el7.x86_64                                                                                                                                                                                        13/53 </span><br><span class="line">  Updating   : 2:libradosstriper1-14.2.4-0.el7.x86_64                                                                                                                                                                                  14/53 </span><br><span class="line">  Updating   : 2:ceph-common-14.2.4-0.el7.x86_64                                                                                                                                                                                       15/53 </span><br><span class="line">  Updating   : selinux-policy-3.13.1-252.el7.1.noarch                                                                                                                                                                                  16/53 </span><br><span class="line">  Updating   : selinux-policy-targeted-3.13.1-252.el7.1.noarch                                                                                                                                                                         17/53 </span><br><span class="line">  Updating   : 2:ceph-base-14.2.4-0.el7.x86_64                                                                                                                                                                                         18/53 </span><br><span class="line">  Updating   : 2:ceph-selinux-14.2.4-0.el7.x86_64                                                                                                                                                                                      19/53 </span><br><span class="line">  Updating   : 2:ceph-mds-14.2.4-0.el7.x86_64                                                                                                                                                                                          20/53 </span><br><span class="line">  Updating   : 2:ceph-mon-14.2.4-0.el7.x86_64                                                                                                                                                                                          21/53 </span><br><span class="line">  Installing : libconfig-1.4.9-5.el7.x86_64                                                                                                                                                                                            22/53 </span><br><span class="line">  Installing : libstoragemgmt-1.7.3-3.el7.x86_64                                                                                                                                                                                       23/53 </span><br><span class="line">  Installing : libstoragemgmt-python-clibs-1.7.3-3.el7.x86_64                                                                                                                                                                          24/53 </span><br><span class="line">  Installing : libstoragemgmt-python-1.7.3-3.el7.noarch                                                                                                                                                                                25/53 </span><br><span class="line">  Updating   : 2:ceph-osd-14.2.4-0.el7.x86_64                                                                                                                                                                                          26/53 </span><br><span class="line">  Installing : python-ply-3.4-11.el7.noarch                                                                                                                                                                                            27/53 </span><br><span class="line">  Installing : python-pycparser-2.14-1.el7.noarch                                                                                                                                                                                      28/53 </span><br><span class="line">  Installing : python-cffi-1.6.0-5.el7.x86_64                                                                                                                                                                                          29/53 </span><br><span class="line">  Installing : python2-six-1.9.0-0.el7.noarch                                                                                                                                                                                          30/53 </span><br><span class="line">  Installing : python2-bcrypt-3.1.6-2.el7.x86_64                                                                                                                                                                                       31/53 </span><br><span class="line">  Updating   : 2:ceph-mgr-14.2.4-0.el7.x86_64                                                                                                                                                                                          32/53 </span><br><span class="line">  Installing : 2:ceph-14.2.4-0.el7.x86_64                                                                                                                                                                                              33/53 </span><br><span class="line">  Updating   : 2:ceph-radosgw-14.2.4-0.el7.x86_64                                                                                                                                                                                      34/53 </span><br><span class="line">  Cleanup    : 2:ceph-radosgw-12.2.12-0.el7.x86_64                                                                                                                                                                                     35/53 </span><br><span class="line">  Cleanup    : 2:ceph-mon-12.2.12-0.el7.x86_64                                                                                                                                                                                         36/53 </span><br><span class="line">  Cleanup    : 2:ceph-osd-12.2.12-0.el7.x86_64                                                                                                                                                                                         37/53 </span><br><span class="line">  Cleanup    : 2:ceph-mds-12.2.12-0.el7.x86_64                                                                                                                                                                                         38/53 </span><br><span class="line">  Cleanup    : 2:ceph-mgr-12.2.12-0.el7.x86_64                                                                                                                                                                                         39/53 </span><br><span class="line">  Cleanup    : 2:ceph-selinux-12.2.12-0.el7.x86_64                                                                                                                                                                                     40/53 </span><br><span class="line">  Cleanup    : 2:ceph-base-12.2.12-0.el7.x86_64                                                                                                                                                                                        41/53 </span><br><span class="line">  Cleanup    : selinux-policy-targeted-3.13.1-229.el7.noarch                                                                                                                                                                           42/53 </span><br><span class="line">  Cleanup    : 2:ceph-common-12.2.12-0.el7.x86_64                                                                                                                                                                                      43/53 </span><br><span class="line">  Cleanup    : selinux-policy-3.13.1-229.el7.noarch                                                                                                                                                                                    44/53 </span><br><span class="line">  Cleanup    : 2:python-rbd-12.2.12-0.el7.x86_64                                                                                                                                                                                       45/53 </span><br><span class="line">  Cleanup    : 2:python-rgw-12.2.12-0.el7.x86_64                                                                                                                                                                                       46/53 </span><br><span class="line">  Cleanup    : 2:librgw2-12.2.12-0.el7.x86_64                                                                                                                                                                                          47/53 </span><br><span class="line">  Cleanup    : 2:python-rados-12.2.12-0.el7.x86_64                                                                                                                                                                                     48/53 </span><br><span class="line">  Cleanup    : 2:librbd1-12.2.12-0.el7.x86_64                                                                                                                                                                                          49/53 </span><br><span class="line">  Cleanup    : 2:libradosstriper1-12.2.12-0.el7.x86_64                                                                                                                                                                                 50/53 </span><br><span class="line">  Cleanup    : 2:python-cephfs-12.2.12-0.el7.x86_64                                                                                                                                                                                    51/53 </span><br><span class="line">  Cleanup    : 2:libcephfs2-12.2.12-0.el7.x86_64                                                                                                                                                                                       52/53 </span><br><span class="line">  Cleanup    : 2:librados2-12.2.12-0.el7.x86_64                                                                                                                                                                                        53/53 </span><br><span class="line">  Verifying  : 2:librados2-14.2.4-0.el7.x86_64                                                                                                                                                                                          1/53 </span><br><span class="line">  Verifying  : liboath-2.6.2-1.el7.x86_64                                                                                                                                                                                               2/53 </span><br><span class="line">  Verifying  : 2:python-rgw-14.2.4-0.el7.x86_64                                                                                                                                                                                         3/53 </span><br><span class="line">  Verifying  : python2-six-1.9.0-0.el7.noarch                                                                                                                                                                                           4/53 </span><br><span class="line">  Verifying  : 2:ceph-14.2.4-0.el7.x86_64                                                                                                                                                                                               5/53 </span><br><span class="line">  Verifying  : 2:ceph-mgr-14.2.4-0.el7.x86_64                                                                                                                                                                                           6/53 </span><br><span class="line">  Verifying  : python2-bcrypt-3.1.6-2.el7.x86_64                                                                                                                                                                                        7/53 </span><br><span class="line">  Verifying  : 2:ceph-osd-14.2.4-0.el7.x86_64                                                                                                                                                                                           8/53 </span><br><span class="line">  Verifying  : libstoragemgmt-python-clibs-1.7.3-3.el7.x86_64                                                                                                                                                                           9/53 </span><br><span class="line">  Verifying  : 2:ceph-base-14.2.4-0.el7.x86_64                                                                                                                                                                                         10/53 </span><br><span class="line">  Verifying  : 2:ceph-common-14.2.4-0.el7.x86_64                                                                                                                                                                                       11/53 </span><br><span class="line">  Verifying  : 2:libradosstriper1-14.2.4-0.el7.x86_64                                                                                                                                                                                  12/53 </span><br><span class="line">  Verifying  : 2:python-rados-14.2.4-0.el7.x86_64                                                                                                                                                                                      13/53 </span><br><span class="line">  Verifying  : 2:librbd1-14.2.4-0.el7.x86_64                                                                                                                                                                                           14/53 </span><br><span class="line">  Verifying  : librdmacm-22.1-3.el7.x86_64                                                                                                                                                                                             15/53 </span><br><span class="line">  Verifying  : libstoragemgmt-python-1.7.3-3.el7.noarch                                                                                                                                                                                16/53 </span><br><span class="line">  Verifying  : 2:ceph-mds-14.2.4-0.el7.x86_64                                                                                                                                                                                          17/53 </span><br><span class="line">  Verifying  : python-ply-3.4-11.el7.noarch                                                                                                                                                                                            18/53 </span><br><span class="line">  Verifying  : 2:libcephfs2-14.2.4-0.el7.x86_64                                                                                                                                                                                        19/53 </span><br><span class="line">  Verifying  : libconfig-1.4.9-5.el7.x86_64                                                                                                                                                                                            20/53 </span><br><span class="line">  Verifying  : 2:ceph-selinux-14.2.4-0.el7.x86_64                                                                                                                                                                                      21/53 </span><br><span class="line">  Verifying  : 2:ceph-radosgw-14.2.4-0.el7.x86_64                                                                                                                                                                                      22/53 </span><br><span class="line">  Verifying  : selinux-policy-targeted-3.13.1-252.el7.1.noarch                                                                                                                                                                         23/53 </span><br><span class="line">  Verifying  : 2:ceph-mon-14.2.4-0.el7.x86_64                                                                                                                                                                                          24/53 </span><br><span class="line">  Verifying  : yajl-2.0.4-4.el7.x86_64                                                                                                                                                                                                 25/53 </span><br><span class="line">  Verifying  : 2:librgw2-14.2.4-0.el7.x86_64                                                                                                                                                                                           26/53 </span><br><span class="line">  Verifying  : python-cffi-1.6.0-5.el7.x86_64                                                                                                                                                                                          27/53 </span><br><span class="line">  Verifying  : python-pycparser-2.14-1.el7.noarch                                                                                                                                                                                      28/53 </span><br><span class="line">  Verifying  : libstoragemgmt-1.7.3-3.el7.x86_64                                                                                                                                                                                       29/53 </span><br><span class="line">  Verifying  : 2:python-rbd-14.2.4-0.el7.x86_64                                                                                                                                                                                        30/53 </span><br><span class="line">  Verifying  : 2:python-cephfs-14.2.4-0.el7.x86_64                                                                                                                                                                                     31/53 </span><br><span class="line">  Verifying  : selinux-policy-3.13.1-252.el7.1.noarch                                                                                                                                                                                  32/53 </span><br><span class="line">  Verifying  : 2:python-ceph-argparse-14.2.4-0.el7.x86_64                                                                                                                                                                              33/53 </span><br><span class="line">  Verifying  : librabbitmq-0.8.0-2.el7.x86_64                                                                                                                                                                                          34/53 </span><br><span class="line">  Verifying  : selinux-policy-targeted-3.13.1-229.el7.noarch                                                                                                                                                                           35/53 </span><br><span class="line">  Verifying  : 2:ceph-mgr-12.2.12-0.el7.x86_64                                                                                                                                                                                         36/53 </span><br><span class="line">  Verifying  : 2:ceph-osd-12.2.12-0.el7.x86_64                                                                                                                                                                                         37/53 </span><br><span class="line">  Verifying  : selinux-policy-3.13.1-229.el7.noarch                                                                                                                                                                                    38/53 </span><br><span class="line">  Verifying  : 2:ceph-base-12.2.12-0.el7.x86_64                                                                                                                                                                                        39/53 </span><br><span class="line">  Verifying  : 2:python-rados-12.2.12-0.el7.x86_64                                                                                                                                                                                     40/53 </span><br><span class="line">  Verifying  : 2:python-cephfs-12.2.12-0.el7.x86_64                                                                                                                                                                                    41/53 </span><br><span class="line">  Verifying  : 2:ceph-common-12.2.12-0.el7.x86_64                                                                                                                                                                                      42/53 </span><br><span class="line">  Verifying  : 2:ceph-mon-12.2.12-0.el7.x86_64                                                                                                                                                                                         43/53 </span><br><span class="line">  Verifying  : 2:libradosstriper1-12.2.12-0.el7.x86_64                                                                                                                                                                                 44/53 </span><br><span class="line">  Verifying  : 2:libcephfs2-12.2.12-0.el7.x86_64                                                                                                                                                                                       45/53 </span><br><span class="line">  Verifying  : 2:python-rbd-12.2.12-0.el7.x86_64                                                                                                                                                                                       46/53 </span><br><span class="line">  Verifying  : 2:librbd1-12.2.12-0.el7.x86_64                                                                                                                                                                                          47/53 </span><br><span class="line">  Verifying  : 2:ceph-radosgw-12.2.12-0.el7.x86_64                                                                                                                                                                                     48/53 </span><br><span class="line">  Verifying  : 2:ceph-mds-12.2.12-0.el7.x86_64                                                                                                                                                                                         49/53 </span><br><span class="line">  Verifying  : 2:librgw2-12.2.12-0.el7.x86_64                                                                                                                                                                                          50/53 </span><br><span class="line">  Verifying  : 2:ceph-selinux-12.2.12-0.el7.x86_64                                                                                                                                                                                     51/53 </span><br><span class="line">  Verifying  : 2:python-rgw-12.2.12-0.el7.x86_64                                                                                                                                                                                       52/53 </span><br><span class="line">  Verifying  : 2:librados2-12.2.12-0.el7.x86_64                                                                                                                                                                                        53/53 </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  ceph.x86_64 2:14.2.4-0.el7                                                                                                                                                                                                                 </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  libconfig.x86_64 0:1.4.9-5.el7                   liboath.x86_64 0:2.6.2-1.el7                           librabbitmq.x86_64 0:0.8.0-2.el7                 librdmacm.x86_64 0:22.1-3.el7          libstoragemgmt.x86_64 0:1.7.3-3.el7      </span><br><span class="line">  libstoragemgmt-python.noarch 0:1.7.3-3.el7       libstoragemgmt-python-clibs.x86_64 0:1.7.3-3.el7       python-ceph-argparse.x86_64 2:14.2.4-0.el7       python-cffi.x86_64 0:1.6.0-5.el7       python-ply.noarch 0:3.4-11.el7           </span><br><span class="line">  python-pycparser.noarch 0:2.14-1.el7             python2-bcrypt.x86_64 0:3.1.6-2.el7                    python2-six.noarch 0:1.9.0-0.el7                 yajl.x86_64 0:2.0.4-4.el7             </span><br><span class="line"></span><br><span class="line">Dependency Updated:</span><br><span class="line">  ceph-base.x86_64 2:14.2.4-0.el7                   ceph-common.x86_64 2:14.2.4-0.el7   ceph-mds.x86_64 2:14.2.4-0.el7     ceph-mgr.x86_64 2:14.2.4-0.el7   ceph-mon.x86_64 2:14.2.4-0.el7         ceph-osd.x86_64 2:14.2.4-0.el7          </span><br><span class="line">  ceph-radosgw.x86_64 2:14.2.4-0.el7                ceph-selinux.x86_64 2:14.2.4-0.el7  libcephfs2.x86_64 2:14.2.4-0.el7   librados2.x86_64 2:14.2.4-0.el7  libradosstriper1.x86_64 2:14.2.4-0.el7 librbd1.x86_64 2:14.2.4-0.el7           </span><br><span class="line">  librgw2.x86_64 2:14.2.4-0.el7                     python-cephfs.x86_64 2:14.2.4-0.el7 python-rados.x86_64 2:14.2.4-0.el7 python-rbd.x86_64 2:14.2.4-0.el7 python-rgw.x86_64 2:14.2.4-0.el7       selinux-policy.noarch 0:3.13.1-252.el7.1</span><br><span class="line">  selinux-policy-targeted.noarch 0:3.13.1-252.el7.1</span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><p>5、检查更新后的rpm packages</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph2 ~]# rpm -qa | grep ceph</span><br><span class="line">python-ceph-argparse-14.2.4-0.el7.x86_64</span><br><span class="line">ceph-mon-14.2.4-0.el7.x86_64</span><br><span class="line">ceph-14.2.4-0.el7.x86_64</span><br><span class="line">libcephfs2-14.2.4-0.el7.x86_64</span><br><span class="line">ceph-base-14.2.4-0.el7.x86_64</span><br><span class="line">ceph-mds-14.2.4-0.el7.x86_64</span><br><span class="line">ceph-osd-14.2.4-0.el7.x86_64</span><br><span class="line">ceph-mgr-14.2.4-0.el7.x86_64</span><br><span class="line">ceph-radosgw-14.2.4-0.el7.x86_64</span><br><span class="line">python-cephfs-14.2.4-0.el7.x86_64</span><br><span class="line">ceph-common-14.2.4-0.el7.x86_64</span><br><span class="line">ceph-selinux-14.2.4-0.el7.x86_64</span><br><span class="line"></span><br><span class="line">[root@ceph2 ~]# rpm -qa | grep rbd</span><br><span class="line">librbd1-14.2.4-0.el7.x86_64</span><br><span class="line">python-rbd-14.2.4-0.el7.x86_64</span><br><span class="line"></span><br><span class="line">[root@ceph2 ~]# rpm -qa | grep rados</span><br><span class="line">librados2-14.2.4-0.el7.x86_64</span><br><span class="line">libradosstriper1-14.2.4-0.el7.x86_64</span><br><span class="line">ceph-radosgw-14.2.4-0.el7.x86_64</span><br><span class="line">python-rados-14.2.4-0.el7.x86_64</span><br></pre></td></tr></table></figure><p>6、重启服务每台ceph节点的ceph service并检查service状态</p><p>重启顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、Ceph Monitors</span><br><span class="line">2、Ceph Mgr</span><br><span class="line">3、Ceph OSD Daemons</span><br><span class="line">4、Ceph Metadata Servers</span><br><span class="line">5、Ceph Object Gateways</span><br></pre></td></tr></table></figure><p>重启命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># 重启Ceph Monitors</span><br><span class="line">[root@ceph2 ~]# systemctl restart ceph-mon@ceph2.service</span><br><span class="line">[root@ceph2 ~]# ceph mon stat</span><br><span class="line">e1: 3 mons at &#123;ceph1=10.20.10.8:6789/0,ceph2=10.20.10.21:6789/0,ceph3=10.20.10.15:6789/0&#125;, election epoch 6, leader 0 ceph1, quorum 0,1,2 ceph1,ceph3,ceph2</span><br><span class="line"></span><br><span class="line"># 重启Ceph Mgr</span><br><span class="line">[root@ceph2 ~]# systemctl restart ceph-mgr@ceph2.service</span><br><span class="line">[root@ceph2 ~]# ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    id:     c4051efa-1997-43ef-8497-fb02bdf08233</span><br><span class="line">    health: HEALTH_WARN</span><br><span class="line">            insufficient standby MDS daemons available</span><br><span class="line">            noout flag(s) set</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum ceph1,ceph3,ceph2</span><br><span class="line">    mgr: ceph1(active), standbys: ceph3, ceph2</span><br><span class="line">    mds: cephfs-1/1/1 up  &#123;0=ceph2=up:active&#125;</span><br><span class="line">    osd: 6 osds: 6 up, 6 in</span><br><span class="line">         flags noout</span><br><span class="line">    rgw: 2 daemons active</span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   7 pools, 176 pgs</span><br><span class="line">    objects: 245 objects, 5.30KiB</span><br><span class="line">    usage:   6.05GiB used, 293GiB / 299GiB avail</span><br><span class="line">    pgs:     176 active+clean</span><br><span class="line"></span><br><span class="line"># 重启Ceph OSD Daemons</span><br><span class="line">[root@ceph2 ~]# systemctl restart ceph-osd@2.service &amp;&amp; systemctl restart ceph-osd@5.service &amp;&amp; ceph osd stat</span><br><span class="line">6 osds: 5 up, 6 in</span><br><span class="line">[root@ceph2 ~]# ceph osd stat</span><br><span class="line">6 osds: 6 up, 6 in</span><br><span class="line"></span><br><span class="line"># 重启Ceph Metadata Servers</span><br><span class="line">[root@ceph2 ~]# systemctl restart ceph-mds@ceph2.service</span><br><span class="line">[root@ceph2 ~]# ceph mds stat</span><br><span class="line">cephfs-1/1/1 up  &#123;0=ceph2=up:reconnect&#125;, 1 up:standby</span><br><span class="line">[root@ceph2 ~]# ceph mds stat</span><br><span class="line">cephfs-1/1/1 up  &#123;0=ceph2=up:active&#125;, 1 up:standby</span><br><span class="line"></span><br><span class="line"># 重启Ceph Object Gateways</span><br><span class="line">[root@ceph2 ~]# systemctl restart ceph-radosgw@rgw.ceph2.service</span><br><span class="line">[root@ceph2 ~]# ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    id:     c4051efa-1997-43ef-8497-fb02bdf08233</span><br><span class="line">    health: HEALTH_WARN</span><br><span class="line">            insufficient standby MDS daemons available</span><br><span class="line">            noout flag(s) set</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum ceph1,ceph3,ceph2</span><br><span class="line">    mgr: ceph1(active), standbys: ceph3, ceph2</span><br><span class="line">    mds: cephfs-1/1/1 up  &#123;0=ceph2=up:active&#125;</span><br><span class="line">    osd: 6 osds: 6 up, 6 in</span><br><span class="line">         flags noout</span><br><span class="line">    rgw: 2 daemons active</span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   7 pools, 176 pgs</span><br><span class="line">    objects: 245 objects, 5.30KiB</span><br><span class="line">    usage:   6.05GiB used, 293GiB / 299GiB avail</span><br><span class="line">    pgs:     176 active+clean</span><br></pre></td></tr></table></figure><p><code>注意</code>：当集群升级过程中，刚刚升级第一个MDS会出现<code>insufficient standby MDS daemons available</code>，当升级第二个MDS后，警告会自动消失。</p><p>7、警告解除<code>Legacy BlueStore stats reporting detected on 6 OSD(s)</code></p><p>首先确认集群状态，无其他异常告警，并修复。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph1 ~]# ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    id:     c4051efa-1997-43ef-8497-fb02bdf08233</span><br><span class="line">    health: HEALTH_WARN</span><br><span class="line">            noout flag(s) set</span><br><span class="line">            Legacy BlueStore stats reporting detected on 6 OSD(s)</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum ceph1,ceph3,ceph2 (age 111s)</span><br><span class="line">    mgr: ceph2(active, since 6h), standbys: ceph3, ceph1</span><br><span class="line">    mds: cephfs:1 &#123;0=ceph2=up:active&#125; 2 up:standby</span><br><span class="line">    osd: 6 osds: 6 up, 6 in</span><br><span class="line">         flags noout</span><br><span class="line">    rgw: 3 daemons active (ceph1, ceph2, ceph3)</span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   7 pools, 176 pgs</span><br><span class="line">    objects: 245 objects, 5.8 KiB</span><br><span class="line">    usage:   6.1 GiB used, 293 GiB / 299 GiB avail</span><br><span class="line">    pgs:     176 active+clean</span><br><span class="line"></span><br><span class="line">[root@ceph1 ~]# systemctl stop ceph-osd@1.service</span><br><span class="line">[root@ceph1 ~]# ceph-bluestore-tool repair --path /var/lib/ceph/osd/ceph-1/</span><br><span class="line">repair success</span><br><span class="line">[root@ceph1 ~]# systemctl start ceph-osd@1.service</span><br></pre></td></tr></table></figure><p><code>当前出现问题：https://tracker.ceph.com/issues/42297，正在与社区沟通</code></p><p>相关ceph users</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-July/035889.html</span><br><span class="line">http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-July/036010.html</span><br><span class="line">http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-July/036002.html</span><br></pre></td></tr></table></figure><p>8、告警解除<code>3 monitors have not enabled msgr2</code>（nautilus版本中mon需要打开v2，监听3300端口），关于msgr2参见<a href="http://lnsyyj.github.io/2019/10/14/Ceph-MESSENGER-V2/" target="_blank" rel="noopener">http://lnsyyj.github.io/2019/10/14/Ceph-MESSENGER-V2/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph1 ~]# ceph mon enable-msgr2</span><br></pre></td></tr></table></figure><p>9、解除noout标志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph2 ~]# ceph osd unset noout</span><br></pre></td></tr></table></figure><p>10、确认ceph状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph2 ~]# ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    id:     c4051efa-1997-43ef-8497-fb02bdf08233</span><br><span class="line">    health: HEALTH_OK</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum ceph1,ceph3,ceph2 (age 30m)</span><br><span class="line">    mgr: ceph2(active, since 7h), standbys: ceph3, ceph1</span><br><span class="line">    mds: cephfs:1 &#123;0=ceph2=up:active&#125; 2 up:standby</span><br><span class="line">    osd: 6 osds: 6 up, 6 in</span><br><span class="line">    rgw: 3 daemons active (ceph1, ceph2, ceph3)</span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   7 pools, 176 pgs</span><br><span class="line">    objects: 245 objects, 5.8 KiB</span><br><span class="line">    usage:   6.1 GiB used, 293 GiB / 299 GiB avail</span><br><span class="line">    pgs:     176 active+clean</span><br></pre></td></tr></table></figure><h2 id="升级Ceph客户端package"><a href="#升级Ceph客户端package" class="headerlink" title="升级Ceph客户端package"></a>升级Ceph客户端package</h2><h3 id="升级可能带来的影响-1"><a href="#升级可能带来的影响-1" class="headerlink" title="升级可能带来的影响"></a>升级可能带来的影响</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）客户端升级可能会影响客户业务，导致业务中断一定时间。</span><br><span class="line">（2）可能带来客户端程序不兼容ceph client package的情况。</span><br></pre></td></tr></table></figure><p>1、升级package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ceph1 ~]# yum install ceph-common librados2 librbd1 python-rbd python-rados -y</span><br></pre></td></tr></table></figure><p>2、确认升级后的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph --version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CEPH ISCSI GATEWAY</title>
      <link href="/2019/10/08/CEPH-ISCSI-GATEWAY/"/>
      <url>/2019/10/08/CEPH-ISCSI-GATEWAY/</url>
      
        <content type="html"><![CDATA[<p>iSCSI gateway将Ceph Storage与iSCSI标准集成在一起，将RADOS Block Device（RBD）images导出为SCSI disks高可用（HA）iSCSI target。iSCSI协议允许客户端（initiators）通过TCP / IP网络将SCSI命令发送到SCSI storage devices（targets）。这允许异构客户端（例如Microsoft Windows）访问Ceph存储群集。</p><p>每个iSCSI gateway都运行Linux IO target kernel subsystem（LIO）以提供iSCSI协议支持。LIO利用userspace直通（TCMU）Ceph的librbd库进行交互，并将RBD images公开给iSCSI客户端。借助Ceph的iSCSI gateway，您可以有效地运行完整的block-storage infrastructure，并具有传统Storage Area Network （SAN） 的所有功能和优势。</p><p><img src="https://docs.ceph.com/docs/master/_images/ditaa-176c606a1d1a5b7415ee811bd62dda640513a33a.png" alt></p><h1 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h1><p>要实现Ceph iSCSI gateway，有一些要求。对于高可用的Ceph iSCSI gateway解决方案，建议使用2到4个iSCSI gateway节点。</p><p>有关硬件建议，请参阅<a href="http://docs.ceph.com/docs/master/start/hardware-recommendations/" target="_blank" rel="noopener">Hardware Recommendation page</a>获取更多详细信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意 在iSCSI gateway节点上，RBD images的内存占用量可能会增大。根据映射(mapped)的RBD images的数量，相应地计划内存需求。</span><br></pre></td></tr></table></figure><p>Ceph Monitors或OSD没有特定的iSCSI gateway选项，但是降低默认timers以检测OSD至关重要，它可以降低initiator超时的可能性，这一点很重要。建议为存储集群中的每个OSD节点使用以下配置选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[osd]</span><br><span class="line">osd heartbeat grace = 20</span><br><span class="line">osd heartbeat interval = 5</span><br></pre></td></tr></table></figure><ul><li>Ceph Monitor的在线更新</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ceph tell &lt;daemon_type&gt;.&lt;id&gt; config set &lt;parameter_name&gt; &lt;new_value&gt;</span><br><span class="line"></span><br><span class="line">ceph tell osd.0 config set osd_heartbeat_grace 20</span><br><span class="line">ceph tell osd.0 config set osd_heartbeat_interval 5</span><br></pre></td></tr></table></figure><ul><li>OSD节点的在线更新</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ceph daemon &lt;daemon_type&gt;.&lt;id&gt; config set osd_client_watch_timeout 15</span><br><span class="line"></span><br><span class="line">ceph daemon osd.0 config set osd_heartbeat_grace 20</span><br><span class="line">ceph daemon osd.0 config set osd_heartbeat_interval 5</span><br></pre></td></tr></table></figure><p>有关设置Ceph的配置选项的更多详细信息，请参阅<a href="http://docs.ceph.com/docs/master/rados/configuration/" target="_blank" rel="noopener">Configuration page</a>。</p><h1 id="Configuring-the-iSCSI-Target"><a href="#Configuring-the-iSCSI-Target" class="headerlink" title="Configuring the iSCSI Target"></a>Configuring the iSCSI Target</h1><p>传统上，对Ceph存储集群的块级访问仅限于QEMU和librbd，这是在OpenStack环境中采用的关键因素。从Ceph Luminous版本开始，块级访问正在扩展，以提供标准的iSCSI支持，从而允许更广泛的平台使用，并有可能打开新的用例。</p><ul><li>Red Hat Enterprise Linux/CentOS 7.5（或更高版本）；Linux内核v4.16（或更高版本）</li><li>使用ceph-ansible或使用command-line interface部署的有效Ceph Storage集群</li><li>iSCSI gateways nodes，可以与OSD nodes同一节点，也可以使用专用节点上</li><li>iSCSI front-end traffic和Ceph back-end traffic使用单独的网络</li></ul><p>安装和配置 Ceph iSCSI gateway的方法： </p><ul><li><p><a href="https://docs.ceph.com/docs/mimic/rbd/iscsi-target-ansible/" target="_blank" rel="noopener">Using Ansible</a></p></li><li><p><a href="https://docs.ceph.com/docs/mimic/rbd/iscsi-target-cli/" target="_blank" rel="noopener">Using the Command Line Interface</a></p></li></ul><h1 id="Configuring-the-iSCSI-Initiators"><a href="#Configuring-the-iSCSI-Initiators" class="headerlink" title="Configuring the iSCSI Initiators"></a>Configuring the iSCSI Initiators</h1><ul><li><a href="https://docs.ceph.com/docs/mimic/rbd/iscsi-initiator-linux" target="_blank" rel="noopener">iSCSI Initiator for Linux</a></li><li><a href="https://docs.ceph.com/docs/mimic/rbd/iscsi-initiator-win" target="_blank" rel="noopener">iSCSI Initiator for Microsoft Windows</a></li><li><a href="https://docs.ceph.com/docs/mimic/rbd/iscsi-initiator-esx" target="_blank" rel="noopener">iSCSI Initiator for VMware ESX</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">警告：通过多个iSCSI网关导出RBD image时，不支持使用SCSI persistent group reservations（PGR）和基于SCSI 2 reservations的应用程序。</span><br></pre></td></tr></table></figure><h1 id="Monitoring-the-iSCSI-Gateways"><a href="#Monitoring-the-iSCSI-Gateways" class="headerlink" title="Monitoring the iSCSI Gateways"></a>Monitoring the iSCSI Gateways</h1><p>Ceph为iSCSI gateway环境提供了一个附加工具，以监视导出的RADOS Block Device（RBD）images的性能。</p><p>该gwtop工具是一个类似top的工具，用于显示通过iSCSI导出到客户端的RBD images的聚合性能指标。这些指标来自Performance Metrics Domain Agent（PMDA）。来自Linux-IO target（LIO）PMDA的信息用于列出每个已导出的RBD images以及所连接的客户端及其关联的I / O指标。</p><p><strong>Requirements</strong></p><ul><li>正在运行的Ceph iSCSI gateway</li></ul><p><strong>Installing</strong></p><p>1、在每个iSCSI gateway节点安装ceph-iscsi-tools</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ceph-iscsi-tools</span><br></pre></td></tr></table></figure><p>2、在每个iSCSI gateway节点安装performance co-pilot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install pcp</span><br></pre></td></tr></table></figure><p>3、在每个iSCSI gateway节点安装LIO PMDA</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install pcp-pmda-lio</span><br></pre></td></tr></table></figure><p>4、在每个iSCSI gateway节点enable并start performance co-pilot service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl enable pmcd</span><br><span class="line"># systemctl start pmcd</span><br></pre></td></tr></table></figure><p>5、注册pcp-pmda-lio agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/pcp/pmdas/lio</span><br><span class="line">./Install</span><br></pre></td></tr></table></figure><p>默认情况下，<code>gwtop</code>假定iSCSI gateway configuration object被存储在rbd pool被叫做gateway.conf的RADOS object中。此configuration定义了需要收集性能信息的iSCSI gateways。可以使用<code>-g</code>或<code>-c</code>标志将其覆盖 。gwtop –help获取更多详细信息。</p><p>LIO configuration确定要从performance co-pilot提取性能统计信息的类型。当<code>gwtop</code>启动时，它着眼于LIO configuration，如果发现user-space的磁盘，然后<code>gwtop</code> 自动选择LIO收集器。</p><p><strong>Example gwtop Outputs</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gwtop  2/2 Gateways   CPU% MIN:  4 MAX:  5    Network Total In:    2M  Out:    3M   10:20:00</span><br><span class="line">Capacity:   8G    Disks:   8   IOPS:  503   Clients:  1   Ceph: HEALTH_OK          OSDs:   3</span><br><span class="line">Pool.Image       Src    Size     iops     rMB/s     wMB/s   Client</span><br><span class="line">iscsi.t1703             500M        0      0.00      0.00</span><br><span class="line">iscsi.testme1           500M        0      0.00      0.00</span><br><span class="line">iscsi.testme2           500M        0      0.00      0.00</span><br><span class="line">iscsi.testme3           500M        0      0.00      0.00</span><br><span class="line">iscsi.testme5           500M        0      0.00      0.00</span><br><span class="line">rbd.myhost_1      T       4G      504      1.95      0.00   rh460p(CON)</span><br><span class="line">rbd.test_2                1G        0      0.00      0.00</span><br><span class="line">rbd.testme              500M        0      0.00      0.00</span><br></pre></td></tr></table></figure><p>在<em>Client</em> column，<code>(CON)</code>表示iSCSI initiator (client)当前已登录到iSCSI gateway。如果显示<code>-multi-</code>，则表示多个clients映射到单个RBD image。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ceph,iscsi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tgt</title>
      <link href="/2019/09/23/tgt/"/>
      <url>/2019/09/23/tgt/</url>
      
        <content type="html"><![CDATA[<h1 id="安装编译依赖"><a href="#安装编译依赖" class="headerlink" title="安装编译依赖"></a>安装编译依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc rpm-build libibverbs-devel librdmacm-devel libaio-devel docbook-style-xsl -y</span><br></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@dev tgt]# tree scripts/</span><br><span class="line">scripts/</span><br><span class="line">├── build-pkg.sh#build rpm或deb包</span><br><span class="line">├── checkarch.sh#</span><br><span class="line">├── checkpatch.pl#</span><br><span class="line">├── deb</span><br><span class="line">│   ├── changelog</span><br><span class="line">│   ├── compat</span><br><span class="line">│   ├── control</span><br><span class="line">│   ├── copyright</span><br><span class="line">│   ├── init</span><br><span class="line">│   ├── patches</span><br><span class="line">│   │   └── 0001-Use-local-docbook-for-generating-docs.patch</span><br><span class="line">│   ├── rules</span><br><span class="line">│   ├── source</span><br><span class="line">│   │   └── format</span><br><span class="line">│   └── tgt.bash-completion</span><br><span class="line">├── initd.sample</span><br><span class="line">├── Makefile</span><br><span class="line">├── tgt-admin</span><br><span class="line">├── tgt.bashcomp.sh</span><br><span class="line">├── tgt-core-test</span><br><span class="line">├── tgtd.service</span><br><span class="line">├── tgtd.spec</span><br><span class="line">└── tgt-setup-lun</span><br><span class="line"></span><br><span class="line">3 directories, 20 files</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tgt,ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elastic stack - logstash</title>
      <link href="/2019/09/18/elastic-stack-logstash/"/>
      <url>/2019/09/18/elastic-stack-logstash/</url>
      
        <content type="html"><![CDATA[<h1 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h1><p>Logstash是开源的服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到您最喜欢的“存储库”中。（我们的存储库是Elasticsearch）</p><p><img src="https://www.elastic.co/guide/en/logstash/current/static/images/basic_logstash_pipeline.png" alt></p><h2 id="Logstash部署安装"><a href="#Logstash部署安装" class="headerlink" title="Logstash部署安装"></a>Logstash部署安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 检查jdk环境，要就jdk1.8+</span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"># 解压安装包</span><br><span class="line">tar zxvf logstash-6.5.4.tar.gz</span><br><span class="line"></span><br><span class="line"># 第一个logstash示例</span><br><span class="line">bin/logstash -e &apos;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123; &#125; &#125;&apos;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# /usr/share/logstash/bin/logstash -e &apos;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123; &#125; &#125;&apos;</span><br><span class="line">hello</span><br><span class="line">&#123;</span><br><span class="line">       &quot;message&quot; =&gt; &quot;hello&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2019-09-19T02:29:59.833Z,</span><br><span class="line">          &quot;host&quot; =&gt; &quot;dev&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Logstash的配置有三部分组成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input &#123;# 输入</span><br><span class="line">    stdin &#123; ... &#125; #标准输入</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123; # 过滤，对数据进行分割、截取等处理</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123; # 输出</span><br><span class="line">    stdout &#123; ... &#125; #标准输出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输入</p><p>采集各种样式、大小和来源的数据</p></li><li><p>过滤</p><p>实时解析和转换数据</p></li><li><p>输出</p><p>选择您的存储库，导出您的数据</p></li></ul><h2 id="读取自定义日志"><a href="#读取自定义日志" class="headerlink" title="读取自定义日志"></a>读取自定义日志</h2><p>如果是自定义结构的日志，这个时候就需要Logstash处理后才能使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># Logstash配置文件，规则定义</span><br><span class="line">[root@dev conf.d]# cat 99-test-yujiang.conf </span><br><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; &quot;/var/log/yujiang.log&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        split =&gt; &#123; &quot;message&quot;=&gt;&quot;|&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 启动Logstash，等待自定义日志文件写入数据</span><br><span class="line">[root@dev conf.d]# /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/99-test-yujiang.conf</span><br><span class="line">&#123;</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">       &quot;message&quot; =&gt; [</span><br><span class="line">        [0] &quot;2019-09-19 11:20&quot;,</span><br><span class="line">        [1] &quot;ERROR&quot;,</span><br><span class="line">        [2] &quot;hello world&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2019-09-19T03:20:21.116Z,</span><br><span class="line">          &quot;path&quot; =&gt; &quot;/var/log/yujiang.log&quot;,</span><br><span class="line">          &quot;host&quot; =&gt; &quot;dev&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 向自定义日志文件中写入数据</span><br><span class="line">[root@dev log]# echo &quot;2019-09-19 11:20|ERROR|hello world&quot; &gt;&gt; yujiang.log</span><br></pre></td></tr></table></figure><p>将自定义日志写入Elasticsearch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># Logstash配置文件，规则定义</span><br><span class="line">[root@dev conf.d]# cat 99-test-yujiang.conf</span><br><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; &quot;/var/log/yujiang.log&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        split =&gt; &#123; &quot;message&quot;=&gt;&quot;|&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [ &quot;192.168.56.101:9200&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在Elasticsearch-head中查看</span><br><span class="line">&#123;</span><br><span class="line">&quot;_index&quot;: &quot;logstash-2019.09.19&quot;,</span><br><span class="line">&quot;_type&quot;: &quot;doc&quot;,</span><br><span class="line">&quot;_id&quot;: &quot;ZNuTR20BQ8jxL59AtKFm&quot;,</span><br><span class="line">&quot;_version&quot;: 1,</span><br><span class="line">&quot;_score&quot;: 1,</span><br><span class="line">&quot;_source&quot;: &#123;</span><br><span class="line">&quot;message&quot;: [</span><br><span class="line">&quot;2019-09-19 11:20&quot;,</span><br><span class="line">&quot;ERROR&quot;,</span><br><span class="line">&quot;hello world&quot;</span><br><span class="line">],</span><br><span class="line">&quot;@timestamp&quot;: &quot;2019-09-19T03:32:04.502Z&quot;,</span><br><span class="line">&quot;@version&quot;: &quot;1&quot;,</span><br><span class="line">&quot;path&quot;: &quot;/var/log/yujiang.log&quot;,</span><br><span class="line">&quot;host&quot;: &quot;dev&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> elk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elastic stack - filebeat</title>
      <link href="/2019/09/17/elastic-stack-filebeat/"/>
      <url>/2019/09/17/elastic-stack-filebeat/</url>
      
        <content type="html"><![CDATA[<p>ELK是Elasticsearch、Logstash、Kibana的简称，这三者是核心套件，并不是全部。一般用于集中搜集并展示日志。</p><h1 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h1><p>filebeat的主要作用是采集日志文件，是轻量级的日志采集器。部署filebeat非常简单，这里就不做介绍了。我们来看一下filebeat的配置与使用。</p><h2 id="简单配置及演示："><a href="#简单配置及演示：" class="headerlink" title="简单配置及演示："></a>简单配置及演示：</h2><p>​    这里我们先看一下filebeat.inputs类型为stdin，output.console方式。启动filebeat后，它会从标准输入接收数据，并以JSON格式打印在控制台中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@dev filebeat]# cat /etc/filebeat/test_stdin.yml </span><br><span class="line">filebeat.inputs:       # filebeat输入配置</span><br><span class="line">  - type: stdin        # stdin表示标准输入</span><br><span class="line">    enabled: true      # 用于启用或禁用模块</span><br><span class="line">output.console:        # Console output</span><br><span class="line">  enabled: true        # 用于启用或禁用模块</span><br><span class="line">  codec.json:          # 配置JSON编码</span><br><span class="line">    pretty: true       # Pretty-print JSON event</span><br><span class="line">    escape_html: true  # 在字符串中配置转义HTML symbols</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@dev filebeat]# filebeat -e -c test_stdin.yml</span><br><span class="line">hello yujiang # 在控制台输入</span><br><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2019-09-17T09:01:00.251Z&quot;,</span><br><span class="line">  &quot;@metadata&quot;: &#123;# 元数据</span><br><span class="line">    &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;6.8.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;offset&quot;: 0,</span><br><span class="line">  &quot;log&quot;: &#123;</span><br><span class="line">    &quot;file&quot;: &#123;</span><br><span class="line">      &quot;path&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;prospector&quot;: &#123;# 标准输入勘探器</span><br><span class="line">    &quot;type&quot;: &quot;stdin&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;input&quot;: &#123;# 控制台标准输入</span><br><span class="line">    &quot;type&quot;: &quot;stdin&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;beat&quot;: &#123;# beat版本以及hostname</span><br><span class="line">    &quot;name&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;hostname&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;6.8.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;host&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;dev&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;message&quot;: &quot;hello yujiang&quot;,# 输入的内容</span><br><span class="line">  &quot;source&quot;: &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日志文件配置及演示"><a href="#日志文件配置及演示" class="headerlink" title="日志文件配置及演示"></a>日志文件配置及演示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[root@dev filebeat]# cat test_log.yml </span><br><span class="line">filebeat.inputs:       # filebeat输入配置</span><br><span class="line">  - type: log          # log表示收集日志文件</span><br><span class="line">    enabled: true      # 用于启用或禁用模块</span><br><span class="line">    paths:             # 日志文件位置</span><br><span class="line">      - /var/log/yujiang.log</span><br><span class="line">output.console:        # Console output</span><br><span class="line">  enabled: true        # 用于启用或禁用模块</span><br><span class="line">  codec.json:          # 配置JSON编码</span><br><span class="line">    pretty: true       # Pretty-print JSON event</span><br><span class="line">    escape_html: true  # 在字符串中配置转义HTML symbols</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 启动filebeat，这时开启另一个终端，向/var/log/yujiang.log文件中写入hello world</span><br><span class="line">[root@dev filebeat]# filebeat -e -c ./test_log.yml </span><br><span class="line">2019-09-17T05:27:25.513-0400INFOcrawler/crawler.go:106Loading and starting Inputs completed. Enabled inputs: 1</span><br><span class="line">2019-09-17T05:28:55.525-0400INFOlog/harvester.go:255Harvester started for file: /var/log/yujiang.log</span><br><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2019-09-17T09:28:55.525Z&quot;,</span><br><span class="line">  &quot;@metadata&quot;: &#123;</span><br><span class="line">    &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;6.8.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;beat&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;6.8.3&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;hostname&quot;: &quot;dev&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;host&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;dev&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;offset&quot;: 0,</span><br><span class="line">  &quot;log&quot;: &#123;</span><br><span class="line">    &quot;file&quot;: &#123;</span><br><span class="line">      &quot;path&quot;: &quot;/var/log/yujiang.log&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;message&quot;: &quot;hello world&quot;,</span><br><span class="line">  &quot;source&quot;: &quot;/var/log/yujiang.log&quot;,</span><br><span class="line">  &quot;prospector&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;log&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;input&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;log&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 向/var/log/yujiang.log文件中写入hello world</span><br><span class="line">[root@dev log]# echo &quot;hello world&quot; &gt;&gt; yujiang.log</span><br></pre></td></tr></table></figure><h2 id="自定义tags配置及演示"><a href="#自定义tags配置及演示" class="headerlink" title="自定义tags配置及演示"></a>自定义tags配置及演示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@dev filebeat]# cat test_log_tags.yml </span><br><span class="line">filebeat.inputs:       # filebeat输入配置</span><br><span class="line">  - type: log          # log表示收集日志文件</span><br><span class="line">    enabled: true      # 用于启用或禁用模块</span><br><span class="line">    paths:             # 日志文件位置</span><br><span class="line">      - /var/log/yujiang.log</span><br><span class="line">    tags: [&quot;web&quot;, &quot;ceph&quot;]  # 自定义tags</span><br><span class="line">output.console:        # Console output</span><br><span class="line">  enabled: true        # 用于启用或禁用模块</span><br><span class="line">  codec.json:          # 配置JSON编码</span><br><span class="line">    pretty: true       # Pretty-print JSON event</span><br><span class="line">    escape_html: true  # 在字符串中配置转义HTML symbols</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 启动filebeat，这时开启另一个终端，向/var/log/yujiang.log文件中写入hello tags</span><br><span class="line">[root@dev filebeat]# filebeat -e -c ./test_log_tags.yml </span><br><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2019-09-17T09:55:43.909Z&quot;,</span><br><span class="line">  &quot;@metadata&quot;: &#123;</span><br><span class="line">    &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;6.8.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;source&quot;: &quot;/var/log/yujiang.log&quot;,</span><br><span class="line">  &quot;offset&quot;: 12,</span><br><span class="line">  &quot;beat&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;hostname&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;6.8.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;message&quot;: &quot;hello tags&quot;,</span><br><span class="line">  &quot;log&quot;: &#123;</span><br><span class="line">    &quot;file&quot;: &#123;</span><br><span class="line">      &quot;path&quot;: &quot;/var/log/yujiang.log&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tags&quot;: [      # 自定义tags</span><br><span class="line">    &quot;web&quot;,</span><br><span class="line">    &quot;ceph&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;prospector&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;log&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;input&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;log&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;host&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;dev&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 向/var/log/yujiang.log文件中写入hello world</span><br><span class="line">[root@dev log]# echo &quot;hello tags&quot; &gt;&gt; yujiang.log</span><br></pre></td></tr></table></figure><h2 id="自定义字段配置及演示"><a href="#自定义字段配置及演示" class="headerlink" title="自定义字段配置及演示"></a>自定义字段配置及演示</h2><p>from添加到子节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[root@dev filebeat]# cat test_log_tags_fields.yml</span><br><span class="line">filebeat.inputs:       # filebeat输入配置</span><br><span class="line">  - type: log          # log表示收集日志文件</span><br><span class="line">    enabled: true      # 用于启用或禁用模块</span><br><span class="line">    paths:             # 日志文件位置</span><br><span class="line">      - /var/log/yujiang.log</span><br><span class="line">    tags: [&quot;web&quot;, &quot;ceph&quot;]  # 添加自定义tags</span><br><span class="line">    fields:            # 添加自定义字段</span><br><span class="line">      from: test-web-ceph</span><br><span class="line">output.console:        # Console output</span><br><span class="line">  enabled: true        # 用于启用或禁用模块</span><br><span class="line">  codec.json:          # 配置JSON编码</span><br><span class="line">    pretty: true       # Pretty-print JSON event</span><br><span class="line">    escape_html: true  # 在字符串中配置转义HTML symbols</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@dev filebeat]# filebeat -e -c test_log_tags_fields.yml </span><br><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2019-09-17T10:14:23.323Z&quot;,</span><br><span class="line">  &quot;@metadata&quot;: &#123;</span><br><span class="line">    &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;6.8.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;source&quot;: &quot;/var/log/yujiang.log&quot;,</span><br><span class="line">  &quot;tags&quot;: [</span><br><span class="line">    &quot;web&quot;,</span><br><span class="line">    &quot;ceph&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;input&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;log&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;offset&quot;: 23,</span><br><span class="line">  &quot;message&quot;: &quot;hello tags fields&quot;,</span><br><span class="line">  &quot;prospector&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;log&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;beat&quot;: &#123;</span><br><span class="line">    &quot;hostname&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;6.8.3&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;dev&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;host&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;dev&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;log&quot;: &#123;</span><br><span class="line">    &quot;file&quot;: &#123;</span><br><span class="line">      &quot;path&quot;: &quot;/var/log/yujiang.log&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;fields&quot;: &#123;</span><br><span class="line">    &quot;from&quot;: &quot;test-web-ceph&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@dev log]# echo &quot;hello tags fields&quot; &gt;&gt; yujiang.log</span><br></pre></td></tr></table></figure><p>from添加到root节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@dev filebeat]# cat test_log_tags_fields.yml </span><br><span class="line">filebeat.inputs:       # filebeat输入配置</span><br><span class="line">  - type: log          # log表示收集日志文件</span><br><span class="line">    enabled: true      # 用于启用或禁用模块</span><br><span class="line">    paths:             # 日志文件位置</span><br><span class="line">      - /var/log/yujiang.log</span><br><span class="line">    tags: [&quot;web&quot;, &quot;ceph&quot;]  # 添加自定义tags</span><br><span class="line">    fields:            # 添加自定义字段</span><br><span class="line">      from: test-web-ceph</span><br><span class="line">    fields_under_root: true # true为添加到根节点，false为添加到子节点</span><br><span class="line">output.console:        # Console output</span><br><span class="line">  enabled: true        # 用于启用或禁用模块</span><br><span class="line">  codec.json:          # 配置JSON编码</span><br><span class="line">    pretty: true       # Pretty-print JSON event</span><br><span class="line">    escape_html: true  # 在字符串中配置转义HTML symbols</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@dev filebeat]# filebeat -e -c test_log_tags_fields.yml</span><br><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2019-09-17T10:25:29.414Z&quot;,</span><br><span class="line">  &quot;@metadata&quot;: &#123;</span><br><span class="line">    &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;doc&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;6.8.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;offset&quot;: 77,</span><br><span class="line">  &quot;tags&quot;: [</span><br><span class="line">    &quot;web&quot;,</span><br><span class="line">    &quot;ceph&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;prospector&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;log&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;input&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;log&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: &quot;test-web-ceph&quot;,    # from添加到root中</span><br><span class="line">  &quot;beat&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;6.8.3&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;hostname&quot;: &quot;dev&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;log&quot;: &#123;</span><br><span class="line">    &quot;file&quot;: &#123;</span><br><span class="line">      &quot;path&quot;: &quot;/var/log/yujiang.log&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;message&quot;: &quot;hello tags fields fields_under_root&quot;,</span><br><span class="line">  &quot;source&quot;: &quot;/var/log/yujiang.log&quot;,</span><br><span class="line">  &quot;host&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;dev&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@dev log]# echo &quot;hello tags fields fields_under_root&quot; &gt;&gt; yujiang.log</span><br></pre></td></tr></table></figure><h2 id="对接elasticsearch配置及演示"><a href="#对接elasticsearch配置及演示" class="headerlink" title="对接elasticsearch配置及演示"></a>对接elasticsearch配置及演示</h2><p>日志内容输出到elasticsearch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@dev filebeat]# cat test_es.yml </span><br><span class="line">filebeat.inputs:       # filebeat输入配置</span><br><span class="line">  - type: log          # log表示收集日志文件</span><br><span class="line">    enabled: true      # 用于启用或禁用模块</span><br><span class="line">    paths:             # 日志文件位置</span><br><span class="line">      - /var/log/yujiang.log</span><br><span class="line">    tags: [&quot;web&quot;, &quot;ceph&quot;]  # 添加自定义tags</span><br><span class="line">    fields:            # 添加自定义字段</span><br><span class="line">      from: test-web-ceph</span><br><span class="line">    fields_under_root: true # true为添加到根节点，false为添加到子节点</span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 3 #索引的分区数</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;192.168.56.101:9200&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@dev filebeat]# filebeat -e -c test_es.yml </span><br><span class="line">2019-09-17T23:10:34.272-0400INFOlog/harvester.go:255Harvester started for file: /var/log/yujiang.log</span><br><span class="line">2019-09-17T23:10:35.273-0400INFOpipeline/output.go:95Connecting to backoff(elasticsearch(http://192.168.56.101:9200))</span><br><span class="line">2019-09-17T23:10:35.279-0400INFOelasticsearch/client.go:739Attempting to connect to Elasticsearch version 6.8.3</span><br><span class="line">2019-09-17T23:10:35.379-0400INFOtemplate/load.go:128Template already exists and will not be overwritten.</span><br><span class="line">2019-09-17T23:10:35.379-0400INFOinstance/beat.go:889Template successfully loaded.</span><br><span class="line">2019-09-17T23:10:35.380-0400INFOpipeline/output.go:105Connection to backoff(elasticsearch(http://192.168.56.101:9200)) established</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@dev log]# echo &quot;hello&quot; &gt; yujiang.log</span><br></pre></td></tr></table></figure><h2 id="Filebeat工作原理"><a href="#Filebeat工作原理" class="headerlink" title="Filebeat工作原理"></a>Filebeat工作原理</h2><p>Filebeat主要由两个组件组成：prospector和harvester。</p><ul><li><p>harvester</p><ul><li><p>负责读取单个文件的内容</p></li><li><p>如果文件在读取时被删除或重命名，Filebeat将继续读取文件</p></li></ul></li><li><p>prospector</p><ul><li><p>负责管理harvester并找到所有要读取的文件来源</p></li><li><p>如果输入类型为日志，则查找器将查找路径匹配的所有文件，并为每个文件启动一个harvester</p></li><li><p>Filebeat目前支持两种prospector类型：log和stdin</p></li></ul></li><li><p>Filebeat如何保持文件的状态</p><ul><li><p>Filebeat保存每个文件的状态并将状态刷新到磁盘上的注册文件中</p></li><li><p>该状态用于记住harvester正在读取的最后偏移量，并确保发送所有日志行</p></li><li><p>如果输出（例如Elasticsearch或Logstash）无法访问，Filebeat会跟踪最后发送的行，并在输出再次可用时继续读取文件</p></li><li><p>在Filebeat运行时，每个prospector内存中也会保存文件状态信息，当重新启动Filebeat时，将使用注册文件的数据来重建文件状态，Filebeat将每个harvester在从保存的最后偏移量继续读取</p></li><li><p>文件状态记录在data/registry文件中</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一般会保存在registry文件中，记录文件的偏移量</span><br><span class="line">[root@dev filebeat]# cat /var/lib/filebeat/registry </span><br><span class="line">[&#123;&quot;source&quot;:&quot;/var/log/boot.log&quot;,&quot;offset&quot;:0,&quot;timestamp&quot;:&quot;2019-09-17T21:50:45.201469161-04:00&quot;,&quot;ttl&quot;:-2,&quot;type&quot;:&quot;log&quot;,&quot;meta&quot;:null,&quot;FileStateOS&quot;:&#123;&quot;inode&quot;:134315203,&quot;device&quot;:64768&#125;&#125;,&#123;&quot;source&quot;:&quot;/var/log/yum.log&quot;,&quot;offset&quot;:9899,&quot;timestamp&quot;:&quot;2019-09-17T21:50:45.160502101-04:00&quot;,&quot;ttl&quot;:-2,&quot;type&quot;:&quot;log&quot;,&quot;meta&quot;:null,&quot;FileStateOS&quot;:&#123;&quot;inode&quot;:134315217,&quot;device&quot;:64768&#125;&#125;,&#123;&quot;source&quot;:&quot;/var/log/yujiang.log&quot;,&quot;offset&quot;:12,&quot;timestamp&quot;:&quot;2019-09-17T23:15:39.385983011-04:00&quot;,&quot;ttl&quot;:-1,&quot;type&quot;:&quot;log&quot;,&quot;meta&quot;:null,&quot;FileStateOS&quot;:&#123;&quot;inode&quot;:134836485,&quot;device&quot;:64768&#125;&#125;]</span><br></pre></td></tr></table></figure><h2 id="启动参数说明"><a href="#启动参数说明" class="headerlink" title="启动参数说明"></a>启动参数说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@dev filebeat]# filebeat -e -c test_es.yml -d &quot;publish&quot;</span><br><span class="line">-e输出到标准输出，默认输出到syslog和logs下</span><br><span class="line">-c指定配置文件</span><br><span class="line">-d输出debug信息</span><br></pre></td></tr></table></figure><h2 id="Filebeat-Module"><a href="#Filebeat-Module" class="headerlink" title="Filebeat Module"></a>Filebeat Module</h2><p>Filebeat中，有大量的Module，可以简化我们的配置，可直接使用。在filebeat.yml中必须配置<code>filebeat.config.modules.path</code>目录，否则会报错<code>Error in modules manager: modules management requires &#39;filebeat.config.modules.path&#39; setting</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@dev filebeat]# cat /etc/filebeat/filebeat.yml </span><br><span class="line"># ......</span><br><span class="line">filebeat.config:</span><br><span class="line">  modules:</span><br><span class="line">    enabled: true</span><br><span class="line">    path: /etc/filebeat/modules.d/*.yml</span><br><span class="line">    reload.enabled: true</span><br><span class="line">    reload.period: 10s</span><br><span class="line"># ......</span><br></pre></td></tr></table></figure><p>查看模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@dev filebeat]# filebeat modules list</span><br><span class="line">Enabled:</span><br><span class="line">system</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">apache2</span><br><span class="line">auditd</span><br><span class="line">elasticsearch</span><br><span class="line">haproxy</span><br><span class="line">icinga</span><br><span class="line">iis</span><br><span class="line">iptables</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">logstash</span><br><span class="line">mongodb</span><br><span class="line">mysql</span><br><span class="line">nginx</span><br><span class="line">osquery</span><br><span class="line">postgresql</span><br><span class="line">redis</span><br><span class="line">suricata</span><br><span class="line">system</span><br><span class="line">traefik</span><br></pre></td></tr></table></figure><p>配置filebeat.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filebeat:</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">    elasticsearch:</span><br><span class="line">      hosts: [&quot;localhost:9200&quot;]</span><br><span class="line"></span><br><span class="line">filebeat.config:</span><br><span class="line">  modules:</span><br><span class="line">    enabled: true</span><br><span class="line">    path: /etc/filebeat/modules.d/*.yml</span><br><span class="line">    reload.enabled: true</span><br><span class="line">    reload.period: 10s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> elk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 7 升级内核(Centos 7 upgrade kernel)</title>
      <link href="/2019/09/04/Centos-7-%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8-Centos-7-upgrade-kernel/"/>
      <url>/2019/09/04/Centos-7-%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8-Centos-7-upgrade-kernel/</url>
      
        <content type="html"><![CDATA[<p>1、查看当前版本kernel (Show current version of kernel)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# uname -r</span><br><span class="line">3.10.0-957.el7.x86_64</span><br></pre></td></tr></table></figure><p>2、导入公钥 (Import the public key)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br></pre></td></tr></table></figure><p>3、为CentOS-7安装ELRepo (install ELRepo for CentOS-7)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# yum install -y https://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure><p>4、安装yum-plugin-fastestmirror (Install yum-plugin-fastestmirror)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# yum install -y yum-plugin-fastestmirror</span><br></pre></td></tr></table></figure><p>5、查看可以安装的kernel (Show the kernel that can be installed)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# yum --enablerepo=elrepo-kernel provides kernel</span><br></pre></td></tr></table></figure><p>6、安装最新kernel，或安装执行版本的kernel (Install the latest kernel, or install the executable version of the kernel)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# yum --enablerepo=elrepo-kernel install kernel-ml</span><br><span class="line">or</span><br><span class="line">[root@dev ~]# yum --enablerepo=elrepo-kernel install kernel-lt-4.4.190-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure><p>7、设置默认的启动内核 (Set the default boot kernel)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# cat /boot/grub2/grub.cfg | grep &quot;CentOS Linux&quot;</span><br><span class="line">menuentry &apos;CentOS Linux (4.4.190-1.el7.elrepo.x86_64) 7 (Core)&apos; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &apos;gnulinux-3.10.0-862.el7.x86_64-advanced-a66de569-ad95-4599-9f1e-37c19744ace0&apos; &#123;</span><br><span class="line">menuentry &apos;CentOS Linux (3.10.0-957.21.3.el7.x86_64) 7 (Core)&apos; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &apos;gnulinux-3.10.0-862.el7.x86_64-advanced-a66de569-ad95-4599-9f1e-37c19744ace0&apos; &#123;</span><br><span class="line">menuentry &apos;CentOS Linux (3.10.0-862.3.2.el7.x86_64) 7 (Core)&apos; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &apos;gnulinux-3.10.0-862.el7.x86_64-advanced-a66de569-ad95-4599-9f1e-37c19744ace0&apos; &#123;</span><br><span class="line">menuentry &apos;CentOS Linux (3.10.0-862.el7.x86_64) 7 (Core)&apos; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &apos;gnulinux-3.10.0-862.el7.x86_64-advanced-a66de569-ad95-4599-9f1e-37c19744ace0&apos; &#123;</span><br><span class="line">menuentry &apos;CentOS Linux (0-rescue-167a8b301e76475680ccb38e7d691aab) 7 (Core)&apos; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &apos;gnulinux-0-rescue-167a8b301e76475680ccb38e7d691aab-advanced-a66de569-ad95-4599-9f1e-37c19744ace0&apos; &#123;</span><br><span class="line"></span><br><span class="line">[root@dev ~]# grub2-set-default &quot;CentOS Linux (4.4.190-1.el7.elrepo.x86_64) 7 (Core)&quot;</span><br><span class="line"></span><br><span class="line">[root@dev ~]# grub2-editenv list</span><br><span class="line">saved_entry=CentOS Linux (4.4.190-1.el7.elrepo.x86_64) 7 (Core)</span><br></pre></td></tr></table></figure><p>8、重启机器 (Restart the machine)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# reboot</span><br></pre></td></tr></table></figure><p>9、重启后验证是否成功 (Verify successful after reboot)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# uname -r</span><br><span class="line">4.4.190-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure><p>10、删除老kernel，–count flag用于指定要在系统上保留的内核数 (Delete the old kernel, the –count flag is used to specify the number of cores to keep on the system)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">[root@dev ~]# package-cleanup --oldkernels --count=2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LinuxCast]Linux网络基础配置 - 笔记</title>
      <link href="/2019/08/28/LinuxCast-Linux%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE-%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/28/LinuxCast-Linux%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="以太网连接"><a href="#以太网连接" class="headerlink" title="以太网连接"></a>以太网连接</h1><ul><li><p>在Linux中，以太网接口被命名为：eth0、eth1等，0、1代表网卡编号。</p></li><li><p>通过lspci命令可以查看网卡硬件信息（如果是usb网卡，则可能需要使用lsusb命令）</p></li><li><p>命令ifconfig命令用来查看接口信息</p><p><code>ifconfig -a</code>         查看所有接口</p><p><code>ifconfig eth0</code>    查看特定接口</p></li><li><p>命令ifup、ifdown用来启用、禁用一个接口</p><p><code>ifup eth0</code></p><p><code>ifdown eht0</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@aio1 ~]# ifconfig ens33</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 9000</span><br><span class="line">        inet 192.168.46.200  netmask 255.255.255.0  broadcast 192.168.46.255</span><br><span class="line">        inet6 fe80::b3f5:7411:df98:1d00  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:1d:7b:de  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 16673  bytes 23150661 (22.0 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2645  bytes 223690 (218.4 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">RX packets 接收包数量</span><br><span class="line">TX packets 发送包数量</span><br></pre></td></tr></table></figure><h1 id="网络相关配置文件"><a href="#网络相关配置文件" class="headerlink" title="网络相关配置文件"></a>网络相关配置文件</h1><ul><li><p>网卡配置文件</p><p>/etc/sysconfig/network-scripts/ifcfg-ens8f0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet# 类型=以太网</span><br><span class="line">PROXY_METHOD=none# </span><br><span class="line">BROWSER_ONLY=no# </span><br><span class="line">BOOTPROTO=none# 启动协议</span><br><span class="line">DEFROUTE=yes# </span><br><span class="line">IPV4_FAILURE_FATAL=no# </span><br><span class="line">IPV6INIT=yes# </span><br><span class="line">IPV6_AUTOCONF=yes# </span><br><span class="line">IPV6_DEFROUTE=yes# </span><br><span class="line">IPV6_FAILURE_FATAL=no# </span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy# </span><br><span class="line">NAME=ens33# </span><br><span class="line">UUID=3434b388-c4db-4130-bf90-3e34115fe2d3# UUID，统一标识符</span><br><span class="line">DEVICE=ens33# 设备名称</span><br><span class="line">ONBOOT=yes# 服务器启动时，自动启用</span><br><span class="line"></span><br><span class="line">IPADDR=192.168.46.200# IP地址</span><br><span class="line">NETMASK=255.255.255.0# 子网掩码</span><br><span class="line">GATEWAY=192.168.46.2# 网关</span><br><span class="line">DNS1=192.168.46.2# DNS</span><br></pre></td></tr></table></figure></li><li><p>DNS配置文件</p><p>/etc/resolv.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Generated by NetworkManager</span><br><span class="line">search localdomain</span><br><span class="line">nameserver 192.168.46.2</span><br></pre></td></tr></table></figure></li><li><p>主机名配置文件</p><p>/etc/sysconfig/network</p></li><li><p>静态主机名配置文件</p><p>/etc/hosts</p></li></ul><h1 id="网络测试命令"><a href="#网络测试命令" class="headerlink" title="网络测试命令"></a>网络测试命令</h1><ul><li><p>测试网络连通性</p><p>ping 192.168.1.1</p><p>ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p></li><li><p>测试DNS解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bind-utils</span><br></pre></td></tr></table></figure><p>host <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">域名到IP地址的解析</span><br><span class="line">[root@dev ~]# host www.baidu.com</span><br><span class="line">www.baidu.com is an alias for www.a.shifen.com.</span><br><span class="line">www.a.shifen.com has address 61.135.169.125</span><br><span class="line">www.a.shifen.com has address 61.135.169.121</span><br></pre></td></tr></table></figure><p>dig <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p></li><li><p>显示路由表</p><p>ip route</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@aio1 ~]# ip route</span><br><span class="line">default via 192.168.46.2 dev ens33 proto static metric 100 #跟我不在一个网段的，发给default</span><br><span class="line">default via 192.168.46.2 dev ens34 proto static metric 101 </span><br><span class="line">default via 192.168.46.2 dev ens35 proto static metric 102 </span><br><span class="line">default via 192.168.46.2 dev ens36 proto dhcp metric 103 </span><br><span class="line">172.29.232.0/22 dev br-dbaas proto kernel scope link src 172.29.232.100 </span><br><span class="line">192.168.46.0/24 dev ens33 proto kernel scope link src 192.168.46.200 metric 100 </span><br><span class="line">192.168.46.0/24 dev ens36 proto kernel scope link src 192.168.46.137 metric 103 </span><br><span class="line">192.168.46.2 dev ens34 proto static scope link metric 101 </span><br><span class="line">192.168.46.2 dev ens35 proto static scope link metric 102 </span><br><span class="line">192.168.100.0/24 dev ens34 proto kernel scope link src 192.168.100.200 metric 101 </span><br><span class="line">192.168.200.0/24 dev ens35 proto kernel scope link src 192.168.200.200 metric 102</span><br></pre></td></tr></table></figure></li><li><p>追踪到达目标地址的网络路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y traceroute</span><br></pre></td></tr></table></figure><p>traceroute <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p></li><li><p>使用mtr进行网络质量测试（结合了traceroute和ping）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mtr</span><br></pre></td></tr></table></figure><p>mtr <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p></li></ul><h1 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h1><ul><li><p>实时修改主机名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname train.linuxcast.net</span><br></pre></td></tr></table></figure></li><li><p>永久性修改主机名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/sysconfig/network</span><br><span class="line"></span><br><span class="line">HOSTNAME=train.linuxcast.net</span><br></pre></td></tr></table></figure></li></ul><h1 id="故障排查"><a href="#故障排查" class="headerlink" title="故障排查"></a>故障排查</h1><p>网络故障排查遵循从底层到高层、从自身到外部的流程进行</p><ul><li><p>先查看网络配置信息是否正确</p><p>IP地址</p><p>子网掩码</p><p>网关</p><p>DNS</p></li><li><p>查看到达网关是否连通</p><p>ping 网关IP地址</p></li><li><p>查看DNS解析是否正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host www.baidu.com</span><br></pre></td></tr></table></figure></li><li><p>traceroute <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 常用操作</title>
      <link href="/2019/08/20/git-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/08/20/git-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>视频地址：<a href="https://www.youtube.com/channel/UCPhn2rCqhu0HdktsFjixahA" target="_blank" rel="noopener">https://www.youtube.com/channel/UCPhn2rCqhu0HdktsFjixahA</a></p><p>原文地址：<a href="https://github.com/twtrubiks/Git-Tutorials" target="_blank" rel="noopener">https://github.com/twtrubiks/Git-Tutorials</a></p><p>本文档只作为学习笔记，方便自己速查，如果想系统学习请看沈老师的视频和github。</p><h1 id="如何加速大型repo-clone速度"><a href="#如何加速大型repo-clone速度" class="headerlink" title="如何加速大型repo clone速度"></a>如何加速大型repo clone速度</h1><ul><li>–depth参数：只下载最新1次commits log，默认会加–single-branch（只clone单分支，无法checkout）。如果想clone所有分支需要加–no-single-branch（git clone <a href="https://github.com/ceph/ceph.git" target="_blank" rel="noopener">https://github.com/ceph/ceph.git</a> –depth 1 –no-single-branch），可以checkout。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMacBook-Pro-13:test yujiang$ git clone https://github.com/ceph/ceph.git --depth 1</span><br><span class="line">Cloning into &apos;ceph&apos;...</span><br><span class="line">remote: Enumerating objects: 8395, done.</span><br><span class="line">remote: Counting objects: 100% (8395/8395), done.</span><br><span class="line">remote: Compressing objects: 100% (7508/7508), done.</span><br><span class="line">remote: Total 8395 (delta 1133), reused 2722 (delta 467), pack-reused 0</span><br><span class="line">Receiving objects: 100% (8395/8395), 21.01 MiB | 1.52 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (1133/1133), done.</span><br><span class="line">Checking out files: 100% (8847/8847), done.</span><br><span class="line">yujiangdeMacBook-Pro-13:test yujiang$ cd ceph/</span><br><span class="line">yujiangdeMacBook-Pro-13:ceph yujiang$ git log</span><br><span class="line">commit 6b0ef5dc3c550cd8d17c830156541dd491e9a57a (grafted, HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: Alfredo Deza &lt;adeza@redhat.com&gt;</span><br><span class="line">Date:   Tue Aug 20 09:32:05 2019 -0400</span><br><span class="line"></span><br><span class="line">    Merge pull request #29762 from alfredodeza/bz-1738379</span><br><span class="line">    </span><br><span class="line">    ceph-volume: use the OSD identifier when reporting success</span><br><span class="line">    </span><br><span class="line">    Reviewed-by: Jan Fajerski &lt;jfajerski@suse.com&gt;</span><br></pre></td></tr></table></figure><h1 id="git-subtree"><a href="#git-subtree" class="headerlink" title="git subtree"></a>git subtree</h1><p>git submodule是link的概念</p><p>git subtree是copy的概念</p><p><a href="https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt" target="_blank" rel="noopener">https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt</a></p><h3 id="create-git-subtree"><a href="#create-git-subtree" class="headerlink" title="create git subtree"></a>create git subtree</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、首先clone主repo</span><br><span class="line">git clone --recurse-submodules -j8 git@github.com:lnsyyj/lnsyyj-ansible.git</span><br><span class="line">2、进入主repo</span><br><span class="line">cd lnsyyj-ansible</span><br><span class="line">3、添加子repo</span><br><span class="line">git subtree add --prefix=roles/elasticsearch --squash git@github.com:lnsyyj/ansible-role-elasticsearch.git master</span><br><span class="line">git subtree add --prefix=roles/kibana --squash git@github.com:lnsyyj/ansible-role-kibana.git master</span><br><span class="line"></span><br><span class="line">git subtree add --prefix=roles/cloudalchemy.node-exporter --squash git@github.com:cloudalchemy/ansible-node-exporter.git master</span><br><span class="line">git subtree add --prefix=roles/cloudalchemy.prometheus --squash git@github.com:cloudalchemy/ansible-prometheus.git master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--squash  合并子repo的git log</span><br><span class="line">--prefix= 指定copy到主repo的位置</span><br></pre></td></tr></table></figure><h3 id="push-git-subtree"><a href="#push-git-subtree" class="headerlink" title="push git subtree"></a>push git subtree</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pull-git-subtree"><a href="#pull-git-subtree" class="headerlink" title="pull git subtree"></a>pull git subtree</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="常见问题1"><a href="#常见问题1" class="headerlink" title="常见问题1"></a>常见问题1</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fatal: early EOF</span><br><span class="line">fatal: the remote end hung up unexpectedly</span><br><span class="line">fatal: index-pack failed</span><br><span class="line">error: RPC failed; curl 18 transfer closed with outstanding read data remaining</span><br><span class="line"></span><br><span class="line">解决办法：</span><br><span class="line">git config --global http.postBuffer 5242880000</span><br><span class="line">git clone https://github.com/ansible/ansible.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos创建内部mirror</title>
      <link href="/2019/08/20/centos%E5%88%9B%E5%BB%BA%E5%86%85%E9%83%A8mirror/"/>
      <url>/2019/08/20/centos%E5%88%9B%E5%BB%BA%E5%86%85%E9%83%A8mirror/</url>
      
        <content type="html"><![CDATA[<p>公司内部搭建mirror的好处：可以节省大量时间、控制版本、节省公司外网带宽（尤其是国内很多公司基于开源软件搞定制化二次开发），同时也可以纳入发布流程当中。</p><p>yum可以通过FTP或HTTP传输文件，这里只实验HTTP方式。</p><h1 id="server端（搭建的mirror端）"><a href="#server端（搭建的mirror端）" class="headerlink" title="server端（搭建的mirror端）"></a>server端（搭建的mirror端）</h1><p>1、首先安装Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y epel-release &amp;&amp; sudo yum install -y nginx</span><br></pre></td></tr></table></figure><p>2、安装createrepo工具（负责将.rpm放到repomd repository）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y createrepo yum-utils</span><br></pre></td></tr></table></figure><p>3、在本地创建目录，存储repositories</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /usr/share/nginx/repos/ceph/rpm-nautilus/el7/&#123;SRPMS,aarch64,noarch,x86_64&#125;</span><br></pre></td></tr></table></figure><p>4、修改centos源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/yum.repos.d/ceph_163.repo </span><br><span class="line"></span><br><span class="line"># $basearch is x86_64, can be modified</span><br><span class="line">[ceph]</span><br><span class="line">baseurl = http://mirrors.163.com/ceph/rpm-nautilus/el7/$basearch</span><br><span class="line">gpgcheck = 0</span><br><span class="line">gpgkey = http://mirrors.163.com/ceph/keys/release.asc</span><br><span class="line">name = Ceph Stable $basearch repo</span><br><span class="line">priority = 2</span><br><span class="line"></span><br><span class="line">[noarch]</span><br><span class="line">baseurl = http://mirrors.163.com/ceph/rpm-nautilus/el7/noarch</span><br><span class="line">gpgcheck = 0</span><br><span class="line">gpgkey = http://mirrors.163.com/ceph/keys/release.asc</span><br><span class="line">name = Ceph Stable noarch repo</span><br><span class="line">priority = 2</span><br></pre></td></tr></table></figure><p>5、导入GPG Key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://mirrors.163.com/ceph/keys/release.asc | gpg --import -</span><br></pre></td></tr></table></figure><p>6、下载官方repositories到本地服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo reposync -g -l -d -m --repoid=ceph --newest-only --download-metadata --download_path=/usr/share/nginx/repos/ceph/rpm-nautilus/el7/x86_64/</span><br><span class="line">sudo reposync -g -l -d -m --repoid=noarch --newest-only --download-metadata --download_path=/usr/share/nginx/repos/ceph/rpm-nautilus/el7/noarch/</span><br><span class="line"></span><br><span class="line">同步后，目录层级会不同，在download_path后面会自动加一层repoid指定的名字，需要自行调整。</span><br></pre></td></tr></table></figure><p>7、创建new repository</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo createrepo /usr/share/nginx/repos/ceph/rpm-nautilus/el7/x86_64/</span><br><span class="line">sudo createrepo /usr/share/nginx/repos/ceph/rpm-nautilus/el7/noarch/</span><br><span class="line"></span><br><span class="line">这时会在相应的目录中生成repodata</span><br></pre></td></tr></table></figure><p>8、修改Nginx配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123; </span><br><span class="line"># 修改</span><br><span class="line">autoindex on;</span><br><span class="line">root         /usr/share/nginx/repos/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">启动nginx</span><br><span class="line">systemctl start nginx &amp;&amp; systemctl enable nginx</span><br></pre></td></tr></table></figure><h1 id="client端（使用mirror端）"><a href="#client端（使用mirror端）" class="headerlink" title="client端（使用mirror端）"></a>client端（使用mirror端）</h1><p>在/etc/yum.repos.d/中增加新的源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# cat /etc/yum.repos.d/ceph_stable.repo </span><br><span class="line">[ceph_stable]</span><br><span class="line">baseurl = http://10.121.9.103/ceph/rpm-nautilus/el7/$basearch</span><br><span class="line">gpgcheck = 1</span><br><span class="line">gpgkey = https://download.ceph.com/keys/release.asc</span><br><span class="line">name = Ceph Stable $basearch repo</span><br><span class="line">priority = 2</span><br><span class="line"></span><br><span class="line">[ceph_stable_noarch]</span><br><span class="line">baseurl = http://10.121.9.103/ceph/rpm-nautilus/el7/noarch</span><br><span class="line">gpgcheck = 1</span><br><span class="line">gpgkey = https://download.ceph.com/keys/release.asc</span><br><span class="line">name = Ceph Stable noarch repo</span><br><span class="line">priority = 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph社区为什么要使用ceph-volume代替ceph-disk</title>
      <link href="/2019/08/16/ceph%E7%A4%BE%E5%8C%BA%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8ceph-volume%E4%BB%A3%E6%9B%BFceph-disk/"/>
      <url>/2019/08/16/ceph%E7%A4%BE%E5%8C%BA%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8ceph-volume%E4%BB%A3%E6%9B%BFceph-disk/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.ceph.com/docs/master/ceph-volume/intro/#ceph-disk-replaced" target="_blank" rel="noopener">原文地址</a></p><h1 id="OVERVIEW"><a href="#OVERVIEW" class="headerlink" title="OVERVIEW"></a>OVERVIEW</h1><p>ceph-volume旨在成为一个单一用途的命令行工具，将logical volumes部署为OSDs，在preparing, activating, 和creating OSDs时，试图维护与ceph-disk类似的API。</p><p>因为它不依赖于为CEPH安装的UDEV规则且没有交互，因此它背离了ceph-disk。这些rules允许自动检测先前设置的devices，这些devices又被送入ceph-disk以activate它们。</p><h1 id="REPLACING-CEPH-DISK"><a href="#REPLACING-CEPH-DISK" class="headerlink" title="REPLACING CEPH-DISK"></a>REPLACING <code>CEPH-DISK</code></h1><p>ceph-disk工具是在项目需要支持许多不同类型的init系统（upstart, sysvinit, etc…）时创建的，同时能够发现devices。这导致工具最初（以及后来）专注于GPT分区上。特别是在GPT GUID上，它以独特的方式标记device，以回答以下问题：</p><ul><li>device是否是Journal？</li><li>是否是encrypted data partition（加密数据分区）？</li><li>device是否已部分准备就绪？</li></ul><p><code>为了解决这些问题，它使用UDEV规则来匹配GUID，这些GUID将调用ceph-disk，最后在ceph-disk systemd unit和ceph-disk可执行文件之间来回切换。该过程非常不可靠且耗时（必须为每个OSD设置接近3小时的超时），并且会导致OSD 在节点的boot过程中根本不出现。</code></p><p>考虑到UDEV的异步行为，很难调试甚至复现这些问题。</p><p>由于ceph-disk的world-view必须是专门的GPT分区，这意味着它无法与其他技术（如LVM或类似的device mapper devices）一起使用。它最终决定创建一些模块化的东西，从LVM支持开始，并根据需要扩展其他技术。</p><h1 id="GPT-PARTITIONS-ARE-SIMPLE"><a href="#GPT-PARTITIONS-ARE-SIMPLE" class="headerlink" title="GPT PARTITIONS ARE SIMPLE?"></a>GPT PARTITIONS ARE SIMPLE?</h1><p>尽管分区通常很容易理解，但ceph-disk分区并不简单。它需要大量特殊标志才能使它们与device discovery工作流程一起正常工作。以下是创建数据分区的示例调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/sgdisk --largest-new=1 --change-name=1:ceph data --partition-guid=1:f0fc39fd-eeb2-49f1-b922-a11939cf8a0f --typecode=1:89c57f98-2fe5-4dc0-89c1-f3ad0ceff2be --mbrtogpt -- /dev/sdb</span><br></pre></td></tr></table></figure><p>创建这些不仅很难，而且这些分区要求device由 Ceph 独占。例如，在某些情况下，在device加密时将创建一个特殊分区，其中包含未加密的密钥。这是ceph-disk领域的知识，它不会转变对”GPT partitions are simple”的理解。下面是正在创建的特殊分区的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/sgdisk --new=5:0:+10M --change-name=5:ceph lockbox --partition-guid=5:None --typecode=5:fb3aabf9-d25f-47cc-bf5e-721d181642be --mbrtogpt -- /dev/sdad</span><br></pre></td></tr></table></figure><h1 id="MODULARITY"><a href="#MODULARITY" class="headerlink" title="MODULARITY"></a>MODULARITY</h1><p>ceph-volume被设计成一个模块化工具，因为我们预计人们会使用多种方式来配置硬件设备。目前已有两个情况：传统的ceph-disk devices仍然在使用并且有GPT分区（handled by <a href="https://docs.ceph.com/docs/master/ceph-volume/simple/#ceph-volume-simple" target="_blank" rel="noopener">simple</a>）和lvm。</p><p>我们直接从用户空间管理NVMe devices的SPDK devices即将出现，LVM将无法在那里工作，因为根本不涉及内核。</p><h1 id="CEPH-VOLUME-LVM"><a href="#CEPH-VOLUME-LVM" class="headerlink" title="CEPH-VOLUME LVM"></a>CEPH-VOLUME LVM</h1><p>通过使用<a href="https://docs.ceph.com/docs/master/glossary/#term-lvm-tags" target="_blank" rel="noopener">LVM tags</a>，<a href="https://docs.ceph.com/docs/master/ceph-volume/lvm/#ceph-volume-lvm" target="_blank" rel="noopener">lvm</a>子命令能够保存并随后重新发现和查询与OSD相关联的devices，以便可以激活（activate）它们。 这包括对基于LVM的技术（如dm-cache）的支持。</p><p>对于ceph-volume，dm-cache的使用是透明的，对于工具没有区别，它将dm-cache视为普通logical volume。</p><h1 id="LVM-PERFORMANCE-PENALTY"><a href="#LVM-PERFORMANCE-PENALTY" class="headerlink" title="LVM PERFORMANCE PENALTY"></a>LVM PERFORMANCE PENALTY</h1><p>简而言之：我们未能注意到与LVM更改相关的任何重大性能损失。 通过与LVM合作，可以使用其他device mapper技术（例如dmcache）：处理任何位于Logical Volume以下的事情没有技术困难。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus alertmanager</title>
      <link href="/2019/08/08/Prometheus-alertmanager/"/>
      <url>/2019/08/08/Prometheus-alertmanager/</url>
      
        <content type="html"><![CDATA[<p>最近在研究Ceph的监控系统，Ceph 14.2.1的MGR中已经有Prometheus Plugin，可以替代原来的<a href="https://github.com/digitalocean/ceph_exporter" target="_blank" rel="noopener">ceph_exporter</a>项目，作为新的exporter。MGR中的Prometheus Plugin可以对Ceph的一些状态进行监控（大概390+个监控指标），基本涵盖了能想到的还有想不到的监控指标，打开了认识Ceph的另一个窗口。enable起这个Plugin并不是难点，难点在怎样从中捞取有价值的数据，这是需要长期积累持续挖掘的问题，你懂得。。。。。。说了一堆XXX，这里只做一个prometheus与alertmanager集成的入门实验。</p><p>prometheus与alertmanager是相互独立的组件，我们先来说一下它们的职责：</p><ul><li><p>prometheus端负责产生告警，并发送到alertmanager端</p><p>需要配置alertmanager服务在哪、告警产生的条件（alert rule）</p></li><li><p>alertmanager端负责接收prometheus发来的告警，然后做一些后续处理（比如把告警信息发出到email、微信、钉钉……）</p><p>需要配置route、receivers</p></li></ul><p><img src="https://github.com/prometheus/alertmanager/raw/master/doc/arch.svg?sanitize=true" alt></p><p>假设有这样一个场景：Prometheus已经收集到了Ceph的监控指标，如果集群中有OSD down超过1小时，那么我们需要发送邮件给相关人员，告知需要处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible常用模块与操作</title>
      <link href="/2019/07/20/Ansible%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%8E%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/07/20/Ansible%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%8E%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="ansible"><a href="#ansible" class="headerlink" title="ansible"></a>ansible</h1><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="如何查看模块帮助"><a href="#如何查看模块帮助" class="headerlink" title="如何查看模块帮助"></a>如何查看模块帮助</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">列出所有模块</span><br><span class="line">ansible-doc -l</span><br><span class="line"></span><br><span class="line">查看指定模块帮助</span><br><span class="line">ansible-doc -s MODULE_NAME</span><br></pre></td></tr></table></figure><h3 id="ansible命令应用基础"><a href="#ansible命令应用基础" class="headerlink" title="ansible命令应用基础"></a>ansible命令应用基础</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法（新版）</span><br><span class="line">ansible &lt;host-pattern&gt; [options]</span><br><span class="line"></span><br><span class="line">语法（旧版）</span><br><span class="line">ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</span><br><span class="line">-f forks：启动的并发线程数</span><br><span class="line">-m module_name：要使用的模块</span><br><span class="line">-a args：模块特有的参数</span><br></pre></td></tr></table></figure><h3 id="常见模块"><a href="#常见模块" class="headerlink" title="常见模块"></a>常见模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">command：命令模块，默认模块，用于在远程执行命令</span><br><span class="line">例如：</span><br><span class="line">ansible all -a &apos;date&apos;</span><br><span class="line">ansible all -m command -a &apos;date&apos;</span><br><span class="line"></span><br><span class="line">cron：</span><br><span class="line">state：</span><br><span class="line">present：安装</span><br><span class="line">absent：移除</span><br><span class="line">例如：</span><br><span class="line">ansible webserver -m cron -a &apos;minute=&quot;*/10&quot; job=&quot;/bin/echo hello&quot; name=&quot;test cron job&quot;&apos;</span><br><span class="line">ansible webserver -a &apos;crontab -l&apos;</span><br><span class="line">ansible webserver -m cron -a &apos;minute=&quot;*/10&quot; job=&quot;/bin/echo hello&quot; name=&quot;test cron job&quot; state=absent&apos;</span><br><span class="line"></span><br><span class="line">user：</span><br><span class="line">name=：指明创建的用户的名字</span><br><span class="line">例如：</span><br><span class="line">ansible all -m user -a &apos;name=&quot;user1&quot;&apos;</span><br><span class="line">ansible all -m user -a &apos;name=&quot;user1&quot; state=absent&apos;</span><br><span class="line"></span><br><span class="line">group：</span><br><span class="line">例如：</span><br><span class="line">ansible webserver -m group -a &apos;name=mysql gid=306 system=yes&apos;</span><br><span class="line">ansible webserver -m user -a &apos;name=mysql uid=306 system=yes group=mysql&apos;</span><br><span class="line"></span><br><span class="line">copy：</span><br><span class="line">src=：定义本地源文件路径</span><br><span class="line">dest=：定义远程目标文件路径</span><br><span class="line">content=：取代src=，表示直接用此处指定的信息生成为目标文件内容</span><br><span class="line">例如:</span><br><span class="line">ansible all -m copy -a &apos;src=/etc/fstab dest=/tmp/fstab.ansible owner=root mode=640&apos;</span><br><span class="line">ansible all -m copy -a &apos;content=&quot;Hello Ansible\nHi MageEdu&quot; dest=/tmp/test.ansible&apos;</span><br><span class="line"></span><br><span class="line">file：设定文件属性</span><br><span class="line">path=：指定文件路径，可以使用name或dest来替换</span><br><span class="line">创建文件的符号链接：</span><br><span class="line">src=：指明源文件</span><br><span class="line">path=：指明符号链接文件路径</span><br><span class="line">例如：</span><br><span class="line">ansible all -m file -a &apos;owner=mysql group=mysql mode=644 path=/tmp/fstab.ansible&apos;</span><br><span class="line">ansible all -m file -a &apos;path=/tmp/fstab.link src=/tmp/fstab.ansible state=link&apos;</span><br><span class="line"></span><br><span class="line">ping：测试指定主机是否能连接</span><br><span class="line">例如：</span><br><span class="line">ansible all -m ping</span><br><span class="line"></span><br><span class="line">service：指定服务运行状态</span><br><span class="line">enabled=：是否开机自动启动，取值为true或者false</span><br><span class="line">name=：服务名称</span><br><span class="line">state=：状态，取值有started，stopped，restarted</span><br><span class="line">例如：</span><br><span class="line">ansible webserver -a &apos;service httpd status&apos;</span><br><span class="line">ansible webserver -a &apos;chkconfig --list httpd&apos;</span><br><span class="line">ansible webserver -m service -a &apos;enabled=true name=httpd state=started&apos;</span><br><span class="line"></span><br><span class="line">shell：在远程主机上运行命令，尤其是用到管道等功能的复杂命令</span><br><span class="line">例如：</span><br><span class="line">ansible all -m user -a &apos;name=user1&apos;</span><br><span class="line">ansible all -m command -a &apos;echo mageedu | passwd --stdin user1&apos; （command模块|管道符无法送过去）</span><br><span class="line">ansible all -m shell -a &apos;echo mageedu | passwd --stdin user1&apos; （有管道或变量最好使用shell模块）</span><br><span class="line"></span><br><span class="line">script：将本地脚本复制到远程主机并运行</span><br><span class="line">注意：要使用相对路径指定脚本</span><br><span class="line">例如：</span><br><span class="line">ansible all -m script -a &quot;test.sh&quot;</span><br><span class="line"></span><br><span class="line">yum：安装程序包</span><br><span class="line">name=：指明要安装的程序包，可以带上版本号</span><br><span class="line">state=：present，latest表示安装，absent表示卸载</span><br><span class="line">例如：</span><br><span class="line">ansible all -m yum -a &quot;name=vim&quot;</span><br><span class="line"></span><br><span class="line">setup：收集远程主机的facts</span><br><span class="line">每个被管理节点在接收并运行管理命令之前，会将自己主机相关信息，如操作系统版本、IP地址等报告给远程的ansible主机</span><br><span class="line">ansible all -m setup</span><br></pre></td></tr></table></figure><h1 id="ansible-playbook预备知识"><a href="#ansible-playbook预备知识" class="headerlink" title="ansible-playbook预备知识"></a>ansible-playbook预备知识</h1><h2 id="YMAL语法"><a href="#YMAL语法" class="headerlink" title="YMAL语法"></a>YMAL语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">YAML的语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。其结构（Structure）通过空格来展示，序列（Sequence）里的项用&quot;-&quot;来代表，Map里的键值对用&quot;:&quot;分隔。下面是一个示例。</span><br><span class="line">name: John Smith</span><br><span class="line">age: 41</span><br><span class="line">gender: Male</span><br><span class="line">spouse:</span><br><span class="line">    name: Jane Smith</span><br><span class="line">    age: 37</span><br><span class="line">    gender: Female</span><br><span class="line">children:</span><br><span class="line">    - name: Jimmy Smith</span><br><span class="line">      age: 17</span><br><span class="line">      gender: Male</span><br><span class="line">    - name: Jenny Smith</span><br><span class="line">      age: 13</span><br><span class="line">      gender: Female</span><br></pre></td></tr></table></figure><h3 id="YMAL常见的数据类型"><a href="#YMAL常见的数据类型" class="headerlink" title="YMAL常见的数据类型"></a>YMAL常见的数据类型</h3><p><code>list</code> 列表的所有元素均使用”-“开头，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># A list of stasty fruits</span><br><span class="line">- Apple</span><br><span class="line">- Orange</span><br><span class="line">- Strawberry</span><br><span class="line">- Mango</span><br></pre></td></tr></table></figure><p><code>dictionary</code> 字典通过key与value进行标识，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># An employee record</span><br><span class="line">name: Example Developer</span><br><span class="line">job: Developer</span><br><span class="line">skill: Elite</span><br><span class="line"></span><br><span class="line">也可以将key: value放置于&#123;&#125;中进行表示，例如：</span><br><span class="line">---</span><br><span class="line"># An employee record</span><br><span class="line">&#123;name: Example Developer, job: Developer, skill: Elite&#125;</span><br></pre></td></tr></table></figure><h2 id="基础元素"><a href="#基础元素" class="headerlink" title="基础元素"></a>基础元素</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>变量命名</li></ul><p>变量名仅能由字母、数字和下划线组成，且只能以字母开头。</p><ul><li>facts</li></ul><p>facts是由正在通信的远程目标主机发回的信息，这些信息被保存在ansible变量中，要获取指定的远程主机所支持的所有facts，可以使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible hostname -m setup</span><br></pre></td></tr></table></figure><ul><li>register</li></ul><p>把任务的输出定义为变量，然后用于其他任务，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">    - shell: /usr/bin/foo</span><br><span class="line">      register: foo_result</span><br><span class="line">      ignore_errors: True</span><br></pre></td></tr></table></figure><ul><li>通过命令行传递变量</li></ul><p>在运行playbook的时候也可以传递一些变量供playbook使用，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook test.yml --extra-vars &quot;hosts=www user=mageedu&quot;</span><br></pre></td></tr></table></figure><ul><li>通过roles传递变量</li></ul><p>当给一个主机应用角色的时候可以传递变量，然后在角色内使用这些变量，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">    - common</span><br><span class="line">    - &#123; role: foo_app_instance, dir: &apos;/web/htdocs/a.com&apos;, port: 8080 &#125;</span><br></pre></td></tr></table></figure><h3 id="Inventory"><a href="#Inventory" class="headerlink" title="Inventory"></a>Inventory</h3><p>ansible主要用在批量主机操作，为了便携的使用其中的部分主机，可以在inventory file中将其分组命名。默认的inventory file为/etc/ansible/hosts。</p><p>inventory file可以有多个，且也可以通过Dynamic Inventory来动态生成。</p><ul><li>inventory文件格式</li></ul><p>inventory文件遵循INI文件风格，中括号中的字符为组名。可以将同一个主机同时归并到多个不同的组中。此外，如果目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口号来标明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[webservers]</span><br><span class="line">www1.magedu.com:2222</span><br><span class="line">www2.magedu.com</span><br><span class="line"></span><br><span class="line">[dbservers]</span><br><span class="line">db1.magedu.com</span><br><span class="line">db2.magedu.com</span><br><span class="line">db3.magedu.com</span><br><span class="line"></span><br><span class="line">如果主机名称遵循相似的命名模式，还可以使用列表的方式标识各主机，例如：</span><br><span class="line">[webservers]</span><br><span class="line">www[01:50].example.com</span><br><span class="line"></span><br><span class="line">[databases]</span><br><span class="line">db-[a:f].example.com</span><br></pre></td></tr></table></figure><ul><li>主机变量</li></ul><p>可以在inventory中定义主机时为其添加主机变量以便于在playbook中使用，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[webservers]</span><br><span class="line">www1.magedu.com http_port=80 maxRequestsPerChild=808</span><br><span class="line">www2.magedu.com http_port=8080 maxRequestsPerChild=909</span><br></pre></td></tr></table></figure><ul><li>组变量</li></ul><p>组变量是赋予给指定组内所有主机上的在playbook中可用的变量。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[webservers]</span><br><span class="line">www1.magedu.com</span><br><span class="line">www2.magedu.com</span><br><span class="line"></span><br><span class="line">[webservers:vars]</span><br><span class="line">ntp_server=ntp.magedu.com</span><br><span class="line">nfs_server=nfs.magedu.com</span><br></pre></td></tr></table></figure><ul><li>组嵌套</li></ul><p>inventory中，组还可以包含其他的组，并且也可以向组中的主机指定变量。不过，这些变量只能在ansible-playbook中使用，而ansible不支持。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[apache]</span><br><span class="line">httpd1.magedu.com</span><br><span class="line">httpd2.magedu.com</span><br><span class="line"></span><br><span class="line">[nginx]</span><br><span class="line">ngx1.magedu.com</span><br><span class="line">ngx2.magedu.com</span><br><span class="line"></span><br><span class="line">[webservers:children]</span><br><span class="line">apache</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line">[webservers:vars]</span><br><span class="line">ntp_server=ntp.magedu.com</span><br></pre></td></tr></table></figure><ul><li>inventory参数</li></ul><p>ansible基于ssh连接inventory中指定的远程主机时，还可以通过参数指定其交互方式，<a href="https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html</a></p><h1 id="ansible-playbook"><a href="#ansible-playbook" class="headerlink" title="ansible-playbook"></a>ansible-playbook</h1><p>playbook是由一个或多个play组成的列表，play的主要功能在于将事先归并为一组的主机装扮成事先通过ansible中的task定义好的角色。从根本上来讲，所谓task无非是调用ansible的一个module。将多个play组织在一个playbook中，即可以让它们连同起来按事先编排的机制同唱一台大戏。下面是一个简单示例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- host: webnodes</span><br><span class="line">  vars:</span><br><span class="line">    http_port: 80</span><br><span class="line">    max_clients: 256</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ensure apache is at the latest version</span><br><span class="line">    yum: name=httpd state=latest</span><br><span class="line">  - name: ensure apache is running</span><br><span class="line">    service: name=httpd state=started</span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart apache</span><br><span class="line">      service: name=httpd state=restarted</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos yum 详解</title>
      <link href="/2019/07/10/centos-yum-%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/07/10/centos-yum-%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="NAME"><a href="#NAME" class="headerlink" title="NAME"></a>NAME</h1><p>yum - Yellowdog Updater Modified</p><h1 id="SYNOPSIS"><a href="#SYNOPSIS" class="headerlink" title="SYNOPSIS"></a>SYNOPSIS</h1><p>yum [options] [command] [package …]</p><h1 id="DESCRIPTION"><a href="#DESCRIPTION" class="headerlink" title="DESCRIPTION"></a>DESCRIPTION</h1><p> yum是一个基于rpm的交互式package manager。 它可以自动执行系统更新，包括依赖分析和基于<code>repository</code>元数据的过时处理。 它还可以安装新软件包，删除旧软件包以及对已安装的或者可用软件包执行查询。yum类似于apt-get和smart等其他高级包管理器。</p><p>command是以下之一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">* install package1 [package2] [...]</span><br><span class="line">* update [package1] [package2] [...]</span><br><span class="line">* update-to [package1] [package2] [...]</span><br><span class="line">* update-minimal [package1] [package2] [...]</span><br><span class="line">* check-update</span><br><span class="line">* upgrade [package1] [package2] [...]</span><br><span class="line">* upgrade-to [package1] [package2] [...]</span><br><span class="line">* distribution-synchronization [package1] [package2] [...]</span><br><span class="line">* remove | erase package1 [package2] [...]</span><br><span class="line">* autoremove [package1] [...]</span><br><span class="line">* list [...]</span><br><span class="line">* info [...]</span><br><span class="line">* provides | whatprovides feature1 [feature2] [...]</span><br><span class="line">* clean [ packages | metadata | expire-cache | rpmdb | plugins | all ]</span><br><span class="line">* makecache [fast]</span><br><span class="line">* groups [...]</span><br><span class="line">* search string1 [string2] [...]</span><br><span class="line">* shell [filename]</span><br><span class="line">* resolvedep dep1 [dep2] [...]</span><br><span class="line">(maintained for legacy reasons only - use repoquery or yum provides)</span><br><span class="line">* localinstall rpmfile1 [rpmfile2] [...]</span><br><span class="line">(maintained for legacy reasons only - use install)</span><br><span class="line">* localupdate rpmfile1 [rpmfile2] [...]</span><br><span class="line">(maintained for legacy reasons only - use update)</span><br><span class="line">* reinstall package1 [package2] [...]</span><br><span class="line">* downgrade package1 [package2] [...]</span><br><span class="line">* deplist package1 [package2] [...]</span><br><span class="line">* repolist [all|enabled|disabled]</span><br><span class="line">* repoinfo [all|enabled|disabled]</span><br><span class="line">* repository-packages &lt;enabled-repoid&gt; &lt;install|remove|remove-or-reinstall|remove-or-distribution-synchronization&gt; [package2] [...]</span><br><span class="line">* version [ all | installed | available | group-* | nogroups* | grouplist | groupinfo ]</span><br><span class="line">* history [info|list|packages-list|packages-info|summary|addon-info|redo|undo|rollback|new|sync|stats]</span><br><span class="line">* load-transaction [txfile]</span><br><span class="line">* updateinfo [summary | list | info | remove-pkgs-ts | exclude-updates | exclude-all | check-running-kernel]</span><br><span class="line">* fssnapshot [summary | list | have-space | create | delete]</span><br><span class="line">* fs [filters | refilter | refilter-cleanup | du]</span><br><span class="line">* check</span><br><span class="line">* help [command]</span><br><span class="line"></span><br><span class="line">除非给出--help或-h选项，否则必须存在上述命令之一。</span><br><span class="line"></span><br><span class="line">常用的命令如下：</span><br><span class="line">install</span><br><span class="line">用于安装最新版本的软件包或软件包组，同时确保满足所有依赖项。</span><br><span class="line"></span><br><span class="line">update</span><br><span class="line">如果在没有指定任何包的情况下，update将更新所有当前安装的包。如果指定了一个或多个包或包，则Yum将仅更新列出的包。在更新包时，yum将确保满足所有依赖关系。</span><br><span class="line"></span><br><span class="line">update-to</span><br><span class="line">此命令的作用类似于“update”，但是要指定包的版本。</span><br><span class="line"></span><br><span class="line">check-update</span><br><span class="line">检查是否有需要更新的包。</span><br><span class="line"></span><br><span class="line">remove or erase</span><br><span class="line">用于从系统中删除指定的包。</span><br><span class="line"></span><br><span class="line">autoremove</span><br><span class="line">用于从系统中删除指定的包以及依赖。</span><br><span class="line"></span><br><span class="line">list</span><br><span class="line">用于列出有关可用包的各种信息。</span><br><span class="line"></span><br><span class="line">provides or whatprovides</span><br><span class="line">用于找出哪个包提供某些功能或文件。</span><br><span class="line"></span><br><span class="line">search</span><br><span class="line">当您对包知道一些但不确定它的名称时，这用于查找包。 默认情况下，搜索将尝试仅搜索包名称和摘要，但如果“失败”，则会尝试描述和URL。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用操作</title>
      <link href="/2019/07/02/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/07/02/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="Python-pip"><a href="#Python-pip" class="headerlink" title="Python pip"></a>Python pip</h3><p>Python pip安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install python-setuptools</span><br><span class="line">easy install pip</span><br><span class="line">或者</span><br><span class="line">curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;</span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure><p>Python pip更新包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade setuptools -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">更新包是遇到类似问题，需要重新装</span><br><span class="line">ERROR: Cannot uninstall &apos;pyparsing&apos;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</span><br><span class="line">sudo pip install -I tox -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>Python pip国内源指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install setuptools -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">或者在 ~/.pip/pip.conf 中添加</span><br><span class="line">[global]</span><br><span class="line">index-url=http://pypi.douban.com/simple/</span><br><span class="line">#index-url=https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>Python开源项目编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、下载开源项目源代码</span><br><span class="line">2、安装依赖</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">3、安装开源项目</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><p>Python安装.whl文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install some-package.whl</span><br></pre></td></tr></table></figure><p>安装python3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install python36 python36-tools</span><br><span class="line"></span><br><span class="line">安装python3的pip</span><br><span class="line">curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;</span><br><span class="line">python3.6 get-pip.py</span><br></pre></td></tr></table></figure><h3 id="Centos-7升级GCC-7"><a href="#Centos-7升级GCC-7" class="headerlink" title="Centos 7升级GCC 7"></a>Centos 7升级GCC 7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、确定g++默认使用的C++标准：</span><br><span class="line">g++ -dM -E -x c++ /dev/null | grep -F __cplusplus</span><br><span class="line"></span><br><span class="line">2、安装devtoolset-7</span><br><span class="line">yum install -y centos-release-scl &amp;&amp; yum install -y devtoolset-7-gcc-c++</span><br><span class="line"></span><br><span class="line">3、使用GCC 7</span><br><span class="line">scl enable devtoolset-7 bash</span><br></pre></td></tr></table></figure><h3 id="Centos安装扩展源"><a href="#Centos安装扩展源" class="headerlink" title="Centos安装扩展源"></a>Centos安装扩展源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y epel-release</span><br></pre></td></tr></table></figure><h3 id="Linux批量创建嵌套目录"><a href="#Linux批量创建嵌套目录" class="headerlink" title="Linux批量创建嵌套目录"></a>Linux批量创建嵌套目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv roles/vdbench/&#123;tasks,templates,meta,defaults,vars,files,plugins,handler&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><ul><li>tar.gz格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">压缩（把ceph-14.2.1目录压缩为ceph-14.2.1.tar.gz）：tar zcf ceph-14.2.1.tar.gz ceph-14.2.1</span><br><span class="line">解压缩：tar zxf ceph-14.2.1.tar.gz</span><br></pre></td></tr></table></figure><h3 id="iperf检查网络带宽"><a href="#iperf检查网络带宽" class="headerlink" title="iperf检查网络带宽"></a>iperf检查网络带宽</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y epel-release</span><br><span class="line">sudo yum install -y iperf</span><br><span class="line">服务端</span><br><span class="line">iperf -s -p 12345 -i 1 -M</span><br><span class="line">客户端</span><br><span class="line">iperf -c 192.168.1.10 -p 12345 -i 1 -t 600 -w 100M</span><br></pre></td></tr></table></figure><h3 id="ubuntu-1804添加repository"><a href="#ubuntu-1804添加repository" class="headerlink" title="ubuntu 1804添加repository"></a>ubuntu 1804添加repository</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install software-properties-common</span><br><span class="line">sudo add-apt-repository --yes --update ppa:ansible/ansible-2.8（ 或 sudo apt-add-repository --yes --update ppa:ansible/ansible ）</span><br><span class="line">sudo apt install ansible</span><br><span class="line"></span><br><span class="line">repository站点地址</span><br><span class="line">https://launchpad.net/~ansible/+archive/ubuntu/ansible-2.8</span><br></pre></td></tr></table></figure><h3 id="查看硬盘类型"><a href="#查看硬盘类型" class="headerlink" title="查看硬盘类型"></a>查看硬盘类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/block/sda/queue/rotational</span><br><span class="line">0为ssd，1为hdd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ceph数据正确性与一致性守护者Scrub读书笔记</title>
      <link href="/2019/06/03/Ceph%E6%95%B0%E6%8D%AE%E6%AD%A3%E7%A1%AE%E6%80%A7%E4%B8%8E%E4%B8%80%E8%87%B4%E6%80%A7%E5%AE%88%E6%8A%A4%E8%80%85Scrub%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/06/03/Ceph%E6%95%B0%E6%8D%AE%E6%AD%A3%E7%A1%AE%E6%80%A7%E4%B8%8E%E4%B8%80%E8%87%B4%E6%80%A7%E5%AE%88%E6%8A%A4%E8%80%85Scrub%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Ceph%E6%95%B0%E6%8D%AE%E6%AD%A3%E7%A1%AE%E6%80%A7%E4%B8%8E%E4%B8%80%E8%87%B4%E6%80%A7%E5%AE%88%E6%8A%A4%E8%80%85Scrub%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Scrub.png" alt></p><p>Ceph关于Scrub相关配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">OPTION(mon_warn_not_scrubbed, OPT_INT)                  //</span><br><span class="line">OPTION(mon_warn_not_deep_scrubbed, OPT_INT)             //</span><br><span class="line">OPTION(mon_scrub_interval, OPT_INT)                     // 默认值：一天一次</span><br><span class="line">OPTION(mon_scrub_timeout, OPT_INT)                      // 默认值：5分钟</span><br><span class="line">OPTION(mon_scrub_max_keys, OPT_INT)                     // 每次scrub的最大key数</span><br><span class="line">OPTION(mon_scrub_inject_crc_mismatch, OPT_DOUBLE)       // 注入crc不匹配的概率[0.0,1.0]</span><br><span class="line">OPTION(mon_scrub_inject_missing_keys, OPT_DOUBLE)       // 注入缺失key的概率[0.0,1.0]</span><br><span class="line">OPTION(mds_max_scrub_ops_in_progress, OPT_INT)          // 并行执行的最大scrub操作数，允许同时scrub的数量</span><br><span class="line"></span><br><span class="line">OPTION(osd_op_queue_mclock_scrub_res, OPT_DOUBLE)       // </span><br><span class="line">OPTION(osd_op_queue_mclock_scrub_wgt, OPT_DOUBLE)       // </span><br><span class="line">OPTION(osd_op_queue_mclock_scrub_lim, OPT_DOUBLE)       // </span><br><span class="line">OPTION(osd_scrub_invalid_stats, OPT_BOOL)               // </span><br><span class="line">OPTION(osd_max_scrubs, OPT_INT)                         // 单个OSD最大并发scrub数</span><br><span class="line">OPTION(osd_scrub_during_recovery, OPT_BOOL)             // 当OSD上的PG正在recovery时允许scrub</span><br><span class="line">OPTION(osd_scrub_begin_hour, OPT_INT)                   // 限制scrubbing在每天几点开始</span><br><span class="line">OPTION(osd_scrub_end_hour, OPT_INT)                     // 限制scrubbing在每天几点结束</span><br><span class="line">OPTION(osd_scrub_begin_week_day, OPT_INT)               // 限制scrubbing在一周中的哪天开始（星期几开始，0 or 7 = Sunday, 1 = Monday, etc.）</span><br><span class="line">OPTION(osd_scrub_end_week_day, OPT_INT)                 // 限制scrubbing在一周中的哪天结束（星期几结束，0 or 7 = Sunday, 1 = Monday, etc.）</span><br><span class="line">OPTION(osd_scrub_load_threshold, OPT_FLOAT)             // 允许scrubbing低于系统负载（system load）除以CPU数量的值</span><br><span class="line">OPTION(osd_scrub_min_interval, OPT_FLOAT)               // 每隔一次PG Scrub频率不超过此间隔（如果负载低）</span><br><span class="line">OPTION(osd_scrub_max_interval, OPT_FLOAT)               // 每隔一次PG Scrub频率不低于此间隔（无论负载如何）</span><br><span class="line">OPTION(osd_scrub_interval_randomize_ratio, OPT_FLOAT)   // scrub间隔的比率随机变化，这可以通过随机改变scrub间隔来防止scrub 踩踏，以便它们很快在一周内均匀分布，在[min，min *（1 + randomize_ratio））的范围内随机化调度scrub</span><br><span class="line">OPTION(osd_scrub_backoff_ratio, OPT_DOUBLE)             // scrub调度尝试失败后的退避率，the probability to back off the scheduled scrub</span><br><span class="line">OPTION(osd_scrub_chunk_min, OPT_INT)                    // 在单个chunk中scrub的最小对象数</span><br><span class="line">OPTION(osd_scrub_chunk_max, OPT_INT)                    // 在单个chunk中scrub的最大对象数</span><br><span class="line">OPTION(osd_scrub_sleep, OPT_FLOAT)                      // 持续scrub过程中注入延迟（在deep scrubbing操作之间sleep）</span><br><span class="line">OPTION(osd_scrub_auto_repair, OPT_BOOL)                 // 自动修复scrub过程中检测到的受损对象（是否在deep-scrubbing时自动修复不一致）</span><br><span class="line">OPTION(osd_scrub_auto_repair_num_errors, OPT_U32)       // 自动修复的最大检测错误数（仅在错误数低于此阈值时自动修复）</span><br><span class="line">OPTION(osd_deep_scrub_interval, OPT_FLOAT)              // Deep scrub每个PG（即，验证数据校验和）（每周一次）</span><br><span class="line">OPTION(osd_deep_scrub_randomize_ratio, OPT_FLOAT)       // Deep scrub间隔比例随机变化，这可以通过随机改变scrub间隔来防止deep scrub 踩踏，当没有用户启动scrub时添加随机，scrub将随机变成这种速率的deep scrub（0.15  - &gt; 15％ deep scrub）</span><br><span class="line">OPTION(osd_deep_scrub_stride, OPT_INT)                  // Deep scrub期间一次从对象读取的字节数</span><br><span class="line">OPTION(osd_deep_scrub_keys, OPT_INT)                    // Deep scrub期间一次从对象读取的key数</span><br><span class="line">OPTION(osd_deep_scrub_update_digest_min_age, OPT_INT)   // 仅当对象的上次修改时间超过此时间时才更新整体对象digest（摘要）</span><br><span class="line">OPTION(osd_deep_scrub_large_omap_object_key_threshold, OPT_U64)         // 当我们遇到某个对象的omap key多于此阈值时，发出警告</span><br><span class="line">OPTION(osd_deep_scrub_large_omap_object_value_sum_threshold, OPT_U64)   // 当我们遇到某个对象的omap key bytes大小多于此阈值时，发出警告</span><br><span class="line">OPTION(osd_debug_deep_scrub_sleep, OPT_FLOAT)           // 在deep scrub IO期间注入sleep以使其更容易induce preemption（诱导抢占）</span><br><span class="line">OPTION(osd_scrub_priority, OPT_U32)                     // 工作队列中的scrub操作的优先级</span><br><span class="line">OPTION(osd_scrub_cost, OPT_U32)                         // 工作队列中的scrub操作的cost（设置默认cost等于50MB io）（cost翻译为成本，需要看代码到底指的是什么）</span><br><span class="line">OPTION(osd_requested_scrub_priority, OPT_U32)           // 设置请求的scrub优先级高于scrub优先级，使请求的scrub跳过预定scrub的队列</span><br></pre></td></tr></table></figure><p>临时结论：</p><p>1、目前无法避免静默错误，Scrub也无法修复严重的静默错误</p><p>2、Scrub是Ceph检测静默错误的机制</p><p>3、目前发现静默错误也没有好的方法修复（只能通知客户尽可能挽回数据）</p><p>想法：</p><p>1、借助Scrub作为测试正确性与一致性的工具（需要解决覆盖写问题）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信抢票加速互助群</title>
      <link href="/2019/05/29/%E5%BE%AE%E4%BF%A1%E6%8A%A2%E7%A5%A8%E5%8A%A0%E9%80%9F%E4%BA%92%E5%8A%A9%E7%BE%A4/"/>
      <url>/2019/05/29/%E5%BE%AE%E4%BF%A1%E6%8A%A2%E7%A5%A8%E5%8A%A0%E9%80%9F%E4%BA%92%E5%8A%A9%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<p>加群请加微信：yjtcok（注明：微信抢票）</p><p>本群只为抢票加速互助，不提供任何其他服务。不参与任何购物砍价，请大家知晓，谢谢。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prometheus node_exporter 监控项</title>
      <link href="/2019/05/27/prometheus-node-exporter-%E7%9B%91%E6%8E%A7%E9%A1%B9/"/>
      <url>/2019/05/27/prometheus-node-exporter-%E7%9B%91%E6%8E%A7%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>截止2019-05-24 node_exporter监控项整理。</p><h2 id="Collectors"><a href="#Collectors" class="headerlink" title="Collectors"></a>Collectors</h2><p>每个操作系统对collector的支持各不相同。 下表列出了所有现有collector和支持的系统。通过<code>--collector.&lt;name&gt;</code>标志来启用collector。默认情况下启用的collector可以通过<code>--no-collector.&lt;name&gt;</code>标志来禁用。</p><h3 id="默认情况下启用"><a href="#默认情况下启用" class="headerlink" title="默认情况下启用"></a>默认情况下启用</h3><table><thead><tr><th>Name</th><th>Description</th><th>OS</th></tr></thead><tbody><tr><td>arp</td><td>来自<code>/proc/net/arp</code>的ARP统计信息</td><td>Linux</td></tr><tr><td>bcache</td><td>来自<code>/sys/fs/bcache/</code>的bcache统计信息</td><td>Linux</td></tr><tr><td>bonding</td><td>Linux bonding interfaces已配置active slave的数量</td><td>Linux</td></tr><tr><td>boottime</td><td>从<code>kern.boottime</code> sysctl派生的系统启动时间</td><td>Darwin, Dragonfly, FreeBSD, NetBSD, OpenBSD, Solaris</td></tr><tr><td>conntrack</td><td>显示conntrack统计信息（如果没有<code>/proc/sys/net/netfilter/</code>，则不执行任何操作）</td><td>Linux</td></tr><tr><td>cpu</td><td>CPU统计信息</td><td>Darwin, Dragonfly, FreeBSD, Linux, Solaris</td></tr><tr><td>cpufreq</td><td>CPU频率统计信息</td><td>Linux, Solaris</td></tr><tr><td>diskstats</td><td>磁盘I/O统计信息</td><td>Darwin, Linux, OpenBSD</td></tr><tr><td>edac</td><td>检错和纠错的统计数据</td><td>Linux</td></tr><tr><td>entropy</td><td>可用的熵（entropy）</td><td>Linux</td></tr><tr><td>exec</td><td>execution统计信息</td><td>Dragonfly, FreeBSD</td></tr><tr><td>filefd</td><td>来自<code>/proc/sys/fs/file-nr</code>的文件描述符统计信息</td><td>Linux</td></tr><tr><td>filesystem</td><td>文件系统统计信息，例如使用的磁盘空间</td><td>Darwin, Dragonfly, FreeBSD, Linux, OpenBSD</td></tr><tr><td>hwmon</td><td>来自<code>/sys/class/hwmon/</code>的硬件监控和传感器数据</td><td>Linux</td></tr><tr><td>infiniband</td><td>特定于InfiniBand和Intel OmniPath配置的网络统计信息</td><td>Linux</td></tr><tr><td>ipvs</td><td>来自<code>/proc/net/ip_vs</code>的IPVS状态和来自<code>/proc/net/ip_vs_stats</code>的统计数据</td><td>Linux</td></tr><tr><td>loadavg</td><td>负载平均值</td><td>Darwin, Dragonfly, FreeBSD, Linux, NetBSD, OpenBSD, Solaris</td></tr><tr><td>mdadm</td><td>有关<code>/proc/mdstat</code>中设备的统计信息（如果没有<code>/proc/mdstat</code>，则不执行任何操作）</td><td>Linux</td></tr><tr><td>meminfo</td><td>内存统计信息</td><td>Darwin, Dragonfly, FreeBSD, Linux, OpenBSD</td></tr><tr><td>netclass</td><td>来自<code>/sys/class/net/</code>的网络接口信息</td><td>Linux</td></tr><tr><td>netdev</td><td>网络接口统计信息，如字节传输</td><td>Darwin, Dragonfly, FreeBSD, Linux, OpenBSD</td></tr><tr><td>netstat</td><td>来自<code>/proc/net/netstat</code>的网络统计信息。 这与<code>netstat -s</code>的信息相同</td><td>Linux</td></tr><tr><td>nfs</td><td>从<code>/proc/net/rpc/nfs</code>公开NFS客户端统计信息。 这与<code>nfsstat -c</code>的信息相同</td><td>Linux</td></tr><tr><td>nfsd</td><td>从<code>/proc/net/rpc/nfsd</code>公开NFS内核服务器统计信息。 这与<code>nfsstat -s</code>的信息相同</td><td>Linux</td></tr><tr><td>pressure</td><td>来自<code>/proc/pressure/</code>的压力失速统计</td><td>Linux (kernel 4.20+ and/or <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/accounting/psi.txt" target="_blank" rel="noopener">CONFIG_PSI</a>)</td></tr><tr><td>sockstat</td><td>公开来自<code>/proc/net/sockstat</code>的各种统计信息</td><td>Linux</td></tr><tr><td>stat</td><td>来自<code>/proc/stat</code>的各种统计信息。这包括启动时间，forks和interrupts。</td><td>Linux</td></tr><tr><td>textfile</td><td>从本地磁盘读取的统计信息。必须设置<code>--collector.textfile.directory</code>标志</td><td><em>any</em></td></tr><tr><td>time</td><td>当前的系统时间</td><td><em>any</em></td></tr><tr><td>timex</td><td>selected adjtimex(2) system call统计信息</td><td>Linux</td></tr><tr><td>uname</td><td>uname系统调用提供的系统信息</td><td>FreeBSD, Linux</td></tr><tr><td>vmstat</td><td>来自<code>/proc/vmstat</code>的统计信息</td><td>Linux</td></tr><tr><td>xfs</td><td>XFS运行时统计信息</td><td>Linux (kernel 4.4+)</td></tr><tr><td>zfs</td><td><a href="http://open-zfs.org/" target="_blank" rel="noopener">ZFS</a>性能统计数据</td><td><a href="http://zfsonlinux.org/" target="_blank" rel="noopener">Linux</a>, Solaris</td></tr></tbody></table><h3 id="默认情况下禁用"><a href="#默认情况下禁用" class="headerlink" title="默认情况下禁用"></a>默认情况下禁用</h3><p>由于内核配置和安全设置，默认情况下，所有Linux系统上的perf收集器可能无法正常工作。 要允许访问，请设置以下sysctl参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w kernel.perf_event_paranoid=X</span><br></pre></td></tr></table></figure><p>2 仅允许用户空间度量（自Linux 4.6起默认）。</p><p>1 允许内核和用户度量（在Linux 4.6之前默认）。</p><p>0 允许访问特定CPU的数据，但不允许访问raw tracepoint samples。</p><p>-1 没有限制。</p><p>根据配置的值，将提供不同的度量标准，对于大多数情况，<code>0</code>将提供最完整的设置。 有关更多信息，请参阅<code>man 2 perf_event_open</code>。</p><table><thead><tr><th>Name</th><th>Description</th><th>OS</th></tr></thead><tbody><tr><td>buddyinfo</td><td>/proc/buddyinfo报告的内存碎片统计信息</td><td>Linux</td></tr><tr><td>devstat</td><td>设备统计信息</td><td>Dragonfly, FreeBSD</td></tr><tr><td>drbd</td><td>分布式副本（Replicated）块设备统计信息（到版本8.4）</td><td>Linux</td></tr><tr><td>interrupts</td><td>详细的中断统计</td><td>Linux, OpenBSD</td></tr><tr><td>ksmd</td><td>来自<code>/sys/kernel/mm/ksm</code>的内核和系统统计信息</td><td>Linux</td></tr><tr><td>logind</td><td>会话计数来自<a href="http://www.freedesktop.org/wiki/Software/systemd/logind/" target="_blank" rel="noopener">logind</a></td><td>Linux</td></tr><tr><td>meminfo_numa</td><td>来自<code>/proc/meminfo_numa</code>的内存统计信息</td><td>Linux</td></tr><tr><td>mountstats</td><td>来自<code>/proc/self/mountstats</code>的文件系统统计信息。详细的NFS客户端统计信息。</td><td>Linux</td></tr><tr><td>ntp</td><td>本地NTP守护程序运行状况检查<a href="https://github.com/prometheus/node_exporter/blob/master/docs/TIME.md" target="_blank" rel="noopener">时间</a></td><td><em>any</em></td></tr><tr><td>processes</td><td>来自<code>/proc</code>的聚合进程统计信息</td><td>Linux</td></tr><tr><td>qdisc</td><td><a href="https://en.wikipedia.org/wiki/Network_scheduler#Linux_kernel" target="_blank" rel="noopener">queuing discipline</a> 统计</td><td>Linux</td></tr><tr><td>runit</td><td>来自<a href="http://smarden.org/runit/" target="_blank" rel="noopener">runit</a>的服务状态统计</td><td><em>any</em></td></tr><tr><td>supervisord</td><td>来自<a href="http://supervisord.org/" target="_blank" rel="noopener">supervisord</a>的服务状态统计</td><td><em>any</em></td></tr><tr><td>systemd</td><td>来自<a href="http://www.freedesktop.org/wiki/Software/systemd/" target="_blank" rel="noopener">systemd</a>的服务和系统状态统计</td><td>Linux</td></tr><tr><td>tcpstat</td><td>来自<code>/proc/net/tcp</code>和<code>/proc/net/tcp6</code>的TCP连接状态信息。（警告：当前版本在高负载情况下存在潜在的性能问题。）</td><td>Linux</td></tr><tr><td>wifi</td><td>WiFi设备和station统计</td><td>Linux</td></tr><tr><td>perf</td><td>基于perf的指标（警告：指标取决于内核配置和设置）</td><td>Linux</td></tr></tbody></table><h3 id="Textfile-Collector"><a href="#Textfile-Collector" class="headerlink" title="Textfile Collector"></a>Textfile Collector</h3><p>textfile collector类似于<a href="https://github.com/prometheus/pushgateway" target="_blank" rel="noopener">Pushgateway</a>因为它允许从批处理job导出统计信息。它还可用于导出静态指标，例如计算机具有的role。Pushgateway应该用于服务级别指标。textfile模式用于绑定计算机的度量标准。</p><p>要使用它，请在Node exporter上设置<code>--collector.textfile.directory</code>标志。collector将使用文本格式解析该目录中与glob <code>*.prom</code>匹配的所有文件。 注意：不支持时间戳。</p><p>以原子方式推送cron job的完成时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo my_batch_job_completion_time $(date +%s) &gt; /path/to/directory/my_batch_job.prom.$$</span><br><span class="line">mv /path/to/directory/my_batch_job.prom.$$ /path/to/directory/my_batch_job.prom</span><br></pre></td></tr></table></figure><p>使用标签静态设置计算机的roles：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;role&#123;role=&quot;application_server&quot;&#125; 1&apos; &gt; /path/to/directory/role.prom.$$</span><br><span class="line">mv /path/to/directory/role.prom.$$ /path/to/directory/role.prom</span><br></pre></td></tr></table></figure><h3 id="Filtering-enabled-collectors"><a href="#Filtering-enabled-collectors" class="headerlink" title="Filtering enabled collectors"></a>Filtering enabled collectors</h3><p>默认情况下，<code>node_exporter</code>将从启用的collector中公开所有指标。 这是收集指标以避免在比较不同系列的指标时出错的建议方法。</p><p>高级使用<code>node_exporter</code>可以传递一个可选的收集器列表来过滤指标。 <code>collect[]</code>参数可以多次使用。 在Prometheus配置中，您可以在<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#%3Cscrape_config%3E" target="_blank" rel="noopener">scrape config</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">params:</span><br><span class="line">  collect[]:</span><br><span class="line">    - foo</span><br><span class="line">    - bar</span><br></pre></td></tr></table></figure><p>这对于让不同的Prometheus服务器从节点收集特定指标非常有用。</p><h2 id="部分监控项见下表"><a href="#部分监控项见下表" class="headerlink" title="部分监控项见下表"></a>部分监控项见下表</h2><table><thead><tr><th>Metrics</th><th>Chinese   explanation</th><th>English   explanation</th></tr></thead><tbody><tr><td>node_arp_entries</td><td>device的ARP表项</td><td>#   HELP node_arp_entries ARP entries by device</td></tr><tr><td>node_boot_time_seconds</td><td>节点启动时间，unixtime</td><td>#   HELP node_boot_time_seconds Node boot time, in unixtime.</td></tr><tr><td>node_context_switches_total</td><td>context   switches（上下文切换）的总数</td><td>#   HELP node_context_switches_total Total number of context switches.</td></tr><tr><td>node_cpu_guest_seconds_total</td><td>每种模式在guests(VM)上花费CPU的秒数</td><td>#   HELP node_cpu_guest_seconds_total Seconds the cpus spent in guests (VMs) for   each mode.</td></tr><tr><td>node_cpu_seconds_total</td><td>在每种模式下花费CPU的秒数</td><td>#   HELP node_cpu_seconds_total Seconds the cpus spent in each mode.</td></tr><tr><td>node_disk_io_now</td><td>当前正在进行的I/O数量</td><td>#   HELP node_disk_io_now The number of I/Os currently in progress.</td></tr><tr><td>node_disk_io_time_seconds_total</td><td>执行I/O所花费的总时间</td><td>#   HELP node_disk_io_time_seconds_total Total seconds spent doing I/Os.</td></tr><tr><td>node_disk_io_time_weighted_seconds_total</td><td>进行I/O所花费的加权秒数</td><td>#   HELP node_disk_io_time_weighted_seconds_total The weighted # of seconds spent   doing I/Os.</td></tr><tr><td>node_disk_read_bytes_total</td><td>成功读取的总字节数</td><td>#   HELP node_disk_read_bytes_total The total number of bytes read successfully.</td></tr><tr><td>node_disk_read_time_seconds_total</td><td>所有读取花费的总秒数</td><td>#   HELP node_disk_read_time_seconds_total The total number of seconds spent by   all reads.</td></tr><tr><td>node_disk_reads_completed_total</td><td>成功完成的读取总数</td><td>#   HELP node_disk_reads_completed_total The total number of reads completed   successfully.</td></tr><tr><td>node_disk_reads_merged_total</td><td>读合并的次数</td><td>#   HELP node_disk_reads_merged_total The total number of reads merged.</td></tr><tr><td>node_disk_write_time_seconds_total</td><td>这是所有写入花费的总秒数</td><td>#   HELP node_disk_write_time_seconds_total This is the total number of seconds   spent by all writes.</td></tr><tr><td>node_disk_writes_completed_total</td><td>成功完成的写入总数</td><td>#   HELP node_disk_writes_completed_total The total number of writes completed   successfully.</td></tr><tr><td>node_disk_writes_merged_total</td><td>写合并的次数</td><td>#   HELP node_disk_writes_merged_total The number of writes merged.</td></tr><tr><td>node_disk_written_bytes_total</td><td>成功写入的总字节数</td><td>#   HELP node_disk_written_bytes_total The total number of bytes written   successfully.</td></tr><tr><td>node_entropy_available_bits</td><td>可用entropy的Bits（比特）</td><td>#   HELP node_entropy_available_bits Bits of available entropy.</td></tr><tr><td>node_exporter_build_info</td><td>构建node_exporter的版本，修订版，分支和goversion标记，具有常量值“1”的metric</td><td>#   HELP node_exporter_build_info A metric with a constant ‘1’ value labeled by   version, revision, branch, and goversion from which node_exporter was built.</td></tr><tr><td>node_filefd_allocated</td><td>文件描述符统计：已分配</td><td>#   HELP node_filefd_allocated File descriptor statistics: allocated.</td></tr><tr><td>node_filefd_maximum</td><td>文件描述符统计：最大值</td><td>#   HELP node_filefd_maximum File descriptor statistics: maximum.</td></tr><tr><td>node_filesystem_avail_bytes</td><td>非root用户可用的文件系统空间（以字节为单位）</td><td>#   HELP node_filesystem_avail_bytes Filesystem space available to non-root users   in bytes.</td></tr><tr><td>node_filesystem_device_error</td><td>获取指定设备的统计信息时是否发生错误</td><td>#   HELP node_filesystem_device_error Whether an error occurred while getting   statistics for the given device.</td></tr><tr><td>node_filesystem_files</td><td>文件系统总的file   nodes数（inode）</td><td>#   HELP node_filesystem_files Filesystem total file nodes.</td></tr><tr><td>node_filesystem_files_free</td><td>文件系统空闲file   node数（inode）</td><td>#   HELP node_filesystem_files_free Filesystem total free file nodes.</td></tr><tr><td>node_filesystem_free_bytes</td><td>文件系统可用空间，以字节为单位</td><td>#   HELP node_filesystem_free_bytes Filesystem free space in bytes.</td></tr><tr><td>node_filesystem_readonly</td><td>文件系统只读状态</td><td>#   HELP node_filesystem_readonly Filesystem read-only status.</td></tr><tr><td>node_filesystem_size_bytes</td><td>文件系统大小（字节）</td><td>#   HELP node_filesystem_size_bytes Filesystem size in bytes.</td></tr><tr><td>node_forks_total</td><td>forks总数</td><td>#   HELP node_forks_total Total number of forks.</td></tr><tr><td>node_hwmon_chip_names</td><td>人类可读（可读性良好）的芯片名称的注释指标</td><td>#   HELP node_hwmon_chip_names Annotation metric for human-readable chip names</td></tr><tr><td>node_hwmon_sensor_label</td><td>给定芯片和传感器的标签</td><td>#   HELP node_hwmon_sensor_label Label for given chip and sensor</td></tr><tr><td>node_hwmon_temp_celsius</td><td>温度硬件监视器（输入）</td><td>#   HELP node_hwmon_temp_celsius Hardware monitor for temperature (input)</td></tr><tr><td>node_hwmon_temp_crit_alarm_celsius</td><td>温度硬件监控器（crit_alarm）</td><td>#   HELP node_hwmon_temp_crit_alarm_celsius Hardware monitor for temperature   (crit_alarm)</td></tr><tr><td>node_hwmon_temp_crit_celsius</td><td>温度硬件监控器（暴击）</td><td>#   HELP node_hwmon_temp_crit_celsius Hardware monitor for temperature (crit)</td></tr><tr><td>node_hwmon_temp_max_celsius</td><td>温度硬件监控器（最大）</td><td>#   HELP node_hwmon_temp_max_celsius Hardware monitor for temperature (max)</td></tr><tr><td>node_intr_total</td><td>服务的中断总数</td><td>#   HELP node_intr_total Total number of interrupts serviced.</td></tr><tr><td>node_load1</td><td>1m负载平均值</td><td>#   HELP node_load1 1m load average.</td></tr><tr><td>node_load15</td><td>15m负载平均值</td><td>#   HELP node_load15 15m load average.</td></tr><tr><td>node_load5</td><td>5m负载平均值</td><td>#   HELP node_load5 5m load average.</td></tr><tr><td>node_memory_Active_anon_bytes</td><td>内存信息字段Active_anon_bytes</td><td>#   HELP node_memory_Active_anon_bytes Memory information field   Active_anon_bytes.</td></tr><tr><td>node_memory_Active_bytes</td><td>内存信息字段Active_bytes</td><td>#   HELP node_memory_Active_bytes Memory information field Active_bytes.</td></tr><tr><td>node_memory_Active_file_bytes</td><td>内存信息字段Active_file_bytes</td><td>#   HELP node_memory_Active_file_bytes Memory information field   Active_file_bytes.</td></tr><tr><td>node_memory_AnonHugePages_bytes</td><td>内存信息字段AnonHugePages_bytes</td><td>#   HELP node_memory_AnonHugePages_bytes Memory information field   AnonHugePages_bytes.</td></tr><tr><td>node_memory_AnonPages_bytes</td><td>内存信息字段AnonPages_bytes</td><td>#   HELP node_memory_AnonPages_bytes Memory information field AnonPages_bytes.</td></tr><tr><td>node_memory_Bounce_bytes</td><td>内存信息字段Bounce_bytes</td><td>#   HELP node_memory_Bounce_bytes Memory information field Bounce_bytes.</td></tr><tr><td>node_memory_Buffers_bytes</td><td>内存信息字段Buffers_bytes</td><td>#   HELP node_memory_Buffers_bytes Memory information field Buffers_bytes.</td></tr><tr><td>node_memory_Cached_bytes</td><td>内存信息字段Cached_bytes</td><td>#   HELP node_memory_Cached_bytes Memory information field Cached_bytes.</td></tr><tr><td>node_memory_CmaFree_bytes</td><td>内存信息字段CmaFree_bytes</td><td>#   HELP node_memory_CmaFree_bytes Memory information field CmaFree_bytes.</td></tr><tr><td>node_memory_CmaTotal_bytes</td><td>内存信息字段CmaTotal_bytes</td><td>#   HELP node_memory_CmaTotal_bytes Memory information field CmaTotal_bytes.</td></tr><tr><td>node_memory_CommitLimit_bytes</td><td>内存信息字段CommitLimit_bytes</td><td>#   HELP node_memory_CommitLimit_bytes Memory information field   CommitLimit_bytes.</td></tr><tr><td>node_memory_Committed_AS_bytes</td><td>内存信息字段Committed_AS_bytes</td><td>#   HELP node_memory_Committed_AS_bytes Memory information field   Committed_AS_bytes.</td></tr><tr><td>node_memory_DirectMap1G_bytes</td><td>内存信息字段DirectMap1G_bytes</td><td>#   HELP node_memory_DirectMap1G_bytes Memory information field   DirectMap1G_bytes.</td></tr><tr><td>node_memory_DirectMap2M_bytes</td><td>内存信息字段DirectMap2M_bytes</td><td>#   HELP node_memory_DirectMap2M_bytes Memory information field   DirectMap2M_bytes.</td></tr><tr><td>node_memory_DirectMap4k_bytes</td><td>内存信息字段DirectMap4k_bytes</td><td>#   HELP node_memory_DirectMap4k_bytes Memory information field   DirectMap4k_bytes.</td></tr><tr><td>node_memory_Dirty_bytes</td><td>内存信息字段Dirty_bytes</td><td>#   HELP node_memory_Dirty_bytes Memory information field Dirty_bytes.</td></tr><tr><td>node_memory_HardwareCorrupted_bytes</td><td>内存信息字段HardwareCorrupted_bytes</td><td>#   HELP node_memory_HardwareCorrupted_bytes Memory information field   HardwareCorrupted_bytes.</td></tr><tr><td>node_memory_HugePages_Free</td><td>内存信息字段HugePages_Free</td><td>#   HELP node_memory_HugePages_Free Memory information field HugePages_Free.</td></tr><tr><td>node_memory_HugePages_Rsvd</td><td>内存信息字段HugePages_Rsvd</td><td>#   HELP node_memory_HugePages_Rsvd Memory information field HugePages_Rsvd.</td></tr><tr><td>node_memory_HugePages_Surp</td><td>内存信息字段HugePages_Surp</td><td>#   HELP node_memory_HugePages_Surp Memory information field HugePages_Surp.</td></tr><tr><td>node_memory_HugePages_Total</td><td>内存信息字段HugePages_Total</td><td>#   HELP node_memory_HugePages_Total Memory information field HugePages_Total.</td></tr><tr><td>node_memory_Hugepagesize_bytes</td><td>内存信息字段Hugepagesize_bytes</td><td>#   HELP node_memory_Hugepagesize_bytes Memory information field   Hugepagesize_bytes.</td></tr><tr><td>node_memory_Inactive_anon_bytes</td><td>内存信息字段Inactive_anon_bytes</td><td>#   HELP node_memory_Inactive_anon_bytes Memory information field   Inactive_anon_bytes.</td></tr><tr><td>node_memory_Inactive_bytes</td><td>内存信息字段Inactive_bytes</td><td>#   HELP node_memory_Inactive_bytes Memory information field Inactive_bytes.</td></tr><tr><td>node_memory_Inactive_file_bytes</td><td>内存信息字段Inactive_file_bytes</td><td>#   HELP node_memory_Inactive_file_bytes Memory information field   Inactive_file_bytes.</td></tr><tr><td>node_memory_KernelStack_bytes</td><td>内存信息字段KernelStack_bytes</td><td>#   HELP node_memory_KernelStack_bytes Memory information field   KernelStack_bytes.</td></tr><tr><td>node_memory_Mapped_bytes</td><td>内存信息字段Mapped_bytes</td><td>#   HELP node_memory_Mapped_bytes Memory information field Mapped_bytes.</td></tr><tr><td>node_memory_MemAvailable_bytes</td><td>内存信息字段MemAvailable_bytes</td><td>#   HELP node_memory_MemAvailable_bytes Memory information field   MemAvailable_bytes.</td></tr><tr><td>node_memory_MemFree_bytes</td><td>内存信息字段MemFree_bytes</td><td>#   HELP node_memory_MemFree_bytes Memory information field MemFree_bytes.</td></tr><tr><td>node_memory_MemTotal_bytes</td><td>内存信息字段MemTotal_bytes</td><td>#   HELP node_memory_MemTotal_bytes Memory information field MemTotal_bytes.</td></tr><tr><td>node_memory_Mlocked_bytes</td><td>内存信息字段Mlocked_bytes</td><td>#   HELP node_memory_Mlocked_bytes Memory information field Mlocked_bytes.</td></tr><tr><td>node_memory_NFS_Unstable_bytes</td><td>内存信息字段NFS_Unstable_bytes</td><td>#   HELP node_memory_NFS_Unstable_bytes Memory information field   NFS_Unstable_bytes.</td></tr><tr><td>node_memory_PageTables_bytes</td><td>内存信息字段PageTables_bytes</td><td>#   HELP node_memory_PageTables_bytes Memory information field PageTables_bytes.</td></tr><tr><td>node_memory_SReclaimable_bytes</td><td>内存信息字段SReclaimable_bytes</td><td>#   HELP node_memory_SReclaimable_bytes Memory information field   SReclaimable_bytes.</td></tr><tr><td>node_memory_SUnreclaim_bytes</td><td>内存信息字段SUnreclaim_bytes</td><td>#   HELP node_memory_SUnreclaim_bytes Memory information field SUnreclaim_bytes.</td></tr><tr><td>node_memory_Shmem_bytes</td><td>内存信息字段Shmem_bytes</td><td>#   HELP node_memory_Shmem_bytes Memory information field Shmem_bytes.</td></tr><tr><td>node_memory_Slab_bytes</td><td>内存信息字段Slab_bytes</td><td>#   HELP node_memory_Slab_bytes Memory information field Slab_bytes.</td></tr><tr><td>node_memory_SwapCached_bytes</td><td>内存信息字段SwapCached_bytes</td><td>#   HELP node_memory_SwapCached_bytes Memory information field SwapCached_bytes.</td></tr><tr><td>node_memory_SwapFree_bytes</td><td>内存信息字段SwapFree_bytes</td><td>#   HELP node_memory_SwapFree_bytes Memory information field SwapFree_bytes.</td></tr><tr><td>node_memory_SwapTotal_bytes</td><td>内存信息字段SwapTotal_bytes</td><td>#   HELP node_memory_SwapTotal_bytes Memory information field SwapTotal_bytes.</td></tr><tr><td>node_memory_Unevictable_bytes</td><td>内存信息字段Unevictable_bytes</td><td>#   HELP node_memory_Unevictable_bytes Memory information field   Unevictable_bytes.</td></tr><tr><td>node_memory_VmallocChunk_bytes</td><td>内存信息字段VmallocChunk_bytes</td><td>#   HELP node_memory_VmallocChunk_bytes Memory information field   VmallocChunk_bytes.</td></tr><tr><td>node_memory_VmallocTotal_bytes</td><td>内存信息字段VmallocTotal_bytes</td><td>#   HELP node_memory_VmallocTotal_bytes Memory information field   VmallocTotal_bytes.</td></tr><tr><td>node_memory_VmallocUsed_bytes</td><td>内存信息字段VmallocUsed_bytes</td><td>#   HELP node_memory_VmallocUsed_bytes Memory information field   VmallocUsed_bytes.</td></tr><tr><td>node_memory_WritebackTmp_bytes</td><td>内存信息字段WritebackTmp_bytes</td><td>#   HELP node_memory_WritebackTmp_bytes Memory information field   WritebackTmp_bytes.</td></tr><tr><td>node_memory_Writeback_bytes</td><td>内存信息字段Writeback_bytes</td><td>#   HELP node_memory_Writeback_bytes Memory information field Writeback_bytes.</td></tr><tr><td>node_netstat_Icmp6_InErrors</td><td>统计Icmp6InErrors</td><td>#   HELP node_netstat_Icmp6_InErrors Statistic Icmp6InErrors.</td></tr><tr><td>node_netstat_Icmp6_InMsgs</td><td>统计Icmp6InMsgs</td><td>#   HELP node_netstat_Icmp6_InMsgs Statistic Icmp6InMsgs.</td></tr><tr><td>node_netstat_Icmp6_OutMsgs</td><td>统计Icmp6OutMsgs</td><td>#   HELP node_netstat_Icmp6_OutMsgs Statistic Icmp6OutMsgs.</td></tr><tr><td>node_netstat_Icmp_InErrors</td><td>统计IcmpInErrors</td><td>#   HELP node_netstat_Icmp_InErrors Statistic IcmpInErrors.</td></tr><tr><td>node_netstat_Icmp_InMsgs</td><td>统计IcmpInMsgs</td><td>#   HELP node_netstat_Icmp_InMsgs Statistic IcmpInMsgs.</td></tr><tr><td>node_netstat_Icmp_OutMsgs</td><td>统计IcmpOutMsgs</td><td>#   HELP node_netstat_Icmp_OutMsgs Statistic IcmpOutMsgs.</td></tr><tr><td>node_netstat_Ip6_InOctets</td><td>统计Ip6InOctets</td><td>#   HELP node_netstat_Ip6_InOctets Statistic Ip6InOctets.</td></tr><tr><td>node_netstat_Ip6_OutOctets</td><td>统计Ip6OutOctets</td><td>#   HELP node_netstat_Ip6_OutOctets Statistic Ip6OutOctets.</td></tr><tr><td>node_netstat_IpExt_InOctets</td><td>统计IpExtInOctets</td><td>#   HELP node_netstat_IpExt_InOctets Statistic IpExtInOctets.</td></tr><tr><td>node_netstat_IpExt_OutOctets</td><td>统计IpExtOutOctets</td><td>#   HELP node_netstat_IpExt_OutOctets Statistic IpExtOutOctets.</td></tr><tr><td>node_netstat_Ip_Forwarding</td><td>统计IpForwarding</td><td>#   HELP node_netstat_Ip_Forwarding Statistic IpForwarding.</td></tr><tr><td>node_netstat_TcpExt_ListenDrops</td><td>统计TcpExtListenDrops</td><td>#   HELP node_netstat_TcpExt_ListenDrops Statistic TcpExtListenDrops.</td></tr><tr><td>node_netstat_TcpExt_ListenOverflows</td><td>统计TcpExtListenOverflows</td><td>#   HELP node_netstat_TcpExt_ListenOverflows Statistic TcpExtListenOverflows.</td></tr><tr><td>node_netstat_TcpExt_SyncookiesFailed</td><td>统计TcpExtSyncookiesFailed</td><td>#   HELP node_netstat_TcpExt_SyncookiesFailed Statistic TcpExtSyncookiesFailed.</td></tr><tr><td>node_netstat_TcpExt_SyncookiesRecv</td><td>统计TcpExtSyncookiesRecv</td><td>#   HELP node_netstat_TcpExt_SyncookiesRecv Statistic TcpExtSyncookiesRecv.</td></tr><tr><td>node_netstat_TcpExt_SyncookiesSent</td><td>统计TcpExtSyncookiesSent</td><td>#   HELP node_netstat_TcpExt_SyncookiesSent Statistic TcpExtSyncookiesSent.</td></tr><tr><td>node_netstat_TcpExt_TCPSynRetrans</td><td>统计TcpExtTCPSynRetrans</td><td>#   HELP node_netstat_TcpExt_TCPSynRetrans Statistic TcpExtTCPSynRetrans.</td></tr><tr><td>node_netstat_Tcp_ActiveOpens</td><td>统计TcpActiveOpens</td><td>#   HELP node_netstat_Tcp_ActiveOpens Statistic TcpActiveOpens.</td></tr><tr><td>node_netstat_Tcp_CurrEstab</td><td>统计TcpCurrEstab</td><td>#   HELP node_netstat_Tcp_CurrEstab Statistic TcpCurrEstab.</td></tr><tr><td>node_netstat_Tcp_InErrs</td><td>统计TcpInErrs</td><td>#   HELP node_netstat_Tcp_InErrs Statistic TcpInErrs.</td></tr><tr><td>node_netstat_Tcp_InSegs</td><td>统计TcpInSegs</td><td>#   HELP node_netstat_Tcp_InSegs Statistic TcpInSegs.</td></tr><tr><td>node_netstat_Tcp_OutSegs</td><td>统计TcpOutSegs</td><td>#   HELP node_netstat_Tcp_OutSegs Statistic TcpOutSegs.</td></tr><tr><td>node_netstat_Tcp_PassiveOpens</td><td>统计TcpPassiveOpens</td><td>#   HELP node_netstat_Tcp_PassiveOpens Statistic TcpPassiveOpens.</td></tr><tr><td>node_netstat_Tcp_RetransSegs</td><td>统计TcpRetransSegs</td><td>#   HELP node_netstat_Tcp_RetransSegs Statistic TcpRetransSegs.</td></tr><tr><td>node_netstat_Udp6_InDatagrams</td><td>统计Udp6InDatagrams</td><td>#   HELP node_netstat_Udp6_InDatagrams Statistic Udp6InDatagrams.</td></tr><tr><td>node_netstat_Udp6_InErrors</td><td>统计Udp6InErrors</td><td>#   HELP node_netstat_Udp6_InErrors Statistic Udp6InErrors.</td></tr><tr><td>node_netstat_Udp6_NoPorts</td><td>统计Udp6NoPorts</td><td>#   HELP node_netstat_Udp6_NoPorts Statistic Udp6NoPorts.</td></tr><tr><td>node_netstat_Udp6_OutDatagrams</td><td>统计Udp6OutDatagrams</td><td>#   HELP node_netstat_Udp6_OutDatagrams Statistic Udp6OutDatagrams.</td></tr><tr><td>node_netstat_UdpLite6_InErrors</td><td>统计UdpLite6InErrors</td><td>#   HELP node_netstat_UdpLite6_InErrors Statistic UdpLite6InErrors.</td></tr><tr><td>node_netstat_UdpLite_InErrors</td><td>统计UdpLiteInErrors</td><td>#   HELP node_netstat_UdpLite_InErrors Statistic UdpLiteInErrors.</td></tr><tr><td>node_netstat_Udp_InDatagrams</td><td>统计UdpInDatagrams</td><td>#   HELP node_netstat_Udp_InDatagrams Statistic UdpInDatagrams.</td></tr><tr><td>node_netstat_Udp_InErrors</td><td>统计UdpInErrors</td><td>#   HELP node_netstat_Udp_InErrors Statistic UdpInErrors.</td></tr><tr><td>node_netstat_Udp_NoPorts</td><td>统计UdpNoPorts</td><td>#   HELP node_netstat_Udp_NoPorts Statistic UdpNoPorts.</td></tr><tr><td>node_netstat_Udp_OutDatagrams</td><td>统计UdpOutDatagrams</td><td>#   HELP node_netstat_Udp_OutDatagrams Statistic UdpOutDatagrams.</td></tr><tr><td>node_network_address_assign_type</td><td>/sys/class/net/<iface>   address_assign_type值</iface></td><td>#   HELP node_network_address_assign_type address_assign_type value of   /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_carrier</td><td>/sys/class/net/<iface>   carrier值</iface></td><td>#   HELP node_network_carrier carrier value of /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_carrier_changes_total</td><td>/sys/class/net/<iface>   carrier_changes_total值</iface></td><td>#   HELP node_network_carrier_changes_total carrier_changes_total value of   /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_device_id</td><td>/sys/class/net/<iface>   device_id值</iface></td><td>#   HELP node_network_device_id device_id value of /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_dormant</td><td>/sys/class/net/<iface>   dormant（休眠）值</iface></td><td>#   HELP node_network_dormant dormant value of /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_flags</td><td>/sys/class/net/<iface>   flags值</iface></td><td>#   HELP node_network_flags flags value of /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_iface_id</td><td>/sys/class/net/<iface>   iface_id值</iface></td><td>#   HELP node_network_iface_id iface_id value of /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_iface_link</td><td>/sys/class/net/<iface>   iface_link值</iface></td><td>#   HELP node_network_iface_link iface_link value of   /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_iface_link_mode</td><td>/sys/class/net/<iface>   iface_link_mode值</iface></td><td>#   HELP node_network_iface_link_mode iface_link_mode value of   /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_info</td><td>来自/sys/class/net/<iface>的非数字数据，值始终为1</iface></td><td>#   HELP node_network_info Non-numeric data from /sys/class/net/<iface>,   value is always 1.</iface></td></tr><tr><td>node_network_mtu_bytes</td><td>/sys/class/net/<iface>   mtu_bytes值</iface></td><td>#   HELP node_network_mtu_bytes mtu_bytes value of /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_net_dev_group</td><td>/sys/class/net/<iface>   net_dev_group值</iface></td><td>#   HELP node_network_net_dev_group net_dev_group value of   /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_protocol_type</td><td>/sys/class/net/<iface>   protocol_type值</iface></td><td>#   HELP node_network_protocol_type protocol_type value of   /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_receive_bytes_total</td><td>网络设备统计信息receive_bytes</td><td>#   HELP node_network_receive_bytes_total Network device statistic receive_bytes.</td></tr><tr><td>node_network_receive_compressed_total</td><td>网络设备统计信息receive_compressed</td><td>#   HELP node_network_receive_compressed_total Network device statistic   receive_compressed.</td></tr><tr><td>node_network_receive_drop_total</td><td>网络设备统计信息receive_drop</td><td>#   HELP node_network_receive_drop_total Network device statistic receive_drop.</td></tr><tr><td>node_network_receive_errs_total</td><td>网络设备统计信息receive_errs</td><td>#   HELP node_network_receive_errs_total Network device statistic receive_errs.</td></tr><tr><td>node_network_receive_fifo_total</td><td>网络设备统计信息receive_fifo</td><td>#   HELP node_network_receive_fifo_total Network device statistic receive_fifo.</td></tr><tr><td>node_network_receive_frame_total</td><td>网络设备统计信息receive_frame</td><td>#   HELP node_network_receive_frame_total Network device statistic receive_frame.</td></tr><tr><td>node_network_receive_multicast_total</td><td>网络设备统计信息receive_multicast</td><td>#   HELP node_network_receive_multicast_total Network device statistic   receive_multicast.</td></tr><tr><td>node_network_receive_packets_total</td><td>网络设备统计信息receive_packets</td><td>#   HELP node_network_receive_packets_total Network device statistic   receive_packets.</td></tr><tr><td>node_network_speed_bytes</td><td>/sys/class/net/<iface>   speed_bytes值</iface></td><td>#   HELP node_network_speed_bytes speed_bytes value of   /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_transmit_bytes_total</td><td>网络设备统计信息transmit_bytes</td><td>#   HELP node_network_transmit_bytes_total Network device statistic   transmit_bytes.</td></tr><tr><td>node_network_transmit_carrier_total</td><td>网络设备统计信息transmit_carrier</td><td>#   HELP node_network_transmit_carrier_total Network device statistic   transmit_carrier.</td></tr><tr><td>node_network_transmit_colls_total</td><td>网络设备统计信息transmit_colls</td><td>#   HELP node_network_transmit_colls_total Network device statistic   transmit_colls.</td></tr><tr><td>node_network_transmit_compressed_total</td><td>网络设备统计信息transmit_compressed</td><td>#   HELP node_network_transmit_compressed_total Network device statistic   transmit_compressed.</td></tr><tr><td>node_network_transmit_drop_total</td><td>网络设备统计信息transmit_drop</td><td>#   HELP node_network_transmit_drop_total Network device statistic transmit_drop.</td></tr><tr><td>node_network_transmit_errs_total</td><td>网络设备统计信息transmit_errs</td><td>#   HELP node_network_transmit_errs_total Network device statistic transmit_errs.</td></tr><tr><td>node_network_transmit_fifo_total</td><td>网络设备统计信息transmit_fifo</td><td>#   HELP node_network_transmit_fifo_total Network device statistic transmit_fifo.</td></tr><tr><td>node_network_transmit_packets_total</td><td>网络设备统计信息transmit_packets</td><td>#   HELP node_network_transmit_packets_total Network device statistic   transmit_packets.</td></tr><tr><td>node_network_transmit_queue_length</td><td>/sys/class/net/<iface>   transmit_queue_length值</iface></td><td>#   HELP node_network_transmit_queue_length transmit_queue_length value of   /sys/class/net/<iface>.</iface></td></tr><tr><td>node_network_up</td><td>如果operstate为’up’，则值为1，否则为0</td><td>#   HELP node_network_up Value is 1 if operstate is ‘up’, 0 otherwise.</td></tr><tr><td>node_procs_blocked</td><td>阻塞等待I/O完成的进程数</td><td>#   HELP node_procs_blocked Number of processes blocked waiting for I/O to   complete.</td></tr><tr><td>node_procs_running</td><td>处于可运行状态的进程数</td><td>#   HELP node_procs_running Number of processes in runnable state.</td></tr><tr><td>node_scrape_collector_duration_seconds</td><td>node_exporter：collector scrape持续时间</td><td>#   HELP node_scrape_collector_duration_seconds node_exporter: Duration of a   collector scrape.</td></tr><tr><td>node_scrape_collector_success</td><td>node_exporter：collector 是否成功</td><td>#   HELP node_scrape_collector_success node_exporter: Whether a collector   succeeded.</td></tr><tr><td>node_sockstat_FRAG_inuse</td><td>state   inuse中的FRAG sockets数量</td><td>#   HELP node_sockstat_FRAG_inuse Number of FRAG sockets in state inuse.</td></tr><tr><td>node_sockstat_FRAG_memory</td><td>state   memory（状态存储器）中的FRAG sockets数量</td><td>#   HELP node_sockstat_FRAG_memory Number of FRAG sockets in state memory.</td></tr><tr><td>node_sockstat_RAW_inuse</td><td>state   inuse中的RAW sockets数</td><td>#   HELP node_sockstat_RAW_inuse Number of RAW sockets in state inuse.</td></tr><tr><td>node_sockstat_TCP_alloc</td><td>state   alloc中的TCP sockets数</td><td>#   HELP node_sockstat_TCP_alloc Number of TCP sockets in state alloc.</td></tr><tr><td>node_sockstat_TCP_inuse</td><td>state   inuse中的TCP sockets数</td><td>#   HELP node_sockstat_TCP_inuse Number of TCP sockets in state inuse.</td></tr><tr><td>node_sockstat_TCP_mem</td><td>state   mem中的TCP sockets数</td><td>#   HELP node_sockstat_TCP_mem Number of TCP sockets in state mem.</td></tr><tr><td>node_sockstat_TCP_mem_bytes</td><td>state   mem_bytes中的TCP sockets数</td><td>#   HELP node_sockstat_TCP_mem_bytes Number of TCP sockets in state mem_bytes.</td></tr><tr><td>node_sockstat_TCP_orphan</td><td>state   orphan中的TCP sockets数</td><td>#   HELP node_sockstat_TCP_orphan Number of TCP sockets in state orphan.</td></tr><tr><td>node_sockstat_TCP_tw</td><td>state   tw中的TCP sockets数</td><td>#   HELP node_sockstat_TCP_tw Number of TCP sockets in state tw.</td></tr><tr><td>node_sockstat_UDPLITE_inuse</td><td>state   inuse中的UDPLITE UDP sockets数</td><td>#   HELP node_sockstat_UDPLITE_inuse Number of UDPLITE sockets in state inuse.</td></tr><tr><td>node_sockstat_UDP_inuse</td><td>state   inuse中的UDP sockets数</td><td>#   HELP node_sockstat_UDP_inuse Number of UDP sockets in state inuse.</td></tr><tr><td>node_sockstat_UDP_mem</td><td>state   mem中的UDP sockets数</td><td>#   HELP node_sockstat_UDP_mem Number of UDP sockets in state mem.</td></tr><tr><td>node_sockstat_UDP_mem_bytes</td><td>state   mem_bytes中的UDP sockets数</td><td>#   HELP node_sockstat_UDP_mem_bytes Number of UDP sockets in state mem_bytes.</td></tr><tr><td>node_sockstat_sockets_used</td><td>state   used中的sockets sockets数</td><td>#   HELP node_sockstat_sockets_used Number of sockets sockets in state used.</td></tr><tr><td>node_textfile_scrape_error</td><td>如果打开或读取文件时出错时为1，否则为0</td><td>#   HELP node_textfile_scrape_error 1 if there was an error opening or reading a   file, 0 otherwise</td></tr><tr><td>node_time_seconds</td><td>以纪元（1970年）开始的系统时间</td><td>#   HELP node_time_seconds System time in seconds since epoch (1970).</td></tr><tr><td>node_timex_estimated_error_seconds</td><td>估计误差（秒）</td><td>#   HELP node_timex_estimated_error_seconds Estimated error in seconds.</td></tr><tr><td>node_timex_frequency_adjustment_ratio</td><td>本地时钟频率调整</td><td>#   HELP node_timex_frequency_adjustment_ratio Local clock frequency adjustment.</td></tr><tr><td>node_timex_loop_time_constant</td><td>锁相回路时间常数</td><td>#   HELP node_timex_loop_time_constant Phase-locked loop time constant.</td></tr><tr><td>node_timex_maxerror_seconds</td><td>最大误差（秒）</td><td>#   HELP node_timex_maxerror_seconds Maximum error in seconds.</td></tr><tr><td>node_timex_offset_seconds</td><td>本地系统和参考时钟之间的时间偏移</td><td>#   HELP node_timex_offset_seconds Time offset in between local system and   reference clock.</td></tr><tr><td>node_timex_pps_calibration_total</td><td>每秒脉冲校准间隔计数</td><td>#   HELP node_timex_pps_calibration_total Pulse per second count of calibration   intervals.</td></tr><tr><td>node_timex_pps_error_total</td><td>每秒脉冲校准错误计数</td><td>#   HELP node_timex_pps_error_total Pulse per second count of calibration errors.</td></tr><tr><td>node_timex_pps_frequency_hertz</td><td>脉冲每秒频率</td><td>#   HELP node_timex_pps_frequency_hertz Pulse per second frequency.</td></tr><tr><td>node_timex_pps_jitter_seconds</td><td>脉冲每秒抖动</td><td>#   HELP node_timex_pps_jitter_seconds Pulse per second jitter.</td></tr><tr><td>node_timex_pps_jitter_total</td><td>每秒脉冲数超出抖动限制的事件数</td><td>#   HELP node_timex_pps_jitter_total Pulse per second count of jitter limit   exceeded events.</td></tr><tr><td>node_timex_pps_shift_seconds</td><td>每秒脉冲数超出稳定极限的事件数</td><td>#   HELP node_timex_pps_shift_seconds Pulse per second interval duration.</td></tr><tr><td>node_timex_pps_stability_exceeded_total</td><td>每秒脉冲数超出稳定极限事件</td><td>#   HELP node_timex_pps_stability_exceeded_total Pulse per second count of   stability limit exceeded events.</td></tr><tr><td>node_timex_pps_stability_hertz</td><td>脉冲每秒稳定性，最近频率变化的平均值</td><td>#   HELP node_timex_pps_stability_hertz Pulse per second stability, average of   recent frequency changes.</td></tr><tr><td>node_timex_status</td><td>status   array bits的值</td><td>#   HELP node_timex_status Value of the status array bits.</td></tr><tr><td>node_timex_sync_status</td><td>时钟与可靠服务器同步(1   = yes, 0 = no)</td><td>#   HELP node_timex_sync_status Is clock synchronized to a reliable server (1 =   yes, 0 = no).</td></tr><tr><td>node_timex_tai_offset_seconds</td><td>国际原子时间（TAI）偏移量</td><td>#   HELP node_timex_tai_offset_seconds International Atomic Time (TAI) offset.</td></tr><tr><td>node_timex_tick_seconds</td><td>时钟周期之间的秒数</td><td>#   HELP node_timex_tick_seconds Seconds between clock ticks.</td></tr><tr><td>node_uname_info</td><td>由uname系统调用提供的标记系统信息</td><td>#   HELP node_uname_info Labeled system information as provided by the uname   system call.</td></tr><tr><td>node_vmstat_pgfault</td><td>/proc/vmstat信息字段pgfault</td><td>#   HELP node_vmstat_pgfault /proc/vmstat information field pgfault.</td></tr><tr><td>node_vmstat_pgmajfault</td><td>/proc/vmstat信息字段pgmajfault</td><td>#   HELP node_vmstat_pgmajfault /proc/vmstat information field pgmajfault.</td></tr><tr><td>node_vmstat_pgpgin</td><td>/proc/vmstat信息字段pgpgin</td><td>#   HELP node_vmstat_pgpgin /proc/vmstat information field pgpgin.</td></tr><tr><td>node_vmstat_pgpgout</td><td>/proc/vmstat信息字段pgpgout</td><td>#   HELP node_vmstat_pgpgout /proc/vmstat information field pgpgout.</td></tr><tr><td>node_vmstat_pswpin</td><td>/proc/vmstat信息字段pswpin</td><td>#   HELP node_vmstat_pswpin /proc/vmstat information field pswpin.</td></tr><tr><td>node_vmstat_pswpout</td><td>/proc/vmstat信息字段pswpout</td><td>#   HELP node_vmstat_pswpout /proc/vmstat information field pswpout.</td></tr><tr><td>node_xfs_allocation_btree_compares_total</td><td>文件系统的分配B-tree比较数</td><td>#   HELP node_xfs_allocation_btree_compares_total Number of allocation B-tree   compares for a filesystem.</td></tr><tr><td>node_xfs_allocation_btree_lookups_total</td><td>文件系统的分配B-tree查找数</td><td>#   HELP node_xfs_allocation_btree_lookups_total Number of allocation B-tree   lookups for a filesystem.</td></tr><tr><td>node_xfs_allocation_btree_records_deleted_total</td><td>为文件系统删除的分配B-tree记录数</td><td>#   HELP node_xfs_allocation_btree_records_deleted_total Number of allocation   B-tree records deleted for a filesystem.</td></tr><tr><td>node_xfs_allocation_btree_records_inserted_total</td><td>为文件系统插入的分配B-tree记录数</td><td>#   HELP node_xfs_allocation_btree_records_inserted_total Number of allocation   B-tree records inserted for a filesystem.</td></tr><tr><td>node_xfs_block_map_btree_compares_total</td><td>对于文件系统block映射B-tree比较的数量</td><td>#   HELP node_xfs_block_map_btree_compares_total Number of block map B-tree   compares for a filesystem.</td></tr><tr><td>node_xfs_block_map_btree_lookups_total</td><td>对于文件系统block映射B-tree查找的数量</td><td>#   HELP node_xfs_block_map_btree_lookups_total Number of block map B-tree   lookups for a filesystem.</td></tr><tr><td>node_xfs_block_map_btree_records_deleted_total</td><td>文件系统删除block映射B-tree记录的数量</td><td>#   HELP node_xfs_block_map_btree_records_deleted_total Number of block map   B-tree records deleted for a filesystem.</td></tr><tr><td>node_xfs_block_map_btree_records_inserted_total</td><td>文件系统插入block映射B-tree记录的数量</td><td>#   HELP node_xfs_block_map_btree_records_inserted_total Number of block map   B-tree records inserted for a filesystem.</td></tr><tr><td>node_xfs_block_mapping_extent_list_compares_total</td><td>文件系统的extent列表比较数</td><td>#   HELP node_xfs_block_mapping_extent_list_compares_total Number of extent list   compares for a filesystem.</td></tr><tr><td>node_xfs_block_mapping_extent_list_deletions_total</td><td>文件系统的extent列表删除数</td><td>#   HELP node_xfs_block_mapping_extent_list_deletions_total Number of extent list   deletions for a filesystem.</td></tr><tr><td>node_xfs_block_mapping_extent_list_insertions_total</td><td>文件系统的extent列表插入数</td><td>#   HELP node_xfs_block_mapping_extent_list_insertions_total Number of extent   list insertions for a filesystem.</td></tr><tr><td>node_xfs_block_mapping_extent_list_lookups_total</td><td>文件系统的extent列表查找次数</td><td>#   HELP node_xfs_block_mapping_extent_list_lookups_total Number of extent list   lookups for a filesystem.</td></tr><tr><td>node_xfs_block_mapping_reads_total</td><td>文件系统读取操作的block映射数</td><td>#   HELP node_xfs_block_mapping_reads_total Number of block map for read   operations for a filesystem.</td></tr><tr><td>node_xfs_block_mapping_unmaps_total</td><td>文件系统的block取消映射（删除）的数量</td><td>#   HELP node_xfs_block_mapping_unmaps_total Number of block unmaps (deletes) for   a filesystem.</td></tr><tr><td>node_xfs_block_mapping_writes_total</td><td>文件系统写操作的block映射数</td><td>#   HELP node_xfs_block_mapping_writes_total Number of block map for write   operations for a filesystem.</td></tr><tr><td>node_xfs_extent_allocation_blocks_allocated_total</td><td>文件系统分配的block数</td><td>#   HELP node_xfs_extent_allocation_blocks_allocated_total Number of blocks   allocated for a filesystem.</td></tr><tr><td>node_xfs_extent_allocation_blocks_freed_total</td><td>文件系统释放的block数</td><td>#   HELP node_xfs_extent_allocation_blocks_freed_total Number of blocks freed for   a filesystem.</td></tr><tr><td>node_xfs_extent_allocation_extents_allocated_total</td><td>为文件系统分配的extent数      在电脑文件系统中，一个 Extent (在中国大陆某些文献中翻译为“区块”[1])，是指一段连续的存储空间。一般来说，一个文件的物理大小一定是一个   extent 容量的整数倍。当一个进程创建一个文件的时候，文件系统管理程序会将整个 extent 分配给这个文件。当再次向该文件写入数据时   (有可能是在其他写入操作之后)，数据会从上次写入的数据末尾处追加数据。这样可以减少甚至消除文件碎片。      参考：<a href="http://www.wikiwand.com/zh-sg/Extent_(%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1)" target="_blank" rel="noopener">http://www.wikiwand.com/zh-sg/Extent_(%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1)</a></td><td>#   HELP node_xfs_extent_allocation_extents_allocated_total Number of extents   allocated for a filesystem.</td></tr><tr><td>node_xfs_extent_allocation_extents_freed_total</td><td>文件系统释放的extent数</td><td>#   HELP node_xfs_extent_allocation_extents_freed_total Number of extents freed   for a filesystem.</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prometheus ceph_exporter 监控项</title>
      <link href="/2019/05/24/prometheus-ceph-exporter-%E7%9B%91%E6%8E%A7%E9%A1%B9/"/>
      <url>/2019/05/24/prometheus-ceph-exporter-%E7%9B%91%E6%8E%A7%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>截止2019-05-24 ceph_exporter监控项整理</p><table><thead><tr><th>Metrics</th><th>Chinese   explanation</th><th>English   explanation</th></tr></thead><tbody><tr><td>ceph_active_pgs</td><td>处于active状态的PG数</td><td># HELP   ceph_active_pgs No. of active PGs in the cluster</td></tr><tr><td>ceph_backfill_wait_pgs</td><td>处于backfill_wait状态的PG数</td><td># HELP   ceph_backfill_wait_pgs No. of PGs in the cluster with backfill_wait state</td></tr><tr><td>ceph_backfilling_pgs</td><td>处于backfilling状态的PG数</td><td># HELP   ceph_backfilling_pgs No. of backfilling PGs in the cluster</td></tr><tr><td>ceph_cache_evict_io_bytes</td><td>每秒从cache   pool（缓存池）中evicted（逐出）的字节数</td><td># HELP   ceph_cache_evict_io_bytes Rate of bytes being evicted from the cache pool per   second</td></tr><tr><td>ceph_cache_flush_io_bytes</td><td>每秒从cache   pool（缓存池）中flushed（刷新）的字节数</td><td># HELP   ceph_cache_flush_io_bytes Rate of bytes being flushed from the cache pool per   second</td></tr><tr><td>ceph_cache_promote_io_ops</td><td>每秒cache promote操作的总数</td><td># HELP   ceph_cache_promote_io_ops Total cache promote operations measured per second</td></tr><tr><td>ceph_client_io_ops</td><td>客户端每秒操作总数</td><td># HELP   ceph_client_io_ops Total client ops on the cluster measured per second</td></tr><tr><td>ceph_client_io_read_bytes</td><td>客户端每秒read字节数</td><td># HELP   ceph_client_io_read_bytes Rate of bytes being read by all clients per second</td></tr><tr><td>ceph_client_io_read_ops</td><td>客户端每秒read总I/O操作数</td><td># HELP   ceph_client_io_read_ops Total client read I/O ops on the cluster measured per   second</td></tr><tr><td>ceph_client_io_write_bytes</td><td>客户端每秒write字节数</td><td># HELP   ceph_client_io_write_bytes Rate of bytes being written by all clients per   second</td></tr><tr><td>ceph_client_io_write_ops</td><td>客户端每秒write总I/O操作数</td><td># HELP   ceph_client_io_write_ops Total client write I/O ops on the cluster measured   per second</td></tr><tr><td>ceph_cluster_available_bytes</td><td>群集中的可用空间</td><td># HELP   ceph_cluster_available_bytes Available space within the cluster</td></tr><tr><td>ceph_cluster_capacity_bytes</td><td>群集的总容量</td><td># HELP   ceph_cluster_capacity_bytes Total capacity of the cluster</td></tr><tr><td>ceph_cluster_objects</td><td>集群中的rados object数</td><td># HELP   ceph_cluster_objects No. of rados objects within the cluster</td></tr><tr><td>ceph_cluster_used_bytes</td><td>集群已使用的容量</td><td># HELP   ceph_cluster_used_bytes Capacity of the cluster currently in use</td></tr><tr><td>ceph_deep_scrubbing_pgs</td><td>deep scrubbing状态的PG数量</td><td># HELP   ceph_deep_scrubbing_pgs No. of deep scrubbing PGs in the cluster</td></tr><tr><td>ceph_degraded_objects</td><td>所有PG中degraded   objects的数量，包括副本</td><td># HELP   ceph_degraded_objects No. of degraded objects across all PGs, includes   replicas</td></tr><tr><td>ceph_degraded_pgs</td><td>处于degraded状态的PG数</td><td># HELP   ceph_degraded_pgs No. of PGs in a degraded state</td></tr><tr><td>ceph_down_pgs</td><td>处于down状态的PG数</td><td># HELP ceph_down_pgs   No. of PGs in the cluster in down state</td></tr><tr><td>ceph_forced_backfill_pgs</td><td>处于forced_backfill状态的PG数</td><td># HELP   ceph_forced_backfill_pgs No. of PGs in the cluster with forced_backfill state</td></tr><tr><td>ceph_forced_recovery_pgs</td><td>处于forced_recovery状态的PG数</td><td># HELP   ceph_forced_recovery_pgs No. of PGs in the cluster with forced_recovery state</td></tr><tr><td>ceph_health_status</td><td>群集的health状态，只能在3种状态之间变化(err:2,   warn:1, ok:0)</td><td># HELP   ceph_health_status Health status of Cluster, can vary only between 3 states   (err:2, warn:1, ok:0)</td></tr><tr><td>ceph_misplaced_objects</td><td>所有PG中misplaced   object的数量，包括副本</td><td># HELP   ceph_misplaced_objects No. of misplaced objects across all PGs, includes   replicas</td></tr><tr><td>ceph_monitor_quorum_count</td><td>monitor quorum的总数</td><td># HELP   ceph_monitor_quorum_count The total size of the monitor quorum</td></tr><tr><td>ceph_osd_avail_bytes</td><td>OSD可用存储字节数</td><td># HELP   ceph_osd_avail_bytes OSD Available Storage in Bytes</td></tr><tr><td>ceph_osd_average_utilization</td><td>OSD平均利用率</td><td># HELP   ceph_osd_average_utilization OSD Average Utilization</td></tr><tr><td>ceph_osd_bytes</td><td>OSD总字节数</td><td># HELP ceph_osd_bytes   OSD Total Bytes</td></tr><tr><td>ceph_osd_crush_weight</td><td>OSD Crush Weight</td><td># HELP   ceph_osd_crush_weight OSD Crush Weight</td></tr><tr><td>ceph_osd_depth</td><td>OSD 深度</td><td># HELP ceph_osd_depth   OSD Depth</td></tr><tr><td>ceph_osd_in</td><td>OSD In状态</td><td># HELP ceph_osd_in   OSD In Status</td></tr><tr><td>ceph_osd_perf_apply_latency_seconds</td><td>OSD Perf Apply延迟</td><td># HELP   ceph_osd_perf_apply_latency_seconds OSD Perf Apply Latency</td></tr><tr><td>ceph_osd_perf_commit_latency_seconds</td><td>OSD Perf Commit延迟</td><td># HELP   ceph_osd_perf_commit_latency_seconds OSD Perf Commit Latency</td></tr><tr><td>ceph_osd_pgs</td><td>OSD Placement Group计数</td><td># HELP ceph_osd_pgs   OSD Placement Group Count</td></tr><tr><td>ceph_osd_reweight</td><td>OSD Reweight</td><td># HELP   ceph_osd_reweight OSD Reweight</td></tr><tr><td>ceph_osd_total_avail_bytes</td><td>OSD可用存储总字节数</td><td># HELP   ceph_osd_total_avail_bytes OSD Total Available Storage Bytes</td></tr><tr><td>ceph_osd_total_bytes</td><td>OSD总存储字节数</td><td># HELP   ceph_osd_total_bytes OSD Total Storage Bytes</td></tr><tr><td>ceph_osd_total_used_bytes</td><td>OSD已使用总的存储字节数</td><td># HELP   ceph_osd_total_used_bytes OSD Total Used Storage Bytes</td></tr><tr><td>ceph_osd_up</td><td>OSD Up状态</td><td># HELP ceph_osd_up   OSD Up Status</td></tr><tr><td>ceph_osd_used_bytes</td><td>OSD已使用的存储空间字节</td><td># HELP   ceph_osd_used_bytes OSD Used Storage in Bytes</td></tr><tr><td>ceph_osd_utilization</td><td>OSD利用率</td><td># HELP   ceph_osd_utilization OSD Utilization</td></tr><tr><td>ceph_osd_variance</td><td>OSD方差</td><td># HELP   ceph_osd_variance OSD Variance</td></tr><tr><td>ceph_osdmap_flag_full</td><td>群集标记为已满，无法提供写入服务</td><td># HELP   ceph_osdmap_flag_full The cluster is flagged as full and cannot service   writes</td></tr><tr><td>ceph_osdmap_flag_nobackfill</td><td>OSD不会被backfill</td><td># HELP   ceph_osdmap_flag_nobackfill OSDs will not be backfilled</td></tr><tr><td>ceph_osdmap_flag_nodeep_scrub</td><td>禁用Deep scrubbing</td><td># HELP   ceph_osdmap_flag_nodeep_scrub Deep scrubbing is disabled</td></tr><tr><td>ceph_osdmap_flag_nodown</td><td>忽略OSD失败报告，OSD不会被标记为down</td><td># HELP   ceph_osdmap_flag_nodown OSD failure reports are ignored, OSDs will not be   marked as down</td></tr><tr><td>ceph_osdmap_flag_noin</td><td>不会自动标记out的OSD</td><td># HELP   ceph_osdmap_flag_noin OSDs that are out will not be automatically marked in</td></tr><tr><td>ceph_osdmap_flag_noout</td><td>在配置的间隔后，OSD不会自动标记out</td><td># HELP   ceph_osdmap_flag_noout OSDs will not be automatically marked out after the   configured interval</td></tr><tr><td>ceph_osdmap_flag_norebalance</td><td>数据rebalancing暂停</td><td># HELP   ceph_osdmap_flag_norebalance Data rebalancing is suspended</td></tr><tr><td>ceph_osdmap_flag_norecover</td><td>Recovery暂停</td><td># HELP   ceph_osdmap_flag_norecover Recovery is suspended</td></tr><tr><td>ceph_osdmap_flag_noscrub</td><td>禁用Scrubbing</td><td># HELP   ceph_osdmap_flag_noscrub Scrubbing is disabled</td></tr><tr><td>ceph_osdmap_flag_notieragent</td><td>Cache tiering   activity已暂停</td><td># HELP   ceph_osdmap_flag_notieragent Cache tiering activity is suspended</td></tr><tr><td>ceph_osdmap_flag_noup</td><td>不允许OSD start</td><td># HELP   ceph_osdmap_flag_noup OSDs are not allowed to start</td></tr><tr><td>ceph_osdmap_flag_pauserd</td><td>Reads暂停</td><td># HELP   ceph_osdmap_flag_pauserd Reads are paused</td></tr><tr><td>ceph_osdmap_flag_pausewr</td><td>Writes暂停</td><td># HELP   ceph_osdmap_flag_pausewr Writes are paused</td></tr><tr><td>ceph_osds</td><td>群集中总OSD数量</td><td># HELP ceph_osds   Count of total OSDs in the cluster</td></tr><tr><td>ceph_osds_down</td><td>处于DOWN状态的OSD数量</td><td># HELP ceph_osds_down   Count of OSDs that are in DOWN state</td></tr><tr><td>ceph_osds_in</td><td>处于IN状态并可用于处理请求的OSD数量</td><td># HELP ceph_osds_in   Count of OSDs that are in IN state and available to serve requests</td></tr><tr><td>ceph_osds_up</td><td>处于UP状态的OSD数量</td><td># HELP ceph_osds_up   Count of OSDs that are in UP state</td></tr><tr><td>ceph_peering_pgs</td><td>群集中peering状态的PG数量</td><td># HELP   ceph_peering_pgs No. of peering PGs in the cluster</td></tr><tr><td>ceph_pgs_remapped</td><td>remapped并引起cluster-wide（群集范围）移动的PG数量</td><td># HELP   ceph_pgs_remapped No. of PGs that are remapped and incurring cluster-wide   movement</td></tr><tr><td>ceph_recovering_pgs</td><td>群集中recovering状态的PG数量</td><td># HELP   ceph_recovering_pgs No. of recovering PGs in the cluster</td></tr><tr><td>ceph_recovery_io_bytes</td><td>每秒recovery的字节数</td><td># HELP   ceph_recovery_io_bytes Rate of bytes being recovered in cluster per second</td></tr><tr><td>ceph_recovery_io_keys</td><td>每秒恢复的keys数率</td><td># HELP   ceph_recovery_io_keys Rate of keys being recovered in cluster per second</td></tr><tr><td>ceph_recovery_io_objects</td><td>每秒恢复的object的速率</td><td># HELP   ceph_recovery_io_objects Rate of objects being recovered in cluster per   second</td></tr><tr><td>ceph_recovery_wait_pgs</td><td>处于recovery_wait状态的PG数</td><td># HELP   ceph_recovery_wait_pgs No. of PGs in the cluster with recovery_wait state</td></tr><tr><td>ceph_scrubbing_pgs</td><td>处于scrubbing状态的PG数</td><td># HELP   ceph_scrubbing_pgs No. of scrubbing PGs in the cluster</td></tr><tr><td>ceph_slow_requests</td><td>慢速请求数</td><td># HELP   ceph_slow_requests No. of slow requests</td></tr><tr><td>ceph_stale_pgs</td><td>处于stale状态的PG数</td><td># HELP ceph_stale_pgs   No. of stale PGs in the cluster</td></tr><tr><td>ceph_stuck_degraded_pgs</td><td>处于degraded状态的PG数</td><td># HELP   ceph_stuck_degraded_pgs No. of PGs stuck in a degraded state</td></tr><tr><td>ceph_stuck_requests</td><td>stuck（卡住）的请求数</td><td># HELP   ceph_stuck_requests No. of stuck requests</td></tr><tr><td>ceph_stuck_stale_pgs</td><td>处于stale状态的PG数</td><td># HELP   ceph_stuck_stale_pgs No. of stuck stale PGs in the cluster</td></tr><tr><td>ceph_stuck_unclean_pgs</td><td>处于unclean状态的PG数</td><td># HELP   ceph_stuck_unclean_pgs No. of PGs stuck in an unclean state</td></tr><tr><td>ceph_stuck_undersized_pgs</td><td>处于undersized状态的PG数</td><td># HELP   ceph_stuck_undersized_pgs No. of stuck undersized PGs in the cluster</td></tr><tr><td>ceph_total_pgs</td><td>集群中总的PG数</td><td># HELP ceph_total_pgs   Total no. of PGs in the cluster</td></tr><tr><td>ceph_unclean_pgs</td><td>处于unclean状态的PG数</td><td># HELP   ceph_unclean_pgs No. of PGs in an unclean state</td></tr><tr><td>ceph_undersized_pgs</td><td>处于undersized状态的PG数</td><td># HELP   ceph_undersized_pgs No. of undersized PGs in the cluster</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LVM逻辑卷基本概念</title>
      <link href="/2019/04/08/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/04/08/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>LinuxCast视频教程笔记</p><h1 id="传统磁盘管理的问题"><a href="#传统磁盘管理的问题" class="headerlink" title="传统磁盘管理的问题"></a>传统磁盘管理的问题</h1><p>当分区大小不够用时无法扩展其大小，只能通过添加硬盘、创建新的分区来扩展空间，但是新添加进来的硬盘是作为独立文件系统存在的，原有的文件系统并未得到扩充，上层应用很多时候只能访问一个文件系统。只能让现有磁盘下线，换上新的磁盘之后，再将原始数据导入。</p><h1 id="LVM"><a href="#LVM" class="headerlink" title="LVM"></a>LVM</h1><p>LVM（Logical volume Manager）逻辑卷管理通过将底层物理硬盘抽象封装起来，以逻辑卷的形式表现给上层系统，逻辑卷的大小可以动态调整，而且不会丢失现有数据。新加入的硬盘也不会改变现有上层的逻辑卷。</p><p>作为一种动态磁盘管理机制，逻辑卷技术大大提高了磁盘管理的灵活性。</p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/LVM-1.png" alt></p><p>上图黄色为：VG    橙色为：LV</p><p>（1）首先把物理硬盘格式化（存储里面叫条带化）为物理卷（PV），格式化为物理卷的过程实际上是把硬盘空间化成一个一个的PE（PE是逻辑卷空间管理的最基本单位，默认4M）</p><p>（2）第二步我们要创建一个VG，VG的作用是用来装PE的，就像一个空间池。我们可以把一个或者多个PV加到VG当中。加入多少个PV，我们的VG容量就是这些PV大小之和。（当创建VG以后，在/dev目录下会多出一个目录）</p><p>（3）最后创建LV（每个LV的空间可能来自不同的物理硬盘）</p><p><img src="https://github.com/lnsyyj/lnsyyj.github.io/blob/hexo/Blog/source/_posts/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/LVM-2.png?raw=true" alt></p><h1 id="创建LVM"><a href="#创建LVM" class="headerlink" title="创建LVM"></a>创建LVM</h1><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/LVM-3.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/LVM-4.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/LVM-5.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">[root@teuthology ~]# lsblk</span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda    253:0    0  200G  0 disk </span><br><span class="line">├─vda1 253:1    0    1G  0 part /boot</span><br><span class="line">├─vda2 253:2    0    4G  0 part [SWAP]</span><br><span class="line">└─vda3 253:3    0  195G  0 part /</span><br><span class="line">vdb    253:16   0  100G  0 disk </span><br><span class="line">vdc    253:32   0  100G  0 disk</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# pvcreate /dev/vdb /dev/vdc</span><br><span class="line">  Physical volume &quot;/dev/vdb&quot; successfully created.</span><br><span class="line">  Physical volume &quot;/dev/vdc&quot; successfully created.</span><br><span class="line">[root@teuthology ~]# pvs</span><br><span class="line">  PV         VG Fmt  Attr PSize   PFree  </span><br><span class="line">  /dev/vdb      lvm2 ---  100.00g 100.00g</span><br><span class="line">  /dev/vdc      lvm2 ---  100.00g 100.00g</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# vgcreate linuxcast /dev/vdb /dev/vdc </span><br><span class="line">  Volume group &quot;linuxcast&quot; successfully created</span><br><span class="line">[root@teuthology ~]# vgs</span><br><span class="line">  VG        #PV #LV #SN Attr   VSize   VFree  </span><br><span class="line">  linuxcast   2   0   0 wz--n- 199.99g 199.99g</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# lvcreate -n mylv -L 2G linuxcast</span><br><span class="line">  Logical volume &quot;mylv&quot; created.</span><br><span class="line">[root@teuthology ~]# lvs</span><br><span class="line">  LV   VG        Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  mylv linuxcast -wi-a----- 2.00g</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# lvcreate -n mynewlv -L 2G linuxcast</span><br><span class="line">  Logical volume &quot;mynewlv&quot; created.</span><br><span class="line">[root@teuthology ~]# ll /dev/linuxcast/</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 7 Apr  8 14:59 mylv -&gt; ../dm-0</span><br><span class="line">lrwxrwxrwx 1 root root 7 Apr  8 15:03 mynewlv -&gt; ../dm-1</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# mkfs.ext4 /dev/linuxcast/mylv</span><br><span class="line">[root@teuthology ~]# mount /dev/linuxcast/mylv /mnt/</span><br><span class="line">[root@teuthology ~]# df -Th</span><br><span class="line">Filesystem                 Type      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda3                  xfs       195G  2.6G  193G   2% /</span><br><span class="line">devtmpfs                   devtmpfs  3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs                      tmpfs     3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs                      tmpfs     3.9G  8.6M  3.9G   1% /run</span><br><span class="line">tmpfs                      tmpfs     3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1                  xfs      1014M  172M  843M  17% /boot</span><br><span class="line">tmpfs                      tmpfs     783M     0  783M   0% /run/user/0</span><br><span class="line">/dev/mapper/linuxcast-mylv ext4      2.0G  6.0M  1.8G   1% /mnt</span><br><span class="line"></span><br><span class="line">#删除LVM</span><br><span class="line">[root@teuthology ~]# umount  /mnt/</span><br><span class="line">[root@teuthology ~]# lvremove /dev/linuxcast/mylv </span><br><span class="line">Do you really want to remove active logical volume linuxcast/mylv? [y/n]: y</span><br><span class="line">  Logical volume &quot;mylv&quot; successfully removed</span><br><span class="line">[root@teuthology ~]# lvremove /dev/linuxcast/mynewlv </span><br><span class="line">Do you really want to remove active logical volume linuxcast/mynewlv? [y/n]: y</span><br><span class="line">  Logical volume &quot;mynewlv&quot; successfully removed</span><br><span class="line">[root@teuthology ~]# lvs</span><br><span class="line">[root@teuthology ~]# vgremove linuxcast</span><br><span class="line">  Volume group &quot;linuxcast&quot; successfully removed</span><br><span class="line">[root@teuthology ~]# vgs</span><br><span class="line">[root@teuthology ~]# pvremove /dev/vdb </span><br><span class="line">  Labels on physical volume &quot;/dev/vdb&quot; successfully wiped.</span><br><span class="line">[root@teuthology ~]# pvremove /dev/vdc</span><br><span class="line">  Labels on physical volume &quot;/dev/vdc&quot; successfully wiped.</span><br></pre></td></tr></table></figure><h1 id="LVM逻辑卷的拉伸与缩小"><a href="#LVM逻辑卷的拉伸与缩小" class="headerlink" title="LVM逻辑卷的拉伸与缩小"></a>LVM逻辑卷的拉伸与缩小</h1><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/LVM-6.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">[root@teuthology ~]# lsblk</span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda    253:0    0  200G  0 disk </span><br><span class="line">├─vda1 253:1    0    1G  0 part /boot</span><br><span class="line">├─vda2 253:2    0    4G  0 part [SWAP]</span><br><span class="line">└─vda3 253:3    0  195G  0 part /</span><br><span class="line">vdb    253:16   0  100G  0 disk </span><br><span class="line">vdc    253:32   0  100G  0 disk </span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# pvcreate /dev/vdb /dev/vdc</span><br><span class="line">  Physical volume &quot;/dev/vdb&quot; successfully created.</span><br><span class="line">  Physical volume &quot;/dev/vdc&quot; successfully created.</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# pvs</span><br><span class="line">  PV         VG Fmt  Attr PSize   PFree  </span><br><span class="line">  /dev/vdb      lvm2 ---  100.00g 100.00g</span><br><span class="line">  /dev/vdc      lvm2 ---  100.00g 100.00g</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# vgcreate linuxcast /dev/vdb /dev/vdc</span><br><span class="line">  Volume group &quot;linuxcast&quot; successfully created</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# lvcreate -n mylv -L 2G linuxcast</span><br><span class="line">WARNING: ext4 signature detected on /dev/linuxcast/mylv at offset 1080. Wipe it? [y/n]: y</span><br><span class="line">  Wiping ext4 signature on /dev/linuxcast/mylv.</span><br><span class="line">  Logical volume &quot;mylv&quot; created.</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# mkfs.ext4 /dev/linuxcast/mylv</span><br><span class="line">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">文件系统标签=</span><br><span class="line">OS type: Linux</span><br><span class="line">块大小=4096 (log=2)</span><br><span class="line">分块大小=4096 (log=2)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">131072 inodes, 524288 blocks</span><br><span class="line">26214 blocks (5.00%) reserved for the super user</span><br><span class="line">第一个数据块=0</span><br><span class="line">Maximum filesystem blocks=536870912</span><br><span class="line">16 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">8192 inodes per group</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">32768, 98304, 163840, 229376, 294912</span><br><span class="line"></span><br><span class="line">Allocating group tables: 完成                            </span><br><span class="line">正在写入inode表: 完成                            </span><br><span class="line">Creating journal (16384 blocks): 完成</span><br><span class="line">Writing superblocks and filesystem accounting information: 完成 </span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# mount /dev/linuxcast/mylv /mnt/</span><br><span class="line">[root@teuthology ~]# df -TH</span><br><span class="line">文件系统                   类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/vda3                  xfs       210G  2.8G  207G    2% /</span><br><span class="line">devtmpfs                   devtmpfs  4.1G     0  4.1G    0% /dev</span><br><span class="line">tmpfs                      tmpfs     4.2G     0  4.2G    0% /dev/shm</span><br><span class="line">tmpfs                      tmpfs     4.2G  9.0M  4.1G    1% /run</span><br><span class="line">tmpfs                      tmpfs     4.2G     0  4.2G    0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1                  xfs       1.1G  180M  884M   17% /boot</span><br><span class="line">tmpfs                      tmpfs     821M     0  821M    0% /run/user/0</span><br><span class="line">/dev/mapper/linuxcast-mylv ext4      2.1G  6.3M  2.0G    1% /mnt</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# vgs</span><br><span class="line">  VG        #PV #LV #SN Attr   VSize   VFree  </span><br><span class="line">  linuxcast   2   1   0 wz--n- 199.99g 197.99g</span><br><span class="line">[root@teuthology ~]# lvs</span><br><span class="line">  LV   VG        Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  mylv linuxcast -wi-ao---- 2.00g</span><br><span class="line">[root@teuthology ~]# lvextend -L +1G /dev/linuxcast/mylv </span><br><span class="line">  Size of logical volume linuxcast/mylv changed from 2.00 GiB (512 extents) to 3.00 GiB (768 extents).</span><br><span class="line">  Logical volume linuxcast/mylv successfully resized.</span><br><span class="line">[root@teuthology ~]# lvs</span><br><span class="line">  LV   VG        Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  mylv linuxcast -wi-ao---- 3.00g</span><br><span class="line">[root@teuthology ~]# df -Th</span><br><span class="line">文件系统                   类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/vda3                  xfs       195G  2.6G  193G    2% /</span><br><span class="line">devtmpfs                   devtmpfs  3.9G     0  3.9G    0% /dev</span><br><span class="line">tmpfs                      tmpfs     3.9G     0  3.9G    0% /dev/shm</span><br><span class="line">tmpfs                      tmpfs     3.9G  8.6M  3.9G    1% /run</span><br><span class="line">tmpfs                      tmpfs     3.9G     0  3.9G    0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1                  xfs      1014M  172M  843M   17% /boot</span><br><span class="line">tmpfs                      tmpfs     783M     0  783M    0% /run/user/0</span><br><span class="line">/dev/mapper/linuxcast-mylv ext4      2.0G  6.0M  1.8G    1% /mnt</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# resize2fs /dev/linuxcast/mylv </span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem at /dev/linuxcast/mylv is mounted on /mnt; on-line resizing required</span><br><span class="line">old_desc_blocks = 1, new_desc_blocks = 1</span><br><span class="line">The filesystem on /dev/linuxcast/mylv is now 786432 blocks long.</span><br><span class="line">[root@teuthology ~]# df -Th</span><br><span class="line">文件系统                   类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/vda3                  xfs       195G  2.6G  193G    2% /</span><br><span class="line">devtmpfs                   devtmpfs  3.9G     0  3.9G    0% /dev</span><br><span class="line">tmpfs                      tmpfs     3.9G     0  3.9G    0% /dev/shm</span><br><span class="line">tmpfs                      tmpfs     3.9G  8.6M  3.9G    1% /run</span><br><span class="line">tmpfs                      tmpfs     3.9G     0  3.9G    0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1                  xfs      1014M  172M  843M   17% /boot</span><br><span class="line">tmpfs                      tmpfs     783M     0  783M    0% /run/user/0</span><br><span class="line">/dev/mapper/linuxcast-mylv ext4      2.9G  6.0M  2.8G    1% /mnt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/LVM-7.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@teuthology ~]# lsblk</span><br><span class="line">NAME             MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda              253:0    0  200G  0 disk </span><br><span class="line">├─vda1           253:1    0    1G  0 part /boot</span><br><span class="line">├─vda2           253:2    0    4G  0 part [SWAP]</span><br><span class="line">└─vda3           253:3    0  195G  0 part /</span><br><span class="line">vdb              253:16   0  100G  0 disk </span><br><span class="line">└─linuxcast-mylv 252:0    0    3G  0 lvm  /mnt</span><br><span class="line">vdc              253:32   0  100G  0 disk </span><br><span class="line">vdd              253:48   0  100G  0 disk </span><br><span class="line">[root@teuthology ~]# pvcreate /dev/vd</span><br><span class="line">vda   vda1  vda2  vda3  vdb   vdc   vdd   </span><br><span class="line">[root@teuthology ~]# pvcreate /dev/vdd </span><br><span class="line">  Physical volume &quot;/dev/vdd&quot; successfully created.</span><br><span class="line">[root@teuthology ~]# vgs</span><br><span class="line">  VG        #PV #LV #SN Attr   VSize   VFree  </span><br><span class="line">  linuxcast   2   1   0 wz--n- 199.99g 196.99g</span><br><span class="line">[root@teuthology ~]# vgextend linuxcast /dev/vdd </span><br><span class="line">  Volume group &quot;linuxcast&quot; successfully extended</span><br><span class="line">[root@teuthology ~]# vgs</span><br><span class="line">  VG        #PV #LV #SN Attr   VSize    VFree   </span><br><span class="line">  linuxcast   3   1   0 wz--n- &lt;299.99g &lt;296.99g</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/LVM-8.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@teuthology ~]# umount /mnt/</span><br><span class="line">[root@teuthology ~]# df -Th</span><br><span class="line">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/vda3      xfs       195G  2.6G  193G    2% /</span><br><span class="line">devtmpfs       devtmpfs  3.9G     0  3.9G    0% /dev</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G    0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     3.9G  8.6M  3.9G    1% /run</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G    0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1      xfs      1014M  172M  843M   17% /boot</span><br><span class="line">tmpfs          tmpfs     783M     0  783M    0% /run/user/0</span><br><span class="line">[root@teuthology ~]# lvs</span><br><span class="line">  LV   VG        Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  mylv linuxcast -wi-a----- 3.00g                                                    </span><br><span class="line">[root@teuthology ~]# resize2fs /dev/linuxcast/mylv 2G</span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">请先运行 &apos;e2fsck -f /dev/linuxcast/mylv&apos;.</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# e2fsck -f /dev/linuxcast/mylv</span><br><span class="line">e2fsck 1.42.9 (28-Dec-2013)</span><br><span class="line">第一步: 检查inode,块,和大小</span><br><span class="line">第二步: 检查目录结构</span><br><span class="line">第3步: 检查目录连接性</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">第5步: 检查簇概要信息</span><br><span class="line">/dev/linuxcast/mylv: 11/196608 files (0.0% non-contiguous), 30268/786432 blocks</span><br><span class="line">[root@teuthology ~]# resize2fs /dev/linuxcast/mylv 2G</span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Resizing the filesystem on /dev/linuxcast/mylv to 524288 (4k) blocks.</span><br><span class="line">The filesystem on /dev/linuxcast/mylv is now 524288 blocks long.</span><br><span class="line"></span><br><span class="line">[root@teuthology ~]# lvreduce -L -1G /dev/linuxcast/mylv </span><br><span class="line">  WARNING: Reducing active logical volume to 2.00 GiB.</span><br><span class="line">  THIS MAY DESTROY YOUR DATA (filesystem etc.)</span><br><span class="line">Do you really want to reduce linuxcast/mylv? [y/n]: y</span><br><span class="line">  Size of logical volume linuxcast/mylv changed from 3.00 GiB (768 extents) to 2.00 GiB (512 extents).</span><br><span class="line">  Logical volume linuxcast/mylv successfully resized.</span><br><span class="line">[root@teuthology ~]# lvs</span><br><span class="line">  LV   VG        Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  mylv linuxcast -wi-a----- 2.00g</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/LVM-9.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@teuthology ~]# vgs</span><br><span class="line">  VG        #PV #LV #SN Attr   VSize    VFree   </span><br><span class="line">  linuxcast   3   1   0 wz--n- &lt;299.99g &lt;296.99g</span><br><span class="line">[root@teuthology ~]# vgreduce linuxcast /dev/vdd </span><br><span class="line">  Removed &quot;/dev/vdd&quot; from volume group &quot;linuxcast&quot;</span><br><span class="line">[root@teuthology ~]# vgs</span><br><span class="line">  VG        #PV #LV #SN Attr   VSize   VFree  </span><br><span class="line">  linuxcast   2   1   0 wz--n- 199.99g 197.99g</span><br><span class="line">[root@teuthology ~]# pvs</span><br><span class="line">  PV         VG        Fmt  Attr PSize    PFree   </span><br><span class="line">  /dev/vdb   linuxcast lvm2 a--  &lt;100.00g  &lt;98.00g</span><br><span class="line">  /dev/vdc   linuxcast lvm2 a--  &lt;100.00g &lt;100.00g</span><br><span class="line">  /dev/vdd             lvm2 ---   100.00g  100.00g</span><br><span class="line">[root@teuthology ~]# pvremove /dev/vdd </span><br><span class="line">  Labels on physical volume &quot;/dev/vdd&quot; successfully wiped.</span><br><span class="line">[root@teuthology ~]# pvs</span><br><span class="line">  PV         VG        Fmt  Attr PSize    PFree   </span><br><span class="line">  /dev/vdb   linuxcast lvm2 a--  &lt;100.00g  &lt;98.00g</span><br><span class="line">  /dev/vdc   linuxcast lvm2 a--  &lt;100.00g &lt;100.00g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LTP使用</title>
      <link href="/2019/04/01/LTP%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/01/LTP%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ltp-install]# ./runltp -h</span><br><span class="line"></span><br><span class="line">    usage: runltp [ -a EMAIL_TO ] [ -c NUM_PROCS ] [ -C FAILCMDFILE ] [ -T TCONFCMDFILE ]</span><br><span class="line">    [ -d TMPDIR ] [ -D NUM_PROCS,NUM_FILES,NUM_BYTES,CLEAN_FLAG ] -e [ -f CMDFILES(,...) ]</span><br><span class="line">    [ -g HTMLFILE] [ -i NUM_PROCS ] [ -l LOGFILE ] [ -m NUM_PROCS,CHUNKS,BYTES,HANGUP_FLAG ]</span><br><span class="line">    -N -n [ -o OUTPUTFILE ] -p -q -Q [ -r LTPROOT ] [ -s PATTERN ] [ -t DURATION ]</span><br><span class="line">    -v [ -w CMDFILEADDR ] [ -x INSTANCES ] [ -b DEVICE ] [-B LTP_DEV_FS_TYPE]</span><br><span class="line">[ -F LOOPS,PERCENTAGE ] [ -z BIG_DEVICE ] [-Z  LTP_BIG_DEV_FS_TYPE]</span><br><span class="line"></span><br><span class="line"># 将所有报告通过EMAIL方式发送到指定E-mail Address</span><br><span class="line">    -a EMAIL_TO     EMAIL all your Reports to this E-mail Address</span><br><span class="line">    # 在后台额外增加CPU负载的情况下运行LTP</span><br><span class="line">    -c NUM_PROCS    Run LTP under additional background CPU load</span><br><span class="line">                    [NUM_PROCS = no. of processes creating the CPU Load by spinning over sqrt()</span><br><span class="line">                                 (Defaults to 1 when value)]</span><br><span class="line">    -C FAILCMDFILE  Command file with all failed test cases.</span><br><span class="line">    -T TCONFCMDFILE Command file with all test cases that are not fully tested.</span><br><span class="line">    -d TMPDIR       Directory where temporary files will be created.</span><br><span class="line">    -D NUM_PROCS,NUM_FILES,NUM_BYTES,CLEAN_FLAG</span><br><span class="line">                    Run LTP under additional background Load on Secondary Storage (Seperate by comma)</span><br><span class="line">                    [NUM_PROCS   = no. of processes creating Storage Load by spinning over write()]</span><br><span class="line">                    [NUM_FILES   = Write() to these many files (Defaults to 1 when value 0 or undefined)]</span><br><span class="line">                    [NUM_BYTES   = write these many bytes (defaults to 1GB, when value 0 or undefined)]</span><br><span class="line">                    [CLEAN_FLAG  = unlink file to which random data written, when value 1]</span><br><span class="line">    -e              Prints the date of the current LTP release</span><br><span class="line">    -f CMDFILES     Execute user defined list of testcases (separate with &apos;,&apos;)</span><br><span class="line">-F LOOPS,PERCENTAGE Induce PERCENTAGE Fault in the Kernel Subsystems, and, run each test for LOOPS loop</span><br><span class="line">    -g HTMLFILE     Create an additional HTML output format</span><br><span class="line">    -h              Help. Prints all available options.</span><br><span class="line">    -i NUM_PROCS    Run LTP under additional background Load on IO Bus</span><br><span class="line">                    [NUM_PROCS   = no. of processes creating IO Bus Load by spinning over sync()]</span><br><span class="line">    -K DMESG_LOG_DIR</span><br><span class="line">Log Kernel messages generated for each test cases inside this directory</span><br><span class="line">    -l LOGFILE      Log results of test in a logfile.</span><br><span class="line">    -m NUM_PROCS,CHUNKS,BYTES,HANGUP_FLAG</span><br><span class="line">                    Run LTP under additional background Load on Main memory (Seperate by comma)</span><br><span class="line">                    [NUM_PROCS   = no. of processes creating main Memory Load by spinning over malloc()]</span><br><span class="line">                    [CHUNKS      = malloc these many chunks (default is 1 when value 0 or undefined)]</span><br><span class="line">                    [BYTES       = malloc CHUNKS of BYTES bytes (default is 256MB when value 0 or undefined) ]</span><br><span class="line">                    [HANGUP_FLAG = hang in a sleep loop after memory allocated, when value 1]</span><br><span class="line">-M CHECK_TYPE</span><br><span class="line">[CHECK_TYPE=1 =&gt; Full Memory Leak Check tracing children as well]</span><br><span class="line">[CHECK_TYPE=2 =&gt; Thread Concurrency Check tracing children as well]</span><br><span class="line">[CHECK_TYPE=3 =&gt; Full Memory Leak &amp; Thread Concurrency Check tracing children as well]</span><br><span class="line"># 运行所有网络测试</span><br><span class="line">    -N              Run all the networking tests.</span><br><span class="line">    # 在后台额外增加网络流量的方式运行LTP</span><br><span class="line">    -n              Run LTP with network traffic in background.</span><br><span class="line">    # 将测试输出重定向到文件</span><br><span class="line">    -o OUTPUTFILE   Redirect test output to a file.</span><br><span class="line">    # 友好可读格式日志文件。</span><br><span class="line">    -p              Human readable format logfiles.</span><br><span class="line">    # 打印较少的详细输出到屏幕。 这意味着不在kernel log中记录测试的开始信息</span><br><span class="line">    -q              Print less verbose output to screen. This implies not logging start of the test in kernel log.</span><br><span class="line">                    # 不在kernel log中记录测试开始信息</span><br><span class="line">    -Q              Don&apos;t log start of test in kernel log.</span><br><span class="line">    # 安装testsuite的绝对路径</span><br><span class="line">    -r LTPROOT      Fully qualified path where testsuite is installed.</span><br><span class="line">    # 随机化测试顺序</span><br><span class="line">    -R              Randomize test order.</span><br><span class="line">    # 只运行与模式匹配的测试用例</span><br><span class="line">    -s PATTERN      Only run test cases which match PATTERN.</span><br><span class="line">    # 跳过SKIPFILE中指定的测试</span><br><span class="line">    -S SKIPFILE     Skip tests specified in SKIPFILE</span><br><span class="line">    # 在给定的时间内持续执行testsuite。例如：</span><br><span class="line">    -t DURATION     Execute the testsuite for given duration. Examples:</span><br><span class="line">                      -t 60s = 60 seconds</span><br><span class="line">                      -t 45m = 45 minutes</span><br><span class="line">                      -t 24h = 24 hours</span><br><span class="line">                      -t 2d  = 2 days</span><br><span class="line">                    # 执行testsuite迭代次数</span><br><span class="line">    -I ITERATIONS   Execute the testsuite ITERATIONS times.</span><br><span class="line">    # 使用wget获取用户的测试用例列表</span><br><span class="line">    -w CMDFILEADDR  Uses wget to get the user&apos;s list of testcases.</span><br><span class="line">    # 运行此testsuite的多个实例</span><br><span class="line">    -x INSTANCES    Run multiple instances of this testsuite.</span><br><span class="line">    # 有些测试需要一个unmounted的块设备才能正常运行</span><br><span class="line">    -b DEVICE       Some tests require an unmounted block device to run correctly.</span><br><span class="line">                       # 测试块设备的文件系统</span><br><span class="line">    -B LTP_DEV_FS_TYPE The file system of test block devices.</span><br><span class="line">    # 某些测试需要大型未安装的块设备才能正常运行</span><br><span class="line">    -z BIG_DEVICE   Some tests require a big unmounted block device to run correctly.</span><br><span class="line">                    # 大设备的文件系统</span><br><span class="line">    -Z  LTP_BIG_DEV_FS_TYPE The file system of the big device</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    example: runltp -c 2 -i 2 -m 2,4,10240,1 -D 2,10,10240,1 -p -q  -l /tmp/result-log.3140 -o /tmp/result-output.3140 -C /tmp/result-failed.3140 -d /root/ltp-install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio Code 常用插件</title>
      <link href="/2019/03/03/Visual-Studio-Code-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/03/03/Visual-Studio-Code-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>Mac下常用插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、vscode-icons：根据文件不同类型，显示不同图标</span><br><span class="line">(1)安装后激活：shift + command + p</span><br><span class="line">(2)激活vscode-icons</span><br><span class="line"></span><br><span class="line">2、Project Manager：管理多个项目</span><br><span class="line">(1)首先save项目：shift + command + p --&gt; Project Manager Save Project</span><br><span class="line">(2)可以编辑：shift + command + p --&gt; Project Manager Edit Project</span><br><span class="line">(3)列出所有项目，在不同的项目之间切换：alt + command + p</span><br><span class="line"></span><br><span class="line">3、Code Runner：快速运行测试代码的插件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Visual Studio Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis笔记</title>
      <link href="/2019/01/15/redis%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/01/15/redis%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>对于redis的用处不必多说，互联网上有很多资料。文章只做为笔记使用，记录redis操作与学习过程。</p><h1 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h1><p>安装redis很简单，<code>https://redis.io/download</code>官方文档有教程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# wget http://download.redis.io/releases/redis-5.0.3.tar.gz &amp;&amp; tar xzf redis-5.0.3.tar.gz &amp;&amp; cd redis-5.0.3 &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h1 id="redis启动方式"><a href="#redis启动方式" class="headerlink" title="redis启动方式"></a>redis启动方式</h1><p>非守护进程启动方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# redis-server</span><br><span class="line"></span><br><span class="line">或者传递一些配置参数</span><br><span class="line">[root@centos ~]# redis-server --port 6380</span><br></pre></td></tr></table></figure><p>守护进程启动方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">配置文件中开启daemonize yes</span><br><span class="line">[root@centos ~]# redis-server &lt;configPath&gt;</span><br><span class="line"></span><br><span class="line">[root@centos ~]# mkdir -p /var/log/redis</span><br><span class="line">[root@centos redis-5.0.3]# vim myredis.conf </span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">logfile &quot;redis.log&quot;</span><br><span class="line">dir &quot;/var/log/redis&quot;</span><br><span class="line"></span><br><span class="line">[root@centos redis-5.0.3]# redis-server ./myredis.conf </span><br><span class="line">[root@centos ~]# ps -ef | grep redis</span><br><span class="line">root      2447     1  0 11:01 ?        00:00:00 redis-server *:6379</span><br></pre></td></tr></table></figure><h1 id="redis常用配置"><a href="#redis常用配置" class="headerlink" title="redis常用配置"></a>redis常用配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">daemonize是否是守护进程(no|yes)</span><br><span class="line">portredis对外端口号</span><br><span class="line">logfileredis系统日志</span><br><span class="line">dirredis工作目录</span><br><span class="line"></span><br><span class="line">redis默认端口是6379</span><br></pre></td></tr></table></figure><p>从默认配置文件中导出常用的配置项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">去掉&quot;#&quot;，去掉空格</span><br><span class="line">[root@centos redis-5.0.3]# cat redis.conf | grep -v &quot;#&quot; | grep -v &quot;^$&quot; &gt; myredis.conf</span><br></pre></td></tr></table></figure><h1 id="redis-API"><a href="#redis-API" class="headerlink" title="redis API"></a>redis API</h1><p>通过<code>redis-cli</code>命令进入客户端，测试API</p><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><h3 id="通用命令-1"><a href="#通用命令-1" class="headerlink" title="通用命令"></a>通用命令</h3><p>keys [pattern]（一般不在生产环境使用，O(n)，redis单线程会阻塞其他命令）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set hello world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set php good</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set java best</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;java&quot;</span><br><span class="line">3) &quot;php&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; mset 1 1 2 2 3 3 4 4 5 5 12 12 13 13 123 123 1234 1234</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys 1*</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;12&quot;</span><br><span class="line">3) &quot;13&quot;</span><br><span class="line">4) &quot;123&quot;</span><br><span class="line">5) &quot;1234&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys 1[2-3]*</span><br><span class="line">1) &quot;12&quot;</span><br><span class="line">2) &quot;13&quot;</span><br><span class="line">3) &quot;123&quot;</span><br><span class="line">4) &quot;1234&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys 12?</span><br><span class="line">1) &quot;123&quot;</span><br></pre></td></tr></table></figure><p>dbsize</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set hello world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set php good</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set java best</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;java&quot;</span><br><span class="line">3) &quot;php&quot;</span><br><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p>exists key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>del key [key …]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>expire key seconds</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>type key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据结构和内部编码"><a href="#数据结构和内部编码" class="headerlink" title="数据结构和内部编码"></a>数据结构和内部编码</h3><h3 id="单线程架构"><a href="#单线程架构" class="headerlink" title="单线程架构"></a>单线程架构</h3><p>字符串类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>哈希类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>列表类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>集合类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有序集合类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux NFS文件共享</title>
      <link href="/2019/01/09/Linux-NFS%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
      <url>/2019/01/09/Linux-NFS%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h1><p>NFS（Network File System）是Linux系统之间（类Unix系统之间）使用最为广泛的文件共享协议，不同于ftp或http，需要将文件下载后使用，NFS方式的共享是可以直接使用而不需要下载的。</p><h1 id="NFS协议"><a href="#NFS协议" class="headerlink" title="NFS协议"></a>NFS协议</h1><p>参考<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">Wiki</a></p><h2 id="NFSv1"><a href="#NFSv1" class="headerlink" title="NFSv1"></a>NFSv1</h2><p>只在SUN公司内部用作实验目的</p><h2 id="NFSv2"><a href="#NFSv2" class="headerlink" title="NFSv2"></a>NFSv2</h2><ul><li>基于UDP</li><li>由于 32-bit 的限制，NFSv2 只允读写文件起始2G大小的内容</li></ul><h2 id="NFSv3"><a href="#NFSv3" class="headerlink" title="NFSv3"></a>NFSv3</h2><p>其主要目的是解决NFSv2进行同步写操作的性能问题。</p><ul><li>支持 64 bit 文件大小和偏移量，即突破 2GB 文件大小的限制</li><li>支持服务端的异步写操作，提升写入性能</li><li>在许多响应报文中额外增加文件属性，避免用到这些属性时重新获取</li><li>增加READDIRPLUS调用，用于在遍历目录时获取文件描述符和文件属性</li><li>增加了将TCP作为传输层的支持</li></ul><h2 id="NFSv4"><a href="#NFSv4" class="headerlink" title="NFSv4"></a>NFSv4</h2><p>协议的实现/开发工作不再是由SUN公司主导开发，而是改为由互联网工程任务组（IETF）开发。</p><ul><li>性能提升</li><li>强制安全策略</li><li>引入有状态的协议</li></ul><h2 id="NFSv4-1"><a href="#NFSv4-1" class="headerlink" title="NFSv4.1"></a>NFSv4.1</h2><ul><li>为并行访问可横向扩展的集群服务（pNFS扩展）提供协议支持</li></ul><h2 id="NFSv4-2"><a href="#NFSv4-2" class="headerlink" title="NFSv4.2"></a>NFSv4.2</h2><p>NFSv4.2 当前正在开发中</p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>假设一个Unix风格的场景，其中一台计算机（客户端）需要访问存储在其他机器上的数据（NFS 服务器）：</p><p>1、服务端实现 NFS 守护进程，默认运行 nfsd，用来使得数据可以被客户端访问。<br>2、服务端系统管理员可以决定哪些资源可以被访问，导出目录的名字和参数，通常使用 /etc/exports 配置文件 和 exportfs 命令。<br>3、服务端安全-管理员保证它可以组织和认证合法的客户端。<br>4、服务端网络配置保证可以跟客户端透过防火墙进行协商。<br>5、客户端请求导出的数据，通常调用一个 mount 命令。<br>6、如果一切顺利，客户端的用户就可以通过已经挂载的文件系统查看和访问服务端的文件了。<br>提醒：NFS自动挂载可以通过—可能是 /etc/fstab 或者自动安装管理进程。</p><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><p>NFS服务端IP地址为：192.168.56.101</p><p>NFS客户端IP地址为：192.168.56.240</p><h2 id="NFS服务端"><a href="#NFS服务端" class="headerlink" title="NFS服务端"></a>NFS服务端</h2><p>1、在Centos7上安装软件包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# yum install -y nfs-utils rpcbind</span><br></pre></td></tr></table></figure><p>2、创建共享目录并更改权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# mkdir /var/nfsshare &amp;&amp; chmod -R 755 /var/nfsshare</span><br><span class="line"></span><br><span class="line">[root@centos ~]# chown nfsnobody:nfsnobody /var/nfsshare</span><br><span class="line">[root@centos ~]# ll -l /var/</span><br><span class="line">drwxr-xr-x.  2 nfsnobody nfsnobody    6 1月   9 10:41 nfsshare</span><br></pre></td></tr></table></figure><p>3、启动服务并设置开机自启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# systemctl enable rpcbind &amp;&amp; systemctl enable nfs-server &amp;&amp; systemctl enable nfs-lock &amp;&amp; systemctl enable nfs-idmap &amp;&amp; systemctl start rpcbind &amp;&amp; systemctl start nfs-server &amp;&amp; systemctl start nfs-lock &amp;&amp; systemctl start nfs-idmap</span><br><span class="line"></span><br><span class="line">重启所有服务命令</span><br><span class="line">[root@centos ~]# systemctl enable rpcbind &amp;&amp; systemctl enable nfs-server &amp;&amp; systemctl enable nfs-lock &amp;&amp; systemctl enable nfs-idmap &amp;&amp; systemctl restart rpcbind &amp;&amp; systemctl restart nfs-server &amp;&amp; systemctl restart nfs-lock &amp;&amp; systemctl restart nfs-idmap</span><br><span class="line"></span><br><span class="line">无需重启NFS服务，使exports文件生效</span><br><span class="line">[root@centos ~]# exportfs -ra</span><br></pre></td></tr></table></figure><p>4、编辑/etc/exports文件，通过网络共享NFS目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：192.168.56.240是NFS客户端IP</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# vi /etc/exports</span><br><span class="line">/var/nfsshare    192.168.56.240(rw,sync,no_root_squash,no_all_squash)</span><br><span class="line">/home            192.168.56.240(rw,sync,no_root_squash,no_all_squash)</span><br><span class="line"></span><br><span class="line"># 配置文件分三段</span><br><span class="line"># 第一段是将要共享出去的本地目录</span><br><span class="line"># 第二段是允许访问的主机(可以是一个IP也可以是一个IP段192.168.56.0/24)</span><br><span class="line"># 第三段是权限</span><br><span class="line"></span><br><span class="line">客户端示例</span><br><span class="line">使用IP地址指定单一主机10.20.30.40</span><br><span class="line">使用IP地址指定范围主机172.16.0.0/16</span><br><span class="line">使用IP地址指定范围主机192.168.1.*</span><br><span class="line">使用域名指定单一主机Test.ice.apple</span><br><span class="line">使用域名指定范围主机*.ice.apple</span><br><span class="line">使用通配符指定所有主机*</span><br><span class="line"></span><br><span class="line">参数说明</span><br><span class="line">ro设置共享权限为只读</span><br><span class="line">rw设置共享权限为读写</span><br><span class="line">root_squash共享目录的使用者是root时，将被映射为匿名账号（nobody）</span><br><span class="line">no_root_squash当使用NFS服务器共享目录的使用者是root时，将不被映射为匿名账号</span><br><span class="line">all_squash将所有使用NFS服务器共享目录的使用者都映射为匿名账号</span><br><span class="line">anonuid设置匿名账号的UID</span><br><span class="line">anongid设置匿名账号的GID</span><br><span class="line">sync将数据同步写入内存和硬盘。这可能导致效率降低</span><br><span class="line">async先将数据保存在内存中，而不是直接保存在硬盘</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">选项含义：</span><br><span class="line">rw                  允许对共享目录进行读写</span><br><span class="line">sync                实时同步共享目录</span><br><span class="line">no_root_squash      允许root访问</span><br><span class="line">no_all_squash       允许用户授权</span><br><span class="line"></span><br><span class="line">默认选项如下：</span><br><span class="line">ro                  只读共享</span><br><span class="line">sync                所有操作返回前必须已经写入磁盘</span><br><span class="line">wdelay              延迟写操作，等待更多的写操作一起执行</span><br><span class="line">root_squash         防止远程root用户使用root权限对共享进行访问。NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，拥有匿名用户权限，通常他将使用nobody或nfsnobody身份。</span><br><span class="line"></span><br><span class="line">常用选项：</span><br><span class="line">rw                  读写共享</span><br><span class="line">async               操作可以延迟写入硬盘，立即响应，可提高速度</span><br><span class="line">no_wdelay           关闭写延迟，需要与sync选项同时使用</span><br><span class="line">no_root_squash      关闭root_squash，NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。显然开启这项是不安全的。</span><br><span class="line">secure              此选项要求请求源自小于IPPORT_RESERVED（1024）的Internet端口。限制客户端只能从小于1024的tcp/ip端口连接nfs服务器（默认设置）</span><br><span class="line">insecure            此选项接受所有端口，允许客户端从大于1024的tcp/ip端口连接服务器</span><br></pre></td></tr></table></figure><p>5、重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# systemctl restart nfs-server</span><br></pre></td></tr></table></figure><p>6、修改防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# firewall-cmd --permanent --zone=public --add-service=nfs</span><br><span class="line">[root@centos ~]# firewall-cmd --permanent --zone=public --add-service=mountd</span><br><span class="line">[root@centos ~]# firewall-cmd --permanent --zone=public --add-service=rpc-bind</span><br><span class="line">[root@centos ~]# firewall-cmd --reload</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">挂载选项：</span><br><span class="line">ro                  只读挂载</span><br><span class="line">rw                  读写挂载</span><br><span class="line">vers=4              指定使用NFSv4方式挂载</span><br></pre></td></tr></table></figure><h2 id="NFS客户端"><a href="#NFS客户端" class="headerlink" title="NFS客户端"></a>NFS客户端</h2><p>1、在Centos7上安装软件包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]# yum install -y nfs-utils</span><br></pre></td></tr></table></figure><p>2、创建NFS挂载点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]# mkdir -p /mnt/nfs/home</span><br><span class="line">[root@docker ~]# mkdir -p /mnt/nfs/var/nfsshare</span><br></pre></td></tr></table></figure><p>3、挂载服务端的NFS共享目录到客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]# mount -t nfs 192.168.56.101:/home /mnt/nfs/home/</span><br><span class="line">[root@docker ~]# mount -t nfs 192.168.56.101:/var/nfsshare /mnt/nfs/var/nfsshare/</span><br></pre></td></tr></table></figure><p>4、检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]# df -Tkh</span><br><span class="line">文件系统                     类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">192.168.56.101:/home         nfs4       17G  4.6G   13G   27% /mnt/nfs/home</span><br><span class="line">192.168.56.101:/var/nfsshare nfs4       17G  4.6G   13G   27% /mnt/nfs/var/nfsshare</span><br></pre></td></tr></table></figure><p>5、读写文件</p><p>在客户端向挂载点写入文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]# touch /mnt/nfs/var/nfsshare/test_nfs</span><br><span class="line">[root@docker ~]# ll /mnt/nfs/var/nfsshare/</span><br><span class="line">总用量 0</span><br><span class="line">-rw-r--r--. 1 root root 0 1月   9 11:01 test_nfs</span><br></pre></td></tr></table></figure><p>在服务端检查写入的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# ll /var/nfsshare/</span><br><span class="line">总用量 0</span><br><span class="line">-rw-r--r--. 1 root root 0 1月   9 11:01 test_nfs</span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【1】https://www.linuxidc.com/Linux/2013-10/91137.htm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph中的单元测试</title>
      <link href="/2019/01/07/ceph%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/01/07/ceph%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>Ceph中的单元测试使用的是Google Test，嵌入到Ceph源码中。Google Test的使用这里有一篇<a href="http://www.yeolar.com/note/2014/12/21/gtest/#id15" target="_blank" rel="noopener">入门文章</a>，大体思路讲的很清晰。我们主要重心是如何在Ceph源码中添加单元测试。</p><p>在添加之前我们先读一下已经存在的单元测试，在代码中不同的单元测试实现方式不同，可能按照以下Demo无法完全复制，但是慢慢看代码总会理解的。我们挑一个最简单的，不讲解详细测试内容（因为涉及知识较多，目前我还无法完全理解）。</p><p>下面我们以<code>ceph_test_filejournal</code>为例，它存在于ceph-test*.rpm包中，在打社区版Ceph rpm包时（根据ceph.spec）会生成出来《<a href="https://lnsyyj.github.io/2018/09/13/ceph-build-rpm/" target="_blank" rel="noopener">ceph build rpm</a>》，在我们的被测Ceph节点上安装该rpm，会在<code>/usr/bin/</code>目录中找到<code>ceph_test_filejournal</code>（其实会有很多类似<code>ceph_test_</code>的二进制文件，这些都是Ceph的单元测试）。</p><h1 id="CMakeLists"><a href="#CMakeLists" class="headerlink" title="CMakeLists"></a>CMakeLists</h1><p>单元测试总CMakeLists文件位置在<code>src/test/CMakeLists.txt</code>，如果想自己编写测试代码添加到测试集中，需要修改这个CMakeLists。在社区Ceph我们编译出来可执行测试二进制<code>ceph_test_*</code>，都是在这里通过CMakeLists <code>add_executable</code>定义的。</p><h1 id="单元测试代码位置"><a href="#单元测试代码位置" class="headerlink" title="单元测试代码位置"></a>单元测试代码位置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_executable(ceph_test_filejournal</span><br><span class="line">  test_filejournal.cc</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>在<code>add_executable</code>中同时定义了测试代码源文件<code>test_filejournal.cc</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">::testing::InitGoogleTest(&amp;argc, argv);</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>【1】<a href="http://www.yeolar.com/note/2014/12/21/gtest/#id15" target="_blank" rel="noopener">http://www.yeolar.com/note/2014/12/21/gtest/#id15</a></p><p>【2】<a href="https://www.ibm.com/developerworks/cn/aix/library/au-googletestingframework.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/aix/library/au-googletestingframework.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 使用ceph-ansible部署ceph L版</title>
      <link href="/2019/01/06/centos7-%E4%BD%BF%E7%94%A8ceph-ansible%E9%83%A8%E7%BD%B2ceph-L%E7%89%88/"/>
      <url>/2019/01/06/centos7-%E4%BD%BF%E7%94%A8ceph-ansible%E9%83%A8%E7%BD%B2ceph-L%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="安装ansible-2-4-2"><a href="#安装ansible-2-4-2" class="headerlink" title="安装ansible 2.4.2"></a>安装ansible 2.4.2</h1><p>使用yum安装指定版本的ansible</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@cephJ ~]# yum -h | grep show</span><br><span class="line">  --showduplicates      在 list/search 命令下，显示源里重复的条目</span><br><span class="line"></span><br><span class="line">[root@cephJ ~]# yum --showduplicates list ansible</span><br><span class="line">已加载插件：fastestmirror, priorities</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.cn99.com</span><br><span class="line"> * epel: www.ftp.ne.jp</span><br><span class="line"> * extras: mirrors.nwsuaf.edu.cn</span><br><span class="line"> * nux-dextop: li.nux.ro</span><br><span class="line"> * updates: mirrors.nwsuaf.edu.cn</span><br><span class="line">12 packages excluded due to repository priority protections</span><br><span class="line">可安装的软件包</span><br><span class="line">ansible.noarch                                                                          2.4.2.0-2.el7                                                                          extras</span><br><span class="line">ansible.noarch                                                                          2.7.5-1.el7                                                                            epel  </span><br><span class="line"></span><br><span class="line">### sudo yum install &lt;package name&gt;-&lt;version info&gt;</span><br><span class="line">[root@cephJ ~]# sudo yum install -y ansible-2.4.2.0</span><br><span class="line"></span><br><span class="line">[root@cephJ ~]# ansible --version</span><br><span class="line">ansible 2.4.2.0</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = [u&apos;/root/.ansible/plugins/modules&apos;, u&apos;/usr/share/ansible/plugins/modules&apos;]</span><br><span class="line">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class="line">  executable location = /usr/bin/ansible</span><br><span class="line">  python version = 2.7.5 (default, Apr 11 2018, 07:36:10) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]</span><br></pre></td></tr></table></figure><h1 id="配置ceph-ansible"><a href="#配置ceph-ansible" class="headerlink" title="配置ceph-ansible"></a>配置ceph-ansible</h1><p>准备四台机器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ansible节点</span><br><span class="line">ansible-master</span><br><span class="line"></span><br><span class="line">ceph节点</span><br><span class="line">ansible-ceph-1</span><br><span class="line">ansible-ceph-2</span><br><span class="line">ansible-ceph-3</span><br></pre></td></tr></table></figure><p>配置ansible</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">ansible节点执行</span><br><span class="line"></span><br><span class="line">1、首先clone代码</span><br><span class="line">[root@ansible-master ~]# git clone https://github.com/ceph/ceph-ansible.git &amp;&amp; cd ceph-ansible/</span><br><span class="line"></span><br><span class="line">2、创建本地分支并切换分支</span><br><span class="line">[root@ansible-master ceph-ansible]# git checkout -b myv3.2.0 v3.2.0 </span><br><span class="line"></span><br><span class="line">3、copy模板文件</span><br><span class="line">[root@ansible-master ceph-ansible]# cp site.yml.sample site.yml</span><br><span class="line"></span><br><span class="line">4、修改ansible机器清单(inventory)</span><br><span class="line">[root@ansible-master ~]# vim /etc/ansible/hosts</span><br><span class="line">[mons]</span><br><span class="line">ansible-ceph-[1:3]ansible_ssh_pass=yujiang2</span><br><span class="line">[osds]</span><br><span class="line">ansible-ceph-[1:3]ansible_ssh_pass=yujiang2</span><br><span class="line">[rgws]</span><br><span class="line">ansible-ceph-[1:3]ansible_ssh_pass=yujiang2</span><br><span class="line">[mgrs]</span><br><span class="line">ansible-ceph-[1:3]  ansible_ssh_pass=yujiang2</span><br><span class="line"></span><br><span class="line">5、批量推送sshkey</span><br><span class="line">[root@ansible-master ~]# ssh-keygen -t rsa</span><br><span class="line">[root@ansible-master ~]# cat push-ssh.yaml </span><br><span class="line">- hosts: all</span><br><span class="line">  user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: ssh-key-copy</span><br><span class="line">      authorized_key: user=root key=&quot;&#123;&#123; lookup(&apos;file&apos;,&apos;/root/.ssh/id_rsa.pub&apos;)&#125;&#125;&quot;</span><br><span class="line">      tags:</span><br><span class="line">        - sshkey</span><br><span class="line"></span><br><span class="line">[root@ansible-master ~]# ansible-playbook push-ssh.yaml</span><br><span class="line">ansible-ceph-1             : ok=2    changed=1    unreachable=0    failed=0   </span><br><span class="line">ansible-ceph-2             : ok=2    changed=1    unreachable=0    failed=0   </span><br><span class="line">ansible-ceph-3             : ok=2    changed=1    unreachable=0    failed=0 </span><br><span class="line"></span><br><span class="line">6、安装pip并安装ceph-ansible依赖</span><br><span class="line">[root@ansible-master ~]# curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot; &amp;&amp; python get-pip.py &amp;&amp; pip install --upgrade setuptools</span><br><span class="line">[root@ansible-master ceph-ansible]# pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">7、修改ansible变量</span><br><span class="line">[root@ansible-master group_vars]# pwd</span><br><span class="line">/root/ceph-ansible/group_vars</span><br><span class="line"></span><br><span class="line">[root@ansible-master group_vars]# cp all.yml.sample all.yml &amp;&amp; cp osds.yml.sample osds.yml &amp;&amp; cp mgrs.yml.sample mgrs.yml</span><br><span class="line"></span><br><span class="line">all.yml修改如下：</span><br><span class="line">mon_group_name: mons</span><br><span class="line">osd_group_name: osds</span><br><span class="line">ntp_daemon_type: chronyd</span><br><span class="line">ceph_origin: repository</span><br><span class="line">ceph_repository: community</span><br><span class="line">ceph_mirror: http://mirrors.163.com/ceph</span><br><span class="line">ceph_stable_key: http://mirrors.163.com/ceph/keys/release.asc</span><br><span class="line">ceph_stable_release: luminous</span><br><span class="line">ceph_stable_repo: &quot;&#123;&#123; ceph_mirror &#125;&#125;/rpm-&#123;&#123; ceph_stable_release &#125;&#125;/el7/x86_64&quot;</span><br><span class="line">monitor_interface: eth0</span><br><span class="line">public_network: 192.168.0.0/24</span><br><span class="line">cluster_network: 192.168.0.0/24</span><br><span class="line">radosgw_interface: eth0</span><br><span class="line">radosgw_address: 0.0.0.0</span><br><span class="line"></span><br><span class="line">osds.yml修改如下：</span><br><span class="line">copy_admin_key: true</span><br><span class="line">devices:</span><br><span class="line"> - /dev/vdb</span><br><span class="line">osd_scenario: collocated</span><br><span class="line"></span><br><span class="line">mgrs.yml修改如下：</span><br><span class="line">ceph_mgr_modules: [status,dashboard]</span><br><span class="line"></span><br><span class="line">8、执行ansible开始部署ceph，部署哪些模块会在/etc/ansible/hosts中定义（下面是我们之前定义的），如果在该文件中没有对应模块定义，ansible会忽略该模块的部署。</span><br><span class="line">[mons]</span><br><span class="line">ansible-ceph-[1:3]ansible_ssh_pass=yujiang2</span><br><span class="line">[osds]</span><br><span class="line">ansible-ceph-[1:3]ansible_ssh_pass=yujiang2</span><br><span class="line">[rgws]</span><br><span class="line">ansible-ceph-[1:3]ansible_ssh_pass=yujiang2</span><br><span class="line">[mgrs]</span><br><span class="line">ansible-ceph-[1:3]  ansible_ssh_pass=yujiang2</span><br><span class="line"></span><br><span class="line">9、修改ansible host_key_checking</span><br><span class="line">[root@ansible-master ~]# vim /etc/ansible/ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line">host_key_checking = False</span><br><span class="line"></span><br><span class="line">[root@ansible-master ceph-ansible]# pwd</span><br><span class="line">/root/ceph-ansible</span><br><span class="line">[root@ansible-master ceph-ansible]# ansible-playbook site.yml</span><br><span class="line">PLAY RECAP *******************************************************************************************************************************************************************************************************************************************************************</span><br><span class="line">ansible-ceph-1             : ok=310  changed=17   unreachable=0    failed=0   </span><br><span class="line">ansible-ceph-2             : ok=287  changed=17   unreachable=0    failed=0   </span><br><span class="line">ansible-ceph-3             : ok=289  changed=20   unreachable=0    failed=0   </span><br><span class="line"></span><br><span class="line">INSTALLER STATUS *************************************************************************************************************************************************************************************************************************************************************</span><br><span class="line">Install Ceph Monitor        : Complete (0:00:37)</span><br><span class="line">Install Ceph Manager        : Complete (0:01:05)</span><br><span class="line">Install Ceph OSD            : Complete (0:00:38)</span><br><span class="line">Install Ceph RGW            : Complete (0:00:30)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ceph-ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在CentOS 7上将BIND配置为专用网络DNS服务器</title>
      <link href="/2019/01/06/%E5%A6%82%E4%BD%95%E5%9C%A8CentOS-7%E4%B8%8A%E5%B0%86BIND%E9%85%8D%E7%BD%AE%E4%B8%BA%E4%B8%93%E7%94%A8%E7%BD%91%E7%BB%9CDNS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/01/06/%E5%A6%82%E4%BD%95%E5%9C%A8CentOS-7%E4%B8%8A%E5%B0%86BIND%E9%85%8D%E7%BD%AE%E4%B8%BA%E4%B8%93%E7%94%A8%E7%BD%91%E7%BB%9CDNS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Ceph的对象存储服务中有网站托管服务，需要结合DNS来做配合。所以想借此机会了解一下DNS服务，DNS开源软件中最有名的当属BIND。那么如果搭建该服务？如何与Ceph的对象存储服务radosgateway对接？这两个课题是需要来实验的。这篇文章不包括DNS理论，因为在网络上有很多，可以自己google一下。本篇文章主要是：如果搭建BIND服务，以实践为主，我在网络上找到一篇英文文章，是关于BIND在centos7上搭建的，如果英文可以请看<a href="https://www.digitalocean.com/community/tutorials/how-to-configure-bind-as-a-private-network-dns-server-on-centos-7" target="_blank" rel="noopener">原文</a>。</p><p>下面我们就来验证一下BIND的搭建：</p><h1 id="Introduction-介绍"><a href="#Introduction-介绍" class="headerlink" title="Introduction 介绍"></a>Introduction 介绍</h1><p>通过设置适当的域名系统（DNS, Domain Name System），可以按名称查找network interfaces和IP地址，这使得管理server configuration和infrastructure变得更容易。在本教程中，我们将使用CentOS 7上的BIND name servers软件（BIND9）来讨论如何设置内部DNS服务器，Virtual Private Servers (VPS) 可以使用它来解析private host names和private IP地址。这是管理内部多主机hostnames和私有IP地址时必不可少的。</p><p>可以在此处找到本教程的<a href="https://www.digitalocean.com/community/tutorials/how-to-configure-bind-as-a-private-network-dns-server-on-ubuntu-14-04" target="_blank" rel="noopener">Ubuntu版本</a>。</p><h1 id="Prerequisites-先决条件"><a href="#Prerequisites-先决条件" class="headerlink" title="Prerequisites 先决条件"></a>Prerequisites 先决条件</h1><p>要完成本教程，您需要以下内容：</p><ul><li>同一datacenter，并运行在同一private networking下的多台server（可以是虚拟机）</li><li>Primary DNS server，ns1</li><li>Secondary DNS server，ns2</li><li>Root访问以上所有内容（<a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-centos-7" target="_blank" rel="noopener">steps 1-4 here</a>）</li></ul><p>如果您不熟悉DNS概念，建议您阅读<a href="https://www.digitalocean.com/community/tutorial_series/an-introduction-to-managing-dns" target="_blank" rel="noopener">Introduction to Managing DNS</a>。</p><h1 id="Example-Hosts-示例主机"><a href="#Example-Hosts-示例主机" class="headerlink" title="Example Hosts 示例主机"></a>Example Hosts 示例主机</h1><p>出于示例目的，我们将假设以下内容：</p><ul><li>我们有两个现有的VPS叫做”host1”和”host2”</li><li>两个VPS都存在于nyc3 datacenter</li><li>两个VPS都启用了private networking（并且位于10.128.0.0/16子网上）</li><li>两个VPS都与我们在”example.com”上运行的Web应用程序有某种关联</li></ul><p>有了这些假设，我们使用”nyc3.example.com”来参考我们的private subnet或zone的命名方案。因此，host1的private Fully-Qualified Domain Name (FQDN) 将为”host1.nyc3.example.com”。</p><p>请参阅下表中的相关详细信息：</p><table><thead><tr><th>Host</th><th>Role</th><th>Private FQDN</th><th>Private IP Address</th></tr></thead><tbody><tr><td>host1</td><td>Generic Host 1</td><td>host1.nyc3.example.com</td><td>10.128.100.101</td></tr><tr><td>host2</td><td>Generic Host 2</td><td>host2.nyc3.example.com</td><td>10.128.200.102</td></tr></tbody></table><p>注意：自己的实验环境将有所不同，示例中的名称和IP地址只是用于演示如何配置DNS server以提供内部DNS服务。您应该设置适合自己环境的host names和private IP addresses。没有必要在命名方案中使用datacenter的region名称，但我们在此处使用它来表示这些主机属于特定datacenter的private network。如果您使用多个datacenters，则可以在每个相应的datacenter内设置内部DNS。</p><h1 id="Our-Goal-我们的目标"><a href="#Our-Goal-我们的目标" class="headerlink" title="Our Goal 我们的目标"></a>Our Goal 我们的目标</h1><p>在本教程结束时，我们将有一个primary DNS server（ns1），以及可选的secondary DNS server（ns2，它将用作备份）。</p><p>这是一个包含示例名称和IP地址的表：</p><table><thead><tr><th>Host</th><th>Role</th><th>Private FQDN</th><th>Private IP Address</th></tr></thead><tbody><tr><td>ns1</td><td>Primary DNS Server</td><td>ns1.nyc3.example.com</td><td>10.128.10.11</td></tr><tr><td>ns2</td><td>Secondary DNS Server</td><td>ns2.nyc3.example.com</td><td>10.128.20.12</td></tr></tbody></table><p>让我们开始安装我们的Primary DNS server，ns1。</p><h1 id="Install-BIND-on-DNS-Servers-在DNS服务器上安装BIND"><a href="#Install-BIND-on-DNS-Servers-在DNS服务器上安装BIND" class="headerlink" title="Install BIND on DNS Servers 在DNS服务器上安装BIND"></a>Install BIND on DNS Servers 在DNS服务器上安装BIND</h1><p>注意：以红色突出显示的文本很重要！ 它通常用于表示需要用您自己的设置替换的内容，或者应该修改或添加到配置文件中的内容。（红色字体我会标注red，全文搜索red就可以）例如，如果您看到类似host1.nyc3.example.com（red）的内容，请将其替换为您自己服务器的FQDN。同样，如果您看到host1_private_IP（red），请将其替换为您自己服务器的private IP地址。</p><p>在两个DNS服务器ns1和ns2上，使用yum安装BIND：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y bind bind-utils</span><br></pre></td></tr></table></figure><p>现在已经安装了BIND，让我们配置primary DNS server。</p><h1 id="Configure-Primary-DNS-Server-配置主DNS服务器"><a href="#Configure-Primary-DNS-Server-配置主DNS服务器" class="headerlink" title="Configure Primary DNS Server 配置主DNS服务器"></a>Configure Primary DNS Server 配置主DNS服务器</h1><p>BIND的配置由多个文件组成，这些文件包含在主配置文件named. conf中。 这些文件名以“named”开头，因为这是BIND运行时进程的名称。 我们将从配置options文件开始。</p><h2 id="Configure-Bind-配置Bind"><a href="#Configure-Bind-配置Bind" class="headerlink" title="Configure Bind 配置Bind"></a>Configure Bind 配置Bind</h2><p>BIND的进程名为named，因此，许多文件以”named”命名，而不是”BIND”。</p><p>在ns1上，打开named.conf文件进行编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/named.conf</span><br></pre></td></tr></table></figure><p>在现有options block上方，创建一个名为”trusted”的新ACL block。在这里我们将定义允许递归查询DNS的客户端列表（即与ns1位于同一datacenter的服务器）。使用我们的示例private IP地址，我们将ns1，ns2，host1和host2的IP添加到可信客户端列表中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/etc/named.conf — 1 of 4</span><br><span class="line"></span><br><span class="line">acl &quot;trusted&quot; &#123;</span><br><span class="line">        10.128.10.11;    # ns1 - can be set to localhost</span><br><span class="line">        10.128.20.12;    # ns2</span><br><span class="line">        10.128.100.101;  # host1</span><br><span class="line">        10.128.200.102;  # host2</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们有了可信DNS客户端列表，我们将要编辑options block。将ns1的private IP添加到<code>listen-on port 53</code>指令中，并注释掉<code>listen-on-v6</code>行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/named.conf — 2 of 4</span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">        listen-on port 53 &#123; 127.0.0.1; 10.128.10.11; &#125;;</span><br><span class="line">#        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在这些条目下面，将allow-transfer指令从”none”更改为ns2的private IP地址。另外，将allow-query指令从”localhost”更改为”trusted”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/etc/named.conf — 3 of 4</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">options &#123;</span><br><span class="line">...</span><br><span class="line">        allow-transfer &#123; 10.128.20.12; &#125;;      # disable zone transfers by default</span><br><span class="line">...</span><br><span class="line">        allow-query &#123; trusted; &#125;;  # allows queries from &quot;trusted&quot; clients</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在文件末尾，添加以下行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/named.conf — 4 of 4</span><br><span class="line"></span><br><span class="line">include &quot;/etc/named/named.conf.local&quot;;</span><br></pre></td></tr></table></figure><p>现在保存并退出named.conf。上述配置指定只有您自己的服务器（”trusted”服务器）才能查询DNS服务器。</p><p>接下来，我们将配置local文件，以指定我们的DNS zones。</p><h2 id="Configure-Local-File-配置Local文件"><a href="#Configure-Local-File-配置Local文件" class="headerlink" title="Configure Local File 配置Local文件"></a>Configure Local File 配置Local文件</h2><p>在ns1上，打开named.conf.local文件以进行编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/named/named.conf.local</span><br></pre></td></tr></table></figure><p>该文件应为空。 在这里，我们将指定forward和reverse zones。</p><p>使用以下行添加forward zone（替换您自己的zone名称）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/named/named.conf.local — 1 of 2</span><br><span class="line"></span><br><span class="line">zone &quot;nyc3.example.com&quot; &#123;</span><br><span class="line">    type master;</span><br><span class="line">    file &quot;/etc/named/zones/db.nyc3.example.com&quot;; # zone file path</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假设我们的private subnet是10.128.0.0/16，请使用以下行添加reverse zone（请注意，我们的reverse zone名称以”128.10”开头，这是”10.128”的八位字节反转，octet reversal of “10.128”）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/named/named.conf.local — 2 of 2</span><br><span class="line"></span><br><span class="line">zone &quot;128.10.in-addr.arpa&quot; &#123;</span><br><span class="line">    type master;</span><br><span class="line">    file &quot;/etc/named/zones/db.10.128&quot;;  # 10.128.0.0/16 subnet</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>如果您的服务器跨多个private subnets但位于同一datacenter，请确保为每个不同的subnet指定一个额外的zone和zone文件。添加完所有所需zone后，保存并退出named.conf.local文件。</p><p>既然我们的zone是在BIND中指定的，我们需要创建相应的forward和reverse zone文件。</p><h2 id="Create-Forward-Zone-File-创建Forward-Zone文件"><a href="#Create-Forward-Zone-File-创建Forward-Zone文件" class="headerlink" title="Create Forward Zone File 创建Forward Zone文件"></a>Create Forward Zone File 创建Forward Zone文件</h2><p>forward zone文件中，我们为正向DNS查找定义了DNS records（记录）。也就是说，当DNS收到名称查询（例如”host1.nyc3.example.com”）时，它将查找forward zone文件以解析host1的相应private IP地址。</p><p>创建我们的zone文件。根据我们的named.conf.local配置，该位置应为/etc/named/zones：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 /etc/named</span><br><span class="line">sudo mkdir /etc/named/zones</span><br></pre></td></tr></table></figure><p>现在让我们编辑我们的forward zone文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/named/zones/db.nyc3.example.com</span><br></pre></td></tr></table></figure><p>首先，您需要添加SOA record（记录）。将突出显示的ns1 FQDN替换为您自己的FQDN，然后将第二个”nyc3.example.com”替换为您自己的domain。 每次编辑zone文件时，都应该在重新启动named进程之前增加serial值 —— 我们将它增加到”3”。它应该看起来像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/etc/named/zones/db.nyc3.example.com — 1 of 3</span><br><span class="line"></span><br><span class="line">@       IN      SOA     ns1.nyc3.example.com. admin.nyc3.example.com. (</span><br><span class="line">                              3         ; Serial</span><br><span class="line">             604800     ; Refresh</span><br><span class="line">              86400     ; Retry</span><br><span class="line">            2419200     ; Expire</span><br><span class="line">             604800 )   ; Negative Cache TTL</span><br></pre></td></tr></table></figure><p>之后，使用以下行添加您的nameserver records（替换自己的名称<code>nyc3.example.com.</code>）。请注意，第二列指定这些是”NS” records（记录）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/named/zones/db.nyc3.example.com — 2 of 3</span><br><span class="line"></span><br><span class="line">; name servers - NS records</span><br><span class="line">    IN      NS      ns1.nyc3.example.com.</span><br><span class="line">    IN      NS      ns2.nyc3.example.com.</span><br></pre></td></tr></table></figure><p>然后为属于此zone的主机添加A记录。 这包括我们希望以”.nyc3.example.com” 结尾的名称的任何服务器（替换名称和private IP地址）。使用我们的示例名称和private IP地址，我们将为ns1，ns2，host1和host2添加A记录，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/etc/named/zones/db.nyc3.example.com — 3 of 3</span><br><span class="line"></span><br><span class="line">; name servers - A records</span><br><span class="line">ns1.nyc3.example.com.          IN      A       10.128.10.11</span><br><span class="line">ns2.nyc3.example.com.          IN      A       10.128.20.12</span><br><span class="line"></span><br><span class="line">; 10.128.0.0/16 - A records</span><br><span class="line">host1.nyc3.example.com.        IN      A      10.128.100.101</span><br><span class="line">host2.nyc3.example.com.        IN      A      10.128.200.102</span><br></pre></td></tr></table></figure><p>保存并退出db.nyc3.example.com文件。</p><p>我们的最终示例forward zone文件如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/etc/named/zones/db.nyc3.example.com — complete</span><br><span class="line"></span><br><span class="line">$TTL    604800</span><br><span class="line">@       IN      SOA     ns1.nyc3.example.com. admin.nyc3.example.com. (</span><br><span class="line">                  3       ; Serial</span><br><span class="line">             604800     ; Refresh</span><br><span class="line">              86400     ; Retry</span><br><span class="line">            2419200     ; Expire</span><br><span class="line">             604800 )   ; Negative Cache TTL</span><br><span class="line">;</span><br><span class="line">; name servers - NS records</span><br><span class="line">     IN      NS      ns1.nyc3.example.com.</span><br><span class="line">     IN      NS      ns2.nyc3.example.com.</span><br><span class="line"></span><br><span class="line">; name servers - A records</span><br><span class="line">ns1.nyc3.example.com.          IN      A       10.128.10.11</span><br><span class="line">ns2.nyc3.example.com.          IN      A       10.128.20.12</span><br><span class="line"></span><br><span class="line">; 10.128.0.0/16 - A records</span><br><span class="line">host1.nyc3.example.com.        IN      A      10.128.100.101</span><br><span class="line">host2.nyc3.example.com.        IN      A      10.128.200.102</span><br></pre></td></tr></table></figure><p>现在让我们转到reverse zone文件。</p><h2 id="Create-Reverse-Zone-File-s-创建Reverse-Zone文件"><a href="#Create-Reverse-Zone-File-s-创建Reverse-Zone文件" class="headerlink" title="Create Reverse Zone File(s) 创建Reverse Zone文件"></a>Create Reverse Zone File(s) 创建Reverse Zone文件</h2><p>Reverse zone文件是我们为反向DNS查找定义DNS PTR记录的地方。也就是说，当DNS通过IP地址（例如”10.128.100.101”）接收查询时，它将查看reverse zone文件以解析相应的FQDN，在这种情况下查询结果为”host1.nyc3.example.com”。</p><p>在ns1上，对于named.conf.local文件中指定的每个reverse zone，都创建一个reverse zone文件。</p><p>编辑与named.conf.local中定义的reverse zone对应的reverse zone文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/named/zones/db.10.128</span><br></pre></td></tr></table></figure><p>与forward zone文件相同的方式，将突出显示的ns1 FQDN替换为您自己的FQDN，然后将第二个”nyc3.example.com”替换为您自己的domain。每次编辑zone文件时，都应该在重新启动named进程之前递增serial值 —— 我们将其增加到”3”。 它应该看起来像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/etc/named/zones/db.10.128 — 1 of 3</span><br><span class="line"></span><br><span class="line">@       IN      SOA     ns1.nyc3.example.com. admin.nyc3.example.com. (</span><br><span class="line">                              3         ; Serial</span><br><span class="line">                         604800         ; Refresh</span><br><span class="line">                          86400         ; Retry</span><br><span class="line">                        2419200         ; Expire</span><br><span class="line">                         604800 )       ; Negative Cache TTL</span><br></pre></td></tr></table></figure><p>之后，使用以下行添加您的nameserver records（用您自己的名称替换）。 请注意，第二列指定这些是”NS”记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/named/zones/db.10.128 — 2 of 3</span><br><span class="line"></span><br><span class="line">; name servers - NS records</span><br><span class="line">      IN      NS      ns1.nyc3.example.com.</span><br><span class="line">      IN      NS      ns2.nyc3.example.com.</span><br></pre></td></tr></table></figure><p>然后为所有服务器添加PTR记录，这些服务器的IP地址位于您正在编辑的zone文件的subnet上。在我们的示例中，这包括我们所有的主机，因为它们都在10.128.0.0/16 subnet上。请注意，第一列包含服务器private IP地址的最后两个八位字节，顺序相反。请务必替换名称和private IP地址以匹配您的服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/named/zones/db.10.128 — 3 of 3</span><br><span class="line"></span><br><span class="line">; PTR Records</span><br><span class="line">11.10   IN      PTR     ns1.nyc3.example.com.    ; 10.128.10.11</span><br><span class="line">12.20   IN      PTR     ns2.nyc3.example.com.    ; 10.128.20.12</span><br><span class="line">101.100 IN      PTR     host1.nyc3.example.com.  ; 10.128.100.101</span><br><span class="line">102.200 IN      PTR     host2.nyc3.example.com.  ; 10.128.200.102</span><br></pre></td></tr></table></figure><p>保存并退出reverse zone文件（如果需要添加更多reverse zone文件，请重复此部分）。</p><p>我们的最终示例反向区域文件如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/etc/named/zones/db.10.128 — complete</span><br><span class="line"></span><br><span class="line">$TTL    604800</span><br><span class="line">@       IN      SOA     nyc3.example.com. admin.nyc3.example.com. (</span><br><span class="line">                              3         ; Serial</span><br><span class="line">                         604800         ; Refresh</span><br><span class="line">                          86400         ; Retry</span><br><span class="line">                        2419200         ; Expire</span><br><span class="line">                         604800 )       ; Negative Cache TTL</span><br><span class="line">; name servers</span><br><span class="line">      IN      NS      ns1.nyc3.example.com.</span><br><span class="line">      IN      NS      ns2.nyc3.example.com.</span><br><span class="line"></span><br><span class="line">; PTR Records</span><br><span class="line">11.10   IN      PTR     ns1.nyc3.example.com.    ; 10.128.10.11</span><br><span class="line">12.20   IN      PTR     ns2.nyc3.example.com.    ; 10.128.20.12</span><br><span class="line">101.100 IN      PTR     host1.nyc3.example.com.  ; 10.128.100.101</span><br><span class="line">102.200 IN      PTR     host2.nyc3.example.com.  ; 10.128.200.102</span><br></pre></td></tr></table></figure><h2 id="Check-BIND-Configuration-Syntax-检查BIND配置语法"><a href="#Check-BIND-Configuration-Syntax-检查BIND配置语法" class="headerlink" title="Check BIND Configuration Syntax 检查BIND配置语法"></a>Check BIND Configuration Syntax 检查BIND配置语法</h2><p>运行以下命令以检查named.conf *文件的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo named-checkconf</span><br></pre></td></tr></table></figure><p>如果您的named配置文件没有语法错误，您将返回shell提示符并且看不到任何错误消息。 如果配置文件有问题，请检查error message和Configure Primary DNS Server section，然后再次尝试named-checkconf。</p><p>named-checkzone命令可用于检查zone文件的正确性。 其第一个参数指定zone名称，第二个参数指定相应的zone文件，这两个文件都在named.conf.local中定义。</p><p>例如，要检查”nyc3.example.com”的forward zone配置，请运行以下命令（更改名称以匹配你自己的forward zone和文件）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo named-checkzone nyc3.example.com /etc/named/zones/db.nyc3.example.com</span><br></pre></td></tr></table></figure><p>要检查”128.10.in-addr.arpa”的reverse zone配置，请运行以下命令（更改数字以匹配你自己的reverse zone和文件）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo named-checkzone 128.10.in-addr.arpa /etc/named/zones/db.10.128</span><br></pre></td></tr></table></figure><p>当所有配置和zone文件都没有错误时，您应该重新启动BIND服务。</p><h2 id="Start-BIND-启动BIND"><a href="#Start-BIND-启动BIND" class="headerlink" title="Start BIND 启动BIND"></a>Start BIND 启动BIND</h2><p>启动BIND：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start named</span><br></pre></td></tr></table></figure><p>如果你想在OS启动时自动启动BIND服务，请执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable named</span><br></pre></td></tr></table></figure><p>您的primary DNS服务器现已设置好并可以响应DNS查询了。 让我们继续创建secondary DNS服务器。</p><h1 id="Configure-Secondary-DNS-Server-配置备用DNS服务器"><a href="#Configure-Secondary-DNS-Server-配置备用DNS服务器" class="headerlink" title="Configure Secondary DNS Server 配置备用DNS服务器"></a>Configure Secondary DNS Server 配置备用DNS服务器</h1><p>在大多数环境中，最好设置secondary DNS服务器，以便在primary服务器不可用时响应请求。幸运的是，secondary DNS服务器更容易配置。</p><p>在ns2上，编辑named.conf文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/named.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：如果您希望跳过这些说明，可以复制ns1的named.conf文件并对其进行修改以侦听ns2的private IP地址，and not allow transfers。</span><br></pre></td></tr></table></figure><p>在现有options block上方，创建一个名为”trusted”的新ACL block。在这里我们将定义允许递归DNS查询的客户端列表（即与ns1位于同一datacenter的服务器）。使用我们的示例private IP地址，我们将ns1，ns2，host1和host2添加到trusted（可信）客户端列表中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/etc/named.conf — 1 of 4</span><br><span class="line"></span><br><span class="line">acl &quot;trusted&quot; &#123;</span><br><span class="line">        10.128.10.11;    # ns1 - can be set to localhost</span><br><span class="line">        10.128.20.12;    # ns2</span><br><span class="line">        10.128.100.101;  # host1</span><br><span class="line">        10.128.200.102;  # host2</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在我们有了trusted（可信）DNS客户端列表，我们将要编辑options block。将ns1的private IP地址添加到listen-on port 53指令，并注释掉listen-on-v6行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/named.conf — 2 of 4</span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">        listen-on port 53 &#123; 127.0.0.1; 10.128.20.12; &#125;;</span><br><span class="line">#        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>将allow-query指令从”localhost”更改为”trusted”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/named.conf — 3 of 4</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">options &#123;</span><br><span class="line">...</span><br><span class="line">        allow-query &#123; trusted; &#125;; # allows queries from &quot;trusted&quot; clients</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在文件末尾，添加以下行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/named.conf — 4 of 4</span><br><span class="line"></span><br><span class="line">include &quot;/etc/named/named.conf.local&quot;;</span><br></pre></td></tr></table></figure><p>现在保存并退出named.conf。 上述配置指定只有您自己的服务器（”trusted”服务器）才能查询您的DNS服务。</p><p>接下来，我们将配置local文件，以指定我们的DNS zones。</p><p>保存并退出named.conf。</p><p>现在编辑named.conf.local文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 /etc/named</span><br><span class="line">sudo vi /etc/named/named.conf.local</span><br></pre></td></tr></table></figure><p>定义与primary DNS服务器上的master zones对应的slave zones。请注意，类型是”slave”，文件不包含路径，并且有一个masters指令应该设置为primary DNS服务器的private IP。如果您在primary DNS服务器中定义了多个reverse zones，请确保在此处全部添加它们：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/etc/named/named.conf.local</span><br><span class="line"></span><br><span class="line">zone &quot;nyc3.example.com&quot; &#123;</span><br><span class="line">    type slave;</span><br><span class="line">    file &quot;slaves/db.nyc3.example.com&quot;;</span><br><span class="line">    masters &#123; 10.128.10.11; &#125;;  # ns1 private IP</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;128.10.in-addr.arpa&quot; &#123;</span><br><span class="line">    type slave;</span><br><span class="line">    file &quot;slaves/db.10.128&quot;;</span><br><span class="line">    masters &#123; 10.128.10.11; &#125;;  # ns1 private IP</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在保存并退出named.conf.local。</p><p>运行以下命令以检查配置文件的有效性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo named-checkconf</span><br></pre></td></tr></table></figure><p>检查后，启动BIND：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start named</span><br></pre></td></tr></table></figure><p>如果你想在OS启动时自动启动BIND服务，请执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable named</span><br></pre></td></tr></table></figure><p>现在，您拥有用于private network名称和IP地址解析的primary DNS服务器和secondary DNS服务器。 现在，您必须配置客户端服务器以使用您的private DNS服务器。</p><h1 id="Configure-DNS-Clients-配置DNS客户端"><a href="#Configure-DNS-Clients-配置DNS客户端" class="headerlink" title="Configure DNS Clients 配置DNS客户端"></a>Configure DNS Clients 配置DNS客户端</h1><p>在”trusted” ACL中的所有服务器都可以查询DNS服务器之前，必须将客户端服务器配置为使用ns1和ns2作为nameservers。 此过程因操作系统而异，但对于大多数Linux发行版，它涉及将name servers添加到/etc/resolv.conf文件中。</p><h2 id="CentOS-Clients"><a href="#CentOS-Clients" class="headerlink" title="CentOS Clients"></a>CentOS Clients</h2><p>在CentOS，RedHat和Fedora Linux VPS上，只需编辑resolv.conf文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>然后将以下行添加到文件的顶部（替换您的private domain，以及ns1和ns2 private IP地址）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/resolv.conf</span><br><span class="line"></span><br><span class="line">search nyc3.example.com  # your private domain</span><br><span class="line">nameserver 10.128.10.11  # ns1 private IP address</span><br><span class="line">nameserver 10.128.20.12  # ns2 private IP address</span><br></pre></td></tr></table></figure><p>现在保存并退出。 客户端现在已经配置为使用您自己的DNS服务器。</p><h2 id="Ubuntu-Clients"><a href="#Ubuntu-Clients" class="headerlink" title="Ubuntu Clients"></a>Ubuntu Clients</h2><p>在Ubuntu和Debian Linux VPS上，您可以编辑head文件，该文件在启动时附加到resolv.conf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/resolvconf/resolv.conf.d/head</span><br></pre></td></tr></table></figure><p>将以下行添加到文件中（替换您的private domain，以及ns1和ns2 private IP地址）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/resolvconf/resolv.conf.d/head</span><br><span class="line"></span><br><span class="line">search nyc3.example.com  # your private domain</span><br><span class="line">nameserver 10.128.10.11  # ns1 private IP address</span><br><span class="line">nameserver 10.128.20.12  # ns2 private IP address</span><br></pre></td></tr></table></figure><p>现在运行resolvconf以生成新的resolv.conf文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo resolvconf -u</span><br></pre></td></tr></table></figure><p>客户端现在已经配置为使用您自己的DNS服务器。</p><h2 id="Test-Clients"><a href="#Test-Clients" class="headerlink" title="Test Clients"></a>Test Clients</h2><p>使用nslookup —— 包含在”bind-utils”包中 —— 测试您的客户端是否可以查询您的name servers。您应该能够在已配置在”trusted” ACL中的所有客户端上执行此操作。</p><h2 id="Forward-Lookup"><a href="#Forward-Lookup" class="headerlink" title="Forward Lookup"></a>Forward Lookup</h2><p>例如，我们可以通过运行以下命令来执行forward（正向）查找以检索host1.nyc3.example.com的IP地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup host1</span><br></pre></td></tr></table></figure><p>查询”host1”会扩展为”host1.nyc3.example.com”，因为搜索选项设置为您的private subdomain，在查找其他DNS server之前，DNS查询将尝试查看该subdomain。上面命令的输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line">Server:     10.128.10.11</span><br><span class="line">Address:    10.128.10.11#53</span><br><span class="line"></span><br><span class="line">Name:   host1.nyc3.example.com</span><br><span class="line">Address: 10.128.100.101</span><br></pre></td></tr></table></figure><h2 id="Reverse-Lookup"><a href="#Reverse-Lookup" class="headerlink" title="Reverse Lookup"></a>Reverse Lookup</h2><p>要测试reverse（反向）查找，请使用host1的private IP地址查询DNS服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup 10.128.100.101</span><br></pre></td></tr></table></figure><p>您应该看到如下所示的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line">Server:     10.128.10.11</span><br><span class="line">Address:    10.128.10.11#53</span><br><span class="line"></span><br><span class="line">11.10.128.10.in-addr.arpa   name = host1.nyc3.example.com.</span><br></pre></td></tr></table></figure><p>如果所有名称和IP地址都解析为正确的值，则表示您的zone文件已正确配置。如果收到异常值，请务必查看primary DNS服务器上的zone文件（例如db.nyc3.example.com和db.10.128）。</p><p>恭喜！ 您的内部DNS服务器现已正确设置！ 现在我们将介绍如何维护您的zone records。</p><h1 id="Maintaining-DNS-Records-维护DNS记录"><a href="#Maintaining-DNS-Records-维护DNS记录" class="headerlink" title="Maintaining DNS Records 维护DNS记录"></a>Maintaining DNS Records 维护DNS记录</h1><p>现在您有了一个正常工作的内部DNS，您需要维护DNS records，以便它们准确地响应您的server environment。</p><h2 id="Adding-Host-to-DNS-将主机添加到DNS"><a href="#Adding-Host-to-DNS-将主机添加到DNS" class="headerlink" title="Adding Host to DNS 将主机添加到DNS"></a>Adding Host to DNS 将主机添加到DNS</h2><p>每当您向environment添加主机（在同一datacenter中）时，都需要将其添加到DNS中。以下是您需要执行的步骤：</p><p>Primary Nameserver（主Nameserver）</p><ul><li>Forward zone文件：为新主机添加”A”记录，增加”Serial”的值</li><li>Reverse zone文件：为新主机添加”PTR”记录，增加”Serial”的值</li><li>将新主机的private IP地址添加到”trusted” ACL（named.conf.options）</li></ul><p>然后重新加载BIND：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload named</span><br></pre></td></tr></table></figure><p>Secondary Nameserver（辅助Nameserver）</p><ul><li>将新主机的private IP地址添加到”trusted” ACL（named.conf.options）</li></ul><p>然后重新加载BIND：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload named</span><br></pre></td></tr></table></figure><p>配置新主机以使用您自己的DNS</p><ul><li>配置resolv.conf以使用您自己的DNS服务器</li><li>使用nslookup进行测试</li></ul><h2 id="Removing-Host-from-DNS-从DNS中删除主机"><a href="#Removing-Host-from-DNS-从DNS中删除主机" class="headerlink" title="Removing Host from DNS 从DNS中删除主机"></a>Removing Host from DNS 从DNS中删除主机</h2><p>如果您从environment中删除主机或想要将其从DNS中删除，只需删除将服务器添加到DNS时添加的所有内容（即上述步骤的相反步骤）。</p><h1 id="Conclusion-结论"><a href="#Conclusion-结论" class="headerlink" title="Conclusion 结论"></a>Conclusion 结论</h1><p>现在，您可以按名称而不是IP地址来访问服务器的private network interfaces。这使得服务和应用程序的配置更加容易，因为您不再需要记住private IP地址，并且文件将更易于阅读和理解。此外，现在您可以更改配置，以便在单个位置指向新服务器，即primary DNS服务器，而不必编辑各种分布式配置文件，从而简化了维护。</p><p>设置内部DNS并且配置文件使用private FQDN指定网络连接后，维护DNS服务器至关重要。如果它们都不可用，那么依赖它们的服务和应用程序将无法正常运行。这就是为什么建议使用至少一个secondary服务器设置DNS，并维护所有这些服务器的工作备份原因。</p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><table><thead><tr><th>Host</th><th>Role</th><th>Private FQDN</th><th>Private IP Address</th></tr></thead><tbody><tr><td>ns1</td><td>Primary DNS Server</td><td>ns1.nyc3.example.com</td><td>192.168.0.22</td></tr><tr><td>ns2</td><td>Secondary DNS Server</td><td>ns2.nyc3.example.com</td><td>192.168.0.23</td></tr><tr><td>dns-client</td><td>DNS client</td><td></td><td>192.168.0.24</td></tr></tbody></table><p>1、安装BIND在Primary DNS Server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y bind bind-utils</span><br></pre></td></tr></table></figure><p>2、修改/etc/named.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/named.conf</span><br><span class="line"></span><br><span class="line">acl &quot;trusted&quot; &#123;</span><br><span class="line">        192.168.0.22;    # ns1 - can be set to localhost</span><br><span class="line">        192.168.0.23;    # ns2</span><br><span class="line">        192.168.0.24;    # dns-client</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">options &#123; # options start</span><br><span class="line"># ... ...</span><br><span class="line">     listen-on port 53 &#123; 127.0.0.1; 192.168.0.22; &#125;;</span><br><span class="line">        # listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        # ... ...</span><br><span class="line">        allow-transfer &#123; 192.168.0.23; &#125;;      # disable zone transfers by default</span><br><span class="line">        allow-query     &#123; trusted; &#125;;</span><br><span class="line">&#125; # options end</span><br><span class="line"></span><br><span class="line">include &quot;/etc/named/named.conf.local&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo vi /etc/named/named.conf.local</span><br><span class="line">sudo chmod 755 /etc/named</span><br><span class="line">sudo mkdir /etc/named/zones</span><br><span class="line">sudo vi /etc/named/zones/db.nyc3.example.com</span><br><span class="line">sudo vi /etc/named/zones/db.192.168</span><br><span class="line">sudo named-checkconf</span><br><span class="line">sudo named-checkzone nyc3.example.com /etc/named/zones/db.nyc3.example.com</span><br><span class="line">sudo named-checkzone 192.168.in-addr.arpa /etc/named/zones/db.192.168</span><br><span class="line">sudo systemctl start named</span><br><span class="line">sudo systemctl enable named</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS bind搭建</title>
      <link href="/2019/01/05/DNS-bind%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/01/05/DNS-bind%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="bind-centos7-搭建"><a href="#bind-centos7-搭建" class="headerlink" title="bind centos7 搭建"></a>bind centos7 搭建</h1><p>【图片预留】</p><p>首先安装bind rpm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# yum install -y bind bind-chroot bind-utils</span><br></pre></td></tr></table></figure><p>【图片预留】</p><p>拷贝配置文件模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# cp -rv /usr/share/doc/bind-9.9.4/sample/etc/* /var/named/chroot/etc/</span><br><span class="line">&quot;/usr/share/doc/bind-9.9.4/sample/etc/named.conf&quot; -&gt; &quot;/var/named/chroot/etc/named.conf&quot;</span><br><span class="line">&quot;/usr/share/doc/bind-9.9.4/sample/etc/named.rfc1912.zones&quot; -&gt; &quot;/var/named/chroot/etc/named.rfc1912.zones&quot;</span><br><span class="line">[root@centos ~]# cp -rv /usr/share/doc/bind-9.9.4/sample/var/* /var/named/chroot/var/</span><br><span class="line">&quot;/usr/share/doc/bind-9.9.4/sample/var/named/data&quot; -&gt; &quot;/var/named/chroot/var/named/data&quot;</span><br><span class="line">&quot;/usr/share/doc/bind-9.9.4/sample/var/named/my.external.zone.db&quot; -&gt; &quot;/var/named/chroot/var/named/my.external.zone.db&quot;</span><br><span class="line">&quot;/usr/share/doc/bind-9.9.4/sample/var/named/my.internal.zone.db&quot; -&gt; &quot;/var/named/chroot/var/named/my.internal.zone.db&quot;</span><br><span class="line">&quot;/usr/share/doc/bind-9.9.4/sample/var/named/named.ca&quot; -&gt; &quot;/var/named/chroot/var/named/named.ca&quot;</span><br><span class="line">&quot;/usr/share/doc/bind-9.9.4/sample/var/named/named.empty&quot; -&gt; &quot;/var/named/chroot/var/named/named.empty&quot;</span><br><span class="line">&quot;/usr/share/doc/bind-9.9.4/sample/var/named/named.localhost&quot; -&gt; &quot;/var/named/chroot/var/named/named.localhost&quot;</span><br><span class="line">&quot;/usr/share/doc/bind-9.9.4/sample/var/named/named.loopback&quot; -&gt; &quot;/var/named/chroot/var/named/named.loopback&quot;</span><br><span class="line">&quot;/usr/share/doc/bind-9.9.4/sample/var/named/slaves&quot; -&gt; &quot;/var/named/chroot/var/named/slaves&quot;</span><br><span class="line">&quot;/usr/share/doc/bind-9.9.4/sample/var/named/slaves/my.ddns.internal.zone.db&quot; -&gt; &quot;/var/named/chroot/var/named/slaves/my.ddns.internal.zone.db&quot;</span><br><span class="line">&quot;/usr/share/doc/bind-9.9.4/sample/var/named/slaves/my.slave.internal.zone.db&quot; -&gt; &quot;/var/named/chroot/var/named/slaves/my.slave.internal.zone.db&quot;</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# vim /var/named/chroot/etc/named.conf </span><br><span class="line">/*</span><br><span class="line"> Sample named.conf BIND DNS server &apos;named&apos; configuration file</span><br><span class="line"> for the Red Hat BIND distribution.</span><br><span class="line"></span><br><span class="line"> See the BIND Administrator&apos;s Reference Manual (ARM) for details about the</span><br><span class="line"> configuration located in /usr/share/doc/bind-&#123;version&#125;/Bv9ARM.html</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">options</span><br><span class="line">&#123;</span><br><span class="line">        // Put files that named is allowed to write in the data/ directory:</span><br><span class="line">        directory               &quot;/var/named&quot;;           // &quot;Working&quot; directory</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">          Specify listenning interfaces. You can use list of addresses (&apos;;&apos; is</span><br><span class="line">          delimiter) or keywords &quot;any&quot;/&quot;none&quot;</span><br><span class="line">        */</span><br><span class="line">        //listen-on port 53     &#123; any; &#125;;</span><br><span class="line">        listen-on port 53       &#123; 127.0.0.1; &#125;;</span><br><span class="line"></span><br><span class="line">        //listen-on-v6 port 53  &#123; any; &#125;;</span><br><span class="line">        listen-on-v6 port 53    &#123; ::1; &#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;linuxcast.net&quot; &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;linuxcast.net.zone&quot;; /* bind会自动到/var/named/chroot/var/named/中找linuxcast.net.zone文件 */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# cp -rv /var/named/chroot/var/named/named.localhost /var/named/chroot/var/named/linuxcast.net.zone</span><br><span class="line">&quot;/var/named/chroot/var/named/named.localhost&quot; -&gt; &quot;/var/named/chroot/var/named/linuxcast.net.zone&quot;</span><br><span class="line"></span><br><span class="line">[root@centos ~]# vim /var/named/chroot/var/named/linuxcast.net.zone</span><br><span class="line">$TTL 1D</span><br><span class="line">@       IN SOA  @ rname.invalid. (</span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">        NS      @</span><br><span class="line">        A       127.0.0.1</span><br><span class="line">        AAAA    ::1</span><br><span class="line"></span><br><span class="line">www     IN      A       192.168.56.101</span><br><span class="line">mail    IN      A       192.168.56.101</span><br><span class="line">        IN      MX      10      mail.linuxcast.net.</span><br></pre></td></tr></table></figure><p>启动bind服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# systemctl start named.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS基础及域名系统架构 [LinuxCast视频教程]</title>
      <link href="/2019/01/04/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/"/>
      <url>/2019/01/04/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>域名和IP地址是一一对应的，方便我们记忆。</p><p><img src="https://github.com/lnsyyj/lnsyyj.github.io/blob/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-1.jpg?raw=true" alt></p><p>DNS服务</p><p><img src="https://github.com/lnsyyj/lnsyyj.github.io/blob/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-2.jpg?raw=true" alt></p><p><img src="https://github.com/lnsyyj/lnsyyj.github.io/blob/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-3.jpg?raw=true" alt></p><p><img src="https://github.com/lnsyyj/lnsyyj.github.io/blob/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-4.jpg?raw=true" alt></p><p><img src="https://github.com/lnsyyj/lnsyyj.github.io/blob/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-5.jpg?raw=true" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-6.jpg" alt></p><p><img src="https://github.com/lnsyyj/lnsyyj.github.io/blob/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-6.jpg?raw=true" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-8.jpg" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-9.jpg" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-10.jpg" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-11.jpg" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-12.jpg" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/DNS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84-LinuxCast%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/DNS-13.jpg" alt></p><p>参考：</p><p>【1】<a href="https://www.youtube.com/channel/UCNxDA1Ip2e_SKsvhKddfQ1w" target="_blank" rel="noopener">https://www.youtube.com/channel/UCNxDA1Ip2e_SKsvhKddfQ1w</a></p><p>【2】<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-5 docker compose</title>
      <link href="/2018/12/18/docker-5-docker-compose/"/>
      <url>/2018/12/18/docker-5-docker-compose/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建wordpress"><a href="#搭建wordpress" class="headerlink" title="搭建wordpress"></a>搭建wordpress</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 ~]$ docker run -d --name mysql -v mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=workpress mysql:5.7.24</span><br><span class="line">[vagrant@docker-node1 ~]$ docker run -d --name wordpress -e WORDPRESS_DB_HOST=mysql:3306 --link mysql -p 80:80 wordpress</span><br><span class="line"></span><br><span class="line">docker-compose.yml示例</span><br><span class="line">version: &apos;3&apos;</span><br><span class="line">services:</span><br><span class="line">    wordpress:</span><br><span class="line">        image: wordpress</span><br><span class="line">        ports: </span><br><span class="line">            - 80:80</span><br><span class="line">        environment:</span><br><span class="line">            WORDPRESS_DB_HOST: mysql</span><br><span class="line">            WORDPRESS_DB_PASSWORD: root</span><br><span class="line">        networks:</span><br><span class="line">            - my-bridge</span><br><span class="line"></span><br><span class="line">    mysql:</span><br><span class="line">        image: mysql:5.7.24</span><br><span class="line">        environment:</span><br><span class="line">            MYSQL_ROOT_PASSWORD: root</span><br><span class="line">            MYSQL_DATABASE: wordpress</span><br><span class="line">        volumes:</span><br><span class="line">            - mysql-data:/var/lib/mysql</span><br><span class="line">        networks:</span><br><span class="line">            - my-bridge</span><br><span class="line">volumes:</span><br><span class="line">    mysql-data:</span><br><span class="line">networks:</span><br><span class="line">    my-bridge:</span><br><span class="line">        driver: bridge</span><br><span class="line">创建docker组合服务</span><br><span class="line">[vagrant@docker-node1 ~]$ docker-compose -f docker-compose.yml up -d</span><br><span class="line">清除环境</span><br><span class="line">[vagrant@docker-node1 ~]$ docker-compose down</span><br><span class="line"></span><br><span class="line">Dockerfile示例</span><br><span class="line">[vagrant@docker-node1 ~]$ cat docker-compose-build.yml </span><br><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">    hello-docker:</span><br><span class="line">        build:</span><br><span class="line">            context: .</span><br><span class="line">            dockerfile: Dockerfile</span><br><span class="line">[vagrant@docker-node1 ~]$ cat Dockerfile </span><br><span class="line">FROM centos</span><br><span class="line">RUN yum install vim -y</span><br><span class="line">[vagrant@docker-node1 ~]$ docker-compose -f docker-compose-build.yml up </span><br><span class="line"></span><br><span class="line">Load balancing示例</span><br><span class="line">lb:</span><br><span class="line">image: dockercloud/haproxy</span><br><span class="line">links:</span><br><span class="line">- webserver</span><br><span class="line">ports:</span><br><span class="line">- 80:80</span><br><span class="line">volumes:</span><br><span class="line">- /var/run/docker.sock:/var/run/docker.sock</span><br></pre></td></tr></table></figure><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><p>如果搭建的APP有多个Container组成，部署APP的时候会非常繁琐。</p><p>1、要从Dockerfile build image或者Dockerhub拉取image</p><p>2、要创建多个Container</p><p>3、要管理这些Container（启动停止删除）</p><h2 id="Docker-Compose-–-gt-批处理"><a href="#Docker-Compose-–-gt-批处理" class="headerlink" title="Docker Compose   –&gt;   批处理"></a>Docker Compose   –&gt;   批处理</h2><ul><li><p>Docker Compose是一个工具</p></li><li><p>这个工具可以通过一个yml文件定义多容器的docker应用</p></li><li><p>通过一条命令就可以根据yml文件的定义去创建或者管理这多个容器</p></li></ul><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">三大概念：services、networks、volumes</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">一个service代表一个Container，这个Container可以从dockerhub的image来创建，或者自己build出来的images来创建</span><br><span class="line"></span><br><span class="line">service的启动类似docker run，我们可以给其指定network和volume，所以可以给service指定network和volume的引用</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">db:</span><br><span class="line">image: postgres:9.4</span><br><span class="line">volume:</span><br><span class="line">- &quot;db-data:/var/lib/postgresql/data&quot;</span><br><span class="line">networks:</span><br><span class="line">- back-tier</span><br><span class="line">就像：</span><br><span class="line">docker run -d --network back-tier -v db-data:/var/lib/postgresql/data postgres:9.4</span><br><span class="line"></span><br><span class="line">service:</span><br><span class="line">worker:</span><br><span class="line">build: ./worker  #指定Docker的location</span><br><span class="line">links:</span><br><span class="line">- db</span><br><span class="line">- redis</span><br><span class="line">networks:</span><br><span class="line">- back-tier</span><br></pre></td></tr></table></figure><h1 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker compose"></a>安装docker compose</h1><p>Linux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-4 docker data persistence</title>
      <link href="/2018/12/17/docker-4-docker-data-persistence/"/>
      <url>/2018/12/17/docker-4-docker-data-persistence/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker的持久化存储和数据共享"><a href="#Docker的持久化存储和数据共享" class="headerlink" title="Docker的持久化存储和数据共享"></a>Docker的持久化存储和数据共享</h1><ul><li><p>基于本地文件系统的volume。可以在执行docker create或docker run时，通过-v参数将主机的目录作为容器的数据卷。这部分功能便是基于本地文件系统的volume管理。</p></li><li><p>基于plugin的volume，支持第三方的存储方案，比如NAS，aws。</p></li></ul><h2 id="volume的类型"><a href="#volume的类型" class="headerlink" title="volume的类型"></a>volume的类型</h2><ul><li><p>受管理的data volume，由docker后台自动创建。</p></li><li><p>绑定挂载的volume，具体挂载位置可以由用户指定。</p></li></ul><h1 id="data-volume"><a href="#data-volume" class="headerlink" title="data volume"></a>data volume</h1><p>启动mysql Container，会在宿主机/var/lib/docker/volumes/目录创建持久化目录。在mysql的Dockerfile中有<code>VOLUME /var/lib/mysql</code>，对应的是Container里面的路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 ~]$ sudo docker run -d --name mysql1 -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql</span><br><span class="line">9f423f85765546cb5f2f748b99e221c371794e9ae2ee910aabc685462506a23e</span><br><span class="line">[vagrant@docker-node1 ~]$ docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               5625ef5f9b225dfab10577dbf0521c4244e6ebc60bc1951befac708b196082db</span><br><span class="line">[vagrant@docker-node1 ~]$ docker volume inspect 5625ef5f9b225dfab10577dbf0521c4244e6ebc60bc1951befac708b196082db</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2018-12-17T16:21:09Z&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/5625ef5f9b225dfab10577dbf0521c4244e6ebc60bc1951befac708b196082db/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;5625ef5f9b225dfab10577dbf0521c4244e6ebc60bc1951befac708b196082db&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node1 ~]$ sudo docker run -d --name mysql2 -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql</span><br><span class="line">12dc76117789421e6d9fbe43b6ceeb38791b94848baa0506a1f90bbccd9050fc</span><br><span class="line">[vagrant@docker-node1 ~]$ docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               595c8cee9d6483ae8a4e2006e18103298bf02f940ef05d43261071af74aa6a42</span><br><span class="line">local               5625ef5f9b225dfab10577dbf0521c4244e6ebc60bc1951befac708b196082db</span><br><span class="line">[vagrant@docker-node1 ~]$ docker volume inspect 595c8cee9d6483ae8a4e2006e18103298bf02f940ef05d43261071af74aa6a42</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2018-12-17T16:24:15Z&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/595c8cee9d6483ae8a4e2006e18103298bf02f940ef05d43261071af74aa6a42/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;595c8cee9d6483ae8a4e2006e18103298bf02f940ef05d43261071af74aa6a42&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">以上的方式volume不能很好的区分volume对应哪个应用，可以在启动Container时指定-v参数。</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo docker run -d -v mysql:/var/lib/mysql  --name mysql1 -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql</span><br><span class="line">6b768f033c3f2c17c2da569ed3a9d4490ac7f3bd17e551a24e0fd7c9f7522ed2</span><br><span class="line">[vagrant@docker-node1 ~]$ docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               mysql</span><br><span class="line">创建mysql1 Container，并在Container中的mysql创建docker database，然后停止并删除Container，这时mysql的volume依然存在。</span><br><span class="line">[vagrant@docker-node1 ~]$ docker exec -it mysql1 /bin/bash</span><br><span class="line">root@6b768f033c3f:/# mysql -uroot</span><br><span class="line">mysql&gt; create database docker;</span><br><span class="line">mysql&gt; exit</span><br><span class="line">root@6b768f033c3f:/# exit</span><br><span class="line">[vagrant@docker-node1 ~]$ docker stop mysql1</span><br><span class="line">[vagrant@docker-node1 ~]$ docker rm $(docker ps -qa)</span><br><span class="line">创建mysql2 Container，并挂载之前名为mysql的volume，发现docker database依然存在，说明volume起作用了。</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo docker run -d -v mysql:/var/lib/mysql  --name mysql2 -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql</span><br><span class="line">f574294e26818667095b78a7141e8eb5309b7aa27d4b027e6811e4cca3368fdf</span><br><span class="line">[vagrant@docker-node1 ~]$ docker exec -it mysql2 /bin/bash</span><br><span class="line">root@f574294e2681:/# mysql -u root</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| docker             |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure><h1 id="Bind-Mouting"><a href="#Bind-Mouting" class="headerlink" title="Bind Mouting"></a>Bind Mouting</h1><p>data volume方式需要在Dockerfile中定义VOLUME，bind mouting方式则不需要。在docker run时，指定宿主机目录与Container内目录的对应关系即可（<code>docker run -v /home/aaa:/root/aaa</code>）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-3 docker network</title>
      <link href="/2018/12/16/docker-3-docker-network/"/>
      <url>/2018/12/16/docker-3-docker-network/</url>
      
        <content type="html"><![CDATA[<p>学习视频地址：<a href="https://coding.imooc.com/class/189.html" target="_blank" rel="noopener">https://coding.imooc.com/class/189.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">单机</span><br><span class="line">Bridge Network</span><br><span class="line">Host Network</span><br><span class="line">None </span><br><span class="line">多机</span><br><span class="line">Overlay Network</span><br></pre></td></tr></table></figure><p>抓包工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.wireshark.org</span><br></pre></td></tr></table></figure><h1 id="Vagrant创建两台主机"><a href="#Vagrant创建两台主机" class="headerlink" title="Vagrant创建两台主机"></a>Vagrant创建两台主机</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:docker-network yujiang$ cat Vagrantfile </span><br><span class="line"># -*- mode: ruby -*-</span><br><span class="line"># vi: set ft=ruby :</span><br><span class="line"></span><br><span class="line">Vagrant.require_version &quot;&gt;= 1.6.0&quot;</span><br><span class="line">boxes = [</span><br><span class="line">    &#123;</span><br><span class="line">        :name =&gt; &quot;docker-node1&quot;,</span><br><span class="line">        :eth1 =&gt; &quot;192.168.56.61&quot;,</span><br><span class="line">        :mem =&gt; &quot;1024&quot;,</span><br><span class="line">        :cpu =&gt; &quot;1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        :name =&gt; &quot;docker-node2&quot;,</span><br><span class="line">        :eth1 =&gt; &quot;192.168.56.62&quot;,</span><br><span class="line">        :mem =&gt; &quot;1024&quot;,</span><br><span class="line">        :cpu =&gt; &quot;1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Vagrant.configure(2) do |config|</span><br><span class="line">    config.vm.box = &quot;centos/centos7&quot;</span><br><span class="line">    boxes.each do |opts|</span><br><span class="line">        config.vm.define opts[:name] do |config|</span><br><span class="line">            config.vm.hostname = opts[:name]</span><br><span class="line">            config.vm.provider &quot;vmware_fusion&quot; do |v|</span><br><span class="line">                v.vmx[&quot;memsize&quot;] = opts[:mem]</span><br><span class="line">                v.vmx[&quot;numvcpus&quot;] = opts[:cpu]</span><br><span class="line">            end</span><br><span class="line">    </span><br><span class="line">            config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">                v.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, opts[:mem]]</span><br><span class="line">                v.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, opts[:cpu]]</span><br><span class="line">            end</span><br><span class="line">            config.vm.network :private_network, ip:opts[:eth1]</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</span><br><span class="line">        sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine</span><br><span class="line">        sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">        sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">        sudo yum install docker-ce -y</span><br><span class="line">        sudo systemctl start docker</span><br><span class="line">        sudo systemctl enable docker</span><br><span class="line">        sudo groupadd docker</span><br><span class="line">        sudo gpasswd -a vagrant docker</span><br><span class="line">    SHELL</span><br><span class="line"></span><br><span class="line"># 问题 mount: unnown filesystem type &apos;vboxsf&apos;</span><br><span class="line">    #config.vm.synced_folder &quot;./share&quot;, &quot;/Users/yujiang/Vagrant/docker-network&quot;</span><br><span class="line">    #config.vm.provision &quot;shell&quot;, privileged: true, path: &quot;./setup.sh&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h1 id="linux-network-namespace"><a href="#linux-network-namespace" class="headerlink" title="linux network namespace"></a>linux network namespace</h1><p><a href="http://cizixs.com/2017/02/10/network-virtualization-network-namespace/" target="_blank" rel="noopener">http://cizixs.com/2017/02/10/network-virtualization-network-namespace/</a></p><p><a href="https://tonybai.com/2017/01/11/understanding-linux-network-namespace-for-docker-network/" target="_blank" rel="noopener">https://tonybai.com/2017/01/11/understanding-linux-network-namespace-for-docker-network/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 ~]$ docker run -d --name test1 busybox /bin/sh -c &quot;while true;do sleep 3600; done&quot;</span><br><span class="line">[vagrant@docker-node1 ~]$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">f9a344634aab        busybox             &quot;/bin/sh -c &apos;while t…&quot;   11 seconds ago      Up 10 seconds                           test1</span><br></pre></td></tr></table></figure><p>查看宿主机的network namespace</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns list</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns add test1</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns add test2</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns list</span><br><span class="line">test2</span><br><span class="line">test1</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test1 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test1 ip link set dev lo up</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test1 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip link add veth-test1 type veth peer name veth-test2</span><br><span class="line">[vagrant@docker-node1 ~]$ ip link</span><br><span class="line">5: veth-test2@veth-test1: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 96:92:53:64:58:17 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">6: veth-test1@veth-test2: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 3e:20:9c:b8:9c:2b brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip link set veth-test1 netns test1</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test1 ip link</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">6: veth-test1@if5: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 3e:20:9c:b8:9c:2b brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">[vagrant@docker-node1 ~]$ ip link</span><br><span class="line">5: veth-test2@if6: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 96:92:53:64:58:17 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip link set veth-test2 netns test2</span><br><span class="line">[vagrant@docker-node1 ~]$ ip link</span><br><span class="line">5: veth-test2@if6也不见了</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test2 ip link</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">5: veth-test2@if6: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 96:92:53:64:58:17 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line"></span><br><span class="line">分配IP地址</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test1 ip addr add 192.168.1.2/24 dev veth-test1</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test2 ip addr add 192.168.1.3/24 dev veth-test2</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test1 ip link set dev veth-test1 up</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test2 ip link set dev veth-test2 up</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test1 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: veth-test1@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 3e:20:9c:b8:9c:2b brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">    inet 192.168.1.2/24 scope global veth-test1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::3c20:9cff:feb8:9c2b/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test2 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">5: veth-test2@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 96:92:53:64:58:17 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 192.168.1.3/24 scope global veth-test2</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::9492:53ff:fe64:5817/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">互ping</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test1 ping 192.168.1.3</span><br><span class="line">PING 192.168.1.3 (192.168.1.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.1.3: icmp_seq=1 ttl=64 time=0.051 ms</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo ip netns exec test2 ping 192.168.1.2</span><br><span class="line">PING 192.168.1.2 (192.168.1.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.1.2: icmp_seq=1 ttl=64 time=0.035 ms</span><br></pre></td></tr></table></figure><h1 id="Bridge0"><a href="#Bridge0" class="headerlink" title="Bridge0"></a>Bridge0</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 ~]$ docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">36c9fe545daf        bridge              bridge              local</span><br><span class="line">39385556d8cd        host                host                local</span><br><span class="line">7828c2433efd        none                null                local</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network inspect 36c9fe545daf</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;36c9fe545daf2ab0917fce9b1a8edee5ebdd4cb375b1083439212506f3fe179c&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-12-15T19:24:36.985544361Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123; # test1这个container连到了bridge这个网络</span><br><span class="line">            &quot;f6c6d9b55defc79cf5a39feff1dde1da336f3aa29e68a7577428aefab0196f6b&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;test1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;12a9fa5786c42c486e46bb058e44eb811f8d293ca4a89e1203df134c393d0254&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class="line">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[vagrant@docker-node1 ~]$ ip a</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:42:8b:4b:10 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:42ff:fe8b:4b10/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">8: veth2657408@if7: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether a2:0b:d6:4a:77:e5 brd ff:ff:ff:ff:ff:ff link-netnsid 2</span><br><span class="line">    inet6 fe80::a00b:d6ff:fe4a:77e5/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[vagrant@docker-node1 ~]$ docker exec test1 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: eth0@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">veth2657408负责连到docker0，test1 container中有一个接口，test1 container中的eth0与外面的veth2657408是一对。</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo yum install bridge-utils -y</span><br><span class="line">[vagrant@docker-node1 ~]$ brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.0242428b4b10noveth2657408</span><br><span class="line">同一台宿主机上的container是通过docker0相互通信的。docker0通过NAT来使container访问Internet。</span><br></pre></td></tr></table></figure><h2 id="自建Bridge"><a href="#自建Bridge" class="headerlink" title="自建Bridge"></a>自建Bridge</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 ~]$ docker network create -d bridge my-bridge</span><br><span class="line">7cbd844d6e4cf262eba12277a3e8b4c475a1fb6aa73b9ea312d113d6c519284a</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">36c9fe545daf        bridge              bridge              local</span><br><span class="line">39385556d8cd        host                host                local</span><br><span class="line">7cbd844d6e4c        my-bridge           bridge              local</span><br><span class="line">7828c2433efd        none                null                local</span><br><span class="line">[vagrant@docker-node1 ~]$ brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">br-7cbd844d6e4c8000.02425dd71cb3no</span><br><span class="line">docker08000.0242428b4b10noveth2657408</span><br><span class="line">veth7687c87</span><br><span class="line">[vagrant@docker-node1 ~]$ docker run -d --name test3 --network my-bridge busybox /bin/sh -c &quot;while true; do sleep 3600; done&quot;</span><br><span class="line">[vagrant@docker-node1 ~]$ brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">br-7cbd844d6e4c8000.02425dd71cb3novetha530f6b</span><br><span class="line">docker08000.0242428b4b10noveth2657408</span><br><span class="line">veth7687c87</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">36c9fe545daf        bridge              bridge              local</span><br><span class="line">39385556d8cd        host                host                local</span><br><span class="line">7cbd844d6e4c        my-bridge           bridge              local</span><br><span class="line">7828c2433efd        none                null                local</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network inspect 7cbd844d6e4c</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;my-bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;7cbd844d6e4cf262eba12277a3e8b4c475a1fb6aa73b9ea312d113d6c519284a&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-12-16T13:17:25.765613424Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;5adef860247e056b8f8d2fab89892e10573daff5ea598482f53cefe3152700e0&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;test3&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;19f5d575ad3ff8602c7342f036f024e88c4b97c33a68efa206bd810128b82ddc&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">连接到test2上</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network connect my-bridge test2</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network inspect 7cbd844d6e4c</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;my-bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;7cbd844d6e4cf262eba12277a3e8b4c475a1fb6aa73b9ea312d113d6c519284a&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-12-16T13:17:25.765613424Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;4b7db28e2a457ea6102fd8f06b512041e502dcf54c6d7c362fc5e39f7a0cdf23&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;test2&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;cf4a07fff8a8684cd179ae747630ceeef32ebd38b2fb5eb9db4d2d35759970fb&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;5adef860247e056b8f8d2fab89892e10573daff5ea598482f53cefe3152700e0&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;test3&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;19f5d575ad3ff8602c7342f036f024e88c4b97c33a68efa206bd810128b82ddc&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">查看默认的bridge，都有test2，说明test2 Container及连到了默认的bridge又连到了my-bridge。</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">36c9fe545daf        bridge              bridge              local</span><br><span class="line">39385556d8cd        host                host                local</span><br><span class="line">7cbd844d6e4c        my-bridge           bridge              local</span><br><span class="line">7828c2433efd        none                null                local</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network inspect 36c9fe545daf</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;36c9fe545daf2ab0917fce9b1a8edee5ebdd4cb375b1083439212506f3fe179c&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-12-15T19:24:36.985544361Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;4b7db28e2a457ea6102fd8f06b512041e502dcf54c6d7c362fc5e39f7a0cdf23&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;test2&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;4ba2bbe1ee63a797b528e25533fd09dda8921cf5f688d4a5a24db4efed7410e2&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;f6c6d9b55defc79cf5a39feff1dde1da336f3aa29e68a7577428aefab0196f6b&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;test1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;12a9fa5786c42c486e46bb058e44eb811f8d293ca4a89e1203df134c393d0254&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class="line">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[vagrant@docker-node1 ~]$ docker exec test2 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">9: eth0@if10: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">14: eth1@if15: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.3/16 brd 172.18.255.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node1 ~]$ docker exec -it test3 /bin/sh</span><br><span class="line">/ # ping 172.18.0.3</span><br><span class="line">PING 172.18.0.3 (172.18.0.3): 56 data bytes</span><br><span class="line">64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.727 ms</span><br><span class="line">/ # ping test2</span><br><span class="line">PING test2 (172.18.0.3): 56 data bytes</span><br><span class="line">64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.058 ms</span><br><span class="line">Container连接到用户自己创建的bridge上，默认是link好的。所以使用Container name也能通。如果连接到docker0则不是。</span><br></pre></td></tr></table></figure><h1 id="Container之间link"><a href="#Container之间link" class="headerlink" title="Container之间link"></a>Container之间link</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 ~]$ docker run -d --name test1 busybox /bin/sh -c &quot;while true;do sleep 3600; done&quot;</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo docker run -d --name test2 --link test1 busybox /bin/sh -c &quot;while true; do sleep 3600; done&quot;</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node1 ~]$ docker exec test1 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: eth0@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[vagrant@docker-node1 ~]$ docker exec test2 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">9: eth0@if10: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node1 ~]$ docker exec -it test2 /bin/sh</span><br><span class="line">/ # ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.419 ms</span><br><span class="line">/ # ping test1     (ping Container名字也是通的)</span><br><span class="line">PING test1 (172.17.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.082 ms</span><br></pre></td></tr></table></figure><h1 id="docker-端口映射"><a href="#docker-端口映射" class="headerlink" title="docker 端口映射"></a>docker 端口映射</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -d -p &lt;容器中端口&gt;:&lt;宿主机端口&gt; nginx</span><br><span class="line">[vagrant@docker-node1 ~]$ docker run --name nginx -d -p 80:80 nginx</span><br><span class="line">[vagrant@docker-node1 ~]$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class="line">82d01fa9a547        nginx               &quot;nginx -g &apos;daemon of…&quot;   14 seconds ago      Up 13 seconds       0.0.0.0:80-&gt;80/tcp   nginx</span><br><span class="line">[vagrant@docker-node1 ~]$ curl 127.0.0.1</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="HOST与NONE网络"><a href="#HOST与NONE网络" class="headerlink" title="HOST与NONE网络"></a>HOST与NONE网络</h1><p>NONE，只能使用docker exec来访问Container。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 ~]$ docker run -d --name test1 --network none busybox /bin/sh -c &quot;while true;do sleep 3600;done&quot;</span><br><span class="line">005cd306dc9e51a50a9bff5a2f2a9c54297c2dfe786443787d54df1d0a10e8bb</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network inspect none</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;none&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;7828c2433efde412a4e8d4ffa9a92e121fb6391a37687fda9e2b09f8304ff12b&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-12-15T18:17:04.614441655Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;null&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;005cd306dc9e51a50a9bff5a2f2a9c54297c2dfe786443787d54df1d0a10e8bb&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;test1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;46a077f2a809d0073a6c9251897e4dd1e47dd785c6f13f32056dfb13e32f0ded&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[vagrant@docker-node1 ~]$ docker exec test1 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>HOST，与宿主机IP相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@docker-node1 ~]$ docker run -d --name test1 --network host busybox /bin/sh -c &quot;while true;do sleep 3600;done&quot;</span><br><span class="line">0bf2514b4ce329a56491409d6470b0bc8374824be805bec6c5e387ecbb10713f</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network inspect host</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;host&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;39385556d8cda0864b8911f06c7c0b79d1858f2d16b6b31fd34e5e87cb8ac08b&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-12-15T18:17:04.625179187Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;host&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;0bf2514b4ce329a56491409d6470b0bc8374824be805bec6c5e387ecbb10713f&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;test1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;adfa701db6a153c3fafd4b9fb4d10b35b47872afd9f7595f0b5ee7b9089d59df&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[vagrant@docker-node1 ~]$ docker  exec test1 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000</span><br><span class="line">    link/ether 52:54:00:47:2c:0d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 84405sec preferred_lft 84405sec</span><br><span class="line">    inet6 fe80::5054:ff:fe47:2c0d/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:20:4d:38:8a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:20ff:fe4d:388a/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: br-7cbd844d6e4c: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:be:6a:02:b8 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global br-7cbd844d6e4c</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000</span><br><span class="line">    link/ether 08:00:27:2a:89:41 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.56.61/24 brd 192.168.56.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a00:27ff:fe2a:8941/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: vethd963769@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue master docker0 </span><br><span class="line">    link/ether ee:f6:51:e6:91:e3 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet6 fe80::ecf6:51ff:fee6:91e3/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h1 id="多机通信-Overlay"><a href="#多机通信-Overlay" class="headerlink" title="多机通信 Overlay"></a>多机通信 Overlay</h1><p>参考资料：<a href="https://github.com/docker/labs/blob/master/networking/concepts/06-overlay-networks.md" target="_blank" rel="noopener">https://github.com/docker/labs/blob/master/networking/concepts/06-overlay-networks.md</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Overlay</span><br><span class="line"> +</span><br><span class="line">VXLAN(VXLAN，https://cizixs.com/2017/09/25/vxlan-protocol-introduction/)</span><br><span class="line"> +</span><br><span class="line">隧道(Ethernet、IPV4、UDP)</span><br></pre></td></tr></table></figure><p>需要借用etcd，记录多机上的Container没有重复IP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">搭建etcd集群</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo yum install wget -y &amp;&amp; wget https://github.com/etcd-io/etcd/releases/download/v3.3.10/etcd-v3.3.10-linux-amd64.tar.gz &amp;&amp; tar zxvf etcd-v3.3.10-linux-amd64.tar.gz &amp;&amp; cd etcd-v3.3.10-linux-amd64/</span><br><span class="line">[vagrant@docker-node2 ~]$ sudo yum install wget -y &amp;&amp; wget https://github.com/etcd-io/etcd/releases/download/v3.3.10/etcd-v3.3.10-linux-amd64.tar.gz &amp;&amp; tar zxvf etcd-v3.3.10-linux-amd64.tar.gz &amp;&amp; cd etcd-v3.3.10-linux-amd64/</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node1 etcd-v3.3.10-linux-amd64]$ nohup ./etcd --name docker-node1 \</span><br><span class="line">--initial-advertise-peer-urls http://192.168.56.61:2380 \</span><br><span class="line">--listen-peer-urls http://192.168.56.61:2380 \</span><br><span class="line">--listen-client-urls http://192.168.56.61:2379,http://127.0.0.1:2379 \</span><br><span class="line">--advertise-client-urls http://192.168.56.61:2379 \</span><br><span class="line">--initial-cluster-token etcd-cluster \</span><br><span class="line">--initial-cluster docker-node1=http://192.168.56.61:2380,docker-node2=http://192.168.56.62:2380 \</span><br><span class="line">--initial-cluster-state new&amp;</span><br><span class="line">[vagrant@docker-node2 etcd-v3.3.10-linux-amd64]$ nohup ./etcd --name docker-node2 \</span><br><span class="line">--initial-advertise-peer-urls http://192.168.56.62:2380 \</span><br><span class="line">--listen-peer-urls http://192.168.56.62:2380 \</span><br><span class="line">--listen-client-urls http://192.168.56.62:2379,http://127.0.0.1:2379 \</span><br><span class="line">--advertise-client-urls http://192.168.56.62:2379 \</span><br><span class="line">--initial-cluster-token etcd-cluster \</span><br><span class="line">--initial-cluster docker-node1=http://192.168.56.61:2380,docker-node2=http://192.168.56.62:2380 \</span><br><span class="line">--initial-cluster-state new&amp;</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node1 etcd-v3.3.10-linux-amd64]$ ./etcdctl cluster-health</span><br><span class="line">member 14192bed1b668a6 is healthy: got healthy result from http://192.168.56.61:2379</span><br><span class="line">member 80c395b734da48f6 is healthy: got healthy result from http://192.168.56.62:2379</span><br><span class="line">cluster is healthy</span><br><span class="line">[vagrant@docker-node2 etcd-v3.3.10-linux-amd64]$ ./etcdctl cluster-health</span><br><span class="line">member 14192bed1b668a6 is healthy: got healthy result from http://192.168.56.61:2379</span><br><span class="line">member 80c395b734da48f6 is healthy: got healthy result from http://192.168.56.62:2379</span><br><span class="line">cluster is healthy</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node1 etcd-v3.3.10-linux-amd64]$ sudo service docker stop</span><br><span class="line">[vagrant@docker-node1 etcd-v3.3.10-linux-amd64]$ sudo /usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --cluster-store=etcd://192.168.56.61:2379 --cluster-advertise=192.168.56.61:2375&amp;</span><br><span class="line">[vagrant@docker-node1 etcd-v3.3.10-linux-amd64]$ sudo docker version</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node2 etcd-v3.3.10-linux-amd64]$ sudo service docker stop</span><br><span class="line">[vagrant@docker-node2 etcd-v3.3.10-linux-amd64]$ sudo /usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --cluster-store=etcd://192.168.56.62:2379 --cluster-advertise=192.168.56.62:2375&amp;</span><br><span class="line">[vagrant@docker-node2 etcd-v3.3.10-linux-amd64]$ sudo docker version</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node1 ~]$ sudo docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">6a9dcf7a7d0a        bridge              bridge              local</span><br><span class="line">39385556d8cd        host                host                local</span><br><span class="line">7828c2433efd        none                null                local</span><br><span class="line">[vagrant@docker-node2 ~]$ sudo docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">e93dec4d4089        bridge              bridge              local</span><br><span class="line">199f9936292d        host                host                local</span><br><span class="line">4a55973792c6        none                null                local</span><br><span class="line">在docker-node1机器上创建overlay网络，名字为demo。会自动同步到docker-node2机器上，这个就是etcd做的。</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo docker network create -d overlay demo</span><br><span class="line">d0cf99b69499e384b52854e852b0c734ebae3f039fdacd762e5347de18454fda</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">6a9dcf7a7d0a        bridge              bridge              local</span><br><span class="line">d0cf99b69499        demo                overlay             global</span><br><span class="line">39385556d8cd        host                host                local</span><br><span class="line">7828c2433efd        none                null                local</span><br><span class="line">[vagrant@docker-node2 ~]$ sudo docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">e93dec4d4089        bridge              bridge              local</span><br><span class="line">d0cf99b69499        demo                overlay             global</span><br><span class="line">199f9936292d        host                host                local</span><br><span class="line">4a55973792c6        none                null                local</span><br><span class="line">[vagrant@docker-node1 etcd-v3.3.10-linux-amd64]$ ./etcdctl ls /docker/network/v1.0/network</span><br><span class="line">/docker/network/v1.0/network/d0cf99b69499e384b52854e852b0c734ebae3f039fdacd762e5347de18454fda</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network inspect demo</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;demo&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;d0cf99b69499e384b52854e852b0c734ebae3f039fdacd762e5347de18454fda&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-12-17T15:00:39.903457425Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;global&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;10.0.0.0/24&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;10.0.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">创建Container测试，在不同的机器上创建相同名字的Container会有报错，当在第二个机器上创建test1 Container时，会去etcd中查找。</span><br><span class="line">[vagrant@docker-node1 ~]$ sudo docker run -d --name test1 --net demo busybox sh -c &quot;while true; do sleep 3600; done&quot;</span><br><span class="line">fabfd6aab82b692d0d59ba5ca61d0315fced0fa459510ebe1d17fe8eacd71882</span><br><span class="line">[vagrant@docker-node2 ~]$ sudo docker run -d --name test1 --net demo busybox sh -c &quot;while true; do sleep 3600; done&quot;</span><br><span class="line">docker: Error response from daemon: Conflict. The container name &quot;/test1&quot; is already in use by container &quot;74d40e80850ca8b95f6c43b7c78f755811e71892116428b1108a1f62553dbf7f&quot;. You have to remove (or rename) that container to be able to reuse that name.</span><br><span class="line">See &apos;docker run --help&apos;.</span><br><span class="line">[vagrant@docker-node2 ~]$ sudo docker run -d --name test2 --net demo busybox sh -c &quot;while true; do sleep 3600; done&quot;</span><br><span class="line">09ab0bd6131b7bebbadf7183a4ab6179fd4fea2fe1322c38437e2043bf7b0b43</span><br><span class="line">再次查看网络信息</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network inspect demo</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;demo&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;d0cf99b69499e384b52854e852b0c734ebae3f039fdacd762e5347de18454fda&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-12-17T15:00:39.903457425Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;global&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;10.0.0.0/24&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;10.0.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;ep-596086a2ecffec95d85529df2e24016ac62c8448466f60454e61567482faf02f&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;test2&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;596086a2ecffec95d85529df2e24016ac62c8448466f60454e61567482faf02f&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:0a:00:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;10.0.0.3/24&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;fabfd6aab82b692d0d59ba5ca61d0315fced0fa459510ebe1d17fe8eacd71882&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;test1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;36027fb8100351e24db8e5691a70420413a5e02d6f397af3794cb2eabdc71fb8&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:0a:00:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;10.0.0.2/24&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[vagrant@docker-node1 ~]$ docker exec test1 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">12: eth0@if13: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1450 qdisc noqueue </span><br><span class="line">    link/ether 02:42:0a:00:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.2/24 brd 10.0.0.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">15: eth1@if16: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.19.0.2/16 brd 172.19.255.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[vagrant@docker-node2 ~]$ docker exec test2 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: eth0@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1450 qdisc noqueue </span><br><span class="line">    link/ether 02:42:0a:00:00:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.3/24 brd 10.0.0.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">10: eth1@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">每个Container中两个接口，这时docker network会多出一个docker_gwbridge，Container内其中一个接口连接的就是docker_gwbridge。</span><br><span class="line">[vagrant@docker-node1 ~]$ docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">d0cf99b69499        demo                overlay             global</span><br><span class="line">c43108631ed7        docker_gwbridge     bridge              local</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node1 ~]$ docker exec test1 ping 10.0.0.3</span><br><span class="line">PING 10.0.0.3 (10.0.0.3): 56 data bytes</span><br><span class="line">64 bytes from 10.0.0.3: seq=0 ttl=64 time=10.259 ms</span><br><span class="line">[vagrant@docker-node1 ~]$ docker exec test1 ping test2</span><br><span class="line">PING test2 (10.0.0.3): 56 data bytes</span><br><span class="line">64 bytes from 10.0.0.3: seq=0 ttl=64 time=5.188 ms</span><br><span class="line"></span><br><span class="line">[vagrant@docker-node2 ~]$ docker exec test2 ping 10.0.0.2</span><br><span class="line">PING 10.0.0.2 (10.0.0.2): 56 data bytes</span><br><span class="line">64 bytes from 10.0.0.2: seq=0 ttl=64 time=8.995 ms</span><br><span class="line">[vagrant@docker-node2 ~]$ docker exec test2 ping test1</span><br><span class="line">PING test1 (10.0.0.2): 56 data bytes</span><br><span class="line">64 bytes from 10.0.0.2: seq=0 ttl=64 time=5.485 ms</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-2 从零制作Base Image</title>
      <link href="/2018/12/14/docker-2-%E4%BB%8E%E9%9B%B6%E5%88%B6%E4%BD%9CBase-Image/"/>
      <url>/2018/12/14/docker-2-%E4%BB%8E%E9%9B%B6%E5%88%B6%E4%BD%9CBase-Image/</url>
      
        <content type="html"><![CDATA[<p>学习视频地址：<a href="https://coding.imooc.com/class/189.html" target="_blank" rel="noopener">https://coding.imooc.com/class/189.html</a></p><h1 id="从零制作Base-Image"><a href="#从零制作Base-Image" class="headerlink" title="从零制作Base Image"></a>从零制作Base Image</h1><p>1、编写一个Demo程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost ~]$ sudo yum install glibc-static gcc -y</span><br><span class="line"></span><br><span class="line">[vagrant@localhost ~]$ cat helloworld.c </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;hello world!\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不加-static编译，docker run会报错，为什么？后续再查... ...</span><br><span class="line"># standard_init_linux.go:190: exec user process caused &quot;no such file or directory&quot;</span><br><span class="line">[vagrant@localhost ~]$ gcc -static helloworld.c -o helloworld</span><br></pre></td></tr></table></figure><p>2、编写Dockerfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost ~]$ cat Dockerfile </span><br><span class="line">FROM scratch</span><br><span class="line">ADD helloworld /</span><br><span class="line">CMD [&quot;/helloworld&quot;]</span><br></pre></td></tr></table></figure><p>3、build镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost ~]$ docker build -t yujiang/helloworld .</span><br><span class="line">Sending build context to Docker daemon  19.97kB</span><br><span class="line">Step 1/3 : FROM scratch</span><br><span class="line"> ---&gt; </span><br><span class="line">Step 2/3 : ADD helloworld /</span><br><span class="line"> ---&gt; 2949199fbdb8</span><br><span class="line">Step 3/3 : CMD [&quot;/helloworld&quot;]</span><br><span class="line"> ---&gt; Running in 3af2e910629e</span><br><span class="line">Removing intermediate container 3af2e910629e</span><br><span class="line"> ---&gt; b898a6498b21</span><br><span class="line">Successfully built b898a6498b21</span><br><span class="line">Successfully tagged yujiang/helloworld:latest</span><br><span class="line"></span><br><span class="line">[vagrant@localhost ~]$ docker image ls</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">yujiang/helloworld   latest              b898a6498b21        21 seconds ago      857kB</span><br><span class="line"></span><br><span class="line">查看分层</span><br><span class="line">[vagrant@localhost ~]$ docker history yujiang/helloworld</span><br><span class="line">IMAGE               CREATED              CREATED BY                                      SIZE                COMMENT</span><br><span class="line">b898a6498b21        About a minute ago   /bin/sh -c #(nop)  CMD [&quot;/helloworld&quot;]          0B                  </span><br><span class="line">2949199fbdb8        About a minute ago   /bin/sh -c #(nop) ADD file:5e0b91d4866514aa0…   857kB              </span><br><span class="line"></span><br><span class="line">[vagrant@localhost ~]$ ll -h</span><br><span class="line">total 848K</span><br><span class="line">-rw-rw-r--. 1 vagrant vagrant   50 Dec 13 16:41 Dockerfile</span><br><span class="line">-rwxrwxr-x. 1 vagrant vagrant 837K Dec 13 16:47 helloworld</span><br><span class="line">-rw-rw-r--. 1 vagrant vagrant   79 Dec 13 16:11 helloworld.c</span><br><span class="line"></span><br><span class="line">[vagrant@localhost ~]$ docker run yujiang/helloworld</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><h1 id="使用docker-commit制作image"><a href="#使用docker-commit制作image" class="headerlink" title="使用docker commit制作image"></a>使用docker commit制作image</h1><p>当container已经存在时，并对容器中进行了一些变化（如安装了某一个软件）。可以把已经改变的container commit一个新的image，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container commit</span><br></pre></td></tr></table></figure><p>1、启动一个容器并安装vim</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost ~]$ docker run -it centos</span><br><span class="line">[root@b2985a1be234 /]# yum install vim -y</span><br><span class="line">[root@b2985a1be234 /]# exit</span><br><span class="line">[vagrant@localhost ~]$ docker container ls -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES</span><br><span class="line">b2985a1be234        centos              &quot;/bin/bash&quot;         3 minutes ago       Exited (0) About a minute ago                       nervous_haslett</span><br></pre></td></tr></table></figure><p>2、使用docker commit创建image</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost ~]$ docker commit b2985a1be234 yujiang/centos-vim</span><br><span class="line">sha256:d0a8856e664eb754f9854c0c27a92c7d01623d2087a77269fbd12ba5021e6e13</span><br><span class="line">[vagrant@localhost ~]$ docker image ls</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">yujiang/centos-vim    latest              d0a8856e664e        59 seconds ago      327MB</span><br><span class="line">centos                latest              1e1148e4cc2c        7 days ago          202MB</span><br><span class="line"></span><br><span class="line">[vagrant@localhost ~]$ docker history 1e1148e4cc2c</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">1e1148e4cc2c        7 days ago          /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B                  </span><br><span class="line">&lt;missing&gt;           7 days ago          /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B                  </span><br><span class="line">&lt;missing&gt;           7 days ago          /bin/sh -c #(nop) ADD file:6f877549795f4798a…   202MB               </span><br><span class="line">[vagrant@localhost ~]$ docker history d0a8856e664e</span><br><span class="line">IMAGE               CREATED              CREATED BY                                      SIZE                COMMENT</span><br><span class="line">d0a8856e664e        About a minute ago   /bin/bash                                       126MB               </span><br><span class="line">1e1148e4cc2c        7 days ago           /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B                  </span><br><span class="line">&lt;missing&gt;           7 days ago           /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B                  </span><br><span class="line">&lt;missing&gt;           7 days ago           /bin/sh -c #(nop) ADD file:6f877549795f4798a…   202MB</span><br></pre></td></tr></table></figure><p>这样发布image是不安全的，因为其他人不知道你对镜像做了哪些修改。不提倡。</p><h1 id="使用docker-build制作image"><a href="#使用docker-build制作image" class="headerlink" title="使用docker build制作image"></a>使用docker build制作image</h1><p>1、创建centos-vim目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost ~]$ mkdir centos-vim &amp;&amp; cd centos-vim</span><br></pre></td></tr></table></figure><p>2、编写Dockerfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost centos-vim]$ vim Dockerfile</span><br><span class="line">FROM centos</span><br><span class="line">RUN yum install vim -y</span><br></pre></td></tr></table></figure><p>3、使用docker build创建image</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost centos-vim]$ docker build -t yujiang/centos-vim .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"> ---&gt; 1e1148e4cc2c</span><br><span class="line">Step 2/2 : RUN yum install vim -y</span><br><span class="line"> ---&gt; Running in 8122262ff02a</span><br><span class="line"></span><br><span class="line">...安装过程省略...</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container 8122262ff02a</span><br><span class="line"> ---&gt; e00635baf672</span><br><span class="line">Successfully built e00635baf672</span><br><span class="line">Successfully tagged yujiang/centos-vim:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Step 1/2 直接引用centos这层image(1e1148e4cc2c)</span><br><span class="line">Step 2/2 生成了一个临时的image(8122262ff02a)，在临时的image里面通过yum安装vim，安装完以后临时的image会被remove掉（Removing intermediate container 8122262ff02a），最后根据刚才临时的image commit成为一个新的image。如果build过程中报错，可以使用这个debug(docker run -it 8122262ff02a /bin/bash)</span><br><span class="line"></span><br><span class="line">[vagrant@localhost centos-vim]$ docker image ls</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">yujiang/centos-vim    latest              e00635baf672        6 minutes ago       327MB</span><br><span class="line">centos                latest              1e1148e4cc2c        7 days ago          202MB</span><br></pre></td></tr></table></figure><p>推荐使用docker build来构建image。</p><h1 id="Dockerfile语法"><a href="#Dockerfile语法" class="headerlink" title="Dockerfile语法"></a>Dockerfile语法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">官方文档：https://docs.docker.com/engine/reference/builder/</span><br></pre></td></tr></table></figure><p>FROM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch# 制作base image</span><br><span class="line">FROM centos# 使用base image</span><br><span class="line">FROM ubuntu:14.04</span><br><span class="line">尽量使用官方的image作为base image</span><br></pre></td></tr></table></figure><p>LABEL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LABEL maintainer=&quot;lnsyyj@xxx.com&quot;</span><br><span class="line">LABEL version=&quot;1.0&quot;</span><br><span class="line">LABEL description=&quot;Tish is description&quot;</span><br><span class="line">定义image的metadata</span><br></pre></td></tr></table></figure><p>RUN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RUN yum update &amp;&amp; yum install -y vim \</span><br><span class="line">python-devel # 反斜线换行</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y perl \</span><br><span class="line">pwgen --no-install-recommends &amp;&amp; rm -rf \</span><br><span class="line">/var/lib/apt/lists/* # 注意清理cache</span><br><span class="line">RUN /bin/bash -c &apos;source $HOME/.bashrc; echo $HOME&apos;</span><br><span class="line">为了美观，复杂的RUN请用反斜杠换行，避免无用分层，合并多条命令成一行。</span><br></pre></td></tr></table></figure><p>WORKDIR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /root</span><br><span class="line"></span><br><span class="line">WORKDIR /test# 如果没有会自动创建test目录</span><br><span class="line">WORKDIR demo</span><br><span class="line">RUN pwd# 输出结果应该是/test/demo</span><br><span class="line">用WORKDIR，不要用RUN cd，尽量使用绝对路径！</span><br></pre></td></tr></table></figure><p>ADD 和 COPY</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ADD hello /</span><br><span class="line"></span><br><span class="line">ADD test.tar.gz /# 添加到根目录并解压</span><br><span class="line"></span><br><span class="line">WORKDIR /root</span><br><span class="line">ADD hello test/# /root/test/hello</span><br><span class="line"></span><br><span class="line">WORKDIR /root</span><br><span class="line">COPY hello test/</span><br><span class="line">大部分情况，COPY优于ADD！ADD除了COPY还有额外功能(解压)！添加远程文件/目录请使用curl或者wget下载到docker中！</span><br></pre></td></tr></table></figure><p>ENV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ENV MYSQL_VERSION 5.6# 设置常量</span><br><span class="line">RUN apt-get install -y mysql-server=&quot;$&#123;MYSQL_VERSION&#125;&quot; \</span><br><span class="line">&amp;&amp; rm -rf /var/lib/apt/lists/*# 引用常量</span><br><span class="line">尽量使用ENV增加可维护性！</span><br></pre></td></tr></table></figure><p>VOLUME 和 EXPOSE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（存储和网络），后面我们单独讲！</span><br></pre></td></tr></table></figure><p>CMD 和 ENTRYPOINT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">后面我们单独讲！</span><br></pre></td></tr></table></figure><h1 id="RUN-vs-CMD-vs-ENTRYPOINT"><a href="#RUN-vs-CMD-vs-ENTRYPOINT" class="headerlink" title="RUN vs CMD vs ENTRYPOINT"></a>RUN vs CMD vs ENTRYPOINT</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN：执行命令并创建新的Image Layer</span><br><span class="line">CMD：设置容器启动后默认执行的命令和参数</span><br><span class="line">ENTRYPOINT：设置容器启动时运行的命令</span><br></pre></td></tr></table></figure><h2 id="Shell和Exec格式"><a href="#Shell和Exec格式" class="headerlink" title="Shell和Exec格式"></a>Shell和Exec格式</h2><p>Shell格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get install -y vim</span><br><span class="line">CMD echo &quot;hello docker&quot;</span><br><span class="line">ENTRYPOINT echo &quot;hello docker&quot;</span><br></pre></td></tr></table></figure><p>Exec格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN [ &quot;apt-get&quot;, &quot;install&quot;, &quot;-y&quot;, &quot;vim&quot; ]</span><br><span class="line">CMD [ &quot;/bin/echo&quot;, &quot;hello docker&quot; ]</span><br><span class="line">ENTRYPOINT [ &quot;/bin/echo&quot;, &quot;hello docker&quot; ]</span><br></pre></td></tr></table></figure><p>DEMO</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Dockerfile1：</span><br><span class="line">FROM centos</span><br><span class="line">ENV name Docker</span><br><span class="line">ENTRYPOINT echo &quot;hello $name&quot;</span><br><span class="line"></span><br><span class="line">Dockerfile2：</span><br><span class="line">FROM centos</span><br><span class="line">ENV name Docker</span><br><span class="line">ENTRYPOINT [ &quot;/bin/echo&quot;, &quot;hello $name&quot; ]</span><br><span class="line"></span><br><span class="line">Dockerfile2会原样输出&quot;hello $name&quot;，不会像Dockerfile1那样输出&quot;hello Docker&quot;。如何使Dockerfile2像Dockerfile1那样输出的？请看Dockerfile3</span><br><span class="line"></span><br><span class="line">Dockerfile3：</span><br><span class="line">FROM centos</span><br><span class="line">ENV name Docker</span><br><span class="line">ENTRYPOINT [ &quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello $name&quot; ] # 指定-c参数，后面的命令需要放在一个&quot;&quot;中，作为一条命令</span><br></pre></td></tr></table></figure><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><ul><li><p>容器启动时默认执行的命令</p></li><li><p>如果docker run指定了其他命令，CMD命令被忽略</p></li><li><p>如果定义了多个CMD，只有最后一个会执行</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">ENV name Docker</span><br><span class="line">CMD echo &quot;hello $name&quot;</span><br><span class="line"></span><br><span class="line">docker run [image]输出？打印&quot;hello Docker&quot;</span><br><span class="line">Docker run -it [image] /bin/bash输出？不会打印&quot;hello Docker&quot;，/bin/bash覆盖了CMD</span><br></pre></td></tr></table></figure><h2 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h2><ul><li><p>让容器以应用程序或者服务的形式运行</p></li><li><p>不会被忽略，一定会执行</p></li><li><p>最佳实践：写一个shell脚本作为entrypoint</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COPY docker-entrypoint.sh /usr/local/bin/</span><br><span class="line">ENTRYPOINT [ &quot;docker-entrypoint.sh&quot; ]</span><br><span class="line"></span><br><span class="line">EXPOSE 27017</span><br><span class="line">CMD [ &quot;mongod&quot; ]</span><br></pre></td></tr></table></figure><h1 id="镜像存放"><a href="#镜像存放" class="headerlink" title="镜像存放"></a>镜像存放</h1><h2 id="公有镜像"><a href="#公有镜像" class="headerlink" title="公有镜像"></a>公有镜像</h2><p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost ~]$ docker build -t lnsyyj/helloworld .</span><br><span class="line">[vagrant@localhost ~]$ docker images</span><br><span class="line">lnsyyj/helloworld     latest              1a8620e6d6de        46 hours ago        857kB</span><br><span class="line"></span><br><span class="line">[vagrant@localhost ~]$ docker login</span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don&apos;t have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class="line">Username: lnsyyj</span><br><span class="line">Password: </span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line">[vagrant@localhost ~]$ docker push lnsyyj/helloworld:latest</span><br><span class="line">The push refers to repository [docker.io/lnsyyj/helloworld]</span><br><span class="line">a9094ec14918: Pushed </span><br><span class="line">latest: digest: sha256:dd740db962a1e3a8fb74461505f539248b7c88de80b133db612c22e80d7b2d17 size: 527</span><br><span class="line"></span><br><span class="line">删除本地镜像，测试下载镜像</span><br><span class="line">[vagrant@localhost ~]$ docker rmi lnsyyj/helloworld</span><br><span class="line">[vagrant@localhost ~]$ docker pull lnsyyj/helloworld</span><br></pre></td></tr></table></figure><ul><li>也可以link到github，github中的Repositories中有Dockerfile，dockehub会自动build镜像</li></ul><h2 id="私有镜像"><a href="#私有镜像" class="headerlink" title="私有镜像"></a>私有镜像</h2><p>搭建docker registry</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">https://hub.docker.com/_/registry</span><br><span class="line"></span><br><span class="line">[vagrant@localhost ~]$ docker run -d -p 5000:5000 --restart always --name registry registry:2</span><br><span class="line">Unable to find image &apos;registry:2&apos; locally</span><br><span class="line">2: Pulling from library/registry</span><br><span class="line">d6a5679aa3cf: Pull complete </span><br><span class="line">ad0eac849f8f: Pull complete </span><br><span class="line">2261ba058a15: Pull complete </span><br><span class="line">f296fda86f10: Pull complete </span><br><span class="line">bcd4a541795b: Pull complete </span><br><span class="line">Digest: sha256:5a156ff125e5a12ac7fdec2b90b7e2ae5120fa249cf62248337b6d04abc574c8</span><br><span class="line">Status: Downloaded newer image for registry:2</span><br><span class="line">2707d472d3dba19f366c7ca51e621b83a63975492152880e01268a326d34bf50</span><br><span class="line"></span><br><span class="line">[vagrant@localhost ~]$ docker build -t 10.0.2.15:5000/helloworld .</span><br><span class="line">Sending build context to Docker daemon  873.5kB</span><br><span class="line">Step 1/3 : FROM scratch</span><br><span class="line"> ---&gt; </span><br><span class="line">Step 2/3 : ADD helloworld /</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 1b468168e95e</span><br><span class="line">Step 3/3 : CMD [&quot;/helloworld&quot;]</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 1a8620e6d6de</span><br><span class="line">Successfully built 1a8620e6d6de</span><br><span class="line">Successfully tagged 10.0.2.15:5000/helloworld:latest</span><br><span class="line"></span><br><span class="line">[vagrant@localhost ~]$ cat /etc/docker/daemon.json </span><br><span class="line">&#123; &quot;insecure-registries&quot;: [&quot;10.0.2.15:5000&quot;] &#125;</span><br><span class="line"></span><br><span class="line">[vagrant@localhost ~]$ sudo vim /lib/systemd/system/docker.service </span><br><span class="line">添加</span><br><span class="line">EnvironmentFile=-/etc/docker/daemon.json</span><br><span class="line">[vagrant@localhost ~]$ sudo systemctl daemon-reload</span><br><span class="line">[vagrant@localhost ~]$ service docker restart</span><br><span class="line"></span><br><span class="line">push到私有镜像仓库</span><br><span class="line">[vagrant@localhost ~]$ docker images</span><br><span class="line">10.0.2.15:5000/helloworld   latest              1a8620e6d6de        47 hours ago        857kB</span><br><span class="line">[vagrant@localhost ~]$ curl http://10.0.2.15:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[]&#125;</span><br><span class="line">[vagrant@localhost ~]$ docker push 10.0.2.15:5000/helloworld</span><br><span class="line">The push refers to repository [10.0.2.15:5000/helloworld]</span><br><span class="line">a9094ec14918: Pushed </span><br><span class="line">latest: digest: sha256:dd740db962a1e3a8fb74461505f539248b7c88de80b133db612c22e80d7b2d17 size: 527</span><br><span class="line">[vagrant@localhost ~]$ curl http://10.0.2.15:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[&quot;helloworld&quot;]&#125;</span><br><span class="line">验证</span><br><span class="line">[vagrant@localhost ~]$ docker rmi 10.0.2.15:5000/helloworld</span><br><span class="line">[vagrant@localhost ~]$ docker pull 10.0.2.15:5000/helloworld</span><br></pre></td></tr></table></figure><h1 id="container常用命令"><a href="#container常用命令" class="headerlink" title="container常用命令"></a>container常用命令</h1><p>docker exec，进入运行中的容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container ID&gt; /bin/bash</span><br></pre></td></tr></table></figure><p>docker stop，停止运行中的容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;container ID&gt;</span><br></pre></td></tr></table></figure><p>docker inspect，查看容器的详细信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect &lt;container ID&gt;</span><br></pre></td></tr></table></figure><p>docker logs，查看容器的log。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs &lt;container ID&gt;</span><br></pre></td></tr></table></figure><h1 id="linux压力测试工具stress"><a href="#linux压力测试工具stress" class="headerlink" title="linux压力测试工具stress"></a>linux压力测试工具stress</h1><p>docker build命令行程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost ~]$ mkdir stress &amp;&amp; cd stress/</span><br><span class="line">[vagrant@localhost stress]$ cat Dockerfile </span><br><span class="line">FROM ubuntu</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y stress</span><br><span class="line">ENTRYPOINT [&quot;/usr/bin/stress&quot;]</span><br><span class="line">CMD []</span><br><span class="line">[vagrant@localhost stress]$ docker build -t lnsyyj/ubuntu-stress  .</span><br><span class="line"></span><br><span class="line">[vagrant@localhost stress]$ docker run -it lnsyyj/ubuntu-stress --vm 1 --verbose</span><br><span class="line">stress: info: [1] dispatching hogs: 0 cpu, 0 io, 1 vm, 0 hdd</span><br><span class="line">stress: dbug: [1] using backoff sleep of 3000us</span><br><span class="line">stress: dbug: [1] --&gt; hogvm worker 1 [6] forked</span><br><span class="line">stress: dbug: [6] allocating 268435456 bytes ...</span><br><span class="line">stress: dbug: [6] touching bytes in strides of 4096 bytes ...</span><br><span class="line">stress: dbug: [6] freed 268435456 bytes</span><br><span class="line">stress: dbug: [6] allocating 268435456 bytes ...</span><br><span class="line">stress: dbug: [6] touching bytes in strides of 4096 bytes ...</span><br><span class="line">stress: dbug: [6] freed 268435456 bytes</span><br><span class="line"></span><br><span class="line">--vm 1 --verbose是通过Dockerfile中的CMD []接收的。ENTRYPOINT+CMD这种方式是非常流行的。</span><br></pre></td></tr></table></figure><h1 id="对一个容器进行资源限制"><a href="#对一个容器进行资源限制" class="headerlink" title="对一个容器进行资源限制"></a>对一个容器进行资源限制</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost stress]$ docker run --memory=200M  -it lnsyyj/ubuntu-stress --vm 1 --vm-bytes 500M --verbose</span><br><span class="line">stress: info: [1] dispatching hogs: 0 cpu, 0 io, 1 vm, 0 hdd</span><br><span class="line">stress: dbug: [1] using backoff sleep of 3000us</span><br><span class="line">stress: dbug: [1] --&gt; hogvm worker 1 [6] forked</span><br><span class="line">stress: dbug: [6] allocating 524288000 bytes ...</span><br><span class="line">stress: dbug: [6] touching bytes in strides of 4096 bytes ...</span><br><span class="line">stress: FAIL: [1] (415) &lt;-- worker 6 got signal 9</span><br><span class="line">stress: WARN: [1] (417) now reaping child worker processes</span><br><span class="line">stress: FAIL: [1] (421) kill error: No such process</span><br><span class="line">stress: FAIL: [1] (451) failed run completed in 1s</span><br></pre></td></tr></table></figure><h1 id="docker-底层技术支持"><a href="#docker-底层技术支持" class="headerlink" title="docker 底层技术支持"></a>docker 底层技术支持</h1><ul><li><p>namespaces：做隔离pid、net、ipc、mnt、uts</p></li><li><p>control groups：做资源限制</p></li><li><p>union file systems：container和image的分层</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-1 Docker installed on centos7</title>
      <link href="/2018/12/12/docker-1-Docker-installed-on-centos7/"/>
      <url>/2018/12/12/docker-1-Docker-installed-on-centos7/</url>
      
        <content type="html"><![CDATA[<p>学习视频地址：<a href="https://coding.imooc.com/class/189.html" target="_blank" rel="noopener">https://coding.imooc.com/class/189.html</a></p><h1 id="在centos7上安装docker"><a href="#在centos7上安装docker" class="headerlink" title="在centos7上安装docker"></a>在centos7上安装docker</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://docs.docker.com/install/linux/docker-ce/centos/</span><br></pre></td></tr></table></figure><p>新建docker用户，并安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]# adduser docker</span><br><span class="line">[root@docker ~]# hostnamectl set-hostname docker</span><br><span class="line">[root@docker ~]# vi /etc/sudoers</span><br><span class="line">添加</span><br><span class="line">docker  ALL=(ALL)       ALL</span><br><span class="line">[root@docker ~]# su - docker</span><br><span class="line">上一次登录：三 12月 12 10:26:46 EST 2018pts/0 上</span><br><span class="line">[docker@docker ~]$ </span><br><span class="line">[docker@docker ~]$ sudo yum install epel-release vim -y</span><br></pre></td></tr></table></figure><p>安装社区版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">卸载已安装的docker</span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line">安装required packages</span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line">安装docker源</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">安装docker</span><br><span class="line">[docker@docker ~]$ sudo yum install docker-ce -y</span><br><span class="line"></span><br><span class="line">启动docker进程，并设置开机启动</span><br><span class="line">[docker@docker ~]$ sudo systemctl start docker</span><br><span class="line">[docker@docker ~]$ sudo systemctl enable docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line"></span><br><span class="line">测试docker安装</span><br><span class="line">[docker@docker ~]$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><h1 id="Vagrant建立虚拟机，并在虚拟机中安装docker"><a href="#Vagrant建立虚拟机，并在虚拟机中安装docker" class="headerlink" title="Vagrant建立虚拟机，并在虚拟机中安装docker"></a>Vagrant建立虚拟机，并在虚拟机中安装docker</h1><p>1、安装VirtualBox然后安装Vagrant</p><p>2、下载Vagrant box</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:centos7 yujiang$ ls ~/.vagrant.d/downloadboxes/centos7/</span><br><span class="line">virtualbox.box</span><br></pre></td></tr></table></figure><p>3、添加Vagrant box到镜像列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:centos7 yujiang$ vagrant box add centos/centos7 ~/.vagrant.d/downloadboxes/centos7/virtualbox.box </span><br><span class="line">==&gt; box: Box file was not detected as metadata. Adding it directly...</span><br><span class="line">==&gt; box: Adding box &apos;centos/centos7&apos; (v0) for provider: </span><br><span class="line">    box: Unpacking necessary files from: file:///Users/yujiang/.vagrant.d/downloadboxes/centos7/virtualbox.box</span><br><span class="line">==&gt; box: Successfully added box &apos;centos/centos7&apos; (v0) for &apos;virtualbox&apos;!</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:centos7 yujiang$ vagrant box list</span><br><span class="line">centos/centos7 (virtualbox, 0)</span><br></pre></td></tr></table></figure><p>4、创建Vagrant虚拟机目录并启动虚拟机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:~ yujiang$ mkdir Vagrant &amp;&amp; cd Vagrant/</span><br><span class="line">yujiangdeMBP-13:Vagrant yujiang$ vagrant init centos/centos7</span><br><span class="line">yujiangdeMBP-13:Vagrant yujiang$ vagrant up</span><br><span class="line">yujiangdeMBP-13:Vagrant yujiang$ vagrant ssh</span><br><span class="line">[vagrant@localhost ~]$ exit</span><br><span class="line">yujiangdeMBP-13:Vagrant yujiang$ vagrant destroy</span><br></pre></td></tr></table></figure><p>5、之后使用《在centos7上安装docker》安装docker</p><h2 id="编辑Vagrantfile，启动虚拟机时自动安装docker"><a href="#编辑Vagrantfile，启动虚拟机时自动安装docker" class="headerlink" title="编辑Vagrantfile，启动虚拟机时自动安装docker"></a>编辑Vagrantfile，启动虚拟机时自动安装docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># -*- mode: ruby -*-</span><br><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  config.vm.box = &quot;centos/centos7&quot;</span><br><span class="line">  config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</span><br><span class="line">  sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine</span><br><span class="line">  sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">  sudo yum install docker-ce -y</span><br><span class="line">  sudo systemctl start docker</span><br><span class="line">  sudo systemctl enable docker</span><br><span class="line">  sudo groupadd docker</span><br><span class="line">  sudo gpasswd -a vagrant docker</span><br><span class="line">  SHELL</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:Vagrant yujiang$ vagrant up</span><br><span class="line">yujiangdeMBP-13:Vagrant yujiang$ vagrant ssh</span><br><span class="line">[vagrant@localhost ~]$ sudo docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.09.0</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.4</span><br><span class="line"> Git commit:        4d60db4</span><br><span class="line"> Built:             Wed Nov  7 00:48:22 2018</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.0</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.4</span><br><span class="line">  Git commit:       4d60db4</span><br><span class="line">  Built:            Wed Nov  7 00:19:08 2018</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br></pre></td></tr></table></figure><h2 id="使用docker命令时，去掉sudo"><a href="#使用docker命令时，去掉sudo" class="headerlink" title="使用docker命令时，去掉sudo"></a>使用docker命令时，去掉sudo</h2><p>1、添加docker group</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost ~]$ sudo groupadd docker</span><br><span class="line">groupadd: group &apos;docker&apos; already exists</span><br></pre></td></tr></table></figure><p>2、添加当前用户到docker group</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost ~]$ sudo gpasswd -a vagrant docker</span><br><span class="line">Adding user vagrant to group docker</span><br></pre></td></tr></table></figure><p>3、退出当前终端，重新连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost ~]$ exit</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:Vagrant yujiang$ vagrant ssh</span><br><span class="line"></span><br><span class="line">[vagrant@localhost ~]$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.09.0</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.4</span><br><span class="line"> Git commit:        4d60db4</span><br><span class="line"> Built:             Wed Nov  7 00:48:22 2018</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.0</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.4</span><br><span class="line">  Git commit:       4d60db4</span><br><span class="line">  Built:            Wed Nov  7 00:19:08 2018</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab jenkins ci</title>
      <link href="/2018/12/03/gitlab-jenkins-ci/"/>
      <url>/2018/12/03/gitlab-jenkins-ci/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建jenkins（centos-7）"><a href="#搭建jenkins（centos-7）" class="headerlink" title="搭建jenkins（centos 7）"></a>搭建jenkins（centos 7）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">安装jenkins</span><br><span class="line">sudo yum install wget -y</span><br><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo</span><br><span class="line">sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br><span class="line">sudo yum install jenkins java -y</span><br><span class="line"></span><br><span class="line">启动jenkins</span><br><span class="line">sudo systemctl start jenkins</span><br><span class="line">sudo systemctl enable jenkins</span><br><span class="line">sudo systemctl status jenkins</span><br><span class="line"></span><br><span class="line">设置防火墙</span><br><span class="line">sudo firewall-cmd --permanent --new-service=jenkins</span><br><span class="line">sudo firewall-cmd --permanent --service=jenkins --set-short=&quot;Jenkins Service Ports&quot;</span><br><span class="line">sudo firewall-cmd --permanent --service=jenkins --set-description=&quot;Jenkins service firewalld port exceptions&quot;</span><br><span class="line">sudo firewall-cmd --permanent --service=jenkins --add-port=8080/tcp</span><br><span class="line">sudo firewall-cmd --permanent --add-service=jenkins</span><br><span class="line">sudo firewall-cmd --zone=public --add-service=http --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h1 id="搭建gitlab"><a href="#搭建gitlab" class="headerlink" title="搭建gitlab"></a>搭建gitlab</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line">sudo systemctl enable sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo firewall-cmd --permanent --add-service=httpsudo systemctl reload firewalld</span><br><span class="line">sudo systemctl reload firewalld</span><br><span class="line"></span><br><span class="line">安装Postfix以发送通知电子邮件</span><br><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl enable postfix</span><br><span class="line">sudo systemctl start postfix</span><br><span class="line"></span><br><span class="line">安装gitbla</span><br><span class="line">wget https://mirror.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-11.5.1-ce.0.el7.x86_64.rpm</span><br><span class="line">rpm -i gitlab-ce-11.5.1-ce.0.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line">unicorn[&apos;port&apos;] = 80</span><br><span class="line"></span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><h1 id="配置jenkins-gitlab-ci"><a href="#配置jenkins-gitlab-ci" class="headerlink" title="配置jenkins gitlab ci"></a>配置jenkins gitlab ci</h1>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动部署ceph</title>
      <link href="/2018/11/26/%E6%89%8B%E5%8A%A8%E9%83%A8%E7%BD%B2ceph/"/>
      <url>/2018/11/26/%E6%89%8B%E5%8A%A8%E9%83%A8%E7%BD%B2ceph/</url>
      
        <content type="html"><![CDATA[<p>手动部署ceph是看懂官方ansible或ceph-deploy的关键，了解部署步骤和相关组件才能更好的理解代码，理解OSD的挂载流程，所以个人认为需要做此实验。</p><p>官方文档：<a href="http://docs.ceph.com/docs/master/install/manual-deployment/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/install/manual-deployment/</a></p><h1 id="MANUAL-DEPLOYMENT"><a href="#MANUAL-DEPLOYMENT" class="headerlink" title="MANUAL DEPLOYMENT"></a>MANUAL DEPLOYMENT</h1><p>所有Ceph集群都需要至少一个monitor，并且至少需要与集群中存储对象副本一样多的OSD。引导初始monitor(s)是部署Ceph存储集群的第一步。monitor部署还为整个集群设置了重要准则，例如pool的副本数，每个OSD的placement groups数（PG数），心跳间隔，是否需要身份验证等。这些值中的大多数都是默认设置的，因此在设置生产环境集群时，了解它们很有用。<br>遵循与<a href="http://docs.ceph.com/docs/master/start/" target="_blank" rel="noopener">安装（快速）</a>相同的配置，我们将设置一个集群，其中node1作为监控节点，node2和node3作为OSD节点</p><p><img src="http://docs.ceph.com/docs/master/_images/ditaa-b67d58275cae03a5573d36907b437e36df685600.png" alt></p><h2 id="MONITOR-BOOTSTRAPPING"><a href="#MONITOR-BOOTSTRAPPING" class="headerlink" title="MONITOR BOOTSTRAPPING"></a>MONITOR BOOTSTRAPPING</h2><p>引导monitor需要许多东西：</p><ul><li><p>Unique Identifier（唯一标识符）: fsid是集群的唯一标识符，它是 Ceph 作为文件系统时的文件系统标识符。现在Ceph也支持原生接口，块设备和对象存储网关接口，因此fsid有点不恰当的。</p></li><li><p>Cluster Name（集群名称）: Ceph集群有一个集群名称，这是一个没有空格的字符串。默认集群名称为ceph，但您可以指定其他集群名称。当您使用多个集群并且需要清楚地了解正在使用哪个集群时，覆盖默认集群名称尤其有用。</p><p>例如，在<a href="http://docs.ceph.com/docs/master/radosgw/multisite/#multisite" target="_blank" rel="noopener">multisite configuration</a>中运行多个集群时，集群名称（例如，us-west，us-east）标识当前CLI会话的集群。注意：要在CLI标识集群名称，请使用集群名称指定Ceph配置文件（例如，ceph.conf，us-west.conf，us-east.conf等）。另请参阅CLI用法（ceph –cluster {cluster-name}）。</p></li><li><p>Monitor Name: 集群中的每个monitor实例都具有唯一的名称。通常，Ceph Monitor名称是主机名（我们建议独立一台主机运行Ceph Monitor，而不要将Ceph OSD Daemons与Ceph Monitors混合部署在一台机器上）。您可以使用hostname -s检索短主机名。</p></li><li><p>Monitor Map: 引导初始monitor(s)需要您生成monitor map。monitor map需要fsid，cluster name，以及至少一个host name及其IP地址。</p></li><li><p>Monitor Keyring: Monitors通过secret key相互通信。您必须生成带有monitor secret的keyring，并在引导初始monitor(s)时提供它。</p></li><li><p>Administrator Keyring: 要使用ceph CLI tools，您必须具有client.admin用户。因此，您必须生成admin用户和相应keyring，并且还必须将client.admin用户添加到monitor keyring。</p></li></ul><p>上述要求并不意味着创建Ceph配置文件。但是，作为最佳实践，我们建议创建一个Ceph配置文件，并使用fsid，mon initial members和mon host填充它。</p><p>您也可以在运行时获取并设置所有monitor settings。但是，Ceph配置文件可能只包含覆盖默认值的那些settings。将settings添加到Ceph配置文件时，这些settings会覆盖默认settings。在Ceph配置文件中维护这些settings可以使您更轻松地维护集群。</p><p>过程如下：</p><p>1、登录monitor节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;hostname&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh node1</span><br></pre></td></tr></table></figure><p>2、确保您有Ceph配置文件的目录。 默认情况下，Ceph使用/etc/ceph。 安装ceph时，安装程序将自动创建/etc/ceph目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/ceph</span><br></pre></td></tr></table></figure><p>注意：部署工具可能在清除集群时删除此目录（例如，ceph-deploy purgedata {node-name}，ceph-deploy purge {node-name}）。</p><p>3、创建Ceph配置文件。 默认情况下，Ceph使用ceph.conf，其中ceph反映了集群名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ceph/ceph.conf</span><br></pre></td></tr></table></figure><p>4、为您的集群生成唯一ID（即fsid）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uuidgen</span><br></pre></td></tr></table></figure><p>5、将唯一ID添加到Ceph配置文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fsid = &#123;UUID&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fsid = a7f64266-0894-4f1e-a635-d0aeaca0e993</span><br></pre></td></tr></table></figure><p>6、将初始monitor(s)添加到Ceph配置文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mon initial members = &#123;hostname&#125;[,&#123;hostname&#125;]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mon initial members = node1</span><br></pre></td></tr></table></figure><p>7、将初始monitor(s)的IP地址添加到Ceph配置文件并保存文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mon host = &#123;ip-address&#125;[,&#123;ip-address&#125;]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mon host = 192.168.0.1</span><br></pre></td></tr></table></figure><p>注意：您可以使用IPv6地址而不是IPv4地址，但必须将ms bind ipv6设置为true。有关网络配置的详细信息，请参阅<a href="http://docs.ceph.com/docs/master/rados/configuration/network-config-ref" target="_blank" rel="noopener">网络配置参考</a>。</p><p>8、为集群创建keyring并生成monitor secret key。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph-authtool --create-keyring /tmp/ceph.mon.keyring --gen-key -n mon. --cap mon &apos;allow *&apos;</span><br></pre></td></tr></table></figure><p>9、生成administrator keyring，生成client.admin用户并将用户添加到keyring。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ceph-authtool --create-keyring /etc/ceph/ceph.client.admin.keyring --gen-key -n client.admin --cap mon &apos;allow *&apos; --cap osd &apos;allow *&apos; --cap mds &apos;allow *&apos; --cap mgr &apos;allow *&apos;</span><br></pre></td></tr></table></figure><p>10、生成bootstrap-osd keyring，生成client.bootstrap-osd用户并将用户添加到keyring。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ceph-authtool --create-keyring /var/lib/ceph/bootstrap-osd/ceph.keyring --gen-key -n client.bootstrap-osd --cap mon &apos;profile bootstrap-osd&apos;</span><br></pre></td></tr></table></figure><p>11、将生成的keys添加到ceph.mon.keyring。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ceph-authtool /tmp/ceph.mon.keyring --import-keyring /etc/ceph/ceph.client.admin.keyring</span><br><span class="line">sudo ceph-authtool /tmp/ceph.mon.keyring --import-keyring /var/lib/ceph/bootstrap-osd/ceph.keyring</span><br></pre></td></tr></table></figure><p>12、使用主机名，主机IP地址和FSID生成monitor map。将其另存为/tmp/monmap。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">monmaptool --create --add &#123;hostname&#125; &#123;ip-address&#125; --fsid &#123;uuid&#125; /tmp/monmap</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">monmaptool --create --add node1 192.168.0.1 --fsid a7f64266-0894-4f1e-a635-d0aeaca0e993 /tmp/monmap</span><br></pre></td></tr></table></figure><p>13、在monitor主机上创建默认数据目录（或多个目录）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /var/lib/ceph/mon/&#123;cluster-name&#125;-&#123;hostname&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u ceph mkdir /var/lib/ceph/mon/ceph-node1</span><br></pre></td></tr></table></figure><p>有关详细信息，请参阅<a href="http://docs.ceph.com/docs/master/rados/configuration/mon-config-ref#data" target="_blank" rel="noopener">Monitor Config Reference - Data</a>。</p><p>14、使用monitor map和keyring填充monitor daemon(s)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u ceph ceph-mon [--cluster &#123;cluster-name&#125;] --mkfs -i &#123;hostname&#125; --monmap /tmp/monmap --keyring /tmp/ceph.mon.keyring</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u ceph ceph-mon --mkfs -i node1 --monmap /tmp/monmap --keyring /tmp/ceph.mon.keyring</span><br></pre></td></tr></table></figure><p>15、考虑Ceph配置文件的settings，常见settings包括以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">fsid = &#123;cluster-id&#125;</span><br><span class="line">mon initial members = &#123;hostname&#125;[, &#123;hostname&#125;]</span><br><span class="line">mon host = &#123;ip-address&#125;[, &#123;ip-address&#125;]</span><br><span class="line">public network = &#123;network&#125;[, &#123;network&#125;]</span><br><span class="line">cluster network = &#123;network&#125;[, &#123;network&#125;]</span><br><span class="line">auth cluster required = cephx</span><br><span class="line">auth service required = cephx</span><br><span class="line">auth client required = cephx</span><br><span class="line">osd journal size = &#123;n&#125;</span><br><span class="line">osd pool default size = &#123;n&#125;  # Write an object n times.</span><br><span class="line">osd pool default min size = &#123;n&#125; # Allow writing n copies in a degraded state.</span><br><span class="line">osd pool default pg num = &#123;n&#125;</span><br><span class="line">osd pool default pgp num = &#123;n&#125;</span><br><span class="line">osd crush chooseleaf type = &#123;n&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，配置的[global]部分可能如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">fsid = a7f64266-0894-4f1e-a635-d0aeaca0e993</span><br><span class="line">mon initial members = node1</span><br><span class="line">mon host = 192.168.0.1</span><br><span class="line">public network = 192.168.0.0/24</span><br><span class="line">auth cluster required = cephx</span><br><span class="line">auth service required = cephx</span><br><span class="line">auth client required = cephx</span><br><span class="line">osd journal size = 1024</span><br><span class="line">osd pool default size = 3</span><br><span class="line">osd pool default min size = 2</span><br><span class="line">osd pool default pg num = 333</span><br><span class="line">osd pool default pgp num = 333</span><br><span class="line">osd crush chooseleaf type = 1</span><br></pre></td></tr></table></figure><p>16、启动monitor(s)。</p><p>对于大多数linux发行版，services通过systemd启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start ceph-mon@node1</span><br></pre></td></tr></table></figure><p>对于较旧的Debian/CentOS/RHEL，请使用sysvinit：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ceph start mon.node1</span><br></pre></td></tr></table></figure><p>17、验证monitor是否正在运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph -s</span><br></pre></td></tr></table></figure><p>您应该看到monitor已启动并打印运行的输出，并且您应该看到一个运行状况错误，提示placement groups（PG）处于inactive状态。看起来像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cluster:</span><br><span class="line">  id:     a7f64266-0894-4f1e-a635-d0aeaca0e993</span><br><span class="line">  health: HEALTH_OK</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  mon: 1 daemons, quorum node1</span><br><span class="line">  mgr: node1(active)</span><br><span class="line">  osd: 0 osds: 0 up, 0 in</span><br><span class="line"></span><br><span class="line">data:</span><br><span class="line">  pools:   0 pools, 0 pgs</span><br><span class="line">  objects: 0 objects, 0 bytes</span><br><span class="line">  usage:   0 kB used, 0 kB / 0 kB avail</span><br><span class="line">  pgs:</span><br></pre></td></tr></table></figure><p>注意：添加OSD并启动它们后，placement group（PG）错误应该消失。有关详细信息，请参阅<a href="http://docs.ceph.com/docs/master/install/manual-deployment/#adding-osds" target="_blank" rel="noopener">添加OSD</a>。</p><h2 id="MANAGER-DAEMON-CONFIGURATION"><a href="#MANAGER-DAEMON-CONFIGURATION" class="headerlink" title="MANAGER DAEMON CONFIGURATION"></a>MANAGER DAEMON CONFIGURATION</h2><p>在运行ceph-mon daemon的每个节点上，还应该设置ceph-mgr daemon。</p><p>请参阅<a href="http://docs.ceph.com/docs/master/mgr/administrator/#mgr-administrator-guide" target="_blank" rel="noopener">ceph-mgr管理员指南</a>。</p><h2 id="ADDING-OSDS"><a href="#ADDING-OSDS" class="headerlink" title="ADDING OSDS"></a>ADDING OSDS</h2><p>初始monitor(s)运行后，应添加OSD。在有足够的OSD来处理对象的副本数量之前，您的集群无法达到active + clean状态（例如，osd pool default size = 2需要至少两个OSD）。</p><p>引导monitor后，您的集群具有默认的CRUSH map，但是，CRUSH map没有映射到Ceph节点的任何Ceph OSD Daemons。</p><h3 id="SHORT-FORM（简写）"><a href="#SHORT-FORM（简写）" class="headerlink" title="SHORT FORM（简写）"></a>SHORT FORM（简写）</h3><p>Ceph提供了ceph-volume实用程序，它可以prepare logical volume，disk或partition，以便与ceph一起使用。 ceph-volume实用程序通过递增索引来创建OSD ID。 此外，ceph-volume会将新OSD添加到CRUSH map中的host下。执行ceph-volume -h以获取CLI详细信息。ceph-volume实用程序自动执行下面的<a href="http://docs.ceph.com/docs/master/install/manual-deployment/#long-form" target="_blank" rel="noopener">Long Form</a>的步骤。要使用short form过程创建前两个OSD，请在node2和node3上执行以下操作：</p><h3 id="BLUESTORE"><a href="#BLUESTORE" class="headerlink" title="BLUESTORE"></a>BLUESTORE</h3><p>1、创建OSD。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;node-name&#125;</span><br><span class="line">sudo ceph-volume lvm create --data &#123;data-path&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh node1</span><br><span class="line">sudo ceph-volume lvm create --data /dev/hdd1</span><br></pre></td></tr></table></figure><p>或者，创建过程可以分为两个阶段（prepare和activate）：</p><p>1、Prepare the OSD。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;node-name&#125;</span><br><span class="line">sudo ceph-volume lvm prepare --data &#123;data-path&#125; &#123;data-path&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh node1</span><br><span class="line">sudo ceph-volume lvm prepare --data /dev/hdd1</span><br></pre></td></tr></table></figure><p>prepare后，激活prepare后的OSD的ID和FSID。这些可以通过列出当前服务器中的OSD来获得：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ceph-volume lvm list</span><br></pre></td></tr></table></figure><p>2、Activate the OSD。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ceph-volume lvm activate &#123;ID&#125; &#123;FSID&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ceph-volume lvm activate 0 a7f64266-0894-4f1e-a635-d0aeaca0e993</span><br></pre></td></tr></table></figure><h3 id="FILESTORE"><a href="#FILESTORE" class="headerlink" title="FILESTORE"></a>FILESTORE</h3><p>1、Create the OSD。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;node-name&#125;</span><br><span class="line">sudo ceph-volume lvm create --filestore --data &#123;data-path&#125; --journal &#123;journal-path&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh node1</span><br><span class="line">sudo ceph-volume lvm create --filestore --data /dev/hdd1 --journal /dev/hdd2</span><br></pre></td></tr></table></figure><p>或者，创建过程可以分为两个阶段（prepare和activate）：</p><p>1、Prepare the OSD。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;node-name&#125;</span><br><span class="line">sudo ceph-volume lvm prepare --filestore --data &#123;data-path&#125; --journal &#123;journal-path&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh node1</span><br><span class="line">sudo ceph-volume lvm prepare --filestore --data /dev/hdd1 --journal /dev/hdd2</span><br></pre></td></tr></table></figure><p>prepare后，激活prepare后的OSD的ID和FSID。这些可以通过列出当前服务器中的OSD来获得：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ceph-volume lvm list</span><br></pre></td></tr></table></figure><p>2、Activate the OSD。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ceph-volume lvm activate --filestore &#123;ID&#125; &#123;FSID&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ceph-volume lvm activate --filestore 0 a7f64266-0894-4f1e-a635-d0aeaca0e993</span><br></pre></td></tr></table></figure><h3 id="LONG-FORM"><a href="#LONG-FORM" class="headerlink" title="LONG FORM"></a>LONG FORM</h3><p>如果没有任何helper实用程序，请创建一个OSD并使用以下步骤将其添加到集群和CRUSH map中。要使用long form方式创建前两个OSD，请对每个OSD执行以下步骤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：此过程没有描述使用dm-crypt“lockbox”在dm-crypt之上的部署。</span><br></pre></td></tr></table></figure><p>1、连接到OSD主机并变为root用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh &#123;node-name&#125;</span><br><span class="line">sudo bash</span><br></pre></td></tr></table></figure><p>2、为OSD生成UUID。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=$(uuidgen)</span><br></pre></td></tr></table></figure><p>3、为OSD生成cephx key。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OSD_SECRET=$(ceph-authtool --gen-print-key)</span><br></pre></td></tr></table></figure><p>4、创建OSD。 请注意，如果您需要重用之前销毁的OSD ID，可以提供OSD ID作为ceph osd new的附加参数。我们假设机器上存在client.bootstrap-osd key。您也可以在拥有该key的其他主机上以client.admin身份执行此命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ID=$(echo &quot;&#123;\&quot;cephx_secret\&quot;: \&quot;$OSD_SECRET\&quot;&#125;&quot; | \</span><br><span class="line">   ceph osd new $UUID -i - \</span><br><span class="line">   -n client.bootstrap-osd -k /var/lib/ceph/bootstrap-osd/ceph.keyring)</span><br></pre></td></tr></table></figure><p>也可以在JSON中包含crush_device_class属性，以设置默认值以外的initial class（基于自动检测到的设备类型，ssd或hdd）。</p><p>5、在新OSD上创建默认目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/lib/ceph/osd/ceph-$ID</span><br></pre></td></tr></table></figure><p>6、如果OSD使用操作系统以外的drive，先创建文件系统，并将其mount到刚刚创建的目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.xfs /dev/&#123;DEV&#125;</span><br><span class="line">mount /dev/&#123;DEV&#125; /var/lib/ceph/osd/ceph-$ID</span><br></pre></td></tr></table></figure><p>7、将secret写入OSD keyring文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph-authtool --create-keyring /var/lib/ceph/osd/ceph-$ID/keyring \</span><br><span class="line">     --name osd.$ID --add-key $OSD_SECRET</span><br></pre></td></tr></table></figure><p>8、初始化OSD数据目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph-osd -i $ID --mkfs --osd-uuid $UUID</span><br></pre></td></tr></table></figure><p>9、修复所有权。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R ceph:ceph /var/lib/ceph/osd/ceph-$ID</span><br></pre></td></tr></table></figure><p>10、将OSD添加到Ceph后，OSD就在您的配置中。但是，它还没有运行。必须先启动新的OSD才能开始接收数据。</p><p>systemd方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable ceph-osd@$ID</span><br><span class="line">systemctl start ceph-osd@$ID</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable ceph-osd@12</span><br><span class="line">systemctl start ceph-osd@12</span><br></pre></td></tr></table></figure><h2 id="ADDING-MDS"><a href="#ADDING-MDS" class="headerlink" title="ADDING MDS"></a>ADDING MDS</h2><p>在以下说明中，{id}是任意名称，例如计算机的hostname。</p><p>1、创建mds数据目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/lib/ceph/mds/&#123;cluster-name&#125;-&#123;id&#125;</span><br></pre></td></tr></table></figure><p>2、创建一个keyring：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph-authtool --create-keyring /var/lib/ceph/mds/&#123;cluster-name&#125;-&#123;id&#125;/keyring --gen-key -n mds.&#123;id&#125;</span><br></pre></td></tr></table></figure><p>3、导入keyring并设置caps：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph auth add mds.&#123;id&#125; osd &quot;allow rwx&quot; mds &quot;allow&quot; mon &quot;allow profile mds&quot; -i /var/lib/ceph/mds/&#123;cluster&#125;-&#123;id&#125;/keyring</span><br></pre></td></tr></table></figure><p>4、添加到ceph.conf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mds.&#123;id&#125;]</span><br><span class="line">host = &#123;id&#125;</span><br></pre></td></tr></table></figure><p>5、以手动方式启动daemon：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph-mds --cluster &#123;cluster-name&#125; -i &#123;id&#125; -m &#123;mon-hostname&#125;:&#123;mon-port&#125; [-f]</span><br></pre></td></tr></table></figure><p>6、以正确的方式启动daemon（使用ceph.conf entry）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ceph start</span><br></pre></td></tr></table></figure><p>7、如果启动daemon失败并显示以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mds.-1.0 ERROR: failed to authenticate: (22) Invalid argument</span><br></pre></td></tr></table></figure><p>那么，需要确认你没有在ceph.conf的global section中设置keyring；并将其移至client section。或添加特定于此mds daemon的keyring设置。并验证您是否在mds data目录中看到相同的key，并且与ceph auth get mds.{id}命令的输出相同。</p><p>8、现在您已准备好<a href="http://docs.ceph.com/docs/master/cephfs/createfs/" target="_blank" rel="noopener">创建Ceph filesystem</a>。</p><h2 id="SUMMARY"><a href="#SUMMARY" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>一旦您的monitor和两个OSD启动并运行，可以通过执行以下操作来观察placement groups peer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph -w</span><br></pre></td></tr></table></figure><p>要查看tree，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tree</span><br></pre></td></tr></table></figure><p>你应该看到像这样的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># id    weight  type name       up/down reweight</span><br><span class="line">-1      2       root default</span><br><span class="line">-2      2               host node1</span><br><span class="line">0       1                       osd.0   up      1</span><br><span class="line">-3      1               host node2</span><br><span class="line">1       1                       osd.1   up      1</span><br></pre></td></tr></table></figure><p>要添加（或删除）其他monitors，请参阅<a href="http://docs.ceph.com/docs/master/rados/operations/add-or-rm-mons/" target="_blank" rel="noopener">Add/Remove Monitors</a>。要添加（或删除）其他Ceph OSD Daemons，请参阅<a href="http://docs.ceph.com/docs/master/rados/operations/add-or-rm-osds/" target="_blank" rel="noopener">Add/Remove OSDs</a>。</p><h1 id="部署实验"><a href="#部署实验" class="headerlink" title="部署实验"></a>部署实验</h1><h2 id="monitor部署实验"><a href="#monitor部署实验" class="headerlink" title="monitor部署实验"></a>monitor部署实验</h2><p>1、添加ceph源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@cephlm ~]# vi /etc/yum.repos.d/ceph.repo </span><br><span class="line">[ceph]</span><br><span class="line">name=Ceph</span><br><span class="line">baseurl=http://mirrors.163.com/ceph/rpm-luminous/el7/x86_64/</span><br><span class="line"># baseurl=https://download.ceph.com/rpm-luminous/el7/x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">type=rpm-md</span><br><span class="line">gpgkey=http://mirrors.163.com/ceph/keys/release.asc</span><br><span class="line"># gpgkey=https://download.ceph.com/keys/release.asc</span><br></pre></td></tr></table></figure><p>2、安装epel与ceph</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1]epel参考：https://blog.csdn.net/yasi_xi/article/details/11746255</span><br><span class="line">EPEL的全称叫 Extra Packages for Enterprise Linux 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。</span><br><span class="line"></span><br><span class="line">[root@cephlm ~]# yum install epel-release -y &amp;&amp; yum install ceph -y</span><br></pre></td></tr></table></figure><p>3、为集群创建keyring并生成monitor secret key。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@cephlm ~]# ceph-authtool --create-keyring /tmp/ceph.mon.keyring --gen-key -n mon. --cap mon &apos;allow *&apos;</span><br><span class="line">creating /tmp/ceph.mon.keyring</span><br><span class="line">[root@cephlm ~]# cat /tmp/ceph.mon.keyring</span><br><span class="line">[mon.]</span><br><span class="line">key = AQAgbv1bc62FBBAAvuCz2a5EDtbAmy9ep1Dxxw==</span><br><span class="line">caps mon = &quot;allow *&quot;</span><br></pre></td></tr></table></figure><p>4、生成administrator keyring，生成client.admin用户并将用户添加到keyring。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@cephlm ~]# sudo ceph-authtool --create-keyring /etc/ceph/ceph.client.admin.keyring --gen-key -n client.admin --cap mon &apos;allow *&apos; --cap osd &apos;allow *&apos; --cap mds &apos;allow *&apos; --cap mgr &apos;allow *&apos;</span><br><span class="line">creating /etc/ceph/ceph.client.admin.keyring</span><br><span class="line">[root@cephlm ~]# cat /etc/ceph/ceph.client.admin.keyring</span><br><span class="line">[client.admin]</span><br><span class="line">key = AQBFbv1bImaJCxAAYUiUCuia//zZSMIPyOHJuA==</span><br><span class="line">caps mds = &quot;allow *&quot;</span><br><span class="line">caps mgr = &quot;allow *&quot;</span><br><span class="line">caps mon = &quot;allow *&quot;</span><br><span class="line">caps osd = &quot;allow *&quot;</span><br></pre></td></tr></table></figure><p>5、生成bootstrap-osd keyring，生成client.bootstrap-osd用户并将用户添加到keyring。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@cephlm ~]# sudo ceph-authtool --create-keyring /var/lib/ceph/bootstrap-osd/ceph.keyring --gen-key -n client.bootstrap-osd --cap mon &apos;profile bootstrap-osd&apos;</span><br><span class="line">creating /var/lib/ceph/bootstrap-osd/ceph.keyring</span><br><span class="line">[root@cephlm ~]# cat /var/lib/ceph/bootstrap-osd/ceph.keyring</span><br><span class="line">[client.bootstrap-osd]</span><br><span class="line">key = AQBQbv1bXv0WAhAAo/hv7OOaftMHOovHNeyOFg==</span><br><span class="line">caps mon = &quot;profile bootstrap-osd&quot;</span><br></pre></td></tr></table></figure><p>6、将生成的keys添加到ceph.mon.keyring。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@cephlm ~]# sudo ceph-authtool /tmp/ceph.mon.keyring --import-keyring /etc/ceph/ceph.client.admin.keyring</span><br><span class="line">[root@cephlm ~]# sudo ceph-authtool /tmp/ceph.mon.keyring --import-keyring /var/lib/ceph/bootstrap-osd/ceph.keyring</span><br><span class="line"></span><br><span class="line">[root@cephlm ~]# cat /tmp/ceph.mon.keyring</span><br><span class="line">[mon.]</span><br><span class="line">key = AQAgbv1bc62FBBAAvuCz2a5EDtbAmy9ep1Dxxw==</span><br><span class="line">caps mon = &quot;allow *&quot;</span><br><span class="line">[client.admin]</span><br><span class="line">key = AQBFbv1bImaJCxAAYUiUCuia//zZSMIPyOHJuA==</span><br><span class="line">caps mds = &quot;allow *&quot;</span><br><span class="line">caps mgr = &quot;allow *&quot;</span><br><span class="line">caps mon = &quot;allow *&quot;</span><br><span class="line">caps osd = &quot;allow *&quot;</span><br><span class="line">[client.bootstrap-osd]</span><br><span class="line">key = AQBQbv1bXv0WAhAAo/hv7OOaftMHOovHNeyOFg==</span><br><span class="line">caps mon = &quot;profile bootstrap-osd&quot;</span><br></pre></td></tr></table></figure><p>7、使用主机名，主机IP地址和FSID生成monitor map。将其另存为/tmp/monmap。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@cephlm ~]# monmaptool --create --add cephlm 192.168.0.10 --fsid c8b0b137-1ba7-4c1f-a514-281139c35233 /tmp/monmap</span><br><span class="line">monmaptool: monmap file /tmp/monmap</span><br><span class="line">monmaptool: set fsid to c8b0b137-1ba7-4c1f-a514-281139c35233</span><br><span class="line">monmaptool: writing epoch 0 to /tmp/monmap (1 monitors)</span><br><span class="line"></span><br><span class="line">更改权限，可是使ceph用户有读该文件的权限</span><br><span class="line">[root@cephlm ~]# chmod +r /tmp/monmap &amp;&amp; chmod +r /tmp/ceph.mon.keyring</span><br><span class="line"></span><br><span class="line">[root@cephlm ~]# monmaptool --print /tmp/monmap</span><br><span class="line">monmaptool: monmap file /tmp/monmap</span><br><span class="line">epoch 0</span><br><span class="line">fsid c8b0b137-1ba7-4c1f-a514-281139c35233</span><br><span class="line">last_changed 2018-11-28 10:55:11.677288</span><br><span class="line">created 2018-11-28 10:55:11.677288</span><br><span class="line">0: 192.168.56.205:6789/0 mon.cephlm</span><br></pre></td></tr></table></figure><p>8、创建配置文件文件<code>&lt;集群名&gt;.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@cephlm ~]# vi /etc/ceph/ceph.conf </span><br><span class="line">[global]</span><br><span class="line">fsid = c8b0b137-1ba7-4c1f-a514-281139c35233</span><br><span class="line">mon initial members = cephlm</span><br><span class="line">mon host = 192.168.0.10</span><br><span class="line">public network = 192.168.0.0/24</span><br><span class="line">cluster network = 192.168.0.0/24</span><br><span class="line">auth cluster required = cephx</span><br><span class="line">auth service required = cephx</span><br><span class="line">auth client required = cephx</span><br><span class="line">osd pool default size = 1</span><br><span class="line">osd pool default min size = 1</span><br><span class="line">osd pool default pg num = 16</span><br><span class="line">osd pool default pgp num = 16</span><br></pre></td></tr></table></figure><p>9、使用monitor map和keyring填充monitor daemon(s)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@cephlm ~]# sudo -u ceph ceph-mon --cluster ceph --mkfs -i cephlm --monmap /tmp/monmap --keyring /tmp/ceph.mon.keyring</span><br></pre></td></tr></table></figure><p>10、启动ceph-mon服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@cephlm ~]# systemctl enable ceph-mon@cephlm</span><br><span class="line">[root@cephlm ~]# systemctl start ceph-mon@cephlm</span><br><span class="line"></span><br><span class="line">[root@cephlm ~]# ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    id:     c8b0b137-1ba7-4c1f-a514-281139c35233</span><br><span class="line">    health: HEALTH_OK</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 1 daemons, quorum cephlm</span><br><span class="line">    mgr: no daemons active</span><br><span class="line">    osd: 0 osds: 0 up, 0 in</span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   0 pools, 0 pgs</span><br><span class="line">    objects: 0 objects, 0B</span><br><span class="line">    usage:   0B used, 0B / 0B avail</span><br><span class="line">    pgs:</span><br></pre></td></tr></table></figure><h2 id="osd部署实验"><a href="#osd部署实验" class="headerlink" title="osd部署实验"></a>osd部署实验</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br></pre></td><td class="code"><pre><span class="line">1、为OSD生成UUID。</span><br><span class="line">[root@cephlm ~]# UUID=$(uuidgen)</span><br><span class="line">[root@cephlm ~]# echo $&#123;UUID&#125;</span><br><span class="line">265b6807-fa12-46f7-8e25-ce8b03dc2a2d</span><br><span class="line"></span><br><span class="line">2、为OSD生成cephx key。</span><br><span class="line">[root@cephlm ~]# OSD_SECRET=$(ceph-authtool --gen-print-key)</span><br><span class="line">[root@cephlm ~]# echo $&#123;OSD_SECRET&#125;</span><br><span class="line">AQDljwhcB8MxBxAATx/pqYOv0uRhQI9Tey5UeQ==</span><br><span class="line"></span><br><span class="line">3、为OSD生成cephx key（秘钥）。</span><br><span class="line">[root@cephlm ~]# ID=$(echo &quot;&#123;\&quot;cephx_secret\&quot;: \&quot;$OSD_SECRET\&quot;&#125;&quot; | \</span><br><span class="line">     ceph osd new $UUID -i - \/*</span><br><span class="line">     -n client.bootstrap-osd -k /var/lib/ceph/bootstrap-osd/ceph.keyring)</span><br><span class="line">[root@cephlm ~]# echo $&#123;ID&#125;</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">4、</span><br><span class="line">[root@cephlm ~]# mkdir /var/lib/ceph/osd/ceph-$ID</span><br><span class="line"></span><br><span class="line">5、</span><br><span class="line">[root@cephlm ~]# lsblk</span><br><span class="line">NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda    253:0    0  20G  0 disk </span><br><span class="line">├─vda1 253:1    0   1G  0 part /boot</span><br><span class="line">├─vda2 253:2    0   4G  0 part [SWAP]</span><br><span class="line">└─vda3 253:3    0  15G  0 part /</span><br><span class="line">vdb    253:16   0  50G  0 disk </span><br><span class="line">vdc    253:32   0  50G  0 disk </span><br><span class="line">vdd    253:48   0  50G  0 disk </span><br><span class="line"></span><br><span class="line">[root@cephlm ~]# ll /var/lib/ceph/osd/</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x 2 root root 6 12月  6 11:03 ceph-0</span><br><span class="line"></span><br><span class="line">[root@cephlm ~]# mkfs.xfs /dev/vdb -f</span><br><span class="line">meta-data=/dev/vdb               isize=512    agcount=4, agsize=3276800 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0, sparse=0</span><br><span class="line">data     =                       bsize=4096   blocks=13107200, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line">log      =internal log           bsize=4096   blocks=6400, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line"></span><br><span class="line">[root@cephlm ~]# mount /dev/vdb /var/lib/ceph/osd/ceph-$ID/</span><br><span class="line">[root@cephlm ~]# df -Th</span><br><span class="line">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/vda3      xfs        15G  1.6G   14G   11% /</span><br><span class="line">devtmpfs       devtmpfs  1.9G     0  1.9G    0% /dev</span><br><span class="line">tmpfs          tmpfs     1.9G     0  1.9G    0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     1.9G  8.6M  1.9G    1% /run</span><br><span class="line">tmpfs          tmpfs     1.9G     0  1.9G    0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1      xfs      1014M  172M  843M   17% /boot</span><br><span class="line">tmpfs          tmpfs     379M     0  379M    0% /run/user/0</span><br><span class="line">/dev/vdb       xfs        50G   33M   50G    1% /var/lib/ceph/osd/ceph-0</span><br><span class="line"></span><br><span class="line">6、将secret写入OSD keyring文件。</span><br><span class="line">[root@cephlm ~]# ceph-authtool --create-keyring /var/lib/ceph/osd/ceph-$ID/keyring --name osd.$ID --add-key $OSD_SECRET</span><br><span class="line">creating /var/lib/ceph/osd/ceph-0/keyring</span><br><span class="line">added entity osd.0 auth auth(auid = 18446744073709551615 key=AQDljwhcB8MxBxAATx/pqYOv0uRhQI9Tey5UeQ== with 0 caps)</span><br><span class="line"></span><br><span class="line">7、初始化OSD数据目录</span><br><span class="line">[root@cephlm ~]# ceph-osd -i $ID --mkfs --osd-uuid $UUID</span><br><span class="line">2019-08-02 18:07:34.990087 7f41b6680d80 -1 journal FileJournal::_open: disabling aio for non-block journal.  Use journal_force_aio to force use of aio anyway</span><br><span class="line">2019-08-02 18:07:35.061501 7f41b6680d80 -1 journal FileJournal::_open: disabling aio for non-block journal.  Use journal_force_aio to force use of aio anyway</span><br><span class="line">2019-08-02 18:07:35.062969 7f41b6680d80 -1 journal do_read_entry(4096): bad header magic</span><br><span class="line">2019-08-02 18:07:35.062993 7f41b6680d80 -1 journal do_read_entry(4096): bad header magic</span><br><span class="line">2019-08-02 18:07:35.063581 7f41b6680d80 -1 read_settings error reading settings: (2) No such file or directory</span><br><span class="line">2019-08-02 18:07:35.146735 7f41b6680d80 -1 created object store /var/lib/ceph/osd/ceph-0 for osd.0 fsid c8b0b137-1ba7-4c1f-a514-281139c35233</span><br><span class="line"></span><br><span class="line">8、</span><br><span class="line">[root@cephlm ~]# chown -R ceph:ceph /var/lib/ceph/osd/ceph-$ID</span><br><span class="line"></span><br><span class="line">9、</span><br><span class="line">[root@cephlm ~]# systemctl enable ceph-osd@$ID</span><br><span class="line">[root@cephlm ~]# systemctl start ceph-osd@$ID</span><br><span class="line">10、</span><br><span class="line">[root@sds-ceph-1 ~]# ceph osd pool create rbd 16</span><br><span class="line">[root@sds-ceph-1 ~]# rados bench -p rbd 10 write --no-cleanup</span><br><span class="line"></span><br><span class="line">[root@sds-ceph-1 ~]# tree -h  /var/lib/ceph/osd/ceph-0/current/</span><br><span class="line">/var/lib/ceph/osd/ceph-0/current/</span><br><span class="line">├── [4.0K]  1.0_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject126__head_314B9110__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject138__head_F0F776D0__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject149__head_9DC23D60__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject154__head_03D0DB50__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject179__head_E33CA580__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject209__head_3BFDF2F0__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject211__head_DECF96B0__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject212__head_5CED1CF0__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject217__head_1319A430__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject220__head_524D4D00__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject229__head_F40C7DE0__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject22__head_1686F940__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject235__head_516A6B20__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject236__head_12CA1390__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject73__head_397FC990__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject77__head_ADAEA100__1</span><br><span class="line">│   └── [   0]  __head_00000000__1</span><br><span class="line">├── [   6]  1.0_TEMP</span><br><span class="line">├── [4.0K]  1.1_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject102__head_862AA4F1__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject129__head_F5965891__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject151__head_98E52B51__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject184__head_E52D8D41__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject1__head_F5F320A1__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject234__head_00E8BB81__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject244__head_2363F6E1__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject25__head_581DDE31__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject32__head_324147A1__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject35__head_34FABC91__1</span><br><span class="line">│   └── [   0]  __head_00000001__1</span><br><span class="line">├── [   6]  1.1_TEMP</span><br><span class="line">├── [4.0K]  1.2_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject104__head_413DA2B2__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject117__head_C0124C02__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject125__head_9DBB0642__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject153__head_37933452__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject167__head_0AE2CE12__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject173__head_821A3292__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject175__head_734C3FB2__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject180__head_74A8D2D2__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject195__head_7A482B82__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject214__head_C62A3262__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject227__head_FBA5E8D2__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject230__head_F81DABF2__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject240__head_96D571D2__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject251__head_8C210072__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject28__head_8D1859C2__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject43__head_9D4243F2__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject4__head_6D94E022__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject53__head_F31A17D2__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject74__head_BA8C88D2__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject93__head_26EE91D2__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject97__head_1025B4F2__1</span><br><span class="line">│   └── [   0]  __head_00000002__1</span><br><span class="line">├── [   6]  1.2_TEMP</span><br><span class="line">├── [4.0K]  1.3_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject114__head_C05EC3E3__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject145__head_BB9B5383__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject187__head_7F2D3B93__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject20__head_FB09C543__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject222__head_CA878AF3__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject223__head_45D47B63__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject249__head_EB2C03F3__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject2__head_E1BEFAD3__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject48__head_C2ABBF03__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject58__head_73A784F3__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject66__head_7D1C7D23__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject68__head_64431003__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject75__head_EFA44023__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject7__head_1EDC2B13__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject83__head_56DE9F23__1</span><br><span class="line">│   └── [   0]  __head_00000003__1</span><br><span class="line">├── [   6]  1.3_TEMP</span><br><span class="line">├── [4.0K]  1.4_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject0__head_F8BC28D4__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject160__head_866C8F94__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject162__head_02475BD4__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject164__head_26707F24__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject16__head_3B6FF704__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject174__head_ECF6CC74__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject18__head_7CB94CE4__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject202__head_503B6AE4__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject237__head_1AF8F074__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject247__head_A70993B4__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject31__head_09DBA9F4__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject36__head_ABBB7824__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject39__head_E1727904__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject3__head_E0FE6334__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject46__head_9E9B4204__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject51__head_8C1E0DC4__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject56__head_7065C2F4__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject62__head_DB32DD24__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject87__head_BDBE9FC4__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject90__head_A1654F74__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject96__head_FC6F33F4__1</span><br><span class="line">│   └── [   0]  __head_00000004__1</span><br><span class="line">├── [   6]  1.4_TEMP</span><br><span class="line">├── [4.0K]  1.5_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject118__head_7B842745__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject123__head_5CEFA465__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject183__head_10F85FE5__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject186__head_3000C235__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject191__head_BC532EE5__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject224__head_92A1E3C5__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject29__head_027ADDC5__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject67__head_5BDDDAA5__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject82__head_A64A01D5__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject8__head_F68FCDE5__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject94__head_ECE61315__1</span><br><span class="line">│   └── [   0]  __head_00000005__1</span><br><span class="line">├── [   6]  1.5_TEMP</span><br><span class="line">├── [4.0K]  1.6_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject121__head_3F39BC76__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject12__head_88A43B86__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject13__head_FD5483D6__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject141__head_CDACF3C6__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject157__head_E56D1786__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject197__head_804A2DC6__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject207__head_A3266F06__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject216__head_DE5D3A76__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject226__head_CAFCCF66__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject44__head_0544C586__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject45__head_65E3FAB6__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject61__head_A2704176__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject72__head_6E3BA9D6__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject80__head_1B1E6F16__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject85__head_A0756156__1</span><br><span class="line">│   └── [   0]  __head_00000006__1</span><br><span class="line">├── [   6]  1.6_TEMP</span><br><span class="line">├── [4.0K]  1.7_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject100__head_EF2E6867__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject139__head_5E961CE7__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject142__head_01BCFCA7__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject143__head_A3CDD177__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject144__head_74883667__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject158__head_F5DD1EA7__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject165__head_031366F7__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject168__head_9BE47967__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject169__head_E96B49F7__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject182__head_7119D257__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject194__head_D3C65A17__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject250__head_E9F80417__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject41__head_9295C277__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject55__head_70B967B7__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject78__head_367C2607__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject89__head_7CDE0FC7__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject98__head_96668A47__1</span><br><span class="line">│   └── [   0]  __head_00000007__1</span><br><span class="line">├── [   6]  1.7_TEMP</span><br><span class="line">├── [4.0K]  1.8_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject116__head_F4318178__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject128__head_32ED4D38__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject134__head_486DF128__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject156__head_F2E7C068__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject190__head_5AAF63A8__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject219__head_50799E88__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject225__head_9EB9D0C8__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject242__head_F2EC42B8__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject33__head_64C2C558__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject34__head_65F25F38__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject38__head_D38CB608__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject49__head_FF4A4208__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject50__head_0F3F77A8__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject52__head_0F2A0548__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject69__head_BDEA5548__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject71__head_EA5383B8__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject76__head_02238F98__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject88__head_45AB4318__1</span><br><span class="line">│   └── [   0]  __head_00000008__1</span><br><span class="line">├── [   6]  1.8_TEMP</span><br><span class="line">├── [4.0K]  1.9_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject110__head_CE2B10A9__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject136__head_04EDA809__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject163__head_37F8AE49__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject177__head_5F771509__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject193__head_23935A99__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject215__head_15DEBEA9__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject21__head_11518C29__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject248__head_FAFE5689__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject27__head_5B7D7369__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject60__head_64B13949__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject70__head_F3A64E09__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject91__head_31511109__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject99__head_8A68E509__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject9__head_FC52C009__1</span><br><span class="line">│   └── [   0]  __head_00000009__1</span><br><span class="line">├── [   6]  1.9_TEMP</span><br><span class="line">├── [4.0K]  1.a_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject112__head_FF4D01DA__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject113__head_CADF065A__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject119__head_A72F161A__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject122__head_BF4A0A6A__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject124__head_5BC12E2A__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject140__head_37A19CDA__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject14__head_64FC3EDA__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject152__head_14C2CA0A__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject166__head_C47A6B0A__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject171__head_79A2CFEA__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject17__head_2A4A393A__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject185__head_1D2DDDDA__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject188__head_7FBA73AA__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject204__head_AB1FBD8A__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject205__head_B24EE76A__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject206__head_9891B01A__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject208__head_C07981EA__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject210__head_1227C4DA__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject228__head_0B9B39AA__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject238__head_C56F1D5A__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject23__head_4F279EBA__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject26__head_CCB3C59A__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject86__head_5ED418EA__1</span><br><span class="line">│   └── [   0]  __head_0000000A__1</span><br><span class="line">├── [   6]  1.a_TEMP</span><br><span class="line">├── [4.0K]  1.b_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject103__head_F8EF0F1B__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject107__head_F3693ABB__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject108__head_13D4D0EB__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject109__head_11C8A99B__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject132__head_227AA5FB__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject137__head_5D82744B__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject148__head_989FE31B__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject159__head_422DA2AB__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject178__head_01C4C3CB__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject181__head_0DC3436B__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject213__head_05B8BA6B__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject246__head_2140121B__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject24__head_5B8169AB__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject64__head_CC62D71B__1</span><br><span class="line">│   └── [   0]  __head_0000000B__1</span><br><span class="line">├── [   6]  1.b_TEMP</span><br><span class="line">├── [4.0K]  1.c_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject101__head_7711D38C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject11__head_0218B38C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject127__head_9A51BCDC__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject133__head_7E6B67EC__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject135__head_C67A3E8C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject150__head_8635CA6C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject161__head_3A42EA3C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject170__head_612CFAFC__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject172__head_EB33BB8C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject196__head_475FC6BC__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject19__head_D21864EC__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject200__head_52F1139C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject201__head_14AC036C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject243__head_3E9C237C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject245__head_DABE713C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject5__head_7CE3E36C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject65__head_86389E8C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject6__head_1FBF833C__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject81__head_05B34FAC__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject92__head_3988A13C__1</span><br><span class="line">│   └── [   0]  __head_0000000C__1</span><br><span class="line">├── [   6]  1.c_TEMP</span><br><span class="line">├── [4.0K]  1.d_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject111__head_66CE6C0D__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject115__head_71F498AD__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject120__head_1BFD990D__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject130__head_301FC3CD__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject232__head_320DC13D__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject37__head_AC68B41D__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject40__head_423D9AAD__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject47__head_0951C33D__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject84__head_5EB447DD__1</span><br><span class="line">│   ├── [  24]  benchmark\\ulast\\umetadata__head_8E7A861D__1</span><br><span class="line">│   └── [   0]  __head_0000000D__1</span><br><span class="line">├── [   6]  1.d_TEMP</span><br><span class="line">├── [4.0K]  1.e_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject105__head_C439984E__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject10__head_1BF35FCE__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject131__head_DBAC810E__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject146__head_6153061E__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject176__head_80C2B02E__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject189__head_4F8A59BE__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject199__head_5ACCE8EE__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject203__head_D77F59BE__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject221__head_C3ADCA4E__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject231__head_0C48675E__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject233__head_F01E13EE__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject30__head_9464F9BE__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject54__head_B1E1B44E__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject59__head_CE84DF4E__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject79__head_CAFFBC0E__1</span><br><span class="line">│   └── [   0]  __head_0000000E__1</span><br><span class="line">├── [   6]  1.e_TEMP</span><br><span class="line">├── [4.0K]  1.f_head</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject106__head_48E9311F__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject147__head_7211B38F__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject155__head_551133AF__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject15__head_58EF207F__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject192__head_9E2A248F__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject198__head_D7D45B1F__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject218__head_F2A93B5F__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject239__head_2FC0444F__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject241__head_286B4E0F__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject42__head_6FF5EA1F__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject57__head_2A0A792F__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject63__head_2685437F__1</span><br><span class="line">│   ├── [4.0M]  benchmark\\udata\\usds-ceph-1.novalocal\\u12560\\uobject95__head_1786F82F__1</span><br><span class="line">│   └── [   0]  __head_0000000F__1</span><br><span class="line">├── [   6]  1.f_TEMP</span><br><span class="line">├── [   4]  commit_op_seq</span><br><span class="line">├── [4.0K]  meta</span><br><span class="line">│   ├── [ 802]  inc\\uosdmap.1__0_B65F4306__none</span><br><span class="line">│   ├── [ 232]  inc\\uosdmap.2__0_B65F40D6__none</span><br><span class="line">│   ├── [ 635]  inc\\uosdmap.3__0_B65F4066__none</span><br><span class="line">│   ├── [ 763]  inc\\uosdmap.4__0_B65F4136__none</span><br><span class="line">│   ├── [ 406]  inc\\uosdmap.5__0_B65F46C6__none</span><br><span class="line">│   ├── [ 454]  inc\\uosdmap.6__0_B65F4796__none</span><br><span class="line">│   ├── [ 212]  inc\\uosdmap.7__0_B65F4726__none</span><br><span class="line">│   ├── [ 204]  inc\\uosdmap.8__0_B65F44F6__none</span><br><span class="line">│   ├── [ 598]  osdmap.1__0_FD6E49B1__none</span><br><span class="line">│   ├── [ 869]  osdmap.2__0_FD6E4941__none</span><br><span class="line">│   ├── [ 960]  osdmap.3__0_FD6E4E11__none</span><br><span class="line">│   ├── [1.1K]  osdmap.4__0_FD6E4FA1__none</span><br><span class="line">│   ├── [1.0K]  osdmap.5__0_FD6E4F71__none</span><br><span class="line">│   ├── [1.3K]  osdmap.6__0_FD6E4C01__none</span><br><span class="line">│   ├── [1.3K]  osdmap.7__0_FD6E4DD1__none</span><br><span class="line">│   ├── [1.3K]  osdmap.8__0_FD6E4D61__none</span><br><span class="line">│   ├── [ 511]  osd\\usuperblock__0_23C2FCDE__none</span><br><span class="line">│   └── [   0]  snapmapper__0_A468EC03__none</span><br><span class="line">├── [   0]  nosnap</span><br><span class="line">└── [ 179]  omap</span><br><span class="line">    ├── [1002]  000007.sst</span><br><span class="line">    ├── [208K]  000009.log</span><br><span class="line">    ├── [  16]  CURRENT</span><br><span class="line">    ├── [  37]  IDENTITY</span><br><span class="line">    ├── [   0]  LOCK</span><br><span class="line">    ├── [ 15K]  LOG</span><br><span class="line">    ├── [ 108]  MANIFEST-000008</span><br><span class="line">    ├── [4.1K]  OPTIONS-000008</span><br><span class="line">    ├── [4.1K]  OPTIONS-000011</span><br><span class="line">    └── [  37]  osd_uuid</span><br><span class="line"></span><br><span class="line">34 directories, 299 files</span><br><span class="line"></span><br><span class="line">[root@sds-ceph-1 ~]# rados ls -p rbd</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object77</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object220</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object179</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object22</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object235</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object149</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object229</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object126</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object73</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object236</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object154</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object138</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object217</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object211</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object212</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object209</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object49</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object38</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object219</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object52</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object69</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object225</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object134</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object190</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object50</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object156</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object88</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object76</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object33</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object128</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object34</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object242</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object71</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object116</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object46</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object39</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object16</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object51</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object87</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object36</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object62</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object164</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object18</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object202</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object160</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object0</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object162</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object3</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object247</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object237</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object174</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object90</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object56</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object31</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object96</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object65</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object135</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object101</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object11</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object172</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object81</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object150</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object201</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object5</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object19</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object133</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object200</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object127</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object161</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object92</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object245</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object6</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object196</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object243</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object170</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object117</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object195</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object125</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object28</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object4</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object214</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object167</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object173</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object153</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object74</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object227</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object180</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object93</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object240</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object53</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object104</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object175</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object251</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object97</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object43</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object230</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object152</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object166</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object204</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object124</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object228</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object188</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object122</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object205</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object86</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object208</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object171</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object206</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object119</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object26</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object113</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object238</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object210</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object140</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object14</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object112</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object185</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object17</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object23</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object207</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object44</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object12</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object157</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object197</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object141</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object226</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object80</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object85</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object72</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object13</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object45</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object121</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object216</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object61</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object79</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object131</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object105</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object54</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object221</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object59</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object10</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object176</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object199</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object233</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object146</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object231</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object189</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object203</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object30</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object234</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object184</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object1</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object32</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object244</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object129</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object35</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object151</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object25</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object102</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object9</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object136</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object70</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object91</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object99</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object177</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object248</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object163</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object60</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object21</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object110</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object215</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object27</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object193</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object118</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object29</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object224</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object67</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object123</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object191</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object8</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object183</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object94</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object82</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object186</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object111</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object120</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object130</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object115</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object40</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object37</span><br><span class="line">benchmark_last_metadata</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object84</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object232</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object47</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object68</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object48</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object145</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object20</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object75</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object66</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object83</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object223</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object114</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object7</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object187</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object2</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object58</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object222</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object249</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object137</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object178</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object159</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object24</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object213</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object181</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object108</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object246</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object148</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object64</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object103</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object109</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object107</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object132</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object78</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object98</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object89</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object142</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object158</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object100</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object144</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object168</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object139</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object250</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object194</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object182</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object55</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object41</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object143</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object165</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object169</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object241</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object192</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object147</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object239</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object95</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object57</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object155</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object42</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object106</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object198</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object218</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object15</span><br><span class="line">benchmark_data_sds-ceph-1.novalocal_12560_object63</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deploy k8s test</title>
      <link href="/2018/11/24/deploy-k8s-test/"/>
      <url>/2018/11/24/deploy-k8s-test/</url>
      
        <content type="html"><![CDATA[<p>部署kubernetes有多种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、不借助任何工具，从基本的CLI操作开始部署k8s集群，可以学习k8s各个组件</span><br><span class="line">https://github.com/kelseyhightower/kubernetes-the-hard-way</span><br><span class="line">2、部署单节点k8s集群，适合快速学习</span><br><span class="line">https://github.com/kubernetes/minikube</span><br><span class="line">3、部署多节点k8s集群</span><br><span class="line">https://github.com/kubernetes/kubeadm</span><br><span class="line">4、在cloud上部署k8s集群</span><br><span class="line">https://github.com/kubernetes/kops</span><br><span class="line">5、coreos的工具，大于十个节点收费，小于等于十个节点免费</span><br><span class="line">https://coreos.com/tectonic/</span><br><span class="line">6、实验环境</span><br><span class="line">https://labs.play-with-k8s.com/</span><br></pre></td></tr></table></figure><h1 id="安装minikube"><a href="#安装minikube" class="headerlink" title="安装minikube"></a>安装minikube</h1><h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">1、安装kubectl，文档https://kubernetes.io/docs/tasks/tools/install-kubectl/</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ brew install kubernetes-cli</span><br><span class="line"></span><br><span class="line">2、安装minikube，文档https://github.com/kubernetes/minikube/releases</span><br><span class="line">0.32.0版本在minikube start时遇到了Starting cluster components失败，在网上查找资料需要降级0.25.2。如果想使用新版本，还是找台虚拟机试一下。</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.25.2/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo cp minikube /usr/local/bin/ &amp;&amp; rm minikube</span><br><span class="line"></span><br><span class="line">如果已经安装了0.32.0版本的minikube，降级方法请看链接：https://coding.m.imooc.com/questiondetail.html?qid=57784</span><br><span class="line"></span><br><span class="line">3、安装virtualbox</span><br><span class="line"></span><br><span class="line">4、启动minikube单节点k8s(https://www.jianshu.com/p/a7620f73c7f3)</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ minikube start </span><br><span class="line">Starting local Kubernetes v1.9.4 cluster...</span><br><span class="line">Starting VM...</span><br><span class="line">Getting VM IP address...</span><br><span class="line">Moving files into cluster...</span><br><span class="line">Setting up certs...</span><br><span class="line">Connecting to cluster...</span><br><span class="line">Setting up kubeconfig...</span><br><span class="line">Starting cluster components...</span><br><span class="line">Kubectl is now configured to use the cluster.</span><br><span class="line">Loading cached images from config file.</span><br><span class="line"></span><br><span class="line">=====================================以下为测试，有坑，不需要执行。</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ rm -rf ~/.minikube/machines/minikube/</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ minikube start</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ minikube start --kubernetes-version v1.8.0 --bootstrapper kubeadm</span><br><span class="line">=====================================以上为测试，有坑，不需要执行。</span><br><span class="line"></span><br><span class="line">minikube start命令创建一个名为“minikube”的“kubectl context”。这个context包含与Minikube群集通信的配置。Minikube会自动将此context设置为默认值，但如果您以后需要切换回它，请运行：kubectl config use-context minikube,或者传递每个命令的context，如下所示：kubectl get pods --context=minikube。可以使用不同的context连接不同的k8s集群。</span><br><span class="line"></span><br><span class="line">查看当前config</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ kubectl config view</span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority: /Users/yujiang/.minikube/ca.crt</span><br><span class="line">    server: https://192.168.99.101:8443</span><br><span class="line">  name: minikube</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: minikube</span><br><span class="line">    user: minikube</span><br><span class="line">  name: minikube</span><br><span class="line">current-context: minikube</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: minikube</span><br><span class="line">  user:</span><br><span class="line">    client-certificate: /Users/yujiang/.minikube/client.crt</span><br><span class="line">    client-key: /Users/yujiang/.minikube/client.key</span><br><span class="line"></span><br><span class="line">查看当前context</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ kubectl config get-contexts</span><br><span class="line">CURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE</span><br><span class="line">*         minikube   minikube   minikube   </span><br><span class="line"></span><br><span class="line">查看当前k8s集群情况</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ kubectl cluster-info</span><br><span class="line">Kubernetes master is running at https://192.168.99.100:8443</span><br><span class="line"></span><br><span class="line">进入minikube虚拟机</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ minikube ssh</span><br><span class="line"></span><br><span class="line">设置代理（ss-ng），否则无法pull docker镜像(https://blog.zhesih.com/2018/06/24/k8s-minikube-setup/)</span><br><span class="line">$ sudo vi /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br><span class="line">$ systemctl show --property=Environment docker</span><br><span class="line">Environment=DOCKER_RAMDISK=yes HTTP_PROXY=http://192.168.199.165:1087 HTTPS_PROXY=https://192.168.199.165:1087</span><br></pre></td></tr></table></figure><h3 id="实验一（kind-Pod）"><a href="#实验一（kind-Pod）" class="headerlink" title="实验一（kind: Pod）"></a>实验一（kind: Pod）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">Pod是k8s调度的最小单位，一个Pod中可以有多个Container</span><br><span class="line">1、创建一个Pod</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ cat pod_nginx.yml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">        name: nginx</span><br><span class="line">        labels:</span><br><span class="line">                app: nginx</span><br><span class="line">spec:</span><br><span class="line">        containers:</span><br><span class="line">        - name: nginx</span><br><span class="line">          image: nginx</span><br><span class="line">          ports:</span><br><span class="line">          - containerPort: 80</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl create -f pod_nginx.yml </span><br><span class="line">pod/nginx created</span><br><span class="line"></span><br><span class="line">2、查看Pod</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get pod --all-namespaces</span><br><span class="line">NAMESPACE     NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">default       nginx                                   1/1     Running   0          20m</span><br><span class="line">kube-system   kube-addon-manager-minikube             1/1     Running   8          60m</span><br><span class="line">kube-system   kube-dns-54cccfbdf8-kr847               3/3     Running   12         57m</span><br><span class="line">kube-system   kubernetes-dashboard-77d8b98585-vq77b   1/1     Running   4          57m</span><br><span class="line">kube-system   storage-provisioner                     1/1     Running   5          57m</span><br><span class="line"></span><br><span class="line">3、查看Pod的详细信息，可以看到Pod运行在哪台机器上</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get pods -o wide</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE   IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx   1/1     Running   0          31m   172.17.0.2   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">4、打开dashboard</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ minikube dashboard</span><br><span class="line"></span><br><span class="line">5、查询nginx IP</span><br><span class="line">$ docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">fb08befd952b        bridge              bridge              local</span><br><span class="line">2de0a434731f        host                host                local</span><br><span class="line">4cd7f4c7083c        none                null                local</span><br><span class="line"></span><br><span class="line">$ docker network inspect bridge</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;fb08befd952b4448e86e491f271a1e6a50056b5a18bdfb8a3e930edde2ac44da&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-12-24T17:23:11.618994916Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;25e63a3ff8a091319fdec698f554f1b47c3e019fbdda9b06709d15630003ee6e&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;k8s_POD_kube-dns-54cccfbdf8-kr847_kube-system_69d32f1a-0799-11e9-be08-080027bea66e_8&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;004b9a81ab36cd4e0aba21572b4736b8d85d5541c3533571a67383e5d07e34b6&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;4138eeb8348781495987d47f6683138515111d2b6afa6fc7352d5f98d4a0858b&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;k8s_POD_kubernetes-dashboard-77d8b98585-vq77b_kube-system_69b46ed4-0799-11e9-be08-080027bea66e_8&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;bb31db755c5a5cd8f36bec35d89c73267d3d283ba8caa691b58ba504b0d6fabc&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:04&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.4/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;6874ee85f9257b5b0dfdf808ebf92df9c3c677079a778980956e4655abf23507&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;k8s_POD_nginx_default_9e0d9ffc-079e-11e9-be08-080027bea66e_0&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;040a5616a76665ff9e35bb6cef2388f8db443b2db94b67282a7496b9803acc20&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class="line">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ curl 172.17.0.2</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">6、指定Pod名，进入Container(默认进入第1个Container)。如果Pod中有多个Container，可以加&quot;-c&quot;参数指定进入哪个Container。</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl exec -it nginx sh</span><br><span class="line"></span><br><span class="line">7、打印nginx Pod的详细信息</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl describe pod nginx</span><br><span class="line"></span><br><span class="line">8、怎样把nginx的端口映射出来？</span><br><span class="line">有两种方法：</span><br><span class="line">(1)port-forward</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl port-forward nginx 8080:80</span><br><span class="line">打开浏览器：http://127.0.0.1:8080/</span><br></pre></td></tr></table></figure><h3 id="实验二（kind-ReplicationController）"><a href="#实验二（kind-ReplicationController）" class="headerlink" title="实验二（kind: ReplicationController）"></a>实验二（kind: ReplicationController）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ cat rc_nginx.yml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController</span><br><span class="line">metadata:</span><br><span class="line">        name: nginx</span><br><span class="line">spec:</span><br><span class="line">        replicas: 3</span><br><span class="line">        selector:</span><br><span class="line">                app: nginx</span><br><span class="line">        template:</span><br><span class="line">                metadata:</span><br><span class="line">                        name: nginx</span><br><span class="line">                        labels:</span><br><span class="line">                                app: nginx</span><br><span class="line">                spec:</span><br><span class="line">                        containers:</span><br><span class="line">                        - name: nginx</span><br><span class="line">                          image: nginx</span><br><span class="line">                          ports:</span><br><span class="line">                          - containerPort: 80</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl create -f rc_nginx.yml </span><br><span class="line">replicationcontroller/nginx created</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get pod </span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-prlfw   1/1     Running   0          19s</span><br><span class="line">nginx-szrh8   1/1     Running   0          19s</span><br><span class="line">nginx-z59kd   1/1     Running   0          19s</span><br><span class="line"></span><br><span class="line"># 修改横向扩展数量</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl scale rc nginx --replicas=2</span><br><span class="line">replicationcontroller/nginx scaled</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get pods</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-szrh8   1/1     Running   1          21h</span><br><span class="line">nginx-z59kd   1/1     Running   1          21h</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get rc</span><br><span class="line">NAME    DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx   2         2         2       21h</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get pods -o wide</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE   IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-szrh8   1/1     Running   1          21h   172.17.0.4   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-z59kd   1/1     Running   1          21h   172.17.0.6   minikube   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="实验三（kind-ReplicaSet）"><a href="#实验三（kind-ReplicaSet）" class="headerlink" title="实验三（kind: ReplicaSet）"></a>实验三（kind: ReplicaSet）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: ReplicaSet</span><br><span class="line">metadata:</span><br><span class="line">        name: nginx</span><br><span class="line">        labels:</span><br><span class="line">                tier: frontend</span><br><span class="line">spec:</span><br><span class="line">        replicas: 3</span><br><span class="line">        selector:</span><br><span class="line">                matchLabels:</span><br><span class="line">                        tier: frontend</span><br><span class="line">        template:</span><br><span class="line">                metadata:</span><br><span class="line">                        name: nginx</span><br><span class="line">                        labels:</span><br><span class="line">                                tier: frontend</span><br><span class="line">                spec:</span><br><span class="line">                        containers:</span><br><span class="line">                        - name: nginx</span><br><span class="line">                          image: nginx</span><br><span class="line">                          ports:</span><br><span class="line">                          - containerPort: 80</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl create -f rs_nginx.yml </span><br><span class="line">replicaset.apps/nginx created</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get rs</span><br><span class="line">NAME    DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx   3         3         3       52s</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get pods</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-brtzk   1/1     Running   0          81s</span><br><span class="line">nginx-m5xgq   1/1     Running   0          81s</span><br><span class="line">nginx-qvdq6   1/1     Running   0          81s</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl scale rs nginx --replicas=2</span><br><span class="line">replicaset.extensions/nginx scaled</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get rs</span><br><span class="line">NAME    DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx   2         2         2       2m32s</span><br></pre></td></tr></table></figure><h3 id="实验四（kind-Deployment）"><a href="#实验四（kind-Deployment）" class="headerlink" title="实验四（kind: Deployment）"></a>实验四（kind: Deployment）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ cat deployment_nginx.yml </span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">        name: nginx-deployment</span><br><span class="line">        labels:</span><br><span class="line">                app: nginx</span><br><span class="line">spec:</span><br><span class="line">        replicas: 3</span><br><span class="line">        selector:</span><br><span class="line">                matchLabels:</span><br><span class="line">                        app: nginx</span><br><span class="line">        template:</span><br><span class="line">                metadata:</span><br><span class="line">                        labels:</span><br><span class="line">                                app: nginx</span><br><span class="line">                spec:</span><br><span class="line">                        containers:</span><br><span class="line">                                - name: nginx</span><br><span class="line">                                  image: nginx:1.12.2</span><br><span class="line">                                  ports:</span><br><span class="line">                                  - containerPort: 80</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl create -f deployment_nginx.yml</span><br><span class="line">deployment.apps/nginx-deployment created</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get deployment</span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   3/3     3            3           5m31s</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get rs</span><br><span class="line">NAME                         DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-9898d9674   3         3         3       6m6s</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get pods</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-9898d9674-2mrdl   1/1     Running   0          6m31s</span><br><span class="line">nginx-deployment-9898d9674-ndblx   1/1     Running   0          6m31s</span><br><span class="line">nginx-deployment-9898d9674-t8ngw   1/1     Running   0          6m31s</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get deployment -o wide</span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES         SELECTOR</span><br><span class="line">nginx-deployment   3/3     3            3           7m31s   nginx        nginx:1.12.2   app=nginx</span><br><span class="line"></span><br><span class="line"># 更新nginx</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl set image deployment nginx-deployment nginx=nginx:1.13</span><br><span class="line">deployment.extensions/nginx-deployment image updated</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get deployment</span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   3/3     3            3           12m</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get deployment -o wide</span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES       SELECTOR</span><br><span class="line">nginx-deployment   3/3     3            3           12m   nginx        nginx:1.13   app=nginx</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get rs</span><br><span class="line">NAME                         DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-9898d9674   0         0         0       13m</span><br><span class="line">nginx-deployment-d8d99448f   3         3         3       3m42s</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get pods</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-d8d99448f-fzfdw   1/1     Running   0          3m59s</span><br><span class="line">nginx-deployment-d8d99448f-l8m8w   1/1     Running   0          72s</span><br><span class="line">nginx-deployment-d8d99448f-pbnml   1/1     Running   0          73s</span><br><span class="line"></span><br><span class="line"># 回滚到上一次更新前</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl rollout history deployment nginx-deployment</span><br><span class="line">deployment.extensions/nginx-deployment </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line">2         &lt;none&gt;</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl rollout undo deployment nginx-deployment</span><br><span class="line">deployment.extensions/nginx-deployment rolled back</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get deployment -o wide</span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR</span><br><span class="line">nginx-deployment   3/3     3            3           15m   nginx        nginx:1.12.2   app=nginx</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl rollout history deployment nginx-deployment</span><br><span class="line">deployment.extensions/nginx-deployment </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">2         &lt;none&gt;</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line"></span><br><span class="line"># 暴露nginx Container端口到宿主机(node节点)</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get node -o wide</span><br><span class="line">NAME       STATUS   ROLES    AGE   VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE            KERNEL-VERSION   CONTAINER-RUNTIME</span><br><span class="line">minikube   Ready    &lt;none&gt;   23h   v1.9.4    192.168.99.100   &lt;none&gt;        Buildroot 2017.11   4.9.64           docker://17.9.0</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl expose deployment nginx-deployment --type=NodePort </span><br><span class="line">service/nginx-deployment exposed</span><br><span class="line">yujiangdeMBP-13:k8s_yaml yujiang$ kubectl get svc</span><br><span class="line">NAME               TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes         ClusterIP   10.96.0.1     &lt;none&gt;        443/TCP        23h</span><br><span class="line">nginx-deployment   NodePort    10.98.51.33   &lt;none&gt;        80:30233/TCP   68s</span><br><span class="line"># 打开浏览器http://192.168.99.100:30233/</span><br></pre></td></tr></table></figure><h3 id="实验五（kubectl自动补全）"><a href="#实验五（kubectl自动补全）" class="headerlink" title="实验五（kubectl自动补全）"></a>实验五（kubectl自动补全）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://kubernetes.io/docs/tasks/tools/install-kubectl/</span><br></pre></td></tr></table></figure><h1 id="kubeadm"><a href="#kubeadm" class="headerlink" title="kubeadm"></a>kubeadm</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"># 1、创建kubernetes虚拟机，并关闭防火墙，关闭SELinux(所有节点执行)</span><br><span class="line">systemctl disable firewalld.service &amp;&amp; systemctl stop firewalld.service</span><br><span class="line">setenforce 0</span><br><span class="line"># 2、</span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">yum install -y https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-selinux-17.03.1.ce-1.el7.centos.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install -y docker-ce-&lt;17.03.1.ce-1.el7.centos&gt; </span><br><span class="line"></span><br><span class="line">systemctl enable docker.service</span><br><span class="line">systemctl start docker.service</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum install -y kubelet-1.11.0-0 kubeadm-1.11.0-0 kubectl-1.11.0-0</span><br><span class="line">systemctl enable kubelet.service</span><br><span class="line">systemctl start kubelet.service</span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/kubelet</span><br><span class="line">KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=cgroupfs --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1&quot;</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet.service</span><br><span class="line"></span><br><span class="line">docker pull quay.io/calico/typha:v0.7.4</span><br><span class="line">docker pull quay.io/calico/node:v3.1.3</span><br><span class="line">docker pull quay.io/calico/cni:v3.1.3</span><br><span class="line"></span><br><span class="line">vi kubeadm-master.config</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.0</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: &lt;10.0.90.217&gt;</span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line">networking:</span><br><span class="line">  podSubnet: &lt;10.211.0.0&gt;/16</span><br><span class="line">  serviceSubnet: &lt;10.96.0.0&gt;/16</span><br><span class="line">kubeProxy:</span><br><span class="line">  config:</span><br><span class="line">    mode: iptables</span><br><span class="line"></span><br><span class="line">kubeadm config images pull --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"># 执行此CLI会输出token，需要保存该token</span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br><span class="line">kubeadm reset</span><br><span class="line">swapoff -a</span><br><span class="line">sudo systemctl status kubelet.service</span><br><span class="line"></span><br><span class="line">kubectl get pod --all-namespaces -o wide</span><br><span class="line"></span><br><span class="line">添加node</span><br><span class="line">kubeadm join 192.168.56.201:6443 --token mzbbw0.5z6zpgauylva58na --discovery-token-ca-cert-hash sha256:932a24f271bd2c14cb41d6698e9781c1fcede848b7b9fe4a0731b9c54f275df2</span><br></pre></td></tr></table></figure><h2 id="Vagrantfile"><a href="#Vagrantfile" class="headerlink" title="Vagrantfile"></a>Vagrantfile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMacBook-Pro-13:docker-k8s yujiang$ cat Vagrantfile </span><br><span class="line"># -*- mode: ruby -*-</span><br><span class="line"># vi: set ft=ruby :</span><br><span class="line"></span><br><span class="line">Vagrant.require_version &quot;&gt;= 1.6.0&quot;</span><br><span class="line">boxes = [</span><br><span class="line">    &#123;</span><br><span class="line">        :name =&gt; &quot;k8s-node-1&quot;,</span><br><span class="line">        :eth1 =&gt; &quot;192.168.56.61&quot;,</span><br><span class="line">        :mem =&gt; &quot;2048&quot;,</span><br><span class="line">        :cpu =&gt; &quot;2&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        :name =&gt; &quot;k8s-node-2&quot;,</span><br><span class="line">        :eth1 =&gt; &quot;192.168.56.62&quot;,</span><br><span class="line">        :mem =&gt; &quot;2048&quot;,</span><br><span class="line">        :cpu =&gt; &quot;2&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Vagrant.configure(2) do |config|</span><br><span class="line">    config.vm.box = &quot;centos/centos7&quot;</span><br><span class="line">    boxes.each do |opts|</span><br><span class="line">        config.vm.define opts[:name] do |config|</span><br><span class="line">            config.vm.hostname = opts[:name]</span><br><span class="line">            config.vm.provider &quot;vmware_fusion&quot; do |v|</span><br><span class="line">                v.vmx[&quot;memsize&quot;] = opts[:mem]</span><br><span class="line">                v.vmx[&quot;numvcpus&quot;] = opts[:cpu]</span><br><span class="line">            end</span><br><span class="line">    </span><br><span class="line">            config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">                v.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, opts[:mem]]</span><br><span class="line">                v.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, opts[:cpu]]</span><br><span class="line">            end</span><br><span class="line">            config.vm.network :private_network, ip:opts[:eth1]</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</span><br><span class="line"># install dependent</span><br><span class="line">systemctl disable firewalld.service &amp;&amp; systemctl stop firewalld.service &amp;&amp; setenforce 0</span><br><span class="line">sed -i &quot;s/\(SELINUX=\).*/\1disabled/g&quot; /etc/selinux/config</span><br><span class="line"># close swapoff</span><br><span class="line"> swapoff -a</span><br><span class="line"></span><br><span class="line"># install docker</span><br><span class="line">cat &lt;&lt;-&apos;EOF&apos; &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">modprobe br_netfilter</span><br><span class="line">sysctl -p /etc/sysctl.d/k8s.conf</span><br><span class="line"></span><br><span class="line">yum install -y ipset ipvsadm</span><br><span class="line">cat &lt;&lt;-&apos;EOF&apos; &gt; /etc/sysconfig/modules/ipvs.modules</span><br><span class="line">\#!/bin/bash</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 &amp;&amp; yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo &amp;&amp; yum makecache &amp;&amp; yum install -y https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-selinux-17.03.1.ce-1.el7.centos.noarch.rpm &amp;&amp; yum install -y docker-ce-17.03.1.ce-1.el7.centos</span><br><span class="line">systemctl enable docker.service &amp;&amp; systemctl start docker.service</span><br><span class="line"></span><br><span class="line"># install k8s</span><br><span class="line">cat &lt;&lt;-&apos;EOF&apos; &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum install -y kubelet-1.11.0-0 kubeadm-1.11.0-0 kubectl-1.11.0-0</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;-&apos;EOF&apos; &gt; /etc/sysconfig/kubelet</span><br><span class="line">KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=cgroupfs --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl enable kubelet.service &amp;&amp; systemctl start kubelet.service</span><br><span class="line"></span><br><span class="line">docker pull quay.io/calico/typha:v0.7.4</span><br><span class="line">docker pull quay.io/calico/node:v3.1.3</span><br><span class="line">docker pull quay.io/calico/cni:v3.1.3</span><br><span class="line"></span><br><span class="line">    SHELL</span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx rtmp</title>
      <link href="/2018/11/13/nginx-rtmp/"/>
      <url>/2018/11/13/nginx-rtmp/</url>
      
        <content type="html"><![CDATA[<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">克隆nginx项目与nginx-rtmp-module</span><br><span class="line"></span><br><span class="line">[root@cephJ ~]# yum install gcc pcre-devel openssl-devel epel-release -y</span><br><span class="line"></span><br><span class="line">[root@cephJ ~]# rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class="line">[root@cephJ ~]# rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br><span class="line">[root@cephJ ~]# yum -y install ffmpeg ffmpeg-devel</span><br><span class="line"></span><br><span class="line">[root@cephJ ~]# cd github/</span><br><span class="line">[root@cephJ github]# git clone https://github.com/nginx/nginx.git</span><br><span class="line">[root@cephJ github]# cd nginx</span><br><span class="line">[root@cephJ github]# git checkout -b myrelease-1.15.6 release-1.15.6</span><br><span class="line"></span><br><span class="line">[root@cephJ github]# git clone https://github.com/arut/nginx-rtmp-module.git</span><br><span class="line">[root@cephJ github]# cd nginx-rtmp-module</span><br><span class="line">[root@cephJ github]# git checkout -b myv1.2.1 v1.2.1</span><br><span class="line"></span><br><span class="line">[root@cephJ ~]# tree github/ -L 1</span><br><span class="line">github/</span><br><span class="line">├── nginx</span><br><span class="line">└── nginx-rtmp-module</span><br><span class="line"></span><br><span class="line">[root@cephJ ~]# cd github/nginx</span><br><span class="line">[root@cephJ nginx]# ./auto/configure --prefix=/usr/bin/ --add-module=../nginx-rtmp-module/ --with-http_ssl_module --with-debug</span><br><span class="line">[root@cephJ nginx]# make -j 8</span><br><span class="line">[root@cephJ nginx]# make install</span><br></pre></td></tr></table></figure><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@cephJ ~]# vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"># 添加如下配置</span><br><span class="line">rtmp &#123;                          # RTMP服务</span><br><span class="line">   server &#123;</span><br><span class="line">       listen 1935;             # 服务端口</span><br><span class="line">       chunk_size 4096;         # 数据传输块的大小</span><br><span class="line">       application vod &#123;</span><br><span class="line">           play /root/videos/;  # 视频文件存放位置</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">启动nginx</span><br><span class="line">[root@cephJ ~]# /usr/local/nginx/sbin/nginx</span><br><span class="line">[root@cephJ ~]# ps -ef | grep nginx</span><br><span class="line">root     20015     1  0 11:24 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nobody   20016 20015  0 11:24 ?        00:00:00 nginx: worker process</span><br><span class="line">root     20019 12686  0 11:24 pts/2    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h3><p>FFmpeg 是一个库和工具的集合，用于处理多媒体，如音频、视频、字幕和相关元数据。（FF指的是Fast Forward ——快速前进）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">相关链接：</span><br><span class="line">【1】https://zh.wikipedia.org/wiki/FFmpeg</span><br><span class="line">【2】https://github.com/FFmpeg/FFmpeg</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generic Block Device Tuning Parameters - read_ahead_kb</title>
      <link href="/2018/10/29/Generic-Block-Device-Tuning-Parameters-read-ahead-kb/"/>
      <url>/2018/10/29/Generic-Block-Device-Tuning-Parameters-read-ahead-kb/</url>
      
        <content type="html"><![CDATA[<ul><li>read_ahead_kb</li></ul><p>定义sequential read operation期间OS可以预读的最大千字节数（kb）。因此，可能需要的信息已存在于kernel page cache中，以便进行下一次sequential read，从而提高read I/O性能。</p><p>Device mappers通常受益于高read_ahead_kb值。每个要mapped的设备128 KB是一个很好的起点，但将read_ahead_kb值增加到4-8 MB可能会提高sequential read大文件应用程序的性能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Generic Block Device Tuning Parameters </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慕课网-使用Beego构建完整web项目</title>
      <link href="/2018/10/28/%E6%85%95%E8%AF%BE%E7%BD%91-%E4%BD%BF%E7%94%A8Beego%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4web%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/10/28/%E6%85%95%E8%AF%BE%E7%BD%91-%E4%BD%BF%E7%94%A8Beego%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4web%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><ul><li>go语言简介</li><li>beego框架介绍</li><li>beego环境搭建</li><li>应用实践 —— 看图猜电影项目</li><li>项目部署与发布</li><li>项目总结</li></ul><h2 id="go简介"><a href="#go简介" class="headerlink" title="go简介"></a>go简介</h2><ul><li>语法简明紧凑<ul><li>语法一致</li><li>噪音少</li></ul></li><li>简洁的并发<ul><li>go在语言级并发抽象</li><li>简洁优雅</li></ul></li><li>执行速度与开发效率兼优<ul><li>编译型语言</li><li>语法简明</li></ul></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="beego安装"><a href="#beego安装" class="headerlink" title="beego安装"></a>beego安装</h3><ul><li>beego的安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:~ yujiang$ go get -u -v github.com/astaxie/beego</span><br></pre></td></tr></table></figure><ul><li>bee工具安装</li></ul><p>bee工具是什么？</p><p>​    一个工具包，为了协助快速开发beego项目而创建的项目。（beego项目创建、热编译、开发测试、部署）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:~ yujiang$ go get -u -v github.com/beego/bee</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:~ yujiang$ bee version</span><br><span class="line">______</span><br><span class="line">| ___ \</span><br><span class="line">| |_/ /  ___   ___</span><br><span class="line">| ___ \ / _ \ / _ \</span><br><span class="line">| |_/ /|  __/|  __/</span><br><span class="line">\____/  \___| \___| v1.10.0</span><br><span class="line"></span><br><span class="line">├── Beego     : 1.10.1</span><br><span class="line">├── GoVersion : go1.10</span><br><span class="line">├── GOOS      : darwin</span><br><span class="line">├── GOARCH    : amd64</span><br><span class="line">├── NumCPU    : 4</span><br><span class="line">├── GOPATH    : /Users/yujiang/go</span><br><span class="line">├── GOROOT    : /usr/local/go</span><br><span class="line">├── Compiler  : gc</span><br><span class="line">└── Date      : Sunday, 28 Oct 2018</span><br></pre></td></tr></table></figure><h2 id="beego框架介绍"><a href="#beego框架介绍" class="headerlink" title="beego框架介绍"></a>beego框架介绍</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>快速开发</p></li><li><p>MVC架构</p></li><li><p>文档齐全，社区活跃</p></li></ul><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E6%85%95%E8%AF%BE%E7%BD%91-%E4%BD%BF%E7%94%A8Beego%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4web%E9%A1%B9%E7%9B%AE/beego-framework.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E6%85%95%E8%AF%BE%E7%BD%91-%E4%BD%BF%E7%94%A8Beego%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4web%E9%A1%B9%E7%9B%AE/beego-cache.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E6%85%95%E8%AF%BE%E7%BD%91-%E4%BD%BF%E7%94%A8Beego%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4web%E9%A1%B9%E7%9B%AE/beego-config.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E6%85%95%E8%AF%BE%E7%BD%91-%E4%BD%BF%E7%94%A8Beego%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4web%E9%A1%B9%E7%9B%AE/beego-context.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E6%85%95%E8%AF%BE%E7%BD%91-%E4%BD%BF%E7%94%A8Beego%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4web%E9%A1%B9%E7%9B%AE/beego-httplibs.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E6%85%95%E8%AF%BE%E7%BD%91-%E4%BD%BF%E7%94%A8Beego%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4web%E9%A1%B9%E7%9B%AE/beego-logs.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E6%85%95%E8%AF%BE%E7%BD%91-%E4%BD%BF%E7%94%A8Beego%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4web%E9%A1%B9%E7%9B%AE/beego-%E5%85%B6%E4%BB%96.png" alt></p><h2 id="bee工具应用"><a href="#bee工具应用" class="headerlink" title="bee工具应用"></a>bee工具应用</h2><ul><li><p>bee new：新建项目结构</p></li><li><p>bee run：自动编译部署</p></li><li><p>bee generate：自动生成代码</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:~ yujiang$ bee new imooc</span><br><span class="line">yujiangdeMBP-13:imooc yujiang$ bee run</span><br><span class="line">浏览器输入 http://localhost:8080/</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:imooc yujiang$ tree</span><br><span class="line">.</span><br><span class="line">├── conf</span><br><span class="line">│   └── app.conf</span><br><span class="line">├── controllers</span><br><span class="line">│   └── default.go</span><br><span class="line">├── main.go</span><br><span class="line">├── models</span><br><span class="line">├── routers</span><br><span class="line">│   └── router.go</span><br><span class="line">├── static</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── img</span><br><span class="line">│   └── js</span><br><span class="line">│       └── reload.min.js</span><br><span class="line">├── tests</span><br><span class="line">│   └── default_test.go</span><br><span class="line">└── views</span><br><span class="line">    └── index.tpl</span><br><span class="line"></span><br><span class="line">10 directories, 7 files</span><br></pre></td></tr></table></figure><h3 id="beego项目运行基本流程"><a href="#beego项目运行基本流程" class="headerlink" title="beego项目运行基本流程"></a>beego项目运行基本流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">文件 - main.go</span><br><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">_ &quot;imooc/routers&quot;// _表示只执行imooc/routers的init()函数</span><br><span class="line">&quot;github.com/astaxie/beego&quot;</span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line">beego.Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">文件 - routers/router.go</span><br><span class="line">package routers</span><br><span class="line">import (</span><br><span class="line">&quot;imooc/controllers&quot;</span><br><span class="line">&quot;github.com/astaxie/beego&quot;</span><br><span class="line">)</span><br><span class="line">func init() &#123;</span><br><span class="line">// </span><br><span class="line">    beego.Router(&quot;/&quot;, &amp;controllers.MainController&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">文件 - controllers/default.go</span><br><span class="line">package controllers</span><br><span class="line">import (</span><br><span class="line">&quot;github.com/astaxie/beego&quot;</span><br><span class="line">)</span><br><span class="line">type MainController struct &#123;</span><br><span class="line">beego.Controller</span><br><span class="line">&#125;</span><br><span class="line">func (c *MainController) Get() &#123;</span><br><span class="line">// 这里就是处理get请求的逻辑</span><br><span class="line">c.Data[&quot;Website&quot;] = &quot;beego.me&quot;// 向模板传递的数据</span><br><span class="line">c.Data[&quot;Email&quot;] = &quot;astaxie@gmail.com&quot;// 向模板传递的数据</span><br><span class="line">c.TplName = &quot;index.tpl&quot;  // 渲染的模板文件</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">beego通过浏览器传递参数的方法：（http://localhost:8080/?name=&quot;yujiang&quot;）</span><br><span class="line">package controllers</span><br><span class="line">import (</span><br><span class="line">&quot;github.com/astaxie/beego&quot;</span><br><span class="line">)</span><br><span class="line">type MainController struct &#123;</span><br><span class="line">beego.Controller</span><br><span class="line">&#125;</span><br><span class="line">func (c *MainController) Get() &#123;</span><br><span class="line">name := c.GetString(&quot;name&quot;)</span><br><span class="line">//c.Data[&quot;Website&quot;] = &quot;beego.me&quot;</span><br><span class="line">c.Data[&quot;Website&quot;] = name</span><br><span class="line">c.Data[&quot;Email&quot;] = &quot;astaxie@gmail.com&quot;</span><br><span class="line">c.TplName = &quot;index.tpl&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="beego如何进行数据交互"><a href="#beego如何进行数据交互" class="headerlink" title="beego如何进行数据交互"></a>beego如何进行数据交互</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install mariadb-server -y</span><br><span class="line">[root@localhost ~]# systemctl start mariadb</span><br><span class="line">[root@localhost ~]# systemctl enable mariadb</span><br><span class="line">[root@localhost ~]# mysql -u root -p</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; create database imooc;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">MariaDB [(none)]&gt; use imooc;</span><br><span class="line">MariaDB [imooc]&gt; CREATE TABLE `user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(128) NOT NULL DEFAULT &apos;&apos;, `gender` tinyint(4) NOT NULL DEFAULT &apos;0&apos;, `age` int(11) NOT NULL DEFAULT &apos;0&apos;, PRIMARY KEY (`id`) )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [imooc]&gt; INSERT INTO user (name,gender,age) values(&apos;zhangsan&apos;,1,21);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">MariaDB [imooc]&gt; INSERT INTO user (name,gender,age) values(&apos;lisi&apos;,0,22);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">MariaDB [imooc]&gt; INSERT INTO user (name,gender,age) values(&apos;wangwu&apos;,1,20);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [imooc]&gt; select * from user;</span><br><span class="line">+----+----------+--------+-----+</span><br><span class="line">| id | name     | gender | age |</span><br><span class="line">+----+----------+--------+-----+</span><br><span class="line">|  1 | zhangsan |      1 |  21 |</span><br><span class="line">|  2 | lisi     |      0 |  22 |</span><br><span class="line">|  3 | wangwu   |      1 |  20 |</span><br><span class="line">+----+----------+--------+-----+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">生成代码</span><br><span class="line">yujiangdeMBP-13:imooc yujiang$ bee generate scaffold user -fields=&quot;id:int64,name:string,gender:int,age:int&quot; -driver=mysql -conn=&quot;root:@tcp(192.168.56.101:3306)/imooc&quot;</span><br><span class="line">______</span><br><span class="line">| ___ \</span><br><span class="line">| |_/ /  ___   ___</span><br><span class="line">| ___ \ / _ \ / _ \</span><br><span class="line">| |_/ /|  __/|  __/</span><br><span class="line">\____/  \___| \___| v1.10.0</span><br><span class="line">2018/10/28 19:30:25 INFO     ▶ 0001 Do you want to create a &apos;user&apos; model? [Yes|No] </span><br><span class="line">Yes</span><br><span class="line">2018/10/28 19:31:34 INFO     ▶ 0002 Using &apos;User&apos; as model name</span><br><span class="line">2018/10/28 19:31:34 INFO     ▶ 0003 Using &apos;models&apos; as package name</span><br><span class="line">create /Users/yujiang/go/src/imooc/models/user.go</span><br><span class="line">2018/10/28 19:31:34 INFO     ▶ 0004 Do you want to create a &apos;user&apos; controller? [Yes|No] </span><br><span class="line">Yes</span><br><span class="line">2018/10/28 19:31:43 INFO     ▶ 0005 Using &apos;User&apos; as controller name</span><br><span class="line">2018/10/28 19:31:43 INFO     ▶ 0006 Using &apos;controllers&apos; as package name</span><br><span class="line">2018/10/28 19:31:43 INFO     ▶ 0007 Using matching model &apos;User&apos;</span><br><span class="line">create /Users/yujiang/go/src/imooc/controllers/user.go</span><br><span class="line">2018/10/28 19:31:43 INFO     ▶ 0008 Do you want to create views for this &apos;user&apos; resource? [Yes|No] </span><br><span class="line">Yes</span><br><span class="line">2018/10/28 19:31:52 INFO     ▶ 0009 Generating view...</span><br><span class="line">create /Users/yujiang/go/src/imooc/views/user/index.tpl</span><br><span class="line">create /Users/yujiang/go/src/imooc/views/user/show.tpl</span><br><span class="line">create /Users/yujiang/go/src/imooc/views/user/create.tpl</span><br><span class="line">create /Users/yujiang/go/src/imooc/views/user/edit.tpl</span><br><span class="line">2018/10/28 19:31:52 INFO     ▶ 0010 Do you want to create a &apos;user&apos; migration and schema for this resource? [Yes|No] </span><br><span class="line">No</span><br><span class="line">2018/10/28 19:32:11 INFO     ▶ 0011 Do you want to migrate the database? [Yes|No] </span><br><span class="line">No</span><br><span class="line">2018/10/28 19:32:13 SUCCESS  ▶ 0012 All done! Don&apos;t forget to add  beego.Router(&quot;/user&quot; ,&amp;controllers.UserController&#123;&#125;) to routers/route.go</span><br><span class="line"></span><br><span class="line">2018/10/28 19:32:13 SUCCESS  ▶ 0013 Scaffold successfully generated!</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:imooc yujiang$ tree</span><br><span class="line">.</span><br><span class="line">├── conf</span><br><span class="line">│   └── app.conf</span><br><span class="line">├── controllers</span><br><span class="line">│   ├── default.go</span><br><span class="line">│   └── user.go</span><br><span class="line">├── imooc</span><br><span class="line">├── main.go</span><br><span class="line">├── models</span><br><span class="line">│   └── user.go</span><br><span class="line">├── routers</span><br><span class="line">│   └── router.go</span><br><span class="line">├── static</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── img</span><br><span class="line">│   └── js</span><br><span class="line">│       └── reload.min.js</span><br><span class="line">├── tests</span><br><span class="line">│   └── default_test.go</span><br><span class="line">└── views</span><br><span class="line">    ├── index.tpl</span><br><span class="line">    └── user</span><br><span class="line">        ├── create.tpl</span><br><span class="line">        ├── edit.tpl</span><br><span class="line">        ├── index.tpl</span><br><span class="line">        └── show.tpl</span><br><span class="line"></span><br><span class="line">11 directories, 14 files</span><br></pre></td></tr></table></figure><p>安装<code>go-sql-driver</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:~ yujiang$ go get -v -u github.com/go-sql-driver/mysql</span><br><span class="line"></span><br><span class="line">文件 - routers/router.go</span><br><span class="line">package routers</span><br><span class="line">import (</span><br><span class="line">&quot;github.com/astaxie/beego&quot;</span><br><span class="line">&quot;imooc/controllers&quot;</span><br><span class="line">)</span><br><span class="line">func init() &#123;</span><br><span class="line">//beego.Router(&quot;/&quot;, &amp;controllers.MainController&#123;&#125;)</span><br><span class="line">beego.Include(&amp;controllers.UserController&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">文件 - main.go</span><br><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">_ &quot;imooc/routers&quot;</span><br><span class="line">&quot;github.com/astaxie/beego&quot;</span><br><span class="line">&quot;github.com/astaxie/beego/orm&quot;</span><br><span class="line">_ &quot;github.com/go-sql-driver/mysql&quot;</span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line">orm.RegisterDataBase(&quot;default&quot;,&quot;mysql&quot;,&quot;root:root@tcp(192.168.56.101:3306)/imooc&quot;)</span><br><span class="line">beego.Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:imooc yujiang$ bee run</span><br><span class="line">______</span><br><span class="line">| ___ \</span><br><span class="line">| |_/ /  ___   ___</span><br><span class="line">| ___ \ / _ \ / _ \</span><br><span class="line">| |_/ /|  __/|  __/</span><br><span class="line">\____/  \___| \___| v1.10.0</span><br><span class="line">2018/10/28 20:31:44 INFO     ▶ 0001 Using &apos;imooc&apos; as &apos;appname&apos;</span><br><span class="line">2018/10/28 20:31:44 INFO     ▶ 0002 Initializing watcher...</span><br><span class="line">imooc</span><br><span class="line">2018/10/28 20:31:46 SUCCESS  ▶ 0003 Built Successfully!</span><br><span class="line">2018/10/28 20:31:46 INFO     ▶ 0004 Restarting &apos;imooc&apos;...</span><br><span class="line">2018/10/28 20:31:46 SUCCESS  ▶ 0005 &apos;./imooc&apos; is running...</span><br><span class="line">2018/10/28 20:31:46.697 [I] [router.go:269]  /Users/yujiang/go/src/imooc/controllers no changed</span><br><span class="line">2018/10/28 20:31:46.719 [I] [asm_amd64.s:2361]  http server Running on http://:8080</span><br><span class="line">2018/10/28 20:31:55.475 [D] [server.go:2694]  |            ::1| 200 |   3.979416ms|   match| GET      /     r:/</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E6%85%95%E8%AF%BE%E7%BD%91-%E4%BD%BF%E7%94%A8Beego%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4web%E9%A1%B9%E7%9B%AE/beego-database.png" alt></p><h2 id="应用实践"><a href="#应用实践" class="headerlink" title="应用实践"></a>应用实践</h2><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E6%85%95%E8%AF%BE%E7%BD%91-%E4%BD%BF%E7%94%A8Beego%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4web%E9%A1%B9%E7%9B%AE/beego-project-1.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E6%85%95%E8%AF%BE%E7%BD%91-%E4%BD%BF%E7%94%A8Beego%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4web%E9%A1%B9%E7%9B%AE/beego-project-2.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Ceph Benchmarking Tool</title>
      <link href="/2018/10/16/The-Ceph-Benchmarking-Tool/"/>
      <url>/2018/10/16/The-Ceph-Benchmarking-Tool/</url>
      
        <content type="html"><![CDATA[<h1 id="CBT-The-Ceph-Benchmarking-Tool"><a href="#CBT-The-Ceph-Benchmarking-Tool" class="headerlink" title="CBT - The Ceph Benchmarking Tool"></a>CBT - The Ceph Benchmarking Tool</h1><h2 id="INTRODUCTION（介绍）"><a href="#INTRODUCTION（介绍）" class="headerlink" title="INTRODUCTION（介绍）"></a>INTRODUCTION（介绍）</h2><p>CBT是一个用python编写的测试工具，可以自动执行并测试Ceph集群性能相关的任务。CBT不安装Ceph软件包，这应该在使用CBT之前完成。CBT可以在测试运行开始时创建 OSDs，也可以在测试运行期间重新创建OSD，或者只针对现有集群运行。CBT使用collectl记录系统指标，它可以选择使用perf，blktrace和valgrind在内的多种工具收集更多信息。除基本基准测试外，CBT还可以进行高级测试，包括自动OSD中断，erasure coded pools和cache tier配置。主要基准模块解释如下。</p><h3 id="radosbench"><a href="#radosbench" class="headerlink" title="radosbench"></a>radosbench</h3><p>RADOS基准测试使用ceph-common软件包附带的rados二进制文件。它包含一个基准测试工具，它通过librados来运行集群，librados是Ceph提供的底层object storage API。目前，RADOS基准模块为每个client创建一个pool。</p><h3 id="librbdfio"><a href="#librbdfio" class="headerlink" title="librbdfio"></a>librbdfio</h3><p>librbdfio基准模块是测试Ceph集群的块存储性能的最简单方法。最新版本的flexible IO tester (fio)提供了RBD引擎。这允许fio通过用户态librbd库测试RBD volumes的块存储性能，而无需配置KVM/QEMU。这些库与QEMU后端使用的库相同，因此它很近似于KVM/QEMU性能。</p><h3 id="kvmrbdfio"><a href="#kvmrbdfio" class="headerlink" title="kvmrbdfio"></a>kvmrbdfio</h3><p>kvmrbdfio基准测试使用flexible IO tester (fio) 来运行已attache到KVM instance的RBD volume。它要求在使用CBT之前创建instance，并attache RBD volumes。此模块用于对通过Cinder创建的RBD并attache到OpenStack instance进行基准测试。或者，可以使用Vagrant或Virtual Machine Manager来提供instance。</p><h3 id="rbdfio"><a href="#rbdfio" class="headerlink" title="rbdfio"></a>rbdfio</h3><p>rbdfio基准测试使用flexible IO tester (fio) 来执行使用KRBD内核驱动映射到块设备的RBD volume。此模块最适用于模拟需要直接使用块设备的应用程序，而不是在虚拟机内运行。</p><h2 id="PREREQUISITES（必备条件）"><a href="#PREREQUISITES（必备条件）" class="headerlink" title="PREREQUISITES（必备条件）"></a>PREREQUISITES（必备条件）</h2><p>CBT使用多个库和工具来运行：</p><ol><li>python-yaml - 用于读取配置文件的python的YAML库。</li><li>python-lxml - 功能强大的Pythonic XML处理库，将libxml2/libxslt与ElementTree API相结合</li><li>ssh (and scp) - 远程安全命令执行和数据传输</li><li>pdsh (and pdcp) - 并行ssh和scp实现</li><li>ceph - 可扩展的分布式存储系统</li></ol><p>请注意，目前没有为基于RHEL7和CentOS 7发行版的pdsh。这些RPM包可在此处获得：</p><ul><li><a href="ftp://rpmfind.net/linux/fedora/linux/releases/23/Everything/x86_64/os/Packages/p/pdsh-2.31-4.fc23.x86_64.rpm" target="_blank" rel="noopener">ftp://rpmfind.net/linux/fedora/linux/releases/23/Everything/x86_64/os/Packages/p/pdsh-2.31-4.fc23.x86_64.rpm</a></li><li><a href="ftp://rpmfind.net/linux/fedora/linux/releases/23/Everything/x86_64/os/Packages/p/pdsh-rcmd-rsh-2.31-4.fc23.x86_64.rpm" target="_blank" rel="noopener">ftp://rpmfind.net/linux/fedora/linux/releases/23/Everything/x86_64/os/Packages/p/pdsh-rcmd-rsh-2.31-4.fc23.x86_64.rpm</a></li><li><a href="ftp://rpmfind.net/linux/fedora/linux/releases/23/Everything/x86_64/os/Packages/p/pdsh-rcmd-ssh-2.31-4.fc23.x86_64.rpm" target="_blank" rel="noopener">ftp://rpmfind.net/linux/fedora/linux/releases/23/Everything/x86_64/os/Packages/p/pdsh-rcmd-ssh-2.31-4.fc23.x86_64.rpm</a></li></ul><p>如果需要，可以使用可选工具和基准：</p><ol><li>collectl - 系统数据收集</li><li>blktrace - 块设备IO跟踪</li><li>seekwatcher - 通过blktrace数据创建图表</li><li>perf - 系统和进程分析</li><li>valgrind - 特定进程的runtime memory和cpu分析</li><li>fio - 基准suite，集成了posix，libaio和librbd的支持</li><li>cosbench - Intel的对象存储基准</li></ol><h2 id="USER-AND-NODE-SETUP（用户和节点设置）"><a href="#USER-AND-NODE-SETUP（用户和节点设置）" class="headerlink" title="USER AND NODE SETUP（用户和节点设置）"></a>USER AND NODE SETUP（用户和节点设置）</h2><p>除上述软件外，还必须有许多节点才能运行测试。这些节点可以划分为多个类别。多个类别可以包含相同的host，如果它承担多个角色（例如，运行OSD和mon）。</p><ol><li>head - 运行常规ceph命令的节点</li><li>clients - 运行基准测试或其他客户端工具的节点</li><li>osds - OSD存在的节点</li><li>rgws - rgw servers节点</li><li>mons - mons节点</li></ol><p>还可以指定用户运行所有远程命令。用于运行cbt的主机必须能够以指定用户身份发出无密码ssh命令。这可以通过创建无密码ssh密钥来完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t dsa</span><br></pre></td></tr></table></figure><p>并将<del>/.ssh中生成的公钥复制到所有远程主机上的</del>/.ssh/authorized_key文件中。</p><p>此用户还必须能够使用sudo运行某些命令。实现此目的的最简单方法是为该用户简单地启用全局无密码sudo访问，但这仅适用于实验室环境。这可以通过运行visudo并添加如下内容来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># passwordless sudo for cbt</span><br><span class="line">&lt;user&gt;    ALL=(ALL)       NOPASSWD:ALL</span><br></pre></td></tr></table></figure><p>其中<code>&lt;user&gt;</code>是将具有密码sudo访问权限的用户。</p><p>有关具体细节，请参阅操作系统文档。</p><p>除了上述内容之外，还需要将所有osds和mons添加到ssh的已知主机列表中（/etc/hosts文件）才能正常执行。 否则，基准测试将无法运行。</p><p>请注意，如果sudoers文件需要tty，则pdsh命令可能会有困难。如果是这种情况，推荐在visudo中添加<code>Defaults requiretty</code>行。</p><h2 id="DISK-PARTITIONING（磁盘分区）"><a href="#DISK-PARTITIONING（磁盘分区）" class="headerlink" title="DISK PARTITIONING（磁盘分区）"></a>DISK PARTITIONING（磁盘分区）</h2><p>目前，CBT为Ceph OSD data和journal分区在/dev/disk/by-partlabel中寻找指定分区labels。在未来的某个时刻，这将变得更加灵活，因为现在这是预期的行为。每个OSD主机分区应该用下面的gpt labels指定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">osd-device-&lt;num&gt;-data</span><br><span class="line">osd-device-&lt;num&gt;-journal</span><br></pre></td></tr></table></figure><p>其<code>&lt;num&gt;</code>是从0开始并以系统上最后一个设备结束的device序列。目前，cbt假设系统中的所有节点具有相同数量的device。有一个脚本可以显示我们在测试环境中如何创建分区labels的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/ceph/cbt/blob/master/tools/mkpartmagna.sh</span><br></pre></td></tr></table></figure><h2 id="CREATING-A-YAML-FILE（创建一个YAML文件）"><a href="#CREATING-A-YAML-FILE（创建一个YAML文件）" class="headerlink" title="CREATING A YAML FILE（创建一个YAML文件）"></a>CREATING A YAML FILE（创建一个YAML文件）</h2><p>CBT yaml文件具有一个基本结构，您可以在其中定义一个cluster和一组针对它运行的基准测试。例如, 下面的 yaml 文件在具有主机名  “burnupiX “ 的节点上创建单节点群集。使用256个PG为1x replication pool定义pool的配置文件，并且该pool用于使用带有librbd引擎的fio运行RBD性能测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">cluster:</span><br><span class="line">  user: &apos;nhm&apos;</span><br><span class="line">  head: &quot;burnupiX&quot;</span><br><span class="line">  clients: [&quot;burnupiX&quot;]</span><br><span class="line">  osds: [&quot;burnupiX&quot;]</span><br><span class="line">  mons:</span><br><span class="line">    burnupiX:</span><br><span class="line">      a: &quot;127.0.0.1:6789&quot;</span><br><span class="line">  osds_per_node: 1</span><br><span class="line">  fs: &apos;xfs&apos;</span><br><span class="line">  mkfs_opts: &apos;-f -i size=2048&apos;</span><br><span class="line">  mount_opts: &apos;-o inode64,noatime,logbsize=256k&apos;</span><br><span class="line">  conf_file: &apos;/home/nhm/src/ceph-tools/cbt/newstore/ceph.conf.1osd&apos;</span><br><span class="line">  iterations: 1</span><br><span class="line">  use_existing: False</span><br><span class="line">  clusterid: &quot;ceph&quot;</span><br><span class="line">  tmp_dir: &quot;/tmp/cbt&quot;</span><br><span class="line">  pool_profiles:</span><br><span class="line">    rbd:</span><br><span class="line">      pg_size: 256</span><br><span class="line">      pgp_size: 256</span><br><span class="line">      replication: 1</span><br><span class="line">benchmarks:</span><br><span class="line">  librbdfio:</span><br><span class="line">    time: 300</span><br><span class="line">    vol_size: 16384</span><br><span class="line">    mode: [read, write, randread, randwrite]</span><br><span class="line">    op_size: [4194304, 2097152, 1048576]</span><br><span class="line">    concurrent_procs: [1]</span><br><span class="line">    iodepth: [64]</span><br><span class="line">    osd_ra: [4096]</span><br><span class="line">    cmd_path: &apos;/home/nhm/src/fio/fio&apos;</span><br><span class="line">    pool_profile: &apos;rbd&apos;</span><br></pre></td></tr></table></figure><p>还定义了一个关联的ceph.conf.1osd文件，其中包含要在此测试中使用的各种设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">        osd pool default size = 1</span><br><span class="line">        auth cluster required = none</span><br><span class="line">        auth service required = none</span><br><span class="line">        auth client required = none</span><br><span class="line">        keyring = /tmp/cbt/ceph/keyring</span><br><span class="line">        osd pg bits = 8  </span><br><span class="line">        osd pgp bits = 8</span><br><span class="line">        log to syslog = false</span><br><span class="line">        log file = /tmp/cbt/ceph/log/$name.log</span><br><span class="line">        public network = 192.168.10.0/24</span><br><span class="line">        cluster network = 192.168.10.0/24</span><br><span class="line">        rbd cache = true</span><br><span class="line">        osd scrub load threshold = 0.01</span><br><span class="line">        osd scrub min interval = 137438953472</span><br><span class="line">        osd scrub max interval = 137438953472</span><br><span class="line">        osd deep scrub interval = 137438953472</span><br><span class="line">        osd max scrubs = 16</span><br><span class="line">        filestore merge threshold = 40</span><br><span class="line">        filestore split multiple = 8</span><br><span class="line">        osd op threads = 8</span><br><span class="line">        mon pg warn max object skew = 100000</span><br><span class="line">        mon pg warn min per osd = 0</span><br><span class="line">        mon pg warn max per osd = 32768</span><br><span class="line"></span><br><span class="line">[mon]</span><br><span class="line">        mon data = /tmp/cbt/ceph/mon.$id</span><br><span class="line">        </span><br><span class="line">[mon.a]</span><br><span class="line">        host = burnupiX </span><br><span class="line">        mon addr = 127.0.0.1:6789</span><br><span class="line"></span><br><span class="line">[osd.0]</span><br><span class="line">        host = burnupiX</span><br><span class="line">        osd data = /tmp/cbt/mnt/osd-device-0-data</span><br><span class="line">        osd journal = /dev/disk/by-partlabel/osd-device-0-journal</span><br></pre></td></tr></table></figure><p>要运行此基准测试suite，cbt启动时带参数来指定用于存储结果archive目录和要使用的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cbt.py --archive=&lt;archive dir&gt; ./mytests.yaml</span><br></pre></td></tr></table></figure><p>您还可以通过在命令行上指定ceph.conf文件来指定要使用的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cbt.py -archive=&lt;archive dir&gt; --conf=./ceph.conf.1osd ./mytests.yaml</span><br></pre></td></tr></table></figure><p>通过这种方式，可以混合或匹配ceph.conf文件和yaml测试文件，以创建测试的参数化扫描。tools目录中名为mkcephconf.py的脚本可以自动生成数百或数千个ceph.conf文件（需要自定义选项范围），然后以这种方式与cbt一起使用。</p><h2 id="CONCLUSION（结论）"><a href="#CONCLUSION（结论）" class="headerlink" title="CONCLUSION（结论）"></a>CONCLUSION（结论）</h2><p>还有许多其他功能强大的方法可以使用，本文档中尚未涵盖所有cbt的功能。随着时间的推移，我们将尝试为这些功能提供更好的示例和文档。现在，最好查看示例，查看代码，并提出问题！</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>该实验没有使用nhm账户，以下实验都是root用户，所以ssh互信需要把nhm改为root</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">cbt节点</span><br><span class="line">1、安装pdsh</span><br><span class="line">[root@cbt ~]# yum -y install epel-release</span><br><span class="line">[root@cbt ~]# yum install -y pdsh</span><br><span class="line">与ceph节点做免密</span><br><span class="line">[root@cbt ~]# ssh-keygen</span><br><span class="line">[root@cbt cbt]# ssh-copy-id nhm@192.168.0.45</span><br><span class="line">测试</span><br><span class="line">[root@cbt ~]# pdsh -w 192.168.0.45 -l nhm uptime</span><br><span class="line">192.168.0.45:  14:28:43 up 32 min,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line">2、安装piip</span><br><span class="line">[root@cbt ~]# curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;</span><br><span class="line">[root@cbt ~]# python get-pip.py</span><br><span class="line">[root@cbt ~]# python -m pip install -U pip</span><br><span class="line">[root@cbt ~]# pip install --upgrade setuptools</span><br><span class="line">3、安装python依赖库</span><br><span class="line">[root@cbt cbt]# pip install lxml numpy PyYAML</span><br><span class="line">4、配置/etc/hosts文件</span><br><span class="line">[root@cbt cbt]# cat /etc/hosts</span><br><span class="line">192.168.0.45    cbt-ceph-1</span><br><span class="line">192.168.0.46    cbt-ceph-2</span><br><span class="line">192.168.0.47    cbt-ceph-3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ceph节点</span><br><span class="line">[root@cbt-ceph-1 ~]# yum -y install epel-release</span><br><span class="line">[root@cbt-ceph-1 ~]# yum -y install collectl perf blktrace</span><br><span class="line">[root@cbt-ceph-1 ~]# useradd -m nhm -g root -G root</span><br><span class="line">[root@cbt-ceph-1 ~]# echo nhm:nhm | chpasswd</span><br><span class="line">[root@cbt-ceph-1 ~]# vi /etc/sudoers</span><br><span class="line">添加</span><br><span class="line">nhm   ALL=(ALL)         NOPASSWD: ALL</span><br><span class="line"></span><br><span class="line">[root@cbt-ceph-1 ~]# yum -y install epel-release</span><br><span class="line">[root@cbt-ceph-1 ~]# yum install -y pdsh</span><br><span class="line">[root@cbt-ceph-1 ~]# yum install -y fio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cbt单节点radosbench配置文件</span><br><span class="line">[root@cbt ~]# cat /root/mytests.yaml</span><br><span class="line">cluster:</span><br><span class="line">  user: &apos;root&apos;</span><br><span class="line">  head: &quot;cbt-ceph-1&quot;</span><br><span class="line">  clients: [&quot;cbt-ceph-1&quot;]</span><br><span class="line">  osds: [&quot;cbt-ceph-1&quot;]</span><br><span class="line">  mons: [&quot;cbt-ceph-1&quot;]</span><br><span class="line">  osds_per_node: 1</span><br><span class="line">  fs: &apos;xfs&apos;</span><br><span class="line">  mkfs_opts: &apos;-f -i size=2048&apos;</span><br><span class="line">  mount_opts: &apos;-o inode64,noatime,logbsize=256k&apos;</span><br><span class="line">  conf_file: &apos;/etc/ceph/ceph.conf&apos;</span><br><span class="line">  iterations: 1</span><br><span class="line">  use_existing: True</span><br><span class="line">  version_compat: jewel</span><br><span class="line">  clusterid: &quot;ceph&quot;</span><br><span class="line">  tmp_dir: &quot;/tmp/cbt&quot;</span><br><span class="line">  pool_profiles:</span><br><span class="line">    rbd:</span><br><span class="line">      pg_size: 256</span><br><span class="line">      pgp_size: 256</span><br><span class="line">      replication: 1</span><br><span class="line">benchmarks:</span><br><span class="line">  radosbench:</span><br><span class="line">    op_size: [ 4194304, 524288, 4096 ]</span><br><span class="line">    write_only: False</span><br><span class="line">    time: 5</span><br><span class="line">    concurrent_ops: [ 128 ]</span><br><span class="line">    concurrent_procs: 1</span><br><span class="line">    use_existing: True</span><br><span class="line">    pool_profile: replicated</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cbt单节点librbdfio配置文件</span><br><span class="line">[root@cbt cbt]# cat /root/mytests.yaml</span><br><span class="line">cluster:</span><br><span class="line">  user: &apos;root&apos;</span><br><span class="line">  head: &quot;cbt-ceph-1&quot;</span><br><span class="line">  clients: [&quot;cbt-ceph-1&quot;]</span><br><span class="line">  osds: [&quot;cbt-ceph-1&quot;]</span><br><span class="line">  mons: [&quot;cbt-ceph-1&quot;]</span><br><span class="line">  osds_per_node: 1</span><br><span class="line">  fs: &apos;xfs&apos;</span><br><span class="line">  mkfs_opts: &apos;-f -i size=2048&apos;</span><br><span class="line">  mount_opts: &apos;-o inode64,noatime,logbsize=256k&apos;</span><br><span class="line">  conf_file: &apos;/etc/ceph/ceph.conf&apos;</span><br><span class="line">  iterations: 1</span><br><span class="line">  use_existing: True</span><br><span class="line">  version_compat: jewel</span><br><span class="line">  clusterid: &quot;ceph&quot;</span><br><span class="line">  tmp_dir: &quot;/tmp/cbt&quot;</span><br><span class="line">  pool_profiles:</span><br><span class="line">    rbd:</span><br><span class="line">      pg_size: 256</span><br><span class="line">      pgp_size: 256</span><br><span class="line">      replication: 1</span><br><span class="line">benchmarks:</span><br><span class="line">  librbdfio:</span><br><span class="line">    time: 300</span><br><span class="line">    vol_size: 16384</span><br><span class="line">    mode: [read, write, randread, randwrite]</span><br><span class="line">    op_size: [4194304, 2097152, 1048576]</span><br><span class="line">    concurrent_procs: [1]</span><br><span class="line">    iodepth: [64]</span><br><span class="line">    osd_ra: [4096]</span><br><span class="line">    pool_profile: &apos;rbd&apos;</span><br><span class="line">    </span><br><span class="line">运行cbt</span><br><span class="line">[root@cbt cbt]# python cbt.py --archive=yujiangresult   /root/mytests.yaml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> performance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>disk_perf_test_tool 项目</title>
      <link href="/2018/10/13/disk-perf-test-tool-%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/10/13/disk-perf-test-tool-%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>Ukraine/Kharkiv（乌克兰/哈尔科夫）</p><p><a href="https://github.com/Mirantis/disk_perf_test_tool" target="_blank" rel="noopener">https://github.com/Mirantis/disk_perf_test_tool</a></p><p><a href="https://github.com/Mirantis/disk_perf_test_tool/wiki" target="_blank" rel="noopener">https://github.com/Mirantis/disk_perf_test_tool/wiki</a></p><p><a href="http://koder-ua.github.io/" target="_blank" rel="noopener">http://koder-ua.github.io/</a></p><h2 id="Overview（概览）"><a href="#Overview（概览）" class="headerlink" title="Overview（概览）"></a>Overview（概览）</h2><p>Wally是一种以分布式方式测量不同类型block storages性能的工具，并提供全面的报告。它在分布式和云环境中运行, 但也可以测量单个磁盘。</p><p>Wally在控制的方式中投入了大量精力, 从统计的角度正确的处理结果, 提供你可以依靠、争论和理解的数字。</p><p>Wally不是负载生成工具。它使用众所周知的负载发生器 - [fio]来测试系统并为其提供包装, 这有助于discovering cluster features and settings，install sensors，为测试preparing system，并行运行多个测试节点的复杂test suites并可视化结果。</p><p>主要特点：</p><ul><li>Cluster and storage preparation，获得尽可能多的可重复结果</li><li>与[openstack]，[ceph]和[fuel]集成</li><li>分布式执行测试</li><li>与[fio]紧密结合</li><li>VM产卵在OS测试</li><li>Sensors subsystem，用于在测试期间收集群集设备上的负载</li><li>简单而灵活的配置文件，允许指定集群结构并选择在加载期间收集信息</li><li>综合可视化报告</li><li>资源消耗报告，允许查看用于向客户端提供服务的群集资源量</li><li>瓶颈分析器，有助于找到影响结果的部件</li><li>yaml/cvs基于所有结果的存储，因此您可以轻松地将它们插入到结果处理管道中</li><li>wally可以在故障阶段失败时重新启动测试</li></ul><p>wally不能做什么：</p><ul><li>Deploy/configure storage - 测试系统必须准备好进行测试</li><li>在测试执行期间更新报告。沃利是完全 cli 工具, 没有 UI, 报告在测试完成后生成</li><li>提供交互式报告。所有图/表都是用 matplotlib 并静态生成的。</li></ul><h2 id="Basic-architecture-overview（基本架构概述）"><a href="#Basic-architecture-overview（基本架构概述）" class="headerlink" title="Basic architecture overview（基本架构概述）"></a>Basic architecture overview（基本架构概述）</h2><p>Wally代码主要由3部分组成 - [agent library]，[cephlib] 和 [wally] 本身。Agent library负责提供与群集和测试节点的 [RPC] 连接。Cephlib 包含大部分storage、discovery、sensors、数据处理和可视化代码。Wally本身提供 cli, 负载工具集成, 报告生成和其他部分。</p><p>fio是一个主要的负载工具，很好的集成在wally内。 wally有自己的fio版本，为一些Linux发行版构建。wally也可以使用系统fio，但需要安装最新版本之一。fio配置文件位于wally/suits/io目录中，具有cfg扩展名。default_qd.cfg是具有默认设置的文件，它主要包含所有其他配置。ceph.cfg，hdd.cfg，cinder_iscsi.cfg是一个主要的测试suites。cfg文件是一个fio配置文件，由wally提供了一些额外的功能。测试之前，wally在所选的cfg文件中插入提供的设置，展开cycles，将其拆分为jobs并从测试节点逐个同步执行jobs。</p><p>虽然fio提供了一些这样的功能，但是wally不会使用它们来更精确地控制结果。</p><p>要运行测试需要一个配置文件，其中包含cluster信息，sensors设置，test config和一些其他变量来控制测试执行和处理结果。配置文件的示例位于configs-examples目录中。该目录中的所有配置文件都includes default.yaml，反过来default.yaml中includes logging.yaml。在大多数情况下，您无需更改default.yaml/logging.yaml文件中的任何内容。配置文件详细描述如下。</p><p>wally执行由各个阶段组成, 大多数阶段都映射配置文件模块。主要阶段有:</p><ul><li>群集发现</li><li>通过ssh连接节点</li><li>使用rpc服务器检测节点</li><li>安装sensors和相应的配置文件</li><li>运行测试</li><li>生成报告</li><li>清理</li></ul><h2 id="Wally-motivation（Wally动机）"><a href="#Wally-motivation（Wally动机）" class="headerlink" title="Wally motivation（Wally动机）"></a>Wally motivation（Wally动机）</h2><p>主要测试问题和wally如何为您修复</p><h2 id="Howto-install-wally"><a href="#Howto-install-wally" class="headerlink" title="Howto install wally"></a>Howto install wally</h2><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Mirantis/disk_perf_test_tool.git</span><br><span class="line">docker build -t &lt;username&gt;/wally .</span><br></pre></td></tr></table></figure><h3 id="Local-installation"><a href="#Local-installation" class="headerlink" title="Local installation"></a>Local installation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install g++ ....</span><br><span class="line">pip install XXX python -m wally prepare &lt;&lt; download fio, compile</span><br><span class="line">可根据Dockerfile查看安装过程</span><br></pre></td></tr></table></figure><h2 id="Howto-run-a-test"><a href="#Howto-run-a-test" class="headerlink" title="Howto run a test"></a>Howto run a test</h2><p>要运行测试，您需要准备集群和配置文件。<br>如何运行wally：直接使用容器</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><ul><li><code>SSHURI</code> - 格式为 <code>[user[:passwd]@]host[:port][:key_file]</code>的字符串，其中：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">user - str，用户名，默认为当前用户</span><br><span class="line">passwd - str，ssh密码，如果提供了key_file_rr或使用了默认密钥，则可以省略ssh密码</span><br><span class="line">host - str，唯一必填字段。主机名或IP地址</span><br><span class="line">port - int，要连接的ssh服务器端口，默认为22</span><br><span class="line">key_file - str, ssh私有密钥文件（private）的路径。默认~/.ssh/id_rsa by default. 如果端口被省略, 但提供了key_file - 它必须与host分开两列。</span><br><span class="line"></span><br><span class="line">不能同时使用passwd和key_file。</span><br><span class="line">例如：</span><br><span class="line">11.12.23.10:37 - 使用ip 和 ssh 端口, 当前用户和 ~/.ssh/id_rsa key</span><br><span class="line">ceph-1 - 仅使用主机名，默认端口，当前用户和 ~/.ssh/id_rsa key</span><br><span class="line">ceph-12::~/.ssh/keyfile - 使用当前用户和 ~/.ssh/keyfile key</span><br><span class="line">root@master - 以root身份登录并使用 ~/.ssh/id_rsa key</span><br><span class="line">root@127.0.0.1:44 - 以root身份登录，使用44端口 和 ~/.ssh/id_rsa key</span><br><span class="line">user@10.20.20.30::/tmp/keyfile - 以root身份登录 和 /tmp/keyfile key</span><br><span class="line">root:rootpassword@10.20.30.40 - 以root身份登录并使用rootpassword作为ssh密码</span><br></pre></td></tr></table></figure><ul><li><p><code>[XXX]</code> - XXX类型列表</p></li><li><p><code>{XXX: YYY}</code> - 从类型XXX（键key）映射到类型YYY（值value）</p></li><li><p><code>SIZE</code> - 带有K/M/G/T/P或不带的整数。请注意，使用1024 base，10M实际上意味着10MiB == 10485760 Bytes，依此类推。</p></li></ul><h2 id="Default-settings（默认设置）"><a href="#Default-settings（默认设置）" class="headerlink" title="Default settings（默认设置）"></a>Default settings（默认设置）</h2><p>许多配置设置在config-examples/default.yaml文件中已经有可用的默认值，在大多数情况下，用户可以重复使用它们。在你自己的配置文件中，include它：</p><p><code>include: default.yaml</code></p><p>您可以在配置文件中覆盖选定的设置。</p><h2 id="Plain-settings（普通设置）"><a href="#Plain-settings（普通设置）" class="headerlink" title="Plain settings（普通设置）"></a>Plain settings（普通设置）</h2><ul><li><code>discover</code>: [str]</li></ul><p>列表中可能的值：<code>ceph</code>，<code>openstack</code>，<code>fuel</code>，<code>ignore_errors</code>。例：<code>discover: openstack,ceph</code></p><p>为wally提供要发现的集群列表。群集发现用于查找群集节点及其角色，以简化设置配置和其他一些步骤。您始终可以在显式部分中定义或重新定义节点角色。每个群集都需要其他配置部分。ignore_errors意味着忽略丢失的集群。</p><ul><li><code>run_sensors</code>: bool</li></ul><p>设置为true，允许wally在测试期间收集负载信息。 这大大增加了结果大小，但允许wally提供更复杂的报告。</p><ul><li><code>results_storage</code>: str</li></ul><p>要放置结果的默认目录。 对于每个测试，wally将在此目录中生成唯一名称并创建子目录，所有结果和设置将存储其中。 wally必须有rwx权限来访问此目录。</p><p>例如: <code>results_storage: /var/wally</code></p><ul><li><code>sleep</code>: int，默认为零</li></ul><p>告诉wally在X秒内什么都不做。 如果您只需要收集sensors，则非常有用。</p><p>例如：<code>sleep: 60</code></p><h2 id="Section-ceph"><a href="#Section-ceph" class="headerlink" title="Section ceph"></a>Section ceph</h2><p>提供发现ceph集群节点的设置</p><ul><li><code>root_node</code>: str</li></ul><p>必须。 根节点的ssh url。 这可以是任何具有ceph client key的节点（任何节点，您可以在其中运行ceph cli命令）。</p><ul><li><code>cluster</code>: str</li></ul><p>Ceph集群名称。 默认情况下是ceph。</p><ul><li><code>conf</code>: str</li></ul><p>群集配置文件的路径。默认情况下是/etc/ceph/{cluster_name}.conf。</p><ul><li><code>key</code>: str</li></ul><p>client.admin密钥文件的路径。默认情况下是/etc/ceph/{cluster_name}.client.admin.keyring。</p><ul><li><code>ip_remap</code>: {IP: IP}</li></ul><p>如果OSD和Monitor节点在 ceph 中通过内部 ip 地址注册，这在您运行wally的节点是不可见。这允许将non-routable的IP地址映射到可routable的IP地址。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip_remap:</span><br><span class="line">    10.8.0.4: 172.16.164.71</span><br><span class="line">    10.8.0.3: 172.16.164.72</span><br><span class="line">    10.8.0.2: 172.16.164.73</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ceph:</span><br><span class="line">    root_node: ceph-client</span><br><span class="line">    cluster: ceph    # &lt;&lt; optional</span><br><span class="line">    ip_remap:        # &lt;&lt; optional</span><br><span class="line">        10.8.0.4: 172.16.164.71</span><br><span class="line">        10.8.0.3: 172.16.164.72</span><br><span class="line">        10.8.0.2: 172.16.164.73</span><br></pre></td></tr></table></figure><h2 id="Section-openstack"><a href="#Section-openstack" class="headerlink" title="Section openstack"></a>Section openstack</h2><p>提供openstack设置，用于发现OS群集和spawn/find测试vm。</p><ul><li><code>skip_preparation</code>: bool</li></ul><p>默认值：true，wally需要准备openstack来生成虚拟机。 如果先前已准备好OS群集，则可以将此设置设置为false以节省一些检查时间。</p><ul><li><code>openrc</code>: 或 str ir {str: str}</li></ul><p>指定源[openstack connection settings]。</p><p><code>openrc: ENV</code> - 从环境变量中获取OS credentials。你需要在wally开始之前导出openrc设置，就像这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ source openrc</span><br><span class="line">$ RUN_WALLY</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ env OS_USER=.. OS_PROJECT=..  RUN_WALLY</span><br></pre></td></tr></table></figure><p><code>openrc: str</code> - 使用openrc文件，位于提供的路径以获取OS connection settings。例如：openrc: /tmp/my_cluster_openrc</p><p><code>openrc: {str: str}</code> - 直接在配置文件中提供connection settings。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">openrc:</span><br><span class="line">    OS_USERNAME: USER</span><br><span class="line">    OS_PASSWORD: PASSWD</span><br><span class="line">    OS_TENANT_NAME: KEY_FILE</span><br><span class="line">    OS_AUTH_URL: URL</span><br></pre></td></tr></table></figure><ul><li><p><code>insecure</code>: bool - 在openrc section中提供，覆盖OS_INSECURE设置。</p></li><li><p><code>vms</code>: [SSHURI] vm sshuri的列表，除了使用hostname/ip vm 名称前缀之外。wally将找到所有具有此前缀名称的vm，并将其用作测试节点。例如：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vms:</span><br><span class="line">    - wally@wally_vm</span><br><span class="line">    - root:rootpasswd@test_vm</span><br></pre></td></tr></table></figure><p>这将找到所有名为wally_vm*和test_vm的vm，并尝试使用提供的credentials重用它们进行测试。请注意，默认情况下，vm wally使用openstack ssh key，而不是~/.ssh/id_rsa。有关详细信息，请参阅Openstack vm config部分。</p><ul><li>VM spawning选项。此选项控制要为测试生成的新vm的数量以及要使用的配置文件。所有衍生的vm将自动获得testnode角色并将用于测试。wally尝试使用anti-affinity组在所有计算节点上均匀地生成vm。</li></ul><p><code>count</code>: str 或 int. 控制生成多少个vm，可能的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">=X，其中X是int - 根据需要产生尽可能多的vm，以使总测试节点计数不小于X。例如 - 如果你已经有1个明确的测试节点，通过节点提供，并且在之前的测试运行中找到了2个vm并且你设置了count: =4，那么wally将产生一个额外的vm。</span><br><span class="line"></span><br><span class="line">X，其中X是integer整数。 正好生成X新vm。</span><br><span class="line"></span><br><span class="line">xX，其中X是integer整数。 每个compute产生X个vm。例如：copunt: x3 - 每个compute产生3个vm。</span><br></pre></td></tr></table></figure><p><code>cfg_name</code>: str，vm config。默认情况下，只有wally_1024配置可用。此配置使用来自<code>https://cloud-images.ubuntu.com/trusty/current/trusty-server-cloudimg-amd64-disk1.img</code>的image作为vm镜像，1GiB的RAM，2个vCPU和100GiB卷。 有关详细信息，请参阅Openstack vm config。</p><p><code>network_zone_name</code>: str。 内部ip v4的Network pool。 通常是net04</p><p><code>flt_ip_pool</code>: str。 用于浮动ip v4的Network pool。 通常是net04_ext</p><p><code>skip_preparation</code>: bool，默认为false。默认情况下，在spawn vm之前，wally检查所有必需的先决条件，如vm flavor，image，aa-groups，ssh rules是否准备好并创建遗漏的东西。这告诉wally跳过这个阶段。如果你确定openstack准备好了，你可以设置它在这个阶段节省一些时间，但最好还是保留它以防止问题。</p><h2 id="Section-nodes"><a href="#Section-nodes" class="headerlink" title="Section nodes"></a>Section nodes</h2><p>此section定义要执行的测试suites列表。 每个section都是从suite类型到suite配置的映射。 查看下面不同suites的详细信息。</p><h3 id="fio-suite-config"><a href="#fio-suite-config" class="headerlink" title="fio suite config"></a>fio suite config</h3><ul><li><code>load</code>: str - 必须的选项，负载profile的名称。</li></ul><p>默认下一个profiles可用：</p><p><code>ceph</code> - 适用于各种ceph支持的块设备<br><code>hdd</code> - 本地hdd驱动器<br><code>cinder_iscsi</code> - cinder lvm-over-iscsi卷<br><code>check_distribution</code> - 检查IOPS/latency的分布</p><p>有关详细信息，请参阅fio task files section。</p><ul><li><code>params</code>: {str: Any} - 负载profile的参数列表。子参数：</li></ul><p><code>FILENAME</code>: str，所有profiles都需要。它将用作fio的测试文件。如果测试文件名在不同的测试节点上不同，则需要在开始测试之前在所有测试节点上创建具有相同名称的（sym）链接，并在此处使用链接名称。</p><p><code>FILESIZE</code>: SIZE，文件大小参数。虽然在大多数情况下wally可以正确检测device/file大小，但您不需要测试整个文件。此外，如果文件尚不存在，则需要此参数。</p><p>Non-standard负载可能需要一些其他参数，有关详细信息，请参阅fio task files section。</p><ul><li><p><code>use_system_fio</code>: bool，默认为false。告诉wally使用测试节点本地fio二进制文件，而不是wally附带的。如果wally没有为你发行指定版本的fio，你可能需要这个。默认情况下，最好使用wally的fio。有关详细信息，请参阅HOWTO/Supply fio for you distribution。</p></li><li><p><code>use_sudo</code>: bool，默认为false。Wally将使用sudo在测试节点上运行fio。 通常，如果本地测试节点用户不是root用户，则需要。</p></li><li><p><code>force_prefill</code>: bool，默认为false。在测试之前，告诉wally无条件地用伪随机数据填充测试file/device。默认情况下，首先检查目标是否已包含随机数据并跳过填充步骤。在这一步中，wally填充整个device，因此可能需要很长时间。</p></li><li><p><code>skip_prefill</code>: bool，默认为false。强制wally不用伪随机数据填充目标。如果您正在测试本地hdd/ssd/cinder iscsi，请使用此选项。但是，如果测试ceph backed device或任何具有延迟空间分配的系统设备则不要使用。</p></li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- fio:</span><br><span class="line">    load: ceph</span><br><span class="line">    params:</span><br><span class="line">        FILENAME: /dev/vdb</span><br><span class="line">        FILESIZE: 100G</span><br></pre></td></tr></table></figure><h3 id="Key-test-profile-str"><a href="#Key-test-profile-str" class="headerlink" title="Key test_profile: str"></a>Key test_profile: str</h3><p>此section允许使用一些预定义的设置集来生成VM和运行测试。config-examples/default.yaml文件中列出了可用的profiles及其设置。下一个profiles默认可用：</p><ul><li><code>openstack_ceph</code> - 每个compute产生1个VM，并针对/dev/vdb运行ceph fio profile </li><li><code>openstack_cinder</code> - 每个compute产生1个VM，并针对/dev/vdb运行ceph_iscsi_vdb fio profile</li><li><code>openstack_nova</code> - 每个compute产生1个VM，并针对/opt/test.bin运行hdd fio profile</li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">include: default.yaml</span><br><span class="line">discover: openstack,ceph</span><br><span class="line">run_sensors: true</span><br><span class="line">results_storage: /var/wally_results</span><br><span class="line"></span><br><span class="line">ceph:</span><br><span class="line">    root_node: localhost</span><br><span class="line"></span><br><span class="line">openstack:</span><br><span class="line">    openrc: ENV  # take creds from environment variable</span><br><span class="line"></span><br><span class="line">test_profile: openstack_ceph</span><br></pre></td></tr></table></figure><h2 id="Howto-test"><a href="#Howto-test" class="headerlink" title="Howto test"></a>Howto test</h2><h3 id="Local-block-device"><a href="#Local-block-device" class="headerlink" title="Local block device"></a>Local block device</h3><p>使用config-examples/local_block_device.yml作为模板。将{STORAGE_FOLDER}替换为存放结果的文件夹的路径。确保wally具有对此文件夹的read/write访问权限，或者可以创建它。您可以直接测试device，也可以测试已mount device上的文件。将{STORAGE_DEV_OR_FILE_NAME}替换为正确的路径。在大多数情况下，wally可以正确检测file或block device大小，但通常最好直接设置{STORAGE_OR_FILE_SIZE}。使用的文件越大，对结果的影响越小，将导致不同的缓存，但也会填充更长的时间。</p><p>测试sdb device的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">include: default.yaml</span><br><span class="line">run_sensors: false</span><br><span class="line">results_storage: /var/wally</span><br><span class="line"></span><br><span class="line">nodes:</span><br><span class="line">    localhost: testnode</span><br><span class="line"></span><br><span class="line">tests:</span><br><span class="line">  - fio:</span><br><span class="line">      load: hdd</span><br><span class="line">      params:</span><br><span class="line">          FILENAME: /dev/sdb</span><br><span class="line">          FILESIZE: 100G</span><br></pre></td></tr></table></figure><p>mount到/opt文件夹的device测试示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">include: default.yaml</span><br><span class="line">run_sensors: false</span><br><span class="line">results_storage: /var/wally</span><br><span class="line"></span><br><span class="line">nodes:</span><br><span class="line">    localhost: testnode</span><br><span class="line"></span><br><span class="line">tests:</span><br><span class="line">  - fio:</span><br><span class="line">      load: hdd</span><br><span class="line">      params:</span><br><span class="line">          FILENAME: /opt/some_test_file.bin</span><br><span class="line">          FILESIZE: 100G</span><br></pre></td></tr></table></figure><p>请注意，测试完成后，wally不会删除文件。</p><h3 id="Ceph-without-openstack-or-other-NAS-SAN"><a href="#Ceph-without-openstack-or-other-NAS-SAN" class="headerlink" title="Ceph without openstack, or other NAS/SAN"></a>Ceph without openstack, or other NAS/SAN</h3><p>wally仅支持rbd/cephfs测试，不支持object协议，例如rados和RGW。Cephfs测试不需要任何特殊准备，除了将其mounte在测试节点上，详情请参阅ceph fs quick start。</p><p>Ceph线性read/write通常受网络限制。例如，如果您在群集中使用10个SATA drives作为storage drives，则聚合线性读取速度可达到~1Gibps或8Gibps，这接近10Gib网络限制。因此，除非你有一个足够带宽的网络测试节点，否则通常最好在多个测试节点并行测试ceph集群。</p><p>Ceph在低QD时通常性能较低，因为在这种模式下，您一次只能使用一个OSD。与此同时，ceph可以扩展到比hdd/ssd drives大得多的QD值，因为在这种情况下，您可以在所有OSD daemons中扩展IO请求。您需要最多(16 * OSD_count) QD用于4k随机读取和大约(12 * OSD_COUNT / REPLICATION_FACTOR)QD用于4k随机写入以摸清群集限制。对于其他blocks块和modes模式，您可能需要不同的设置。如果您使用默认的ceph配置文件，则无需关心此操作。</p><p>有三种测试RBD的方法 - direct，通过使用[krbd]和虚拟机将其mount到节点，由rbd driver提供的volume，内置到qemu。对于最后一个，参考Ceph with openstack section或文档。</p><h3 id="Using-testnode-mounted-rbd-device"><a href="#Using-testnode-mounted-rbd-device" class="headerlink" title="Using testnode mounted rbd device"></a>Using testnode mounted rbd device</h3><p>首先您需要一个pool作为rbd的target。您可以使用默认rbd pool，也可以创建自己的pool。pool需要有很多PG才能有很好的表现。保守估计是(100 * OSD_COUNT / REPLICATION_FACTOR)。创建后ceph可能会警告“too many PG”，这个消息可以安全地被忽略。ceph文档：PLACEMENT GROUPS。</p><ul><li>创建一个pool（有关详细信息，请参阅ceph pools documentation）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ceph osd pool create &#123;pool-name&#125; &#123;pg-num&#125;</span><br></pre></td></tr></table></figure><ul><li><p>等到创建完成，所有PG变为active+clean。</p></li><li><p>在此pool中创建rbd volume，需要选择足够大的volume size以缓解不可避免的OSD节点FS caches。通常(SUM_RAM_SIZE_ON_ALL_OSD * 3)运行良好，并且在读取时仅产生约20％的缓存命中：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rbd create &#123;vol-name&#125; --size &#123;size&#125; --pool &#123;pool-name&#125;</span><br></pre></td></tr></table></figure><ul><li>通过kernel rbd device挂载rbd。这是一个棘手的部分。Kernels通常具有旧版本的rbd driver，并且不支持最新的rbd features。这将导致在mount rbd期间出错。首先尝试挂载rbd device：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rbd map &#123;vol-name&#125; --pool &#123;pool-name&#125;</span><br></pre></td></tr></table></figure><p>如果失败 - 您需要运行rbd info –pool {pool-name} {vol-name}，并通过rbd feature disable –pool {pool-name} {vol-name} {feature name}禁用features。然后尝试再次mount。</p><ul><li>wally需要对rbd device进行read/write访问。</li></ul><h3 id="Direct-rbd-testing"><a href="#Direct-rbd-testing" class="headerlink" title="Direct rbd testing"></a>Direct rbd testing</h3><p>Direct rbd测试通过rbd driver运行，内置在fio中。使用此driver，fio可以直接生成RBD请求，无需外部rbd driver。这是测试RBD的最快和最可靠的方法，但是使用内部rbd driver您可以绕过一些可以在生产环境中使用的代码层。wally附带的fio版本没有rbd support，因为它不能被静态地构建。要使用它，您需要使用rbd support构建fio，请参阅Use you fio binary部分的学习指南。</p><h3 id="Ceph-with-openstack"><a href="#Ceph-with-openstack" class="headerlink" title="Ceph with openstack"></a>Ceph with openstack</h3><p>最简单的方法是使用预定义的openstack_ceph profile。它为每个计算节点生成一个VM，并在所有计算节点上运行ceph测试suite。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">include: default.yaml</span><br><span class="line">discover: openstack,ceph</span><br><span class="line">run_sensors: true</span><br><span class="line">results_storage: /var/wally_results</span><br><span class="line"></span><br><span class="line">ceph:</span><br><span class="line">    root_node: localhost</span><br><span class="line"></span><br><span class="line">openstack:</span><br><span class="line">    openrc: ENV  # take creds from environment variable</span><br><span class="line"></span><br><span class="line">test_profile: openstack_ceph</span><br></pre></td></tr></table></figure><h3 id="Cinder-lvm-volumes"><a href="#Cinder-lvm-volumes" class="headerlink" title="Cinder lvm volumes"></a>Cinder lvm volumes</h3><p>none</p><h2 id="Howto"><a href="#Howto" class="headerlink" title="Howto"></a>Howto</h2><ul><li>Use you fio binary</li></ul><p>您需要下载fio源代码，在测试节点上编译它以进行linux distribution，使用bz2进行压缩，命名为<code>fio_{DISTRNAME}_{ARCH}.bz2</code>并放入<code>fio_binaries</code>目录。ARCH是目标系统上<code>arch</code>命令的输出。<code>DISTRNAME</code>应与<code>lsb_release -c -s</code>输出相同。</p><p>以下是从master编译最新文件的典型步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git clone </span><br><span class="line">$ cd fio</span><br><span class="line">$ ./configure --build-static </span><br><span class="line">$ make -jXXX  # Replace XXX with you CPU core count to decrease compilation time</span><br><span class="line">$ bzip2 fio</span><br><span class="line">$ mv fio.bz2 WALLY_FOLDER/fio_binaries/fio_DISTRO_ARCH.bz2</span><br></pre></td></tr></table></figure><h2 id="Storage-structure"><a href="#Storage-structure" class="headerlink" title="Storage structure"></a>Storage structure</h2><p>wally保存所有输入configurations，所有收集的数据和测试结果保存到results_storage设置目录的单个子文件夹下。所有文件都是csv(results/sensor files)，yaml/js用于配置non-numeric信息，png/svg用于images和联结原始文本文件，如日志和一些输出。</p><p>以下是每个文件包含的内容：</p><ul><li><p>cli - txt，wally cli in semi-raw formal</p></li><li><p>config.yaml - yaml，完整的最终config，从原始的wally config构建，处理所有替换和cli参数传递。</p></li><li><p>log - txt，wally执行日志。包含某个测试的所有wally运行log，包括restarts和报告生成。</p></li><li><p>result_code - yaml，此文件夹上带有’test’子命令的最后一次执行的退出代码。</p></li><li><p>run_interval - yaml，此文件夹上带有’test’子命令的最后一次执行的[begin_time, end_time]列表。</p></li><li><p>meta - folder，用于统计计算的cached值。</p></li><li><p>nodes - folder，有关测试集群的信息。</p><pre><code>all.yml - yaml，除节点参数外的所有节点的信息nodes/parameters.js - js，节点参数。参数是单独存储的，因为它们可能是非常多的ceph节点，并且在python中解析的js文件比yaml快得多。</code></pre></li><li><p>report - folder，html/css文件报告和所有图表。可以复制到其他地方。</p><pre><code>index.html - 报告开始页面。main.css - css文件报告。XXX/YYY.png or .svg - 图表文件报告。</code></pre></li><li><p>results - 所有fio结果的文件夹</p><pre><code>fio_{SUITE_NAME}_{IDX1}.yml - yaml，每个已执行suite的完整配置。fio_{SUITE_NAME}_{IDX1}.{JOB_SHORT_DESCR}_{IDX2} - 包含suite中每个job所有数据的文件夹       {NODE_IP}:{NODE_SSH_PORT}.fio.{TS}.(csv|json) - fio输出文件。TS是解析时间序列（timeseries）名称 - bw或lat或stdout用于输出。</code></pre></li></ul><p>​              info.yml - 社区的原作者没有写完</p>]]></content>
      
      
      
        <tags>
            
            <tag> performance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang笔记一接口</title>
      <link href="/2018/09/22/golang%E7%AC%94%E8%AE%B0%E4%B8%80%E6%8E%A5%E5%8F%A3/"/>
      <url>/2018/09/22/golang%E7%AC%94%E8%AE%B0%E4%B8%80%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>靠继承和多态能完成的事情，在go语言中是通过接口来完成的。</p><h2 id="duck-typing"><a href="#duck-typing" class="headerlink" title="duck typing"></a>duck typing</h2><p>大黄鸭是鸭子吗？</p><ul><li>传统类型系统：脊索动物门，脊椎动物门，鸟纲雁形目… …</li><li>duck typing：是鸭子。</li></ul><h3 id="duck-typing-1"><a href="#duck-typing-1" class="headerlink" title="duck typing"></a>duck typing</h3><ul><li>像鸭子走路，像鸭子叫（长得像鸭子），那么就是鸭子</li><li>描述事物的外部行为而非内部结构</li><li>严格说go属于结构化类型系统，类似duck typing</li></ul><p>python中的duck typing</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def download(retriever):</span><br><span class="line">return retriever.get(&quot;www.imooc.com&quot;)</span><br><span class="line"></span><br><span class="line">- 运行时才知道传入的retriever有没有get</span><br><span class="line">- 需要注释来说明接口</span><br></pre></td></tr></table></figure><p>c++中的duck typing</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class R&gt;</span><br><span class="line">string download(const R&amp; retriever) &#123;</span><br><span class="line">    return retriever.get(&quot;www.imooc.com&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- 编译时才知道传入的retriever有没有get</span><br><span class="line">- 需要注释来说明接口</span><br></pre></td></tr></table></figure><p>java中的类似代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;R extends Retriever&gt;</span><br><span class="line">String download(R r) &#123;</span><br><span class="line">    return r.get(&quot;www.imooc.com&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- 传入的参数必须实现Retriever接口</span><br><span class="line">- 不是duck typing</span><br></pre></td></tr></table></figure><p>go语言的duck typing</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">同时需要Readable，Appendable怎么办？(java有个apache polygene)</span><br><span class="line">同时具有python，c++的duck typing的灵活性</span><br><span class="line">又具有java的类型检查</span><br></pre></td></tr></table></figure><p>接口的定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 使用者                实现者</span><br><span class="line">download     --&gt;     retriever</span><br><span class="line"></span><br><span class="line">go语言的接口由使用者定义(和传统的面向对象思维不同，传统面向对象是实现者告诉大家我实现了某个接口，然后你们可以通过这个接口来用我)</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMacBook-Pro-13:GolangGrammar yujiang$ tree retrieve/</span><br><span class="line">retrieve/</span><br><span class="line">├── main.go</span><br><span class="line">├── mock</span><br><span class="line">│   └── mockretiever.go</span><br><span class="line">└── real</span><br><span class="line">    └── retriever.go</span><br><span class="line"></span><br><span class="line">2 directories, 3 files</span><br><span class="line"></span><br><span class="line">文件main.go</span><br><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/lnsyyj/GolangGrammar/retrieve/mock&quot;</span><br><span class="line">&quot;github.com/lnsyyj/GolangGrammar/retrieve/real&quot;</span><br><span class="line">)</span><br><span class="line">type Retriever interface &#123;</span><br><span class="line">Get(url string) string</span><br><span class="line">&#125;</span><br><span class="line">func download(r Retriever) string &#123;</span><br><span class="line">return r.Get(&quot;http://www.imooc.com&quot;)</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">var r Retriever</span><br><span class="line">r = mock.Retriever&#123;&quot;This is a fack imooc.com&quot;&#125;</span><br><span class="line">fmt.Println(download(r))</span><br><span class="line">r = real.Retriever&#123;&#125;</span><br><span class="line">fmt.Println(download(r))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">文件retriever.go</span><br><span class="line">package real</span><br><span class="line">import (</span><br><span class="line">&quot;time&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;net/http/httputil&quot;</span><br><span class="line">)</span><br><span class="line">type Retriever struct &#123;</span><br><span class="line">UserAgent string</span><br><span class="line">TimeOut time.Duration</span><br><span class="line">&#125;</span><br><span class="line">func (r Retriever) Get(url string) string &#123;</span><br><span class="line">resp, err := http.Get(url)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">result, err := httputil.DumpResponse(resp, true)</span><br><span class="line">resp.Body.Close()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">return string(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">文件mockretiever.go</span><br><span class="line">package mock</span><br><span class="line">type Retriever struct &#123;</span><br><span class="line">Contents string</span><br><span class="line">&#125;</span><br><span class="line">func (r Retriever) Get(url string) string &#123;</span><br><span class="line">return r.Contents</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===================================output===================================</span><br><span class="line">This is a fack imooc.com</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Age: 9</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Date: Wed, 10 Oct 2018 14:38:23 GMT</span><br><span class="line">Server: nginx</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Via: 1.1 varnish (Varnish/6.0)</span><br><span class="line">X-Cache: HIT from CS42</span><br><span class="line">X-Varnish: 280162519 281222076</span><br><span class="line">...</span><br><span class="line">...body省略</span><br><span class="line">...</span><br><span class="line">===================================output===================================</span><br><span class="line"></span><br><span class="line">看看interface里面有什么？</span><br><span class="line">func main() &#123;</span><br><span class="line">var r Retriever</span><br><span class="line">r = mock.Retriever&#123;&quot;This is a fack imooc.com&quot;&#125;</span><br><span class="line">fmt.Printf(&quot;%T %v\n&quot;, r, r)</span><br><span class="line">//fmt.Println(download(r))</span><br><span class="line">r = real.Retriever&#123;&#125;</span><br><span class="line">fmt.Printf(&quot;%T %v\n&quot;, r, r)</span><br><span class="line">//fmt.Println(download(r))</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">mock.Retriever &#123;This is a fack imooc.com&#125;</span><br><span class="line">real.Retriever &#123; 0s&#125;</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang笔记一面向对象</title>
      <link href="/2018/09/13/golang%E7%AC%94%E8%AE%B0%E4%B8%80%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/09/13/golang%E7%AC%94%E8%AE%B0%E4%B8%80%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<ul><li><p>go语言仅支持封装，不支持继承和多态</p></li><li><p>go语言没有class，只有struct</p></li></ul><h2 id="结构的创建"><a href="#结构的创建" class="headerlink" title="结构的创建"></a>结构的创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">type treeNode struct &#123;</span><br><span class="line">value int</span><br><span class="line">left, right *treeNode</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">var tree treeNode</span><br><span class="line">fmt.Println(tree)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">&#123;0 &lt;nil&gt; &lt;nil&gt;&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">type treeNode struct &#123;</span><br><span class="line">value int</span><br><span class="line">left, right *treeNode</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">var root treeNode</span><br><span class="line"></span><br><span class="line">root = treeNode&#123;value: 3&#125;</span><br><span class="line">root.left = &amp;treeNode&#123;&#125;</span><br><span class="line">root.right = &amp;treeNode&#123;5, nil, nil&#125;</span><br><span class="line">root.right.left = new(treeNode)</span><br><span class="line"></span><br><span class="line">nodes := []treeNode &#123;</span><br><span class="line">&#123;value: 3&#125;,</span><br><span class="line">&#123;&#125;,</span><br><span class="line">&#123;6, nil, &amp;root&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(nodes)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">[&#123;3 &lt;nil&gt; &lt;nil&gt;&#125; &#123;0 &lt;nil&gt; &lt;nil&gt;&#125; &#123;6 &lt;nil&gt; 0xc420098020&#125;]</span><br><span class="line">===================================output===================================</span><br><span class="line">不论地址还是结构本身，一律使用.来访问成员</span><br></pre></td></tr></table></figure><p>go语言没有构造函数，但是可以自己创建工厂函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">type treeNode struct &#123;</span><br><span class="line">value int</span><br><span class="line">left, right *treeNode</span><br><span class="line">&#125;</span><br><span class="line">func createNode(value int) *treeNode &#123;</span><br><span class="line">// 相当于在函数里建了一个局部变量，返回的地址是局部变量的地址，如果在c++中是典型的错误，在go语言中局部变量地址也是可以给别人用的</span><br><span class="line">// 这个局部变量是创建在堆上还是栈上？go语言不需要知道，有垃圾回收器</span><br><span class="line">return &amp;treeNode&#123;value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">var root treeNode</span><br><span class="line"></span><br><span class="line">root = treeNode&#123;value: 3&#125;</span><br><span class="line">root.left = &amp;treeNode&#123;&#125;</span><br><span class="line">root.right = &amp;treeNode&#123;5, nil, nil&#125;</span><br><span class="line">root.right.left = new(treeNode)</span><br><span class="line">root.left.right = createNode(2)</span><br><span class="line"></span><br><span class="line">fmt.Println(root)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">&#123;3 0xc42000a080 0xc42000a0a0&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">树</span><br><span class="line">      3</span><br><span class="line">   /     \</span><br><span class="line">  0       5</span><br><span class="line">   \     / </span><br><span class="line">    2   0</span><br></pre></td></tr></table></figure><p>为结构定义方法</p><ul><li>显示定义，并为方法接收者命名</li><li>只有使用指针才可以改变结构内容，否则是值传递（是拷贝）</li><li>nil指针也可以调用方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">type treeNode struct &#123;</span><br><span class="line">value int</span><br><span class="line">left, right *treeNode</span><br><span class="line">&#125;</span><br><span class="line">// 给结构定义方法，(node treeNode)就相当于c++的this指针，叫做接收者。就相当于print（函数名）是给node接收的</span><br><span class="line">// node treeNode是传值的还是传引用的？当然是传值的</span><br><span class="line">func (node treeNode) print() &#123;</span><br><span class="line">fmt.Printf(&quot;%d &quot;, node.value)</span><br><span class="line">&#125;</span><br><span class="line">// 与print其实是一样的</span><br><span class="line">func print1(node treeNode) &#123;</span><br><span class="line">fmt.Println(node.value)</span><br><span class="line">&#125;</span><br><span class="line">// node treeNode参数实际上是传值的</span><br><span class="line">func (node treeNode) setValue(value int) &#123;</span><br><span class="line">node.value = value</span><br><span class="line">&#125;</span><br><span class="line">// 传指针</span><br><span class="line">func (node *treeNode) setValue1(value int) &#123;</span><br><span class="line">node.value = value</span><br><span class="line">&#125;</span><br><span class="line">// nil</span><br><span class="line">func (node *treeNode) setValue2(value int) &#123;</span><br><span class="line">if node == nil &#123;</span><br><span class="line">fmt.Println(&quot;Setting value to nil node. Ignored.&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">node.value = value</span><br><span class="line">&#125;</span><br><span class="line">// 树的中序遍历</span><br><span class="line">func (node *treeNode) traverse() &#123;</span><br><span class="line">if node == nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">node.left.traverse()</span><br><span class="line">node.print()</span><br><span class="line">node.right.traverse()</span><br><span class="line">&#125;</span><br><span class="line">func createNode(value int) *treeNode &#123;</span><br><span class="line">// 相当于在函数里建了一个局部变量，返回的地址是局部变量的地址，如果在c++中是典型的错误，在go语言中局部变量地址也是可以给别人用的</span><br><span class="line">return &amp;treeNode&#123;value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">var root treeNode</span><br><span class="line"></span><br><span class="line">root = treeNode&#123;value: 3&#125;</span><br><span class="line">root.left = &amp;treeNode&#123;&#125;</span><br><span class="line">root.right = &amp;treeNode&#123;5, nil, nil&#125;</span><br><span class="line">root.right.left = new(treeNode)</span><br><span class="line">root.left.right = createNode(2)</span><br><span class="line"></span><br><span class="line">// 使用为结构定义的方法</span><br><span class="line">root.print()</span><br><span class="line">fmt.Println()</span><br><span class="line">print1(root)</span><br><span class="line">fmt.Println()</span><br><span class="line">// 参数实际上是传值的，改不掉</span><br><span class="line">root.right.left.setValue(4)</span><br><span class="line">root.right.left.print()</span><br><span class="line">fmt.Println()</span><br><span class="line">// 传指针</span><br><span class="line">root.right.left.setValue1(4)</span><br><span class="line">root.right.left.print()</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">root.print()</span><br><span class="line">root.setValue1(100)</span><br><span class="line"></span><br><span class="line">pRoot := &amp;root</span><br><span class="line">pRoot.print()</span><br><span class="line">pRoot.setValue1(200)</span><br><span class="line">pRoot.print()</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">// nil</span><br><span class="line">var pRoot2 *treeNode</span><br><span class="line">pRoot2.setValue2(200)</span><br><span class="line">pRoot2 = &amp;root</span><br><span class="line">pRoot2.setValue2(300)</span><br><span class="line">pRoot2.print()</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">root.traverse()</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">3 </span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">0 </span><br><span class="line">4 </span><br><span class="line">3 100 200 </span><br><span class="line">Setting value to nil node. Ignored.</span><br><span class="line">300 </span><br><span class="line">0 2 300 4 5 </span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><p>值接收者VS指针接收者</p><ul><li>要改变内容必须使用指针接收者</li><li>结构过大也考虑使用指针接收者</li><li>一致性：如果指针接收者，最好都是指针接收者</li><li>值接受者是go语言特有</li><li>值/指针接收者均可以接收 值/指针，并不会改变调用者如何调用</li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li>名字一般使用CamelCase</li><li>首字母大写：public</li><li>首字母小写：private</li></ul><p>以上都是针对<code>包</code>来说的</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li>每个目录一个包（包名不一定和目录名一样），每个目录只能放一个包</li><li>main包包含可执行入口（目录中如果有一个main函数，这个目录下只能有一个main包）</li><li>为结构定义的方法必须放在同一个包内，可以是不同的文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:~ yujiang$ tree go/src/github.com/lnsyyj/GolangGrammar/tree/</span><br><span class="line">go/src/github.com/lnsyyj/GolangGrammar/tree/</span><br><span class="line">├── entry</span><br><span class="line">│   └── entry.go</span><br><span class="line">├── node.go</span><br><span class="line">└── traversal.go</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:~ yujiang$ cat go/src/github.com/lnsyyj/GolangGrammar/tree/node.go </span><br><span class="line">package tree</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">type Node struct &#123;</span><br><span class="line">Value int</span><br><span class="line">Left, Right *Node</span><br><span class="line">&#125;</span><br><span class="line">// 给结构定义方法，(node Node)就相当于c++的this指针，叫做接收者。就相当于print（函数名）是给node接收的</span><br><span class="line">// node Node是传值的还是传引用的？当然是传值的</span><br><span class="line">func (node Node) Print() &#123;</span><br><span class="line">fmt.Printf(&quot;%d &quot;, node.Value)</span><br><span class="line">&#125;</span><br><span class="line">// 与print其实是一样的</span><br><span class="line">func Print1(node Node) &#123;</span><br><span class="line">fmt.Println(node.Value)</span><br><span class="line">&#125;</span><br><span class="line">// node Node参数实际上是传值的</span><br><span class="line">func (node Node) SetValue(value int) &#123;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line">// 传指针</span><br><span class="line">func (node *Node) SetValue1(value int) &#123;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line">// nil</span><br><span class="line">func (node *Node) SetValue2(value int) &#123;</span><br><span class="line">if node == nil &#123;</span><br><span class="line">fmt.Println(&quot;Setting value to nil node. Ignored.&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line">func CreateNode(value int) *Node &#123;</span><br><span class="line">// 相当于在函数里建了一个局部变量，返回的地址是局部变量的地址，如果在c++中是典型的错误，在go语言中局部变量地址也是可以给别人用的</span><br><span class="line">return &amp;Node&#123;Value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:~ yujiang$ cat go/src/github.com/lnsyyj/GolangGrammar/tree/traversal.go </span><br><span class="line">package tree</span><br><span class="line">// 树的中序遍历</span><br><span class="line">func (node *Node) Traverse() &#123;</span><br><span class="line">if node == nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">node.Left.Traverse()</span><br><span class="line">node.Print()</span><br><span class="line">node.Right.Traverse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:~ yujiang$ cat go/src/github.com/lnsyyj/GolangGrammar/tree/entry/entry.go </span><br><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/lnsyyj/GolangGrammar/tree&quot;</span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line">var root tree.Node</span><br><span class="line">root = tree.Node&#123;Value: 3&#125;</span><br><span class="line">root.Left = &amp;tree.Node&#123;&#125;</span><br><span class="line">root.Right = &amp;tree.Node&#123;5, nil, nil&#125;</span><br><span class="line">root.Right.Left = new(tree.Node)</span><br><span class="line">root.Left.Right = tree.CreateNode(2)</span><br><span class="line">// 使用为结构定义的方法</span><br><span class="line">root.Print()</span><br><span class="line">fmt.Println()</span><br><span class="line">tree.Print1(root)</span><br><span class="line">fmt.Println()</span><br><span class="line">// 参数实际上是传值的，改不掉</span><br><span class="line">root.Right.Left.SetValue(4)</span><br><span class="line">root.Right.Left.Print()</span><br><span class="line">fmt.Println()</span><br><span class="line">// 传指针</span><br><span class="line">root.Right.Left.SetValue1(4)</span><br><span class="line">root.Right.Left.Print()</span><br><span class="line">fmt.Println()</span><br><span class="line">root.Print()</span><br><span class="line">root.SetValue1(100)</span><br><span class="line">pRoot := &amp;root</span><br><span class="line">pRoot.Print()</span><br><span class="line">pRoot.SetValue1(200)</span><br><span class="line">pRoot.Print()</span><br><span class="line">fmt.Println()</span><br><span class="line">// nil</span><br><span class="line">var pRoot2 *tree.Node</span><br><span class="line">pRoot2.SetValue2(200)</span><br><span class="line">pRoot2 = &amp;root</span><br><span class="line">pRoot2.SetValue2(300)</span><br><span class="line">pRoot2.Print()</span><br><span class="line">fmt.Println()</span><br><span class="line">root.Traverse()</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">3 </span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">0 </span><br><span class="line">4 </span><br><span class="line">3 100 200 </span><br><span class="line">Setting value to nil node. Ignored.</span><br><span class="line">300 </span><br><span class="line">0 2 300 4 5 </span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><h3 id="如何扩充系统类型或者别人的类型"><a href="#如何扩充系统类型或者别人的类型" class="headerlink" title="如何扩充系统类型或者别人的类型"></a>如何扩充系统类型或者别人的类型</h3><ul><li>使用组合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:~ yujiang$ tree go/src/github.com/lnsyyj/GolangGrammar/tree/</span><br><span class="line">go/src/github.com/lnsyyj/GolangGrammar/tree/</span><br><span class="line">├── entry</span><br><span class="line">│   └── entry.go</span><br><span class="line">├── node.go</span><br><span class="line">└── traversal.go</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:~ yujiang$ cat go/src/github.com/lnsyyj/GolangGrammar/tree/node.go </span><br><span class="line">package tree</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">type Node struct &#123;</span><br><span class="line">Value int</span><br><span class="line">Left, Right *Node</span><br><span class="line">&#125;</span><br><span class="line">// 给结构定义方法，(node Node)就相当于c++的this指针，叫做接收者。就相当于print（函数名）是给node接收的</span><br><span class="line">// node Node是传值的还是传引用的？当然是传值的</span><br><span class="line">func (node Node) Print() &#123;</span><br><span class="line">fmt.Printf(&quot;%d &quot;, node.Value)</span><br><span class="line">&#125;</span><br><span class="line">// 与print其实是一样的</span><br><span class="line">func Print1(node Node) &#123;</span><br><span class="line">fmt.Println(node.Value)</span><br><span class="line">&#125;</span><br><span class="line">// node Node参数实际上是传值的</span><br><span class="line">func (node Node) SetValue(value int) &#123;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line">// 传指针</span><br><span class="line">func (node *Node) SetValue1(value int) &#123;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line">// nil</span><br><span class="line">func (node *Node) SetValue2(value int) &#123;</span><br><span class="line">if node == nil &#123;</span><br><span class="line">fmt.Println(&quot;Setting value to nil node. Ignored.&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line">func CreateNode(value int) *Node &#123;</span><br><span class="line">// 相当于在函数里建了一个局部变量，返回的地址是局部变量的地址，如果在c++中是典型的错误，在go语言中局部变量地址也是可以给别人用的</span><br><span class="line">return &amp;Node&#123;Value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:~ yujiang$ cat go/src/github.com/lnsyyj/GolangGrammar/tree/traversal.go </span><br><span class="line">package tree</span><br><span class="line">// 树的中序遍历</span><br><span class="line">func (node *Node) Traverse() &#123;</span><br><span class="line">if node == nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">node.Left.Traverse()</span><br><span class="line">node.Print()</span><br><span class="line">node.Right.Traverse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:~ yujiang$ cat go/src/github.com/lnsyyj/GolangGrammar/tree/entry/entry.go </span><br><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/lnsyyj/GolangGrammar/tree&quot;</span><br><span class="line">)</span><br><span class="line">type myTreeNode struct &#123;</span><br><span class="line">node *tree.Node</span><br><span class="line">&#125;</span><br><span class="line">func (myNode *myTreeNode) postOrder() &#123;</span><br><span class="line">if myNode == nil || myNode.node == nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">left := myTreeNode&#123;myNode.node.Left&#125;</span><br><span class="line">right := myTreeNode&#123;myNode.node.Right&#125;</span><br><span class="line">left.postOrder()</span><br><span class="line">right.postOrder()</span><br><span class="line">myNode.node.Print()</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">var root tree.Node</span><br><span class="line">root = tree.Node&#123;Value: 3&#125;</span><br><span class="line">root.Left = &amp;tree.Node&#123;&#125;</span><br><span class="line">root.Right = &amp;tree.Node&#123;5, nil, nil&#125;</span><br><span class="line">root.Right.Left = new(tree.Node)</span><br><span class="line">root.Left.Right = tree.CreateNode(2)</span><br><span class="line">root.Right.Left.SetValue1(4)</span><br><span class="line">root.Traverse()</span><br><span class="line">fmt.Println()</span><br><span class="line">myRoot := myTreeNode&#123;&amp;root&#125;</span><br><span class="line">myRoot.postOrder()</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">0 2 3 4 5</span><br><span class="line">2 0 4 5 3</span><br><span class="line">===================================output===================================</span><br><span class="line">树</span><br><span class="line">      3</span><br><span class="line">   /     \</span><br><span class="line">  0       5</span><br><span class="line">   \     / </span><br><span class="line">    2   4</span><br></pre></td></tr></table></figure><ul><li>定义别名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMacBook-Pro-13:~ yujiang$ tree go/src/github.com/lnsyyj/GolangGrammar/queue/</span><br><span class="line">go/src/github.com/lnsyyj/GolangGrammar/queue/</span><br><span class="line">├── entry</span><br><span class="line">│   └── main.go</span><br><span class="line">└── queue.go</span><br><span class="line"></span><br><span class="line">1 directory, 2 files</span><br><span class="line"></span><br><span class="line">yujiangdeMacBook-Pro-13:~ yujiang$ cat go/src/github.com/lnsyyj/GolangGrammar/queue/queue.go </span><br><span class="line">package queue</span><br><span class="line">type Queue []int</span><br><span class="line">func (q *Queue) Push(v int) &#123;</span><br><span class="line">*q = append(*q, v)</span><br><span class="line">&#125;</span><br><span class="line">func (q *Queue) Pop() int &#123;</span><br><span class="line">head := (*q)[0]</span><br><span class="line">*q = (*q)[1:]</span><br><span class="line">return head</span><br><span class="line">&#125;</span><br><span class="line">func (q *Queue) IsEmpty() bool &#123;</span><br><span class="line">return len(*q) == 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yujiangdeMacBook-Pro-13:~ yujiang$ cat go/src/github.com/lnsyyj/GolangGrammar/queue/entry/main.go </span><br><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;github.com/lnsyyj/GolangGrammar/queue&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line">q := queue.Queue&#123;1&#125;</span><br><span class="line">q.Push(2)</span><br><span class="line">q.Push(3)</span><br><span class="line">fmt.Println(q.Pop())</span><br><span class="line">fmt.Println(q.Pop())</span><br><span class="line">fmt.Println(q.IsEmpty())</span><br><span class="line">fmt.Println(q.Pop())</span><br><span class="line">fmt.Println(q.IsEmpty())</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">false</span><br><span class="line">3</span><br><span class="line">true</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><h2 id="GOPATH环境变量"><a href="#GOPATH环境变量" class="headerlink" title="GOPATH环境变量"></a>GOPATH环境变量</h2><ul><li>默认在~/go(unix, linux)，%USERPROFILE%\go(windows)</li><li>官方推荐：所有项目和第三方库都放在同一个GOPATH下</li><li>也可以将每个项目放在不同的GOPATH下（环境变量可以配置多个GOPATH，编译时会去不同的GOPATH找到依赖的包）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMacBook-Pro-13:~ yujiang$ echo $GOPATH</span><br><span class="line">/Users/yujiang/go</span><br><span class="line"></span><br><span class="line">yujiangdeMacBook-Pro-13:~ yujiang$ cat ~/.bash_profile </span><br><span class="line">export GOPATH=/Users/yujiang/go</span><br><span class="line">export GOBIN=/Users/yujiang/go/bin</span><br><span class="line">export PATH=$PATH:$GOBIN</span><br></pre></td></tr></table></figure><ul><li>GoLand自动清理import工具</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Preferences | Tools | File Watchers</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ go get golang.org/x/tools/cmd/goimports</span><br><span class="line">被墙了，获取不下来</span><br></pre></td></tr></table></figure><h3 id="go-get-获取第三方库"><a href="#go-get-获取第三方库" class="headerlink" title="go get 获取第三方库"></a>go get 获取第三方库</h3><ul><li>go get命令演示</li><li>使用gopm来获取无法下载的包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:~ yujiang$ go get -v github.com/gpmgo/gopm</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ gopm get -g -v golang.org/x/tools/cmd/goimports</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ ls go/src/golang.org/x/tools/imports/</span><br><span class="line">fix.go         fix_test.go    imports.go     mkindex.go     mkstdlib.go    sortimports.go zstdlib.go</span><br><span class="line"># 编译出goimports</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ go build  golang.org/x/tools/cmd/goimports</span><br><span class="line"># 编译并安装到$GOPATH/bin/目录下</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ go install  golang.org/x/tools/cmd/goimports</span><br></pre></td></tr></table></figure><ul><li>go build编译</li><li>go install产生pkg文件和可执行文件</li><li>go run直接编译运行</li></ul><h2 id="GOPATH下目录结构"><a href="#GOPATH下目录结构" class="headerlink" title="GOPATH下目录结构"></a>GOPATH下目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">git repository 1</span><br><span class="line">git repository 2</span><br><span class="line">pkg</span><br><span class="line">git repository 1</span><br><span class="line">git repository 2</span><br><span class="line">bin</span><br><span class="line">执行文件1，2，3</span><br><span class="line"></span><br><span class="line">一般每个目录（包）下有一个main文件（package main     func main() &#123;&#125;）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph build rpm</title>
      <link href="/2018/09/13/ceph-build-rpm/"/>
      <url>/2018/09/13/ceph-build-rpm/</url>
      
        <content type="html"><![CDATA[<p>最近做了一个实验，ceph代码如何build出rpm包？</p><p>官方文档：<a href="http://docs.ceph.com/docs/master/install/build-ceph/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/install/build-ceph/</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1、首先需要ceph源码，官方的例子是把ceph源码压缩成tar.bz2</p><p>2、然后rpmbuild工具根据ceph源码中的ceph.spec规则进行build</p><h2 id="详细实验步骤"><a href="#详细实验步骤" class="headerlink" title="详细实验步骤"></a>详细实验步骤</h2><p>方法一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">就是按照官方文档的思路去做</span><br><span class="line">tar --strip-components=1 -C ~/rpmbuild/SPECS/ --no-anchored -xvjf ~/rpmbuild/SOURCES/ceph-10.2.11.tar.bz2 &quot;ceph.spec&quot;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">为了实验方便，我们会下载官方发布出来的.src.rpm包来实验。</span><br><span class="line">.src.rpm会随着rpm同时发布，可以用来移植不同系统平台。</span><br><span class="line"></span><br><span class="line">安装依赖</span><br><span class="line">[root@yujiang-dev-20180912135521 ~]# git clone https://github.com/ceph/ceph.git</span><br><span class="line">[root@yujiang-dev-20180912135521 ~]# cd ceph</span><br><span class="line">[root@yujiang-dev-20180912135521 ceph]# ./install-deps.sh </span><br><span class="line">[root@yujiang-dev-20180907154634 ~]# yum install rpm-build rpmdevtools hdparm libatomic_ops-devel fcgi-devel boost-devel cmake gcc-c++ tree selinux-policy-doc -y</span><br><span class="line"></span><br><span class="line">下载官方发布出来的.src.rpm</span><br><span class="line">[root@yujiang-dev-20180907154634 ~]# wget http://download.ceph.com/rpm-jewel/el7/SRPMS/ceph-10.2.11-0.el7.src.rpm</span><br><span class="line"></span><br><span class="line">生成rpmbuild目录</span><br><span class="line">[root@yujiang-dev-20180907154634 ~]# rpmdev-setuptree</span><br><span class="line"></span><br><span class="line">[root@yujiang-dev-20180907154634 ~]# rpm -i ceph-10.2.11-0.el7.src.rpm</span><br><span class="line">[root@yujiang-dev-20180912135521 ~]# tree rpmbuild/SRPMS/</span><br><span class="line">rpmbuild/SRPMS/</span><br><span class="line">└── ceph-10.2.11-0.el7.centos.src.rpm</span><br><span class="line">[root@yujiang-dev-20180912135521 ~]# tree rpmbuild/SPECS/</span><br><span class="line">rpmbuild/SPECS/</span><br><span class="line">└── ceph.spec</span><br><span class="line">开始构建rpm包</span><br><span class="line">[root@yujiang-dev-20180912135521 ~]# rpmbuild -ba ~/rpmbuild/SPECS/ceph.spec</span><br><span class="line"></span><br><span class="line">[root@yujiang-dev-20180912135521 ~]# tree  rpmbuild/RPMS/</span><br><span class="line">rpmbuild/RPMS/</span><br><span class="line">└── x86_64</span><br><span class="line">    ├── ceph-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-base-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-common-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-debuginfo-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-devel-compat-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── cephfs-java-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-fuse-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-libs-compat-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-mds-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-mon-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-osd-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-radosgw-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-resource-agents-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-selinux-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── ceph-test-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── libcephfs1-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── libcephfs1-devel-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── libcephfs_jni1-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── libcephfs_jni1-devel-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── librados2-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── librados2-devel-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── libradosstriper1-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── libradosstriper1-devel-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── librbd1-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── librbd1-devel-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── librgw2-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── librgw2-devel-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── python-ceph-compat-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── python-cephfs-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── python-rados-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── python-rbd-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── rbd-fuse-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    ├── rbd-mirror-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line">    └── rbd-nbd-10.2.11-0.el7.centos.x86_64.rpm</span><br><span class="line"></span><br><span class="line">1 directory, 34 files</span><br><span class="line"></span><br><span class="line">解压bz2文件</span><br><span class="line">yum install bzip2 -y</span><br><span class="line">bzip2 -d ceph-12.2.8.tar.bz2</span><br><span class="line">tar xvf ceph-12.2.8.tar</span><br><span class="line">tar zcvf ceph-12.2.8.tar.gz ceph-12.2.8</span><br><span class="line"></span><br><span class="line">如果是ceph-14.2.4需要安装</span><br><span class="line">yum -y install centos-release-scl</span><br><span class="line">yum -y install devtoolset-7-gcc devtoolset-7-gcc-c++ devtoolset-7-binutils</span><br><span class="line">scl enable devtoolset-7 bash</span><br><span class="line">yum install ceph-2:14.2.4-0.el7.x86_64</span><br><span class="line">rpmbuild -ba ~/rpmbuild/SPECS/ceph.spec</span><br><span class="line"></span><br><span class="line">解包：tar xvf FileName.tar</span><br><span class="line">打包：tar cvf FileName.tar DirName</span><br><span class="line"></span><br><span class="line">压缩：bzip2 [原文件名].tar</span><br><span class="line">解压：bunzip2 [原文件名].tar.bz2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang笔记一基础语法</title>
      <link href="/2018/09/04/golang%E7%AC%94%E8%AE%B0%E4%B8%80%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/09/04/golang%E7%AC%94%E8%AE%B0%E4%B8%80%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>课程地址：<a href="https://coding.imooc.com/class/chapter/180.html" target="_blank" rel="noopener">https://coding.imooc.com/class/chapter/180.html</a></p><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">//函数外定义变量不能用:=,作用域只在包package内部</span><br><span class="line">var aa = 3</span><br><span class="line">var ss = &quot;string&quot;</span><br><span class="line">//或者放在括号内</span><br><span class="line">var (</span><br><span class="line">bb = 4</span><br><span class="line">cc = 5</span><br><span class="line">)</span><br><span class="line">//不初始化变量值</span><br><span class="line">func variableZeroValue()&#123;</span><br><span class="line">var i int</span><br><span class="line">var s string</span><br><span class="line">fmt.Printf(&quot;%d %q\n&quot;, i, s)</span><br><span class="line">&#125;</span><br><span class="line">//初始化变量值</span><br><span class="line">func variableInitialValue()&#123;</span><br><span class="line">var a, b int = 3, 4</span><br><span class="line">var s string = &quot;Hello&quot;</span><br><span class="line">fmt.Println(a, b, s)</span><br><span class="line">&#125;</span><br><span class="line">//初始化多个不同类型变量</span><br><span class="line">func variableTypeDeduction()&#123;</span><br><span class="line">var a, b, c, s = 3, 4, true, &quot;World&quot;</span><br><span class="line">fmt.Println(a, b, c, s)</span><br><span class="line">&#125;</span><br><span class="line">//:=，省略掉var</span><br><span class="line">func variableShorter()&#123;</span><br><span class="line">a, b, c, s := 3, 4, true, &quot;World&quot;</span><br><span class="line">b = 5</span><br><span class="line">fmt.Println(a, b, c, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;Hello World&quot;)</span><br><span class="line">variableZeroValue()</span><br><span class="line">variableInitialValue()</span><br><span class="line">variableTypeDeduction()</span><br><span class="line">variableShorter()</span><br><span class="line">fmt.Println(aa, ss, bb, cc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===================================output===================================</span><br><span class="line">Hello World</span><br><span class="line">0 &quot;&quot;</span><br><span class="line">3 4 Hello</span><br><span class="line">3 4 true World</span><br><span class="line">3 5 true World</span><br><span class="line">3 string 4 5</span><br></pre></td></tr></table></figure><h3 id="内建变量类型"><a href="#内建变量类型" class="headerlink" title="内建变量类型"></a>内建变量类型</h3><ul><li><p>bool, string</p></li><li><p>(u)int, (u)int8, (u)int16, (u)int32, (u)int64, uintptr</p></li><li><p>byte, rune(这是字符型，golang中不叫char，是32位的)</p></li><li><p>float32, float64, complex64, complex128</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;math/cmplx&quot;</span><br><span class="line">&quot;math&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func euler()&#123;</span><br><span class="line">fmt.Printf(&quot;%.3f\n&quot;, cmplx.Exp(1i*math.Pi) + 1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">euler()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===================================output===================================</span><br><span class="line">(0.000+0.000i)</span><br></pre></td></tr></table></figure><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ul><li>类型转换是强制的（golang只有强制类型转换，没有隐式类型转换）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;math&quot;</span><br><span class="line">)</span><br><span class="line">func triangle()&#123;</span><br><span class="line">var a, b int = 3, 4</span><br><span class="line">var c int</span><br><span class="line">c = int(math.Sqrt(float64(a * a + b * b)))</span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">triangle()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===================================output===================================</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="常量的定义"><a href="#常量的定义" class="headerlink" title="常量的定义"></a>常量的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;math&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">const filename = &quot;abc.txt&quot;</span><br><span class="line">func consts()&#123;</span><br><span class="line">//不指定类型就是一个文本</span><br><span class="line">//如果指定类型，某些地方就需要强制类型转换</span><br><span class="line">//const a, b int = 3, 4</span><br><span class="line">//c = int(math.Sqrt(float64(a * a + b * b)))</span><br><span class="line">const a, b  = 3, 4</span><br><span class="line">const (</span><br><span class="line">name = &quot;hello world&quot;</span><br><span class="line">d, e= 5,6</span><br><span class="line">)</span><br><span class="line">var c int</span><br><span class="line">c = int(math.Sqrt(a * a + b * b))</span><br><span class="line">fmt.Println(filename, c, name, d, e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">consts()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===================================output===================================</span><br><span class="line">abc.txt 5 hello world 5 6</span><br></pre></td></tr></table></figure><h3 id="使用常量定义枚举类型"><a href="#使用常量定义枚举类型" class="headerlink" title="使用常量定义枚举类型"></a>使用常量定义枚举类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func enums()&#123;</span><br><span class="line">const (</span><br><span class="line">cpp = 0</span><br><span class="line">java = 1</span><br><span class="line">python = 2</span><br><span class="line">golang = 3</span><br><span class="line">)</span><br><span class="line">fmt.Println(cpp, java, python, golang)</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">enums()</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">0 1 2 3</span><br><span class="line">===================================output===================================</span><br><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func enums()&#123;</span><br><span class="line">const (</span><br><span class="line">cpp = iota</span><br><span class="line">java</span><br><span class="line">python</span><br><span class="line">golang</span><br><span class="line">)</span><br><span class="line">fmt.Println(cpp, java, python, golang)</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">enums()</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">0 1 2 3</span><br><span class="line">===================================output===================================</span><br><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func enums()&#123;</span><br><span class="line">const (</span><br><span class="line">cpp = iota</span><br><span class="line">_</span><br><span class="line">python</span><br><span class="line">golang</span><br><span class="line">javascript</span><br><span class="line">)</span><br><span class="line">fmt.Println(cpp, javascript, python, golang)</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">enums()</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">0 4 2 3</span><br><span class="line">===================================output===================================</span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func enums()&#123;</span><br><span class="line">const (</span><br><span class="line">b = 1 &lt;&lt; (10 * iota)</span><br><span class="line">kb</span><br><span class="line">mb</span><br><span class="line">gb</span><br><span class="line">tb</span><br><span class="line">pb</span><br><span class="line">)</span><br><span class="line">fmt.Println(b, kb, mb, gb, tb, pb)</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">enums()</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">1 1024 1048576 1073741824 1099511627776 1125899906842624</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;io/ioutil&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line">const filename = &quot;abc.txt&quot;</span><br><span class="line">contents, err := ioutil.ReadFile(filename)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">fmt.Printf(&quot;%s\n&quot;, contents)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">open abc.txt: no such file or directory</span><br><span class="line">===================================output===================================</span><br><span class="line">hello  world</span><br><span class="line">===================================output===================================</span><br><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;io/ioutil&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line">const filename = &quot;abc.txt&quot;</span><br><span class="line">//条件里赋值的变量作用域就在这个if语句里</span><br><span class="line">if contents, err := ioutil.ReadFile(filename); err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">fmt.Printf(&quot;%s\n&quot;, contents)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">hello  world</span><br><span class="line">===================================output===================================</span><br><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">func grade(score int) string &#123;</span><br><span class="line">g := &quot;&quot;</span><br><span class="line">//不带表达式也可以进行switch</span><br><span class="line">switch &#123;</span><br><span class="line">case score &lt; 0 || score &gt; 100:</span><br><span class="line">panic(fmt.Sprintf(&quot;Wrong score: %d&quot;, score))</span><br><span class="line">case score &lt; 60:</span><br><span class="line">g = &quot;F&quot;</span><br><span class="line">case score &lt; 80:</span><br><span class="line">g = &quot;C&quot;</span><br><span class="line">case score &lt; 90:</span><br><span class="line">g = &quot;B&quot;</span><br><span class="line">case score &lt;=100:</span><br><span class="line">g = &quot;A&quot;</span><br><span class="line">&#125;</span><br><span class="line">return g</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(</span><br><span class="line">grade(0),</span><br><span class="line">grade(59),</span><br><span class="line">grade(60),</span><br><span class="line">grade(82),</span><br><span class="line">grade(99),</span><br><span class="line">grade(100),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">F F C B A A</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>golang中只有for，没有while</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;strconv&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">func convertToBin(n int) string &#123;</span><br><span class="line">result := &quot;&quot;</span><br><span class="line">for ; n &gt; 0; n /= 2 &#123;</span><br><span class="line">lsb := n % 2</span><br><span class="line">result = strconv.Itoa(lsb) + result</span><br><span class="line">&#125;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(</span><br><span class="line">convertToBin(5),</span><br><span class="line">convertToBin(13),</span><br><span class="line">convertToBin(789),</span><br><span class="line">convertToBin(0),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">101 1101 1100010101 </span><br><span class="line">===================================output===================================</span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;bufio&quot;</span><br><span class="line">)</span><br><span class="line">func readFile(filename string) &#123;</span><br><span class="line">if file, err := os.Open(filename); err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">scanner := bufio.NewScanner(file)</span><br><span class="line">for scanner.Scan() &#123;</span><br><span class="line">fmt.Println(scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">readFile(&quot;/Users/yujiang/go/src/github.com/lnsyyj/GolangGrammar/abc.txt&quot;)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">hello  world</span><br><span class="line">yes</span><br><span class="line">===================================output===================================</span><br><span class="line">//不写条件，死循环</span><br><span class="line">for &#123;</span><br><span class="line">    fmt.Println(&quot;abc&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">//函数可以返回多个值</span><br><span class="line">func eval(a, b int ,op string) (int, error) &#123;</span><br><span class="line">switch op &#123;</span><br><span class="line">case &quot;+&quot;:</span><br><span class="line">return a + b, nil</span><br><span class="line">case &quot;-&quot;:</span><br><span class="line">return a - b, nil</span><br><span class="line">case &quot;*&quot;:</span><br><span class="line">return a * b, nil</span><br><span class="line">case &quot;/&quot;:</span><br><span class="line">q , _ := div(a, b)</span><br><span class="line">return q, nil</span><br><span class="line">default:</span><br><span class="line">return 0, fmt.Errorf(&quot;unsupported operator: %s&quot;, op)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//返回值可以起名</span><br><span class="line">func div(a, b int) (q, r int)&#123;</span><br><span class="line">return a / b, a % b</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">if result, err := eval(3, 4, &quot;；&quot;); err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line">q, r := div(13, 3)</span><br><span class="line">fmt.Println(q, r)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">unsupported operator: ；</span><br><span class="line">4 1</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;reflect&quot;</span><br><span class="line">&quot;runtime&quot;</span><br><span class="line">&quot;math&quot;</span><br><span class="line">)</span><br><span class="line">func apply(op func(int, int) int, a, b int) int &#123;</span><br><span class="line">//拿到函数名</span><br><span class="line">p := reflect.ValueOf(op).Pointer()</span><br><span class="line">opName := runtime.FuncForPC(p).Name()</span><br><span class="line">fmt.Printf(&quot;Calling function %s with args &quot; + &quot;(%d, %d)\n&quot;, opName, a, b)</span><br><span class="line">return op(a, b)</span><br><span class="line">&#125;</span><br><span class="line">func pow(a, b int) int &#123;</span><br><span class="line">return int(math.Pow(float64(a), float64(b)))</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(apply(pow, 3, 4))</span><br><span class="line">fmt.Println(apply(</span><br><span class="line">func(a int, b int) int &#123;</span><br><span class="line">return int(math.Pow(float64(a), float64(b)))</span><br><span class="line">&#125;, 3, 4))</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">Calling function main.pow with args (3, 4)</span><br><span class="line">81</span><br><span class="line">Calling function main.main.func1 with args (3, 4)</span><br><span class="line">81</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><h3 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">func sum(numbers ...int) int &#123;</span><br><span class="line">s := 0</span><br><span class="line">for i := range numbers &#123;</span><br><span class="line">s += numbers[i]</span><br><span class="line">&#125;</span><br><span class="line">return s</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(sum(1, 2, 3, 4, 5))</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">15</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>golang指针不能运算，go语言只有值传递一种方式。没有引用传递。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func swap1(a, b int) &#123;</span><br><span class="line">a, b = b, a</span><br><span class="line">&#125;</span><br><span class="line">//指针</span><br><span class="line">func swap2(a ,b *int) &#123;</span><br><span class="line">*a, *b = *b, *a</span><br><span class="line">&#125;</span><br><span class="line">func swap3(a, b int) (int, int) &#123;</span><br><span class="line">return b, a</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">a, b := 3, 4</span><br><span class="line">swap1(a, b)</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">swap2(&amp;a, &amp;b)</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">a, b = swap3(a, b)</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">3 4</span><br><span class="line">4 3</span><br><span class="line">3 4</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">//数组的定义，数量写在类型的前面</span><br><span class="line">var arr1 [5]int</span><br><span class="line">arr2 := [3]int&#123;1,3,5&#125;</span><br><span class="line">//数组必须用...，否则是切片</span><br><span class="line">arr3 := [...]int&#123;2,4,6,8,10&#125;</span><br><span class="line">//二维数组</span><br><span class="line">var grid [4][5]int</span><br><span class="line">fmt.Println(arr1, arr2, arr3)</span><br><span class="line">fmt.Println(grid)</span><br><span class="line"></span><br><span class="line">//遍历数组</span><br><span class="line">for i, v := range arr3 &#123;</span><br><span class="line">fmt.Println(i, v)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;++++++++++&quot;)</span><br><span class="line">//可通过 _ 省略变量。不仅range，任何地方都可以通过 _ 省略变量</span><br><span class="line">for _, v := range arr3 &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">[0 0 0 0 0] [1 3 5] [2 4 6 8 10]</span><br><span class="line">[[0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0]]</span><br><span class="line">0 2</span><br><span class="line">1 4</span><br><span class="line">2 6</span><br><span class="line">3 8</span><br><span class="line">4 10</span><br><span class="line">++++++++++</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><p>数组是值类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func printArray(arr [5]int) &#123;</span><br><span class="line">arr[0] = 100</span><br><span class="line">for i, v := range arr &#123;</span><br><span class="line">fmt.Println(i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">//数组的定义，数量写在类型的前面</span><br><span class="line">var arr1 [5]int</span><br><span class="line">//数组必须用...，否则是切片</span><br><span class="line">arr3 := [...]int&#123;2,4,6,8,10&#125;</span><br><span class="line">printArray(arr1)</span><br><span class="line">fmt.Println(&quot;+++++++++++++&quot;)</span><br><span class="line">printArray(arr3)</span><br><span class="line">fmt.Println(&quot;+++++++++++++&quot;)</span><br><span class="line">fmt.Println(arr1, arr3)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">0 100</span><br><span class="line">1 0</span><br><span class="line">2 0</span><br><span class="line">3 0</span><br><span class="line">4 0</span><br><span class="line">+++++++++++++</span><br><span class="line">0 100</span><br><span class="line">1 4</span><br><span class="line">2 6</span><br><span class="line">3 8</span><br><span class="line">4 10</span><br><span class="line">+++++++++++++</span><br><span class="line">[0 0 0 0 0] [2 4 6 8 10]</span><br><span class="line">===================================output===================================</span><br><span class="line">//[10]int和[20]int是不同类型，调用func f(arr [10]int)会拷贝数组</span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func printArray(arr *[5]int) &#123;</span><br><span class="line">arr[0] = 100</span><br><span class="line">for i, v := range arr &#123;</span><br><span class="line">fmt.Println(i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">//数组的定义，数量写在类型的前面</span><br><span class="line">var arr1 [5]int</span><br><span class="line">//数组必须用...，否则是切片</span><br><span class="line">arr3 := [...]int&#123;2,4,6,8,10&#125;</span><br><span class="line">printArray(&amp;arr1)</span><br><span class="line">fmt.Println(&quot;+++++++++++++&quot;)</span><br><span class="line">printArray(&amp;arr3)</span><br><span class="line">fmt.Println(&quot;+++++++++++++&quot;)</span><br><span class="line">fmt.Println(arr1, arr3)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">0 100</span><br><span class="line">1 0</span><br><span class="line">2 0</span><br><span class="line">3 0</span><br><span class="line">4 0</span><br><span class="line">+++++++++++++</span><br><span class="line">0 100</span><br><span class="line">1 4</span><br><span class="line">2 6</span><br><span class="line">3 8</span><br><span class="line">4 10</span><br><span class="line">+++++++++++++</span><br><span class="line">[100 0 0 0 0] [100 4 6 8 10]</span><br><span class="line">===================================output===================================</span><br><span class="line">//go语言一般不直接使用数组</span><br></pre></td></tr></table></figure><h2 id="Slice（切片）"><a href="#Slice（切片）" class="headerlink" title="Slice（切片）"></a>Slice（切片）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">arr := [...]int&#123;0, 1, 2, 3, 4, 5, 6, 7&#125;</span><br><span class="line">fmt.Println(&quot;arr[2:6] = &quot;, arr[2:6])</span><br><span class="line">fmt.Println(&quot;arr[:6] = &quot;, arr[:6])</span><br><span class="line">fmt.Println(&quot;arr[2:] = &quot;, arr[2:])</span><br><span class="line">fmt.Println(&quot;arr[:] = &quot;, arr[:])</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">arr[2:6] =  [2 3 4 5]</span><br><span class="line">arr[:6] =  [0 1 2 3 4 5]</span><br><span class="line">arr[2:] =  [2 3 4 5 6 7]</span><br><span class="line">arr[:] =  [0 1 2 3 4 5 6 7]</span><br><span class="line">===================================output===================================</span><br><span class="line">//文档中说slice是array的view</span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func updateSlice(s []int) &#123;</span><br><span class="line">s[0] = 100</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">arr := [...]int&#123;0, 1, 2, 3, 4, 5, 6, 7&#125;</span><br><span class="line">fmt.Println(&quot;arr[2:6] = &quot;, arr[2:6])</span><br><span class="line">fmt.Println(&quot;arr[:6] = &quot;, arr[:6])</span><br><span class="line">s1 := arr[2:]</span><br><span class="line">fmt.Println(&quot;s1 = &quot;, s1)</span><br><span class="line">s2 := arr[:]</span><br><span class="line">fmt.Println(&quot;s2 = &quot;, s2)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;After updateSlice(s1)&quot;)</span><br><span class="line">updateSlice(s1)</span><br><span class="line">fmt.Println(s1)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;After updateSlice(s2)&quot;)</span><br><span class="line">updateSlice(s2)</span><br><span class="line">fmt.Println(s2)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;Reslice&quot;)</span><br><span class="line">fmt.Println(s2)</span><br><span class="line">s2 = s2[:5]</span><br><span class="line">fmt.Println(s2)</span><br><span class="line">s2 = s2[2:]</span><br><span class="line">fmt.Println(s2)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">arr[2:6] =  [2 3 4 5]</span><br><span class="line">arr[:6] =  [0 1 2 3 4 5]</span><br><span class="line">s1 =  [2 3 4 5 6 7]</span><br><span class="line">s2 =  [0 1 2 3 4 5 6 7]</span><br><span class="line">After updateSlice(s1)</span><br><span class="line">[100 3 4 5 6 7]</span><br><span class="line">[0 1 100 3 4 5 6 7]</span><br><span class="line">After updateSlice(s2)</span><br><span class="line">[100 1 100 3 4 5 6 7]</span><br><span class="line">[100 1 100 3 4 5 6 7]</span><br><span class="line">Reslice</span><br><span class="line">[100 1 100 3 4 5 6 7]</span><br><span class="line">[100 1 100 3 4]</span><br><span class="line">[100 3 4]</span><br><span class="line">===================================output===================================</span><br><span class="line"></span><br><span class="line">//数组版，slice</span><br><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func printArray(arr []int) &#123;</span><br><span class="line">arr[0] = 100</span><br><span class="line">for i, v := range arr &#123;</span><br><span class="line">fmt.Println(i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">//数组的定义，数量写在类型的前面</span><br><span class="line">var arr1 [5]int</span><br><span class="line">//数组必须用...，否则是切片</span><br><span class="line">arr3 := [...]int&#123;2,4,6,8,10&#125;</span><br><span class="line">//**********使用arr1[:]获得数组的切片**********</span><br><span class="line">printArray(arr1[:])</span><br><span class="line">fmt.Println(&quot;+++++++++++++&quot;)</span><br><span class="line">printArray(arr3[:])</span><br><span class="line">fmt.Println(&quot;+++++++++++++&quot;)</span><br><span class="line">fmt.Println(arr1, arr3)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">0 100</span><br><span class="line">1 0</span><br><span class="line">2 0</span><br><span class="line">3 0</span><br><span class="line">4 0</span><br><span class="line">+++++++++++++</span><br><span class="line">0 100</span><br><span class="line">1 4</span><br><span class="line">2 6</span><br><span class="line">3 8</span><br><span class="line">4 10</span><br><span class="line">+++++++++++++</span><br><span class="line">[100 0 0 0 0] [100 4 6 8 10]</span><br><span class="line">===================================output===================================</span><br><span class="line">//slice本身没有数据，是对底层array的一个view</span><br><span class="line">//arr的值变为[0 1 10 3 4 5 6 7]</span><br></pre></td></tr></table></figure><p>Slice的扩展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">arr := [...]int&#123;0, 1, 2, 3, 4, 5, 6, 7&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;Extending slice&quot;)</span><br><span class="line">arr[0], arr[2] = 0, 2</span><br><span class="line">s1 := arr[2:6]</span><br><span class="line">s2 := s1[3:5]</span><br><span class="line">fmt.Println(&quot;s1=&quot;, s1)</span><br><span class="line">fmt.Println(&quot;s2=&quot;, s2)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">Extending slice</span><br><span class="line">s1= [2 3 4 5]</span><br><span class="line">s2= [5 6]</span><br><span class="line">===================================output===================================</span><br><span class="line">//6不在s1中，slice是怎么取到的？slice是数组的view</span><br><span class="line">//s2:=arr[3:5]              [0 1 2]    s2下标，下标2在s2中是看不到的</span><br><span class="line">//s1:=arr[2:6]        [0 1 2 3 4 5]    s1下标，下标4、5在s1中是看不到的，s1[4]会报错</span><br><span class="line">//arr             [0 1 2 3 4 5 6 7]    数组中数值</span><br><span class="line">//slice中有ptr、len、cap，只能取值到len的值，越界会报错</span><br><span class="line">//slice可以向后扩展，不可以向前扩展</span><br><span class="line">//s[i]不可以超越len(s)，向后扩展不可以超越底层数组cap(s)</span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">arr := [...]int&#123;0, 1, 2, 3, 4, 5, 6, 7&#125;</span><br><span class="line">fmt.Println(&quot;Extending slice&quot;)</span><br><span class="line">arr[0], arr[2] = 0, 2</span><br><span class="line">fmt.Println(&quot;arr =&quot;, arr)</span><br><span class="line">s1 := arr[2:6]</span><br><span class="line">s2 := s1[3:5]</span><br><span class="line">fmt.Printf(&quot;s1=%v, len(s1)=%d, cap(s1)=%d\n&quot;, s1, len(s1), cap(s1))</span><br><span class="line">fmt.Printf(&quot;s2=%v, len(s2)=%d, cap(s2)=%d\n&quot;, s2, len(s2), cap(s2))</span><br><span class="line">//我的理解是下标虽然取不到，但是可以扩展</span><br><span class="line">fmt.Println(s1[3:6])</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">Extending slice</span><br><span class="line">arr = [0 1 2 3 4 5 6 7]</span><br><span class="line">s1=[2 3 4 5], len(s1)=4, cap(s1)=6</span><br><span class="line">s2=[5 6], len(s2)=2, cap(s2)=3</span><br><span class="line">[5 6 7]</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><p>向Slice添加元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">arr := [...]int&#123;0, 1, 2, 3, 4, 5, 6, 7&#125;</span><br><span class="line">fmt.Println(&quot;Extending slice&quot;)</span><br><span class="line">arr[0], arr[2] = 0, 2</span><br><span class="line">fmt.Println(&quot;arr =&quot;, arr)</span><br><span class="line">s1 := arr[2:6]</span><br><span class="line">s2 := s1[3:5]</span><br><span class="line">fmt.Printf(&quot;s1=%v, len(s1)=%d, cap(s1)=%d\n&quot;, s1, len(s1), cap(s1))</span><br><span class="line">fmt.Printf(&quot;s2=%v, len(s2)=%d, cap(s2)=%d\n&quot;, s2, len(s2), cap(s2))</span><br><span class="line">fmt.Println(s1[3:6])</span><br><span class="line"></span><br><span class="line">s3 := append(s2, 10)</span><br><span class="line">s4 := append(s3, 11) //append超出arr的下标范围就不是原来的arr了，是一个新的array，新的array会设置的长一些</span><br><span class="line">s5 := append(s4, 12) //go语言会开辟一个新的array，把arr中的元素拷贝过去</span><br><span class="line">fmt.Println(&quot;s3, s4, s5 =&quot;, s3, s4, s5)</span><br><span class="line">// s4 and s5 no longer view arr.</span><br><span class="line">fmt.Println(&quot;arr =&quot;, arr)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">Extending slice</span><br><span class="line">arr = [0 1 2 3 4 5 6 7]</span><br><span class="line">s1=[2 3 4 5], len(s1)=4, cap(s1)=6</span><br><span class="line">s2=[5 6], len(s2)=2, cap(s2)=3</span><br><span class="line">[5 6 7]</span><br><span class="line">s3, s4, s5 = [5 6 10] [5 6 10 11] [5 6 10 11 12]</span><br><span class="line">arr = [0 1 2 3 4 5 6 10]</span><br><span class="line">===================================output===================================</span><br><span class="line">//添加元素时如果超越cap，系统会重新分配更大的底层数组</span><br><span class="line">//由于值传递的关系，必须接收append的返回值</span><br><span class="line">//s = append(s, val)</span><br></pre></td></tr></table></figure><p>Slice的创建，拷贝，删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func printSlice(s []int) &#123;</span><br><span class="line">fmt.Printf(&quot;%v, len=%d, cap=%d\n&quot;, s, len(s), cap(s))</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;Creating slice&quot;)</span><br><span class="line">var s []int //Zero value for slice is nil</span><br><span class="line">for i := 0; i &lt; 10 ; i++ &#123;</span><br><span class="line">printSlice(s)</span><br><span class="line">s = append(s, 2 * i + 1)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s)</span><br><span class="line">s1 := []int&#123;2, 4, 6, 8&#125;</span><br><span class="line">printSlice(s1)</span><br><span class="line">s2 := make([]int, 16)</span><br><span class="line">printSlice(s2)</span><br><span class="line">s3 := make([]int, 10, 32)</span><br><span class="line">printSlice(s3)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;Copying slice&quot;)</span><br><span class="line">copy(s2, s1)</span><br><span class="line">printSlice(s2)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;Deleting elements from slice&quot;)</span><br><span class="line">s2 = append(s2[:3], s2[4:]...)</span><br><span class="line">printSlice(s2)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;Popping from front&quot;)</span><br><span class="line">front := s2[0]</span><br><span class="line">s2 = s2[1:]</span><br><span class="line">fmt.Println(front)</span><br><span class="line">printSlice(s2)</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;Popping from back&quot;)</span><br><span class="line">tail := s2[len(s2) - 1]</span><br><span class="line">s2 = s2[:len(s2) - 1]</span><br><span class="line">fmt.Println(tail)</span><br><span class="line">printSlice(s2)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">Creating slice</span><br><span class="line">[], len=0, cap=0</span><br><span class="line">[1], len=1, cap=1</span><br><span class="line">[1 3], len=2, cap=2</span><br><span class="line">[1 3 5], len=3, cap=4</span><br><span class="line">[1 3 5 7], len=4, cap=4</span><br><span class="line">[1 3 5 7 9], len=5, cap=8</span><br><span class="line">[1 3 5 7 9 11], len=6, cap=8</span><br><span class="line">[1 3 5 7 9 11 13], len=7, cap=8</span><br><span class="line">[1 3 5 7 9 11 13 15], len=8, cap=8</span><br><span class="line">[1 3 5 7 9 11 13 15 17], len=9, cap=16</span><br><span class="line">[1 3 5 7 9 11 13 15 17 19]</span><br><span class="line">[2 4 6 8], len=4, cap=4</span><br><span class="line">[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0], len=16, cap=16</span><br><span class="line">[0 0 0 0 0 0 0 0 0 0], len=10, cap=32</span><br><span class="line">Copying slice</span><br><span class="line">[2 4 6 8 0 0 0 0 0 0 0 0 0 0 0 0], len=16, cap=16</span><br><span class="line">Deleting elements from slice</span><br><span class="line">[2 4 6 0 0 0 0 0 0 0 0 0 0 0 0], len=15, cap=16</span><br><span class="line">Popping from front</span><br><span class="line">2</span><br><span class="line">[4 6 0 0 0 0 0 0 0 0 0 0 0 0], len=14, cap=15</span><br><span class="line">Popping from back</span><br><span class="line">0</span><br><span class="line">[4 6 0 0 0 0 0 0 0 0 0 0 0], len=13, cap=15</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>定义：map[key]value            map[key_1]map[key_2]value</p><ul><li>创建：make(map[string]int)</li><li>获取元素：m[key]</li><li>key不存在时，获得value类型的初始值</li><li>用value, ok := m[key]来判断是否存在key</li><li>用delete删除一个key</li><li>使用range遍历key，或者遍历key, value对</li><li>不保证遍历顺序，如需顺序，需手动对key排序</li><li>使用len获取元素个数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">// map的定义</span><br><span class="line">m := map[string]string &#123;</span><br><span class="line">&quot;name&quot;: &quot;ccmouse&quot;,</span><br><span class="line">&quot;course&quot;: &quot;golang&quot;,</span><br><span class="line">&quot;site&quot;: &quot;imooc&quot;,</span><br><span class="line">&quot;quality&quot;: &quot;notbad&quot;,</span><br><span class="line">&#125;</span><br><span class="line">m2 := make(map[string]int)// m2 == empty map</span><br><span class="line">var m3 map[string]int// m3 == nil</span><br><span class="line">fmt.Println(m, m2, m3)</span><br><span class="line">// map的遍历</span><br><span class="line">fmt.Println(&quot;Traversing map&quot;)</span><br><span class="line">for k, v := range m &#123;</span><br><span class="line">fmt.Println(k, v)</span><br><span class="line">&#125;</span><br><span class="line">// 获取value</span><br><span class="line">fmt.Println(&quot;Getting values&quot;)</span><br><span class="line">courseName, ok := m[&quot;course&quot;]</span><br><span class="line">fmt.Println(courseName, ok)</span><br><span class="line">// key拼错了怎么办？会打印空串</span><br><span class="line">causeName, ok := m[&quot;cause&quot;]</span><br><span class="line">fmt.Println(causeName, ok)</span><br><span class="line">if causeName, ok := m[&quot;cause&quot;]; ok &#123;</span><br><span class="line">fmt.Println(causeName)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">fmt.Println(&quot;key does not exist&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 删除</span><br><span class="line">fmt.Println(&quot;Deleting values&quot;)</span><br><span class="line">name, ok := m[&quot;name&quot;]</span><br><span class="line">fmt.Println(name, ok)</span><br><span class="line">delete(m, &quot;name&quot;)</span><br><span class="line">name, ok = m[&quot;name&quot;]</span><br><span class="line">fmt.Println(name, ok)</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">map[name:ccmouse course:golang site:imooc quality:notbad] map[] map[]</span><br><span class="line">Traversing map</span><br><span class="line">site imooc</span><br><span class="line">quality notbad</span><br><span class="line">name ccmouse</span><br><span class="line">course golang</span><br><span class="line">Getting values</span><br><span class="line">golang true</span><br><span class="line"> false</span><br><span class="line">key does not exist</span><br><span class="line">Deleting values</span><br><span class="line">ccmouse true</span><br><span class="line"> false</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><h3 id="map的key"><a href="#map的key" class="headerlink" title="map的key"></a>map的key</h3><ul><li>map使用哈希表，必须可以比较相等</li><li>除了slice，map，function的内建类型都可以作为key</li><li>struct类型不包含上述字段，也可作为key</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">例：寻找最长不含有重复字符的子串</span><br><span class="line">abcabcbb -&gt; abc</span><br><span class="line">bbbbb -&gt; b</span><br><span class="line">pwwkew -&gt; wke</span><br><span class="line">思路：</span><br><span class="line">对于每一个字母x</span><br><span class="line">lastOccurred[x]不存在，或者 &lt; start   -----&gt;   无需操作</span><br><span class="line">lastOccurred[x] &gt;= start   -----&gt;   更新start</span><br><span class="line">更新lastOccurred[x]，更新maxLength</span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func lengthOfNonRepeatingSubStr(s string) int &#123;</span><br><span class="line">lastOccurred := make(map[byte]int)</span><br><span class="line">start := 0</span><br><span class="line">maxLength := 0</span><br><span class="line">for i, ch := range []byte(s) &#123;</span><br><span class="line">if lastI, ok := lastOccurred[ch]; ok &amp;&amp; lastI &gt;= start &#123;</span><br><span class="line">//if lastOccurred[ch] &gt;= start &#123;</span><br><span class="line">start = lastI + i</span><br><span class="line">&#125;</span><br><span class="line">if i - start + 1 &gt;  maxLength &#123;</span><br><span class="line">maxLength = i - start + 1</span><br><span class="line">&#125;</span><br><span class="line">lastOccurred[ch] = i</span><br><span class="line">&#125;</span><br><span class="line">return  maxLength</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;abcabcbb&quot;))</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;bbbbb&quot;))</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;pwwkew&quot;))</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;&quot;))</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;b&quot;))</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;abcdef&quot;))</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><h3 id="rune相当于go的char"><a href="#rune相当于go的char" class="headerlink" title="rune相当于go的char"></a>rune相当于go的char</h3><ul><li>使用range遍历pos，rune对</li><li>使用utf8.RuneCountInString获得字符数量</li><li>使用len获得字节长度</li><li>使用[]byte获得字节</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;unicode/utf8&quot;</span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line">s := &quot;Yes我爱慕课网!&quot;  //UTF-8</span><br><span class="line">fmt.Println(s)</span><br><span class="line">for _, b := range []byte(s) &#123;</span><br><span class="line">fmt.Printf(&quot;%X &quot;, b)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">for i, ch := range s &#123;// ch is a rune</span><br><span class="line">fmt.Printf(&quot;(%d %X) &quot;, i ,ch)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println(&quot;Rune count:&quot;, utf8.RuneCountInString(s))</span><br><span class="line">bytes := []byte(s)</span><br><span class="line">for len(bytes) &gt; 0 &#123;</span><br><span class="line">ch, size := utf8.DecodeRune(bytes)</span><br><span class="line">bytes = bytes[size:]</span><br><span class="line">fmt.Printf(&quot;%c &quot;, ch)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">for i, ch := range []rune(s) &#123;</span><br><span class="line">fmt.Printf(&quot;(%d %c) &quot;, i, ch)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">Yes我爱慕课网!</span><br><span class="line">59 65 73 E6 88 91 E7 88 B1 E6 85 95 E8 AF BE E7 BD 91 21 </span><br><span class="line">(0 59) (1 65) (2 73) (3 6211) (6 7231) (9 6155) (12 8BFE) (15 7F51) (18 21) </span><br><span class="line">Rune count: 9</span><br><span class="line">Y e s 我 爱 慕 课 网 ! </span><br><span class="line">(0 Y) (1 e) (2 s) (3 我) (4 爱) (5 慕) (6 课) (7 网) (8 !) </span><br><span class="line">===================================output===================================</span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">func lengthOfNonRepeatingSubStr(s string) int &#123;</span><br><span class="line">lastOccurred := make(map[rune]int)</span><br><span class="line">for k, v := range lastOccurred  &#123;</span><br><span class="line">fmt.Printf(&quot;%k=%v, v=%v &quot;, k, v)</span><br><span class="line">&#125;</span><br><span class="line">start := 0</span><br><span class="line">maxLength := 0</span><br><span class="line">for i, ch := range []rune(s) &#123;</span><br><span class="line">lastI, ok := lastOccurred[ch]</span><br><span class="line">if ok &amp;&amp; lastI &gt;= start &#123;</span><br><span class="line">//if lastOccurred[ch] &gt;= start &#123;</span><br><span class="line">start = lastI + i</span><br><span class="line">&#125;</span><br><span class="line">if i - start + 1 &gt;  maxLength &#123;</span><br><span class="line">maxLength = i - start + 1</span><br><span class="line">&#125;</span><br><span class="line">lastOccurred[ch] = i</span><br><span class="line">&#125;</span><br><span class="line">return  maxLength</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;abcabcbb&quot;))</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;bbbbb&quot;))</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;pwwkew&quot;))</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;&quot;))</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;b&quot;))</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;abcdef&quot;))</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;一二三二一&quot;))</span><br><span class="line">fmt.Println(lengthOfNonRepeatingSubStr(&quot;一二三四五六&quot;))</span><br><span class="line">&#125;</span><br><span class="line">===================================output===================================</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">===================================output===================================</span><br></pre></td></tr></table></figure><h3 id="其他字符串操作"><a href="#其他字符串操作" class="headerlink" title="其他字符串操作"></a>其他字符串操作</h3><ul><li>Fields，Split，Join</li><li>Contains，Index</li><li>ToLower，ToUpper</li><li>Trim，TrimRight，TrimLeft</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph-ansible project</title>
      <link href="/2018/08/29/ceph-ansible-project/"/>
      <url>/2018/08/29/ceph-ansible-project/</url>
      
        <content type="html"><![CDATA[<p>近期工作是调研teuthology，目标是把teuthology enable起来做ceph的测试使用，但没想到teuthology只是冰山一角，其关联了ceph社区的整套CI/CD，这套CI/CD关联项目多的力不从心，其关联的项目大致如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/ceph/shaman.git</span><br><span class="line">https://github.com/ceph/teuthology.git</span><br><span class="line">https://github.com/ceph/ceph-cm-ansible.git</span><br><span class="line">https://github.com/ceph/pulpito.git</span><br><span class="line">https://github.com/ceph/ceph-qa-suite.git</span><br><span class="line">https://github.com/ceph/paddles.git</span><br><span class="line">https://github.com/ceph/ceph.git</span><br><span class="line">还有很多未知的，shaman社区明确说是内部使用的，不提供文档，所以只能撸代码，从代码中找数据库的表结构，到目前还没时间找出来。https://github.com/ceph/shaman/issues/110</span><br></pre></td></tr></table></figure><p>既然社区使用ansible，并且Sébastien Han一直维护，毕竟有他的道理，ansible在自动化运维领域也是很常用的（尤其在大规模部署的情况下），倒不如借着这个机会学习一下。</p><p>ansible基础语法看以下两个文章差不多够用，再有问题可以查ansible官网。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.w3cschool.cn/automate_with_ansible/</span><br><span class="line">https://www.cnblogs.com/f-ck-need-u/p/7567417.html</span><br></pre></td></tr></table></figure><p>接着来看一下ceph-ansible项目，README中给出了文档，一个是<a href="http://docs.ceph.com/ceph-ansible/master/" target="_blank" rel="noopener">master</a>一个是<a href="http://docs.ceph.com/ceph-ansible/stable-3.0/" target="_blank" rel="noopener">stable-3.0</a>。我没有那么傻，当然是看stable-3.0了，哈哈。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/ceph/ceph-ansible</span><br></pre></td></tr></table></figure><p>首先是把ceph-ansible的playbooks clone下来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# yum install git -y</span><br><span class="line">[root@k8s-master ~]# git clone https://github.com/ceph/ceph-ansible.git</span><br><span class="line">[root@k8s-master ~]# cd ceph-ansible/</span><br><span class="line"># 当然branch也要对应文档，这样后续困难应该少一点</span><br><span class="line">[root@k8s-master ceph-ansible]# git checkout -b mystable-3.0 origin/stable-3.0</span><br></pre></td></tr></table></figure><p>接着需要安装ansible，官方stable-3.0文档中说明了ceph-ansible项目各个branch，支持ansible版本和ceph版本。我们只看现在的branch，其他branch有需要再说。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stable-3.0支持ceph版本jewel和luminous。该branch支持ansible版本2.3.1,2.3.2和2.4.2。</span><br></pre></td></tr></table></figure><h1 id="安装ansible-2-4-2"><a href="#安装ansible-2-4-2" class="headerlink" title="安装ansible 2.4.2"></a>安装ansible 2.4.2</h1><p>使用yum安装指定版本的ansible</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@cephJ ~]# yum -h | grep show</span><br><span class="line">  --showduplicates      在 list/search 命令下，显示源里重复的条目</span><br><span class="line"></span><br><span class="line">[root@cephJ ~]# yum --showduplicates list ansible</span><br><span class="line">已加载插件：fastestmirror, priorities</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.cn99.com</span><br><span class="line"> * epel: www.ftp.ne.jp</span><br><span class="line"> * extras: mirrors.nwsuaf.edu.cn</span><br><span class="line"> * nux-dextop: li.nux.ro</span><br><span class="line"> * updates: mirrors.nwsuaf.edu.cn</span><br><span class="line">12 packages excluded due to repository priority protections</span><br><span class="line">可安装的软件包</span><br><span class="line">ansible.noarch                                                                          2.4.2.0-2.el7                                                                          extras</span><br><span class="line">ansible.noarch                                                                          2.7.5-1.el7                                                                            epel  </span><br><span class="line"></span><br><span class="line">### sudo yum install &lt;package name&gt;-&lt;version info&gt;</span><br><span class="line">[root@cephJ ~]# sudo yum install -y ansible-2.4.2.0</span><br><span class="line"></span><br><span class="line">[root@cephJ ~]# ansible --version</span><br><span class="line">ansible 2.4.2.0</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = [u&apos;/root/.ansible/plugins/modules&apos;, u&apos;/usr/share/ansible/plugins/modules&apos;]</span><br><span class="line">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class="line">  executable location = /usr/bin/ansible</span><br><span class="line">  python version = 2.7.5 (default, Apr 11 2018, 07:36:10) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]</span><br></pre></td></tr></table></figure><h1 id="配置ceph-ansible"><a href="#配置ceph-ansible" class="headerlink" title="配置ceph-ansible"></a>配置ceph-ansible</h1><p>准备四台机器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ansible节点</span><br><span class="line">ansible-master</span><br><span class="line"></span><br><span class="line">ceph节点</span><br><span class="line">ansible-ceph-1</span><br><span class="line">ansible-ceph-2</span><br><span class="line">ansible-ceph-3</span><br></pre></td></tr></table></figure><p>配置ansible</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">ansible节点执行</span><br><span class="line"></span><br><span class="line">1、首先clone代码</span><br><span class="line">[root@ansible-master ~]# git clone https://github.com/ceph/ceph-ansible.git &amp;&amp; cd ceph-ansible/</span><br><span class="line"></span><br><span class="line">2、创建本地分支并切换分支</span><br><span class="line">[root@ansible-master ceph-ansible]# git checkout -b myv3.2.0 v3.2.0 </span><br><span class="line"></span><br><span class="line">3、copy模板文件</span><br><span class="line">[root@ansible-master ceph-ansible]# cp site.yml.sample site.yml</span><br><span class="line"></span><br><span class="line">4、修改ansible机器清单(inventory)</span><br><span class="line">[root@ansible-master ~]# vim /etc/ansible/hosts</span><br><span class="line">[mons]</span><br><span class="line">ansible-ceph-[1:3]ansible_ssh_pass=yujiang2</span><br><span class="line">[osds]</span><br><span class="line">ansible-ceph-[1:3]ansible_ssh_pass=yujiang2</span><br><span class="line">[rgws]</span><br><span class="line">ansible-ceph-[1:3]ansible_ssh_pass=yujiang2</span><br><span class="line">[mgrs]</span><br><span class="line">ansible-ceph-[1:3]  ansible_ssh_pass=yujiang2</span><br><span class="line"></span><br><span class="line">5、批量推送sshkey</span><br><span class="line">[root@ansible-master ~]# ssh-keygen -t rsa</span><br><span class="line">[root@ansible-master ~]# cat push-ssh.yaml </span><br><span class="line">- hosts: all</span><br><span class="line">  user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: ssh-key-copy</span><br><span class="line">      authorized_key: user=root key=&quot;&#123;&#123; lookup(&apos;file&apos;,&apos;/root/.ssh/id_rsa.pub&apos;)&#125;&#125;&quot;</span><br><span class="line">      tags:</span><br><span class="line">        - sshkey</span><br><span class="line"></span><br><span class="line">[root@ansible-master ~]# ansible-playbook push-ssh.yaml</span><br><span class="line">ansible-ceph-1             : ok=2    changed=1    unreachable=0    failed=0   </span><br><span class="line">ansible-ceph-2             : ok=2    changed=1    unreachable=0    failed=0   </span><br><span class="line">ansible-ceph-3             : ok=2    changed=1    unreachable=0    failed=0 </span><br><span class="line"></span><br><span class="line">6、安装pip并安装ceph-ansible依赖</span><br><span class="line">[root@ansible-master ~]# curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot; &amp;&amp; python get-pip.py &amp;&amp; pip install --upgrade setuptools</span><br><span class="line">[root@ansible-master ceph-ansible]# pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">7、修改ansible变量</span><br><span class="line">[root@ansible-master group_vars]# pwd</span><br><span class="line">/root/ceph-ansible/group_vars</span><br><span class="line"></span><br><span class="line">[root@ansible-master group_vars]# cp all.yml.sample all.yml &amp;&amp; cp osds.yml.sample osds.yml &amp;&amp; cp mgrs.yml.sample mgrs.yml</span><br><span class="line"></span><br><span class="line">all.yml修改如下：</span><br><span class="line">mon_group_name: mons</span><br><span class="line">osd_group_name: osds</span><br><span class="line">ntp_daemon_type: chronyd</span><br><span class="line">ceph_origin: repository</span><br><span class="line">ceph_repository: community</span><br><span class="line">ceph_mirror: http://mirrors.163.com/ceph</span><br><span class="line">ceph_stable_key: http://mirrors.163.com/ceph/keys/release.asc</span><br><span class="line">ceph_stable_release: luminous</span><br><span class="line">ceph_stable_repo: &quot;&#123;&#123; ceph_mirror &#125;&#125;/rpm-&#123;&#123; ceph_stable_release &#125;&#125;/el7/x86_64&quot;</span><br><span class="line">monitor_interface: eth0</span><br><span class="line">public_network: 192.168.0.0/24</span><br><span class="line">cluster_network: 192.168.0.0/24</span><br><span class="line">radosgw_interface: eth0</span><br><span class="line">radosgw_address: 0.0.0.0</span><br><span class="line"></span><br><span class="line">osds.yml修改如下：</span><br><span class="line">copy_admin_key: true</span><br><span class="line">devices:</span><br><span class="line"> - /dev/vdb</span><br><span class="line">osd_scenario: collocated</span><br><span class="line"></span><br><span class="line">mgrs.yml修改如下：</span><br><span class="line">ceph_mgr_modules: [status,dashboard]</span><br><span class="line"></span><br><span class="line">8、执行ansible开始部署ceph，部署哪些模块会在/etc/ansible/hosts中定义（下面是我们之前定义的），如果在该文件中没有对应模块定义，ansible会忽略该模块的部署。</span><br><span class="line">[mons]</span><br><span class="line">ansible-ceph-[1:3]ansible_ssh_pass=yujiang2</span><br><span class="line">[osds]</span><br><span class="line">ansible-ceph-[1:3]ansible_ssh_pass=yujiang2</span><br><span class="line">[rgws]</span><br><span class="line">ansible-ceph-[1:3]ansible_ssh_pass=yujiang2</span><br><span class="line">[mgrs]</span><br><span class="line">ansible-ceph-[1:3]  ansible_ssh_pass=yujiang2</span><br><span class="line"></span><br><span class="line">9、修改ansible host_key_checking</span><br><span class="line">[root@ansible-master ~]# vim /etc/ansible/ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line">host_key_checking = False</span><br><span class="line"></span><br><span class="line">[root@ansible-master ceph-ansible]# pwd</span><br><span class="line">/root/ceph-ansible</span><br><span class="line">[root@ansible-master ceph-ansible]# ansible-playbook site.yml</span><br><span class="line">PLAY RECAP *******************************************************************************************************************************************************************************************************************************************************************</span><br><span class="line">ansible-ceph-1             : ok=310  changed=17   unreachable=0    failed=0   </span><br><span class="line">ansible-ceph-2             : ok=287  changed=17   unreachable=0    failed=0   </span><br><span class="line">ansible-ceph-3             : ok=289  changed=20   unreachable=0    failed=0   </span><br><span class="line"></span><br><span class="line">INSTALLER STATUS *************************************************************************************************************************************************************************************************************************************************************</span><br><span class="line">Install Ceph Monitor        : Complete (0:00:37)</span><br><span class="line">Install Ceph Manager        : Complete (0:01:05)</span><br><span class="line">Install Ceph OSD            : Complete (0:00:38)</span><br><span class="line">Install Ceph RGW            : Complete (0:00:30)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 虚拟机科学上网</title>
      <link href="/2018/08/21/centos7-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
      <url>/2018/08/21/centos7-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://cloud.tencent.com/developer/article/1122336" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1122336</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# yum groupinstall &quot;Development Tools&quot; -y &amp;&amp; yum install -y m2crypto python-setuptools &amp;&amp; easy_install pip &amp;&amp; python -m pip install --upgrade pip &amp;&amp; python -m pip install --upgrade setuptools &amp;&amp; pip install shadowsocks</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# vi /etc/shadowsocks.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;38.*.*.*&quot;,</span><br><span class="line">  &quot;server_port&quot;: 7777,</span><br><span class="line">  &quot;password&quot;: &quot;pwd&quot;,</span><br><span class="line">  &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class="line">  &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">  &quot;local_port&quot;:1080</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# sslocal  -c /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# yum install epel-release -y &amp;&amp; yum install -y privoxy</span><br><span class="line">[root@k8s-master ~]# vi /etc/privoxy/config</span><br><span class="line">forward-socks5t   /               127.0.0.1:1080</span><br><span class="line">listen-address  127.0.0.1:8118</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# vi  ~/.bashrc</span><br><span class="line">export http_proxy=http://127.0.0.1:8118</span><br><span class="line">export https_proxy=http://127.0.0.1:8118</span><br><span class="line">export ftp_proxy=http://127.0.0.1:8118</span><br><span class="line">[root@k8s-master ~]# source ~/.bashrc </span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# systemctl restart privoxy.service &amp;&amp; systemctl status privoxy.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s centos7 部署</title>
      <link href="/2018/08/20/k8s-centos7-%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/08/20/k8s-centos7-%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>参考文章：针对以下文章的实际操作</p><p>【1】<a href="https://juejin.im/post/5b45d4185188251ac062f27c" target="_blank" rel="noopener">https://juejin.im/post/5b45d4185188251ac062f27c</a></p><p>【2】<a href="https://blog.qikqiak.com/post/use-kubeadm-install-kubernetes-1.10/" target="_blank" rel="noopener">https://blog.qikqiak.com/post/use-kubeadm-install-kubernetes-1.10/</a></p><h2 id="虚拟机master节点和slave节点——Docker版本"><a href="#虚拟机master节点和slave节点——Docker版本" class="headerlink" title="虚拟机master节点和slave节点——Docker版本"></a>虚拟机master节点和slave节点——Docker版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 所有master节点和slave节点</span><br><span class="line">[root@k8s-master ~]# docker --version</span><br><span class="line">Docker version 1.13.1, build dded712/1.13.1</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# yum install -y docker &amp;&amp; systemctl enable docker &amp;&amp; systemctl restart docker</span><br><span class="line">[root@k8s-slave ~]# yum install -y docker &amp;&amp; systemctl enable docker &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="虚拟机master节点——安装etcd"><a href="#虚拟机master节点——安装etcd" class="headerlink" title="虚拟机master节点——安装etcd"></a>虚拟机master节点——安装etcd</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# hostnamectl</span><br><span class="line">   Static hostname: rhel7</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">        Machine ID: 5b097de8abcc4690b4cdd7ec9deefbc4</span><br><span class="line">           Boot ID: 89bd04baef274f4f9e8eceb107547e5a</span><br><span class="line">    Virtualization: kvm</span><br><span class="line">  Operating System: CentOS Linux 7 (Core)</span><br><span class="line">       CPE OS Name: cpe:/o:centos:centos:7</span><br><span class="line">            Kernel: Linux 3.10.0-862.el7.x86_64</span><br><span class="line">      Architecture: x86-64</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# yum install wget -y &amp;&amp; wget https://github.com/coreos/etcd/releases/download/v3.3.9/etcd-v3.3.9-linux-amd64.tar.gz &amp;&amp; tar zxvf etcd-v3.3.9-linux-amd64.tar.gz &amp;&amp; cd etcd-v3.3.9-linux-amd64</span><br><span class="line"></span><br><span class="line">[root@k8s-master etcd-v3.3.9-linux-amd64]# cp etcd /usr/bin/ &amp;&amp; cp etcdctl /usr/bin/</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# vi /usr/lib/systemd/system/etcd.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/var/lib/etcd/</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line">User=root</span><br><span class="line"># set GOMAXPROCS to number of processors</span><br><span class="line">ExecStart=/bin/bash -c &quot;GOMAXPROCS=$(nproc) /usr/bin/etcd --name=\&quot;$&#123;ETCD_NAME&#125;\&quot; --data-dir=\&quot;$&#123;ETCD_DATA_DIR&#125;\&quot; --listen-client-urls=\&quot;$&#123;ETCD_LISTEN_CLIENT_URLS&#125;\&quot;&quot;</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# systemctl daemon-reload &amp;&amp; systemctl start etcd &amp;&amp; systemctl enable etcd &amp;&amp; systemctl status etcd</span><br><span class="line"></span><br><span class="line">使用kubeadm安装要关闭etcd，</span><br></pre></td></tr></table></figure><h2 id="虚拟机master节点——安装"><a href="#虚拟机master节点——安装" class="headerlink" title="虚拟机master节点——安装"></a>虚拟机master节点——安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"># 所有master和slave节点，配置kubernetes源</span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">[root@k8s-master ~]# yum install -y kubelet kubeadm kubectl ipvsadm</span><br><span class="line"></span><br><span class="line"># 所有master和slave节点</span><br><span class="line">[root@k8s-master ~]# iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"># 所有master和slave节点，配置转发相关参数</span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line">[root@k8s-master ~]# sysctl --system</span><br><span class="line"></span><br><span class="line"># 所有master和slave节点，加载ipvs相关内核模块</span><br><span class="line">[root@k8s-master ~]# modprobe ip_vs</span><br><span class="line">[root@k8s-master ~]# modprobe ip_vs_rr</span><br><span class="line">[root@k8s-master ~]# modprobe ip_vs_wrr</span><br><span class="line">[root@k8s-master ~]# modprobe ip_vs_sh</span><br><span class="line">[root@k8s-master ~]# modprobe nf_conntrack_ipv4</span><br><span class="line">[root@k8s-master ~]# lsmod | grep ip_vs</span><br><span class="line">ip_vs_sh               12688  0 </span><br><span class="line">ip_vs_wrr              12697  0 </span><br><span class="line">ip_vs_rr               12600  0 </span><br><span class="line">ip_vs                 141432  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr</span><br><span class="line">nf_conntrack          133053  6 ip_vs,nf_nat,nf_nat_ipv4,xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_ipv4</span><br><span class="line">libcrc32c              12644  4 xfs,ip_vs,nf_nat,nf_conntrack</span><br><span class="line"># 或持久化</span><br><span class="line">[root@k8s-master modules]# cat /etc/sysconfig/modules/k8s.modules</span><br><span class="line">#！/bin/sh</span><br><span class="line">/sbin/modinfo -F filename ip_vs &gt; /dev/null 2&gt;&amp;1 </span><br><span class="line">if [ $? -eq 0 ]; then </span><br><span class="line">    /sbin/modprobe ip_vs</span><br><span class="line">fi</span><br><span class="line">/sbin/modinfo -F filename ip_vs_rr &gt; /dev/null 2&gt;&amp;1 </span><br><span class="line">if [ $? -eq 0 ]; then </span><br><span class="line">    /sbin/modprobe ip_vs_rr</span><br><span class="line">fi</span><br><span class="line">/sbin/modinfo -F filename ip_vs_wrr &gt; /dev/null 2&gt;&amp;1 </span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    /sbin/modprobe ip_vs_wrr</span><br><span class="line">fi</span><br><span class="line">/sbin/modinfo -F filename ip_vs_sh &gt; /dev/null 2&gt;&amp;1 </span><br><span class="line">if [ $? -eq 0 ]; then </span><br><span class="line">    /sbin/modprobe ip_vs_sh</span><br><span class="line">fi</span><br><span class="line">/sbin/modinfo -F filename nf_conntrack_ipv4 &gt; /dev/null 2&gt;&amp;1 </span><br><span class="line">if [ $? -eq 0 ]; then </span><br><span class="line">    /sbin/modprobe nf_conntrack_ipv4</span><br><span class="line">fi</span><br><span class="line">[root@k8s-master modules]# chmod +x k8s.modules</span><br><span class="line">[root@k8s-master ~]# reboot</span><br><span class="line">[root@k8s-master ~]# lsmod | grep ip_vs</span><br><span class="line"></span><br><span class="line"># 所有master和slave节点，修改hosts文件</span><br><span class="line">[root@k8s-master ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.56.200k8s-masterk8s-master.localdomain</span><br><span class="line">192.168.56.201k8s-slavek8s-slave.localdomain</span><br><span class="line"></span><br><span class="line"># 所有master和slave节点</span><br><span class="line">[root@k8s-master ~]# DOCKER_CGROUPS=$(docker info | grep &apos;Cgroup&apos; | cut -d&apos; &apos; -f3)</span><br><span class="line">[root@k8s-master ~]# echo $DOCKER_CGROUPS</span><br><span class="line"># 或持久化</span><br><span class="line">[root@k8s-master ~]# vi /etc/profile</span><br><span class="line">export DOCKER_CGROUPS=$(docker info | grep &apos;Cgroup&apos; | cut -d&apos; &apos; -f3)</span><br><span class="line">[root@k8s-master ~]# source /etc/profile</span><br><span class="line"></span><br><span class="line"># 所有master和slave节点</span><br><span class="line">cat &gt;/etc/sysconfig/kubelet&lt;&lt;EOF</span><br><span class="line">KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=$DOCKER_CGROUPS --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1&quot;</span><br><span class="line">EOF</span><br><span class="line">[root@k8s-master ~]# systemctl daemon-reload &amp;&amp; systemctl enable kubelet &amp;&amp; systemctl start kubelet &amp;&amp; systemctl status kubelet</span><br><span class="line"></span><br><span class="line"># 永久关闭 注释/etc/fstab文件里swap相关的行</span><br><span class="line">[root@k8s-master ~]# swapoff -a</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.2</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: 192.168.56.200</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  </span><br><span class="line">kubeProxy:</span><br><span class="line">  config:</span><br><span class="line">    # mode: ipvs</span><br><span class="line">    mode: iptables</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# kubeadm config images pull --config kubeadm-master.config</span><br><span class="line">[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver-amd64:v1.11.2</span><br><span class="line">[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager-amd64:v1.11.2</span><br><span class="line">[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler-amd64:v1.11.2</span><br><span class="line">[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.11.2</span><br><span class="line">[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1</span><br><span class="line">[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.2.18</span><br><span class="line">[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.1.3</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# kubeadm init --config kubeadm-master.config</span><br><span class="line">[init] using Kubernetes version: v1.11.2</span><br><span class="line">[preflight] running pre-flight checks</span><br><span class="line">I0822 05:07:42.655181    8212 kernel_validator.go:81] Validating kernel version</span><br><span class="line">I0822 05:07:42.655280    8212 kernel_validator.go:96] Validating kernel config</span><br><span class="line">[preflight] Some fatal errors occurred:</span><br><span class="line">[ERROR DirAvailable--var-lib-etcd]: /var/lib/etcd is not empty</span><br><span class="line">[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`</span><br><span class="line">[root@k8s-master ~]# rm -rf /var/lib/etcd/*</span><br><span class="line">[root@k8s-master ~]# kubeadm init --config kubeadm-master.config</span><br><span class="line">[init] using Kubernetes version: v1.11.2</span><br><span class="line">[preflight] running pre-flight checks</span><br><span class="line">I0822 05:08:00.364246    8239 kernel_validator.go:81] Validating kernel version</span><br><span class="line">I0822 05:08:00.364505    8239 kernel_validator.go:96] Validating kernel config</span><br><span class="line">[preflight/images] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight/images] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight/images] You can also perform this action in beforehand using &apos;kubeadm config images pull&apos;</span><br><span class="line">[kubelet] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="line">[kubelet] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[preflight] Activating the kubelet service</span><br><span class="line">[certificates] Generated ca certificate and key.</span><br><span class="line">[certificates] Generated apiserver certificate and key.</span><br><span class="line">[certificates] apiserver serving cert is signed for DNS names [k8s-master.localdomain kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.56.200]</span><br><span class="line">[certificates] Generated apiserver-kubelet-client certificate and key.</span><br><span class="line">[certificates] Generated sa key and public key.</span><br><span class="line">[certificates] Generated front-proxy-ca certificate and key.</span><br><span class="line">[certificates] Generated front-proxy-client certificate and key.</span><br><span class="line">[certificates] Generated etcd/ca certificate and key.</span><br><span class="line">[certificates] Generated etcd/server certificate and key.</span><br><span class="line">[certificates] etcd/server serving cert is signed for DNS names [k8s-master.localdomain localhost] and IPs [127.0.0.1 ::1]</span><br><span class="line">[certificates] Generated etcd/peer certificate and key.</span><br><span class="line">[certificates] etcd/peer serving cert is signed for DNS names [k8s-master.localdomain localhost] and IPs [192.168.56.200 127.0.0.1 ::1]</span><br><span class="line">[certificates] Generated etcd/healthcheck-client certificate and key.</span><br><span class="line">[certificates] Generated apiserver-etcd-client certificate and key.</span><br><span class="line">[certificates] valid certificates and keys now exist in &quot;/etc/kubernetes/pki&quot;</span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: &quot;/etc/kubernetes/admin.conf&quot;</span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: &quot;/etc/kubernetes/kubelet.conf&quot;</span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: &quot;/etc/kubernetes/controller-manager.conf&quot;</span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: &quot;/etc/kubernetes/scheduler.conf&quot;</span><br><span class="line">[controlplane] wrote Static Pod manifest for component kube-apiserver to &quot;/etc/kubernetes/manifests/kube-apiserver.yaml&quot;</span><br><span class="line">[controlplane] wrote Static Pod manifest for component kube-controller-manager to &quot;/etc/kubernetes/manifests/kube-controller-manager.yaml&quot;</span><br><span class="line">[controlplane] wrote Static Pod manifest for component kube-scheduler to &quot;/etc/kubernetes/manifests/kube-scheduler.yaml&quot;</span><br><span class="line">[etcd] Wrote Static Pod manifest for a local etcd instance to &quot;/etc/kubernetes/manifests/etcd.yaml&quot;</span><br><span class="line">[init] waiting for the kubelet to boot up the control plane as Static Pods from directory &quot;/etc/kubernetes/manifests&quot; </span><br><span class="line">[init] this might take a minute or longer if the control plane images have to be pulled</span><br><span class="line">[apiclient] All control plane components are healthy after 39.501843 seconds</span><br><span class="line">[uploadconfig] storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.11&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class="line">[markmaster] Marking the node k8s-master.localdomain as master by adding the label &quot;node-role.kubernetes.io/master=&apos;&apos;&quot;</span><br><span class="line">[markmaster] Marking the node k8s-master.localdomain as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[patchnode] Uploading the CRI Socket information &quot;/var/run/dockershim.sock&quot; to the Node API object &quot;k8s-master.localdomain&quot; as an annotation</span><br><span class="line">[bootstraptoken] using token: vyabge.9wi2cqgukrf3c2qh</span><br><span class="line">[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class="line">[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[bootstraptoken] creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of machines by running the following on each node</span><br><span class="line">as root:</span><br><span class="line"></span><br><span class="line">  kubeadm join 192.168.56.200:6443 --token vyabge.9wi2cqgukrf3c2qh --discovery-token-ca-cert-hash sha256:2224c75b200730114e0153aa7aea9014affd90ffc47cfe08b7f931ef8e58b6ab</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# rm -rf $HOME/.kube</span><br><span class="line">[root@k8s-master ~]# mkdir -p $HOME/.kube</span><br><span class="line">[root@k8s-master ~]# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">[root@k8s-master ~]# sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line">[root@k8s-master ~]# kubectl get nodes</span><br><span class="line">NAME                     STATUS     ROLES     AGE       VERSION</span><br><span class="line">k8s-master.localdomain   NotReady   master    2d        v1.11.2</span><br></pre></td></tr></table></figure><h2 id="虚拟机master节点——安装flannel"><a href="#虚拟机master节点——安装flannel" class="headerlink" title="虚拟机master节点——安装flannel"></a>虚拟机master节点——安装flannel</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># 下载配置文件</span><br><span class="line">[root@k8s-master ~]# mkdir flannel &amp;&amp; cd flannel</span><br><span class="line">[root@k8s-master flannel]# wget https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"># 修改配置</span><br><span class="line"># 此处的ip配置要与上面kubeadm的pod-network一致</span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span><br><span class="line">      &quot;Backend&quot;: &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;vxlan&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"># 修改镜像</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"># 如果Node有多个网卡的话，参考flannel issues 39701，</span><br><span class="line"># https://github.com/kubernetes/kubernetes/issues/39701</span><br><span class="line"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span><br><span class="line"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span><br><span class="line"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        command:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=enp0s8</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">[root@k8s-master flannel]# kubectl apply -f kube-flannel.yml</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class="line">serviceaccount/flannel created</span><br><span class="line">configmap/kube-flannel-cfg created</span><br><span class="line">daemonset.extensions/kube-flannel-ds created</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line">[root@k8s-master flannel]# kubectl get pods --namespace kube-system</span><br><span class="line">NAME                                             READY     STATUS              RESTARTS   AGE</span><br><span class="line">coredns-777d78ff6f-2z75r                         0/1       ContainerCreating   0          2d</span><br><span class="line">coredns-777d78ff6f-rghp9                         0/1       ContainerCreating   0          2d</span><br><span class="line">etcd-k8s-master.localdomain                      1/1       Running             1          2d</span><br><span class="line">kube-apiserver-k8s-master.localdomain            1/1       Running             1          2d</span><br><span class="line">kube-controller-manager-k8s-master.localdomain   1/1       Running             1          2d</span><br><span class="line">kube-flannel-ds-jftcs                            1/1       Running             0          19s</span><br><span class="line">kube-proxy-wvsxb                                 1/1       Running             1          2d</span><br><span class="line">kube-scheduler-k8s-master.localdomain            1/1       Running             1          2d</span><br><span class="line">[root@k8s-master flannel]# kubectl get svc --namespace kube-system</span><br><span class="line">NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kube-dns   ClusterIP   10.96.0.10   &lt;none&gt;        53/UDP,53/TCP   2d</span><br></pre></td></tr></table></figure><h2 id="配置slave节点加入集群"><a href="#配置slave节点加入集群" class="headerlink" title="配置slave节点加入集群"></a>配置slave节点加入集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubeadm join 192.168.56.201:6443 --token vliohs.l5lz1treou1srvt1 --discovery-token-ca-cert-hash sha256:0c08eeb897ef635c188770ef42e82580326f5ff534be49cc1a80fd8785173495</span><br></pre></td></tr></table></figure><p>极客时间部署方式</p><p>master节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 添加kubernetes源</span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo </span><br><span class="line">[kubernetes] </span><br><span class="line">name=Kubernetes </span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ </span><br><span class="line">enabled=1 </span><br><span class="line">gpgcheck=0 </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 安装kubelet、kubeadm、kubectl、kubernetes-cni</span><br><span class="line">sudo yum -y install epel-release &amp;&amp; yum clean all &amp;&amp; yum makecache</span><br><span class="line">sudo yum -y install kubelet-1.11.1 kubeadm-1.11.1 kubectl-1.11.1 kubernetes-cni</span><br><span class="line"></span><br><span class="line"># 安装docker</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum install docker-ce -y &amp;&amp; sudo systemctl start docker &amp;&amp; sudo systemctl enable docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker regsitry搭建</title>
      <link href="/2018/08/18/docker-regsitry%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/08/18/docker-regsitry%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>参考文章：<a href="https://www.jianshu.com/p/fc36368b5c44" target="_blank" rel="noopener">https://www.jianshu.com/p/fc36368b5c44</a></p><p>mac virtualbox 制作两台虚拟机进行测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">机器名：k8s-master</span><br><span class="line">[root@k8s-master ~]# cat /etc/hostname </span><br><span class="line">k8s-master.localdomain</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# systemctl stop firewalld.service</span><br><span class="line">[root@k8s-master ~]# systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# cat /etc/sysconfig/selinux </span><br><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX= can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced.</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">SELINUX=disabled</span><br><span class="line"># SELINUXTYPE= can take one of three two values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     minimum - Modification of targeted policy. Only selected processes are protected. </span><br><span class="line">#     mls - Multi Level Security protection.</span><br><span class="line">SELINUXTYPE=targeted</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# cat /etc/sysconfig/network-scripts/ifcfg-enp0s8 </span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s8</span><br><span class="line">DEVICE=enp0s8</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.56.200 #静态IP</span><br><span class="line">GATEWAY=192.168.56.1 #默认网关</span><br><span class="line">NETMASK=255.255.255.0 #子网掩码</span><br><span class="line">DNS1=192.168.56.1 #DNS 配置</span><br><span class="line"></span><br><span class="line">机器名：k8s-slave</span><br><span class="line">[root@k8s-slave ~]# cat /etc/hostname </span><br><span class="line">k8s-slave.localdomain</span><br><span class="line"></span><br><span class="line">[root@k8s-slave ~]# systemctl stop firewalld.service</span><br><span class="line">[root@k8s-slave ~]# systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line">[root@k8s-slave ~]# cat /etc/sysconfig/selinux</span><br><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX= can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced.</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">SELINUX=disabled</span><br><span class="line"># SELINUXTYPE= can take one of three two values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     minimum - Modification of targeted policy. Only selected processes are protected. </span><br><span class="line">#     mls - Multi Level Security protection.</span><br><span class="line">SELINUXTYPE=targeted</span><br><span class="line"></span><br><span class="line">[root@k8s-slave ~]# cat /etc/sysconfig/network-scripts/ifcfg-enp0s8 </span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s8</span><br><span class="line">DEVICE=enp0s8</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.56.201 #静态IP</span><br><span class="line">GATEWAY=192.168.56.1 #默认网关</span><br><span class="line">NETMASK=255.255.255.0 #子网掩码</span><br><span class="line">DNS1=192.168.56.1 #DNS 配置</span><br></pre></td></tr></table></figure><p>两台虚拟机安装docker并启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# yum -y install docker</span><br><span class="line">[root@k8s-master ~]# systemctl start docker.service</span><br><span class="line">[root@k8s-master ~]# systemctl status docker.service</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 六 2018-08-18 11:10:58 EDT; 6s ago</span><br><span class="line">     Docs: http://docs.docker.com</span><br><span class="line"> Main PID: 1522 (dockerd-current)</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           ├─1522 /usr/bin/dockerd-current --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current --default-runtime=docker-runc --exec-opt native.cgroupdriver=systemd ...</span><br><span class="line">           └─1526 /usr/bin/docker-containerd-current -l unix:///var/run/docker/libcontainerd/docker-containerd.sock --metrics-interval=0 --start-timeout 2m --state-dir /var/run/d...</span><br><span class="line"></span><br><span class="line">8月 18 11:10:58 k8s-master.localdomain dockerd-current[1522]: time=&quot;2018-08-18T11:10:58.149875557-04:00&quot; level=warning msg=&quot;Docker could not enable SELinux on the host system&quot;</span><br><span class="line">8月 18 11:10:58 k8s-master.localdomain dockerd-current[1522]: time=&quot;2018-08-18T11:10:58.178512067-04:00&quot; level=info msg=&quot;Graph migration to content-addressability took ... seconds&quot;</span><br><span class="line">8月 18 11:10:58 k8s-master.localdomain dockerd-current[1522]: time=&quot;2018-08-18T11:10:58.179123980-04:00&quot; level=info msg=&quot;Loading containers: start.&quot;</span><br><span class="line">8月 18 11:10:58 k8s-master.localdomain dockerd-current[1522]: time=&quot;2018-08-18T11:10:58.229107163-04:00&quot; level=info msg=&quot;Firewalld running: false&quot;</span><br><span class="line">8月 18 11:10:58 k8s-master.localdomain dockerd-current[1522]: time=&quot;2018-08-18T11:10:58.312308773-04:00&quot; level=info msg=&quot;Default bridge (docker0) is assigned with an IP... address&quot;</span><br><span class="line">8月 18 11:10:58 k8s-master.localdomain dockerd-current[1522]: time=&quot;2018-08-18T11:10:58.386055892-04:00&quot; level=info msg=&quot;Loading containers: done.&quot;</span><br><span class="line">8月 18 11:10:58 k8s-master.localdomain dockerd-current[1522]: time=&quot;2018-08-18T11:10:58.403922614-04:00&quot; level=info msg=&quot;Daemon has completed initialization&quot;</span><br><span class="line">8月 18 11:10:58 k8s-master.localdomain dockerd-current[1522]: time=&quot;2018-08-18T11:10:58.403960859-04:00&quot; level=info msg=&quot;Docker daemon&quot; commit=&quot;dded712/1.13.1&quot; graphdri...on=1.13.1</span><br><span class="line">8月 18 11:10:58 k8s-master.localdomain systemd[1]: Started Docker Application Container Engine.</span><br><span class="line">8月 18 11:10:58 k8s-master.localdomain dockerd-current[1522]: time=&quot;2018-08-18T11:10:58.427377761-04:00&quot; level=info msg=&quot;API listen on /var/run/docker.sock&quot;</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line"></span><br><span class="line">[root@k8s-slave ~]# yum -y install docker</span><br><span class="line">[root@k8s-slave ~]# systemctl start docker.service</span><br><span class="line">[root@k8s-slave ~]# systemctl status docker.service</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 六 2018-08-18 11:11:14 EDT; 3s ago</span><br><span class="line">     Docs: http://docs.docker.com</span><br><span class="line"> Main PID: 1517 (dockerd-current)</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           ├─1517 /usr/bin/dockerd-current --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current --default-runtime=docker-runc --exec-opt native.cgroupdriver=systemd ...</span><br><span class="line">           └─1521 /usr/bin/docker-containerd-current -l unix:///var/run/docker/libcontainerd/docker-containerd.sock --metrics-interval=0 --start-timeout 2m --state-dir /var/run/d...</span><br><span class="line"></span><br><span class="line">8月 18 11:11:14 k8s-slave.localdomain dockerd-current[1517]: time=&quot;2018-08-18T11:11:14.647943371-04:00&quot; level=warning msg=&quot;Docker could not enable SELinux on the host system&quot;</span><br><span class="line">8月 18 11:11:14 k8s-slave.localdomain dockerd-current[1517]: time=&quot;2018-08-18T11:11:14.678117451-04:00&quot; level=info msg=&quot;Graph migration to content-addressability took 0.00 seconds&quot;</span><br><span class="line">8月 18 11:11:14 k8s-slave.localdomain dockerd-current[1517]: time=&quot;2018-08-18T11:11:14.678885165-04:00&quot; level=info msg=&quot;Loading containers: start.&quot;</span><br><span class="line">8月 18 11:11:14 k8s-slave.localdomain dockerd-current[1517]: time=&quot;2018-08-18T11:11:14.732225305-04:00&quot; level=info msg=&quot;Firewalld running: false&quot;</span><br><span class="line">8月 18 11:11:14 k8s-slave.localdomain dockerd-current[1517]: time=&quot;2018-08-18T11:11:14.822182514-04:00&quot; level=info msg=&quot;Default bridge (docker0) is assigned with an IP ... address&quot;</span><br><span class="line">8月 18 11:11:14 k8s-slave.localdomain dockerd-current[1517]: time=&quot;2018-08-18T11:11:14.903524638-04:00&quot; level=info msg=&quot;Loading containers: done.&quot;</span><br><span class="line">8月 18 11:11:14 k8s-slave.localdomain dockerd-current[1517]: time=&quot;2018-08-18T11:11:14.927271723-04:00&quot; level=info msg=&quot;Daemon has completed initialization&quot;</span><br><span class="line">8月 18 11:11:14 k8s-slave.localdomain dockerd-current[1517]: time=&quot;2018-08-18T11:11:14.927306463-04:00&quot; level=info msg=&quot;Docker daemon&quot; commit=&quot;dded712/1.13.1&quot; graphdriv...on=1.13.1</span><br><span class="line">8月 18 11:11:14 k8s-slave.localdomain systemd[1]: Started Docker Application Container Engine.</span><br><span class="line">8月 18 11:11:14 k8s-slave.localdomain dockerd-current[1517]: time=&quot;2018-08-18T11:11:14.952806378-04:00&quot; level=info msg=&quot;API listen on /var/run/docker.sock&quot;</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure><p>下载registry镜像并启动registry容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# docker pull registry</span><br><span class="line">[root@k8s-master ~]# docker run -d --name registry-container --restart always -p 5000:5000 -v /data/docker/registry:/tmp/registry docker.io/registry</span><br><span class="line">98dfeb9dc851f54c725ee4a27f058f71ef926b3832f61a4baf8514d354f63531</span><br><span class="line">[root@k8s-master ~]# curl -X GET 127.0.0.1:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[]&#125;</span><br></pre></td></tr></table></figure><p>测试镜像仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# docker pull centos:7.5.1804</span><br><span class="line">[root@k8s-master ~]# docker images</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/centos     7.5.1804            fdf13fa91c6e        11 days ago         200 MB</span><br><span class="line">docker.io/registry   latest              b2b03e9146e1        6 weeks ago         33.3 MB</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# docker tag fdf13fa91c6e 192.168.56.200:5000/centos</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# vi /etc/sysconfig/docker</span><br><span class="line">OPTIONS=&apos;--selinux-enabled --log-driver=journald --signature-verification=false --insecure-registry 192.168.56.200:5000&apos;</span><br><span class="line">[root@k8s-master ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# docker push 192.168.56.200:5000/centos</span><br><span class="line">The push refers to a repository [192.168.56.200:5000/centos]</span><br><span class="line">bcc97fbfc9e1: Pushed </span><br><span class="line">latest: digest: sha256:7c14180942615fef85cb5c8b1388e028be1a8f79694a5fa30a4025173e42ad61 size: 529</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# curl -X GET http://192.168.56.200:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[&quot;centos&quot;]&#125;</span><br><span class="line">[root@k8s-master ~]# curl -X GET http://192.168.56.200:5000/v2/centos/tags/list</span><br><span class="line">&#123;&quot;name&quot;:&quot;centos&quot;,&quot;tags&quot;:[&quot;latest&quot;]&#125;</span><br></pre></td></tr></table></figure><p>客户端测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-slave ~]# vi /etc/sysconfig/docker</span><br><span class="line">OPTIONS=&apos;--selinux-enabled --log-driver=journald --signature-verification=false --insecure-registry 192.168.56.200:5000&apos;</span><br><span class="line">[root@k8s-slave ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line">[root@k8s-slave ~]# docker pull 192.168.56.200:5000/centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">Trying to pull repository 192.168.56.200:5000/centos ... </span><br><span class="line">latest: Pulling from 192.168.56.200:5000/centos</span><br><span class="line">7dc0dca2b151: Extracting [================================================&gt;  ] 71.86 MB/74.69 MB</span><br><span class="line"></span><br><span class="line">[root@k8s-slave ~]# docker images</span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">192.168.56.200:5000/centos   latest              fdf13fa91c6e        11 days ago         200 MB</span><br></pre></td></tr></table></figure><p>制作nginx镜像并上传到私有仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# docker pull ubuntu:18.04</span><br><span class="line">[root@k8s-master ubuntu-nginx-dockerfile]# docker images</span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">192.168.56.200:5000/centos   latest              fdf13fa91c6e        11 days ago         200 MB</span><br><span class="line">docker.io/centos             7.5.1804            fdf13fa91c6e        11 days ago         200 MB</span><br><span class="line">docker.io/ubuntu             18.04               735f80812f90        3 weeks ago         83.5 MB</span><br><span class="line">docker.io/registry           latest              b2b03e9146e1        6 weeks ago         33.3 MB</span><br><span class="line"></span><br><span class="line">[root@k8s-master ubuntu-nginx-dockerfile]# vi Dockerfile</span><br><span class="line"># 指定基于的基础镜像</span><br><span class="line">FROM ubuntu:18.04</span><br><span class="line"># 维护者信息</span><br><span class="line">MAINTAINER yujiang</span><br><span class="line"># 更新软件</span><br><span class="line">RUN sed -i &apos;s/http:\/\/archive\.ubuntu\.com\/ubuntu\//http:\/\/mirrors\.aliyun\.com\/ubuntu\//g&apos; /etc/apt/sources.list</span><br><span class="line">RUN apt-get update</span><br><span class="line"># 安装软件</span><br><span class="line">RUN apt-get install nginx net-tools curl vim -y</span><br><span class="line"># 允许指定的端口</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br><span class="line"></span><br><span class="line">[root@k8s-master ubuntu-nginx-dockerfile]# docker build -t 192.168.56.200/nginx:v1.0 .</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crontab</title>
      <link href="/2018/08/04/crontab/"/>
      <url>/2018/08/04/crontab/</url>
      
        <content type="html"><![CDATA[<p>课程地址：<a href="https://www.imooc.com/learn/1009" target="_blank" rel="noopener">https://www.imooc.com/learn/1009</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install cronie crontabs -y</span><br></pre></td></tr></table></figure><h3 id="验证CROND服务"><a href="#验证CROND服务" class="headerlink" title="验证CROND服务"></a>验证CROND服务</h3><p>验证crond服务和crontab工具（centos7)</p><p>检查crond服务是否安装及启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list cronie &amp;&amp; systemctl status crond</span><br></pre></td></tr></table></figure><p>检查crontab工具是否安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list crontabs &amp;&amp; which crontab &amp;&amp; crontab -l</span><br></pre></td></tr></table></figure><h3 id="CRONTAB架构"><a href="#CRONTAB架构" class="headerlink" title="CRONTAB架构"></a>CRONTAB架构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   文件                              解析                              守护进程</span><br><span class="line">                                 crontab工具</span><br><span class="line">* * * * *                        ==========&gt;                            CROND</span><br><span class="line">my command</span><br><span class="line">按照格式编写定时任务                                            定时检查是否有任务需要执行</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1)编辑任务列表</span><br><span class="line">crontab -e</span><br><span class="line">(2)查看任务列表</span><br><span class="line">crontab -l</span><br><span class="line">(3)重启crond服务，查看crond服务状态</span><br><span class="line">systemctl restart crond</span><br><span class="line">systemctl status crond</span><br></pre></td></tr></table></figure><h3 id="CRONTAB文件格式"><a href="#CRONTAB文件格式" class="headerlink" title="CRONTAB文件格式"></a>CRONTAB文件格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">*  *  *  *  *     my command</span><br><span class="line">分 时 日 月 周     要运行的命令</span><br><span class="line"></span><br><span class="line">分：范围0-59</span><br><span class="line">时：范围0-23</span><br><span class="line">日：范围1-31</span><br><span class="line">月：范围1-12</span><br><span class="line">周：范围0-6</span><br><span class="line">my command：范围命令或脚本</span><br><span class="line"></span><br><span class="line">*：取值范围内的数字，通常代表对应时间区间内所涵盖的所有数字</span><br><span class="line">/：代表每，通常与*组合。例如2/*在&quot;分&quot;这个占位符中代表每两分钟，5/*在&quot;时&quot;这个占位符代表每5个小时</span><br><span class="line">-：代表某个数字到某个数字之间的区间，2-10在&quot;分&quot;占位符中代表第2分钟到第10分钟</span><br><span class="line">,：分开几个离散的数字。2,10 代表第2分钟和第10分钟</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">crontab -e</span><br><span class="line">* * * * * echo -e &quot;Hello&quot; &gt; /root/crontabtest.output</span><br></pre></td></tr></table></figure><h3 id="CRONTAB配置文件"><a href="#CRONTAB配置文件" class="headerlink" title="CRONTAB配置文件"></a>CRONTAB配置文件</h3><p>系统配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">############### /etc/crontab ###############</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"># For details see man 4 crontabs</span><br><span class="line"></span><br><span class="line"># Example of job definition:</span><br><span class="line"># .---------------- minute (0 - 59)</span><br><span class="line"># |  .------------- hour (0 - 23)</span><br><span class="line"># |  |  .---------- day of month (1 - 31)</span><br><span class="line"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"># |  |  |  |  |</span><br><span class="line"># *  *  *  *  * user-name  command to be executed</span><br></pre></td></tr></table></figure><p>系统用户crontab配置文件保存目录（crontab -e）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">############### /var/spool/cron/ ###############</span><br><span class="line">文件以linux用户区分</span><br><span class="line">root：/var/spool/cron/root</span><br><span class="line">user01：/var/spool/cron/user01</span><br></pre></td></tr></table></figure><h3 id="CRONTAB环境变量"><a href="#CRONTAB环境变量" class="headerlink" title="CRONTAB环境变量"></a>CRONTAB环境变量</h3><p>添加PATH到/etc/crontab</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">############### /etc/crontab ###############</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/jdk1.8.0_111/bin</span><br><span class="line"></span><br><span class="line">* * * * * root java -version 2&gt; /root/temp.out</span><br></pre></td></tr></table></figure><p>在执行具体任务前引入系统/用户环境变量（推荐）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">30 2 * * * source /etc/profile;sh /root/test.sh</span><br><span class="line">30 2 * * * source ~/.bash_profile;sh /root/test.sh</span><br><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><h3 id="CRONTAB日志"><a href="#CRONTAB日志" class="headerlink" title="CRONTAB日志"></a>CRONTAB日志</h3><p>Cron日志保存在系统目录/var/log/cron</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -n 2 /var/log/cron</span><br></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>CRONTAB清理系统日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看当前目录所有文件大小</span><br><span class="line"># du -sh *</span><br><span class="line">* 1 * * * cat /dev/null &gt; /var/log/messages</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setup a Ceph cluster using ceph-ansible</title>
      <link href="/2018/07/29/setup-a-Ceph-cluster-using-ceph-ansible/"/>
      <url>/2018/07/29/setup-a-Ceph-cluster-using-ceph-ansible/</url>
      
        <content type="html"><![CDATA[<p>原文地址：<a href="https://gist.github.com/elsonrodriguez/a26cdb7f04a9e94c480457e12458954a" target="_blank" rel="noopener">https://gist.github.com/elsonrodriguez/a26cdb7f04a9e94c480457e12458954a</a></p><h1 id="Quick-and-Dirty-Ceph-Cluster"><a href="#Quick-and-Dirty-Ceph-Cluster" class="headerlink" title="Quick and Dirty Ceph Cluster"></a>Quick and Dirty Ceph Cluster</h1><p>这是一个关于如何使用ceph-ansible设置Ceph集群的简明指南。</p><p>本指南假设：</p><ul><li>Ansible安装在您的本地计算机上</li><li>8个Centos 7.2节点使用XFS进行配置和格式化</li><li>您对节点有ssh和sudo访问权限</li></ul><h3 id="Ansible-Setup"><a href="#Ansible-Setup" class="headerlink" title="Ansible Setup"></a>Ansible Setup</h3><p>首先，克隆ceph-ansible repo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ceph/ceph-ansible.git</span><br><span class="line">cd ceph-ansible</span><br><span class="line">git checkout a41eddf6f0d840580bc842fa59751defef10fa69</span><br></pre></td></tr></table></figure><p>接下来，在repo的基础上添加一个inventory文件。使用以下内容作为指南，将示例IP替换为您自己的计算机IP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[mons]</span><br><span class="line">10.0.0.1</span><br><span class="line">10.0.0.2</span><br><span class="line">10.0.0.3</span><br><span class="line"></span><br><span class="line">[osds]</span><br><span class="line">10.0.0.4</span><br><span class="line">10.0.0.5</span><br><span class="line">10.0.0.6</span><br><span class="line">10.0.0.7</span><br><span class="line"></span><br><span class="line">[clients]</span><br><span class="line">10.0.0.8</span><br></pre></td></tr></table></figure><p>我们需要至少3个MON（cluster state daemons）4个OSD（object storage daemons）和1个client（to mount the storage）。</p><p>接下来，我们需要复制samples。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp site.yml.sample site.yml</span><br><span class="line">cp group_vars/all.sample group_vars/all</span><br><span class="line">cp group_vars/mons.sample group_vars/mons</span><br><span class="line">cp group_vars/osds.sample group_vars/osds</span><br></pre></td></tr></table></figure><p>现在，我们需要修改group_vars/all中的一些变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ceph_origin: &apos;upstream&apos; </span><br><span class="line">ceph_stable: true</span><br><span class="line"></span><br><span class="line">monitor_interface: eth0</span><br><span class="line">public_network: 172.20.0.0/16</span><br><span class="line"></span><br><span class="line">journal_size: 5120</span><br></pre></td></tr></table></figure><p>在groups_vars/osd中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">osd_directory: true</span><br><span class="line">osd_directories:</span><br><span class="line">  - /var/lib/ceph/osd/mydir1</span><br></pre></td></tr></table></figure><h3 id="Running-ceph-ansible-playbook"><a href="#Running-ceph-ansible-playbook" class="headerlink" title="Running ceph-ansible playbook"></a>Running ceph-ansible playbook</h3><p>创建inventory文件并修改变量后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook site.yml -vvvv -i inventory -u centos</span><br></pre></td></tr></table></figure><p>完成后，您应该有一个正常运行的Ceph集群。</p><h3 id="Interacting-with-Ceph"><a href="#Interacting-with-Ceph" class="headerlink" title="Interacting with Ceph"></a>Interacting with Ceph</h3>]]></content>
      
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph-ansible</title>
      <link href="/2018/07/27/ceph-ansible/"/>
      <url>/2018/07/27/ceph-ansible/</url>
      
        <content type="html"><![CDATA[<p>原文地址：<a href="http://docs.ceph.com/ceph-ansible/master/" target="_blank" rel="noopener">http://docs.ceph.com/ceph-ansible/master/</a></p><h1 id="ceph-ansible"><a href="#ceph-ansible" class="headerlink" title="ceph-ansible"></a>ceph-ansible</h1><p>Ansible playbooks for Ceph, the distributed filesystem.</p><p>分布式文件系统，Ceph Ansible playbooks。</p><h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>您可以按照以下步骤直接从GitHub上的源安装：</p><p>Clone the repository:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ceph/ceph-ansible.git</span><br></pre></td></tr></table></figure><p>接下来，您必须决定使用哪个ceph-ansible branch。 有稳定的branch可供选择，或者您可以使用master branch：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout $branch</span><br></pre></td></tr></table></figure><p>接下来，使用pip和提供的requirements.txt来安装ansible和其他所需的python库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="Ansible-on-RHEL-and-CentOS"><a href="#Ansible-on-RHEL-and-CentOS" class="headerlink" title="Ansible on RHEL and CentOS"></a>Ansible on RHEL and CentOS</h2><p>您可以从 <a href="https://access.redhat.com/articles/3174981" target="_blank" rel="noopener">Ansible channel</a> 获取并安装RHEL和CentOS上的Ansible。</p><p>On RHEL: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subscription-manager repos --enable=rhel-7-server-ansible-2-rpms</span><br></pre></td></tr></table></figure><p>（CentOS不使用subscription-manager，默认情况下已启用“Extras” 。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install ansible</span><br></pre></td></tr></table></figure><h2 id="Ansible-on-Ubuntu"><a href="#Ansible-on-Ubuntu" class="headerlink" title="Ansible on Ubuntu"></a>Ansible on Ubuntu</h2><p>您可以使用 <a href="https://launchpad.net/~ansible/+archive/ubuntu/ansible" target="_blank" rel="noopener">Ansible PPA</a> 在Ubuntu上获取Ansible。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ansible/ansible</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install ansible</span><br></pre></td></tr></table></figure><h1 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a>Releases</h1><p>应根据您的需求使用以下branches。stable-* branches已经过QE测试，并且在lifecycle内会得到backport修复。master branch应该被认为是实验性的，谨慎使用。</p><ul><li><code>stable-3.0</code> 支持ceph jewel和luminous版本。该branch需要Ansible 2.4版本。</li><li><code>stable-3.1</code> 支持ceph luminous和mimic版本。该branch需要Ansible 2.4版本。</li><li><code>stable-3.2</code>支持ceph luminous和mimic版本。该branch需要Ansible 2.6版本。</li><li><code>stable-4.0</code>支持ceph nautilus版本。该branch需要Ansible 2.8版本。</li><li><code>master</code> 支持Ceph@master版本。该branch需要Ansible 2.8版本。</li></ul><h1 id="Configuration-and-Usage"><a href="#Configuration-and-Usage" class="headerlink" title="Configuration and Usage"></a>Configuration and Usage</h1><p>该项目假设您具有ansible的基本知识，并已经准备好主机以供Ansible配置。在clone了ceph-ansible repository后，选择你的branch并且安装了ansible，然后你需要为你的ceph集群创建你的inventory文件，playbook和configuration。</p><h2 id="Inventory"><a href="#Inventory" class="headerlink" title="Inventory"></a>Inventory</h2><p>ansible inventory文件定义集群中的主机以及每个主机在ceph集群中扮演的角色（role）。inventory文件的默认位置是<code>/etc/ansible/hosts</code>，但此文件可以放在任何位置，并与<code>ansible-playbook</code>的<code>-i</code> flag一起使用。</p><p>示例inventory文件如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mons]</span><br><span class="line">mon1</span><br><span class="line">mon2</span><br><span class="line">mon3</span><br><span class="line"></span><br><span class="line">[osds]</span><br><span class="line">osd1</span><br><span class="line">osd2</span><br><span class="line">osd3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">有关ansible inventories的更多信息，请参阅ansible文档：</span><br><span class="line">http://docs.ansible.com/ansible/latest/intro_inventory.html</span><br></pre></td></tr></table></figure><h2 id="Playbook"><a href="#Playbook" class="headerlink" title="Playbook"></a>Playbook</h2><p>在部署群集时，必须有一个playbook传递给<code>ansible-playbook</code>命令。在<code>ceph-ansible</code>项目的根目录中有一个名为<code>site.yml.sample</code>的示例playbook。这个playbook应该适用于大多数用法，但它默认包含每个守护进程组（every daemon group），这可能不适合你的群集设置。执行以下步骤准备您的playbook：</p><ul><li>重命名示例playbook：<code>mv site.yml.sample site.yml</code></li><li>根据群集需求修改playbook</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">重要的是你使用的playbook应放在ceph-ansible项目的root目录。这就是ansible能够找到ceph-ansible提供的roles的方式。</span><br></pre></td></tr></table></figure><h2 id="Configuration-Validation"><a href="#Configuration-Validation" class="headerlink" title="Configuration Validation"></a>Configuration Validation</h2><p>ceph-ansible项目通过ceph-validate 角色（role）提供配置验证（config validation）。如果您使用的是所提供的playbooks，此role将在部署前运行，以确保您的ceph-ansible配置正确。此检查仅确保您为群集提供了正确的配置，而不是生成healthy集群。例如，如果为monitor_address提供了错误的地址，则mon仍然无法加入群集。</p><p>验证失败的示例可能如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TASK [ceph-validate : validate provided configuration] *************************</span><br><span class="line">task path: /Users/andrewschoen/dev/ceph-ansible/roles/ceph-validate/tasks/main.yml:3</span><br><span class="line">Wednesday 02 May 2018  13:48:16 -0500 (0:00:06.984)       0:00:18.803 *********</span><br><span class="line"> [ERROR]: [mon0] Validation failed for variable: osd_objectstore</span><br><span class="line"></span><br><span class="line"> [ERROR]: [mon0] Given value for osd_objectstore: foo</span><br><span class="line"></span><br><span class="line"> [ERROR]: [mon0] Reason: osd_objectstore must be either &apos;bluestore&apos; or &apos;filestore&apos;</span><br><span class="line"></span><br><span class="line"> fatal: [mon0]: FAILED! =&gt; &#123;</span><br><span class="line">     &quot;changed&quot;: false</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="Supported-Validation"><a href="#Supported-Validation" class="headerlink" title="Supported Validation"></a>Supported Validation</h3><p>ceph-validate角色（role）当前支持验证以下osd场景的配置：</p><ul><li><p>collocated（journal与data一块盘）</p></li><li><p>non-collocated</p></li><li><p>lvm</p></li></ul><p>ceph-validate角色（role）还验证了以下安装选项：</p><ul><li>ceph_origin 设置为 distro</li><li>ceph_origin 设置为 repository</li><li>ceph_origin 设置为 local</li><li>ceph_repository 设置为 rhcs</li><li>ceph_repository 设置为 dev</li><li>ceph_repository 设置为 community</li></ul><h2 id="Installation-methods"><a href="#Installation-methods" class="headerlink" title="Installation methods"></a>Installation methods</h2><p>Ceph可以通过几种方法安装。</p><ul><li><a href="http://docs.ceph.com/ceph-ansible/master/installation/methods.html" target="_blank" rel="noopener">Installation methods</a></li></ul><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>ceph集群的配置将通过ceph-ansible提供的ansible变量来设置。所有这些选项及其默认值都在ceph-ansible项目root目录下的group_vars/子目录中定义。Ansible将在group_vars/子目录中使用您的inventory文件或playbook配置。在group_vars/子目录中有许多ansible配置文件示例，它们通过文件名与每个ceph守护进程组（ceph daemon groups）关联。例如，osds.yml.sample包含OSD守护进程的所有默认配置。all.yml.sample文件是一个特殊的group_vars文件，适用于群集中的所有主机。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">有关设置group或主机特定配置的更多信息，请参阅ansible文档：http://docs.ansible.com/ansible/latest/intro_inventory.html#splitting-out-host-and-group-specific-data</span><br></pre></td></tr></table></figure><p>最基本的，您必须告诉<code>ceph-ansible</code>要安装的ceph版本，安装方法，群集网络设置以及希望如何配置OSD。开始配置，请重命名<code>group_vars/</code>目录中的每个文件，让它不包含文件名末尾的<code>.sample</code>，取消要更改选项的注释并提供自己的值。</p><p>使用lvm批处理方法部署Ceph upstream的octopus版本，在group_vars/all.yml中如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ceph_origin: repository</span><br><span class="line">ceph_repository: community</span><br><span class="line">ceph_stable_release: octopus</span><br><span class="line">public_network: &quot;192.168.3.0/24&quot;</span><br><span class="line">cluster_network: &quot;192.168.4.0/24&quot;</span><br><span class="line">monitor_interface: eth1</span><br><span class="line">devices:</span><br><span class="line">  - &apos;/dev/sda&apos;</span><br><span class="line">  - &apos;/dev/sdb&apos;</span><br></pre></td></tr></table></figure><p>所有安装都需要更改以下配置选项，但可能还有其他必需选项，具体取决于OSD方案选择或群集的其他方面。</p><ul><li><code>ceph_origin</code></li><li><code>ceph_stable_release</code></li><li><code>public_network</code></li><li><code>monitor_interface</code> or <code>monitor_address</code></li></ul><p>部署RGW实例时，需要设置``radosgw_interface<code>或</code>radosgw_address`选项。</p><h2 id="ceph-conf-Configuration-File"><a href="#ceph-conf-Configuration-File" class="headerlink" title="ceph.conf Configuration File"></a>ceph.conf Configuration File</h2><p>覆盖已定义 ceph.conf 中内容的方法是使用 ceph_conf_overrides 变量。这允许您使用 INI 格式指定配置选项。此变量可用于覆盖已在 ceph.conf 中定义的sections（请参见：roles/ceph-config/templates/ceph.conf.j2）或提供新的配置选项。</p><p>支持ceph.conf中的以下部分：</p><ul><li>[global]</li><li>[mon]</li><li>[osd]</li><li>[mds]</li><li>[client.rgw.{instance_name}]</li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ceph_conf_overrides:</span><br><span class="line">   global:</span><br><span class="line">     foo: 1234</span><br><span class="line">     bar: 5678</span><br><span class="line">   osd:</span><br><span class="line">     osd_mkfs_type: ext4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">我们将不再接受修改ceph.conf模板的pull requests，除非它有助于部署。对于简单的配置调整，请使用ceph_conf_overrides变量。</span><br></pre></td></tr></table></figure><p>用于配置每个ceph daemon types的完整文档，在以下各sections中。</p><h2 id="OSD-Configuration"><a href="#OSD-Configuration" class="headerlink" title="OSD Configuration"></a>OSD Configuration</h2><p>通过选择OSD场景并提供该场景所需的配置来设置OSD配置。从稳定4.0版的nautilus开始，唯一可用的场景是lvm。</p><ul><li><a href="http://docs.ceph.com/ceph-ansible/master/osds/scenarios.html" target="_blank" rel="noopener">OSD Scenarios</a></li></ul><p>从<code>stable-4.0</code>开始，不再支持下列场景，因为他们与<code>ceph-disk</code>相关联：</p><ul><li>collocated</li><li>non-collocated</li></ul><p>自Ceph luminous发布以来，首选使用<code>ceph-volume</code>工具的lvm场景。任何其他方案都将导致弃用警告。</p><p><code>ceph-disk</code>在ceph-ansible 3.2中被弃用，并且已经在Nautilus版本完全从Ceph本身中删除。 目前（从稳定版4.0开始），只有一个场景，默认为<code>lvm</code>，参见：</p><ul><li>lvm</li></ul><p>因此不再需要配置<code>osd_scenario</code>，它默认为<code>lvm</code>。</p><p>上面提到的<code>lvm</code>场景支持containerized和non-containerized集群。提醒一下，可以通过将<code>containerized_deployment</code>设置为<code>True</code>来完成部署容器化集群。</p><h3 id="lvm"><a href="#lvm" class="headerlink" title="lvm"></a>lvm</h3><p>此场景使用<code>ceph-volume</code>来创建LVM的OSD，并且仅在Ceph luminous或更新的版本才可用。它会自动启用。</p><p>其他（可选）支持的设置：</p><ul><li><p><code>osd_objectstore</code>：为OSD设置Ceph objectstore。可用选项是<code>filestore</code>或<code>bluestore</code>。你只能选择luminous或更高Ceph版本的<code>bluestore</code>。如果未设置，则默认为<code>bluestore</code>。</p></li><li><p><code>dmcrypt</code>：使用dmcrypt在OSD上启用Ceph加密。如果未设置，则默认为false。</p></li><li><p><code>osds_per_device</code>：为每个设备提供多个OSD（如果未设置，默认为1，也就是说1个设备1个OSD）。</p></li></ul><h3 id="Simple-configuration"><a href="#Simple-configuration" class="headerlink" title="Simple configuration"></a>Simple configuration</h3><p>使用这种方法，有关设备如何配置为预配 OSD 的决策都由 Ceph 工具完成的（本例中为ceph-volume lvm批处理）。在给定输入设备的情况下，几乎无法修改OSD的组合方式。</p><p>要使用此配置，必须配置使用OSD的原始设备路径填充devices选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">原始设备必须“干净”，没有gpt分区表或逻辑卷存在。</span><br><span class="line">[root@dev ~]# yum install gdisk -y</span><br><span class="line">[root@dev ~]# gdisk /dev/sda </span><br><span class="line">GPT fdisk (gdisk) version 0.8.10</span><br><span class="line"></span><br><span class="line">Partition table scan:</span><br><span class="line">  MBR: not present</span><br><span class="line">  BSD: not present</span><br><span class="line">  APM: not present</span><br><span class="line">  GPT: not present</span><br><span class="line"></span><br><span class="line">Creating new GPT entries.</span><br><span class="line"></span><br><span class="line">Command (? for help): x</span><br><span class="line"></span><br><span class="line">Expert command (? for help): z</span><br><span class="line">About to wipe out GPT on /dev/sda. Proceed? (Y/N): Y</span><br><span class="line">GPT data structures destroyed! You may now partition the disk using fdisk or</span><br><span class="line">other utilities.</span><br><span class="line">Blank out MBR? (Y/N): Y</span><br></pre></td></tr></table></figure><p>例如，对于具有<code>/dev/sda</code>和<code>/dev/sdb</code>的节点，配置将是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devices:</span><br><span class="line">  - /dev/sda</span><br><span class="line">  - /dev/sdb</span><br></pre></td></tr></table></figure><p>在上述情况下，如果两个设备都是spinning（旋转）设备（HDD），则会创建2个OSD，每个OSD都有自己的collocated journal（journal与data同盘）。</p><p>其他方式可能是spinning设备与solid state设备混合部署（HDD+SSD），例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devices:</span><br><span class="line">  - /dev/sda</span><br><span class="line">  - /dev/sdb</span><br><span class="line">  - /dev/nvme0n1</span><br></pre></td></tr></table></figure><p>与最初的示例类似，最终会生成2个OSD，但数据将放在较慢的spinning设备（<code>/dev/sda</code>, 和<code>/dev/sdb</code>）上，而journals将放在速度更快的solid state设备<code>/dev/nvme0n1</code>上。 <code>ceph-volume</code>工具在<a href="http://docs.ceph.com/docs/master/ceph-volume/lvm/batch/" target="_blank" rel="noopener">“batch”子命令部分</a>详细描述了这一点</p><p>此选项也可以与<code>osd_auto_discovery</code>一起使用，这意味着您不需要直接填充<code>devices</code> ，而是使用ansible找到的任何适当的设备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osd_auto_discovery: true</span><br></pre></td></tr></table></figure><p>其他（可选）支持的设置：</p><ul><li><code>crush_device_class</code>：为使用此方法创建的所有OSD设置CRUSH device class（使用simple configuration方法不可能每个OSD都有CRUSH device class）。 值必须是字符串，如<code>crush_device_class：&quot;ssd&quot;</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">未使用crush_device_class</span><br><span class="line"># begin crush map</span><br><span class="line">tunable choose_local_tries 0</span><br><span class="line">tunable choose_local_fallback_tries 0</span><br><span class="line">tunable choose_total_tries 50</span><br><span class="line">tunable chooseleaf_descend_once 1</span><br><span class="line">tunable chooseleaf_vary_r 1</span><br><span class="line">tunable chooseleaf_stable 1</span><br><span class="line">tunable straw_calc_version 1</span><br><span class="line">tunable allowed_bucket_algs 54</span><br><span class="line"></span><br><span class="line"># devices</span><br><span class="line">device 0 osd.0 class hdd</span><br><span class="line">device 1 osd.1 class hdd</span><br><span class="line">device 2 osd.2 class hdd</span><br><span class="line">device 3 osd.3 class hdd</span><br><span class="line">device 4 osd.4 class hdd</span><br><span class="line">device 5 osd.5 class hdd</span><br><span class="line">device 6 osd.6 class hdd</span><br><span class="line">device 7 osd.7 class hdd</span><br><span class="line">device 8 osd.8 class hdd</span><br><span class="line"></span><br><span class="line"># types</span><br><span class="line">type 0 osd</span><br><span class="line">type 1 host</span><br><span class="line">type 2 chassis</span><br><span class="line">type 3 rack</span><br><span class="line">type 4 row</span><br><span class="line">type 5 pdu</span><br><span class="line">type 6 pod</span><br><span class="line">type 7 room</span><br><span class="line">type 8 datacenter</span><br><span class="line">type 9 zone</span><br><span class="line">type 10 region</span><br><span class="line">type 11 root</span><br><span class="line"></span><br><span class="line"># buckets</span><br><span class="line">host community-ceph13-1 &#123;</span><br><span class="line">id -3# do not change unnecessarily</span><br><span class="line">id -4 class hdd# do not change unnecessarily</span><br><span class="line"># weight 0.144</span><br><span class="line">alg straw2</span><br><span class="line">hash 0# rjenkins1</span><br><span class="line">item osd.0 weight 0.048</span><br><span class="line">item osd.3 weight 0.048</span><br><span class="line">item osd.6 weight 0.048</span><br><span class="line">&#125;</span><br><span class="line">host community-ceph13-2 &#123;</span><br><span class="line">id -5# do not change unnecessarily</span><br><span class="line">id -6 class hdd# do not change unnecessarily</span><br><span class="line"># weight 0.144</span><br><span class="line">alg straw2</span><br><span class="line">hash 0# rjenkins1</span><br><span class="line">item osd.1 weight 0.048</span><br><span class="line">item osd.4 weight 0.048</span><br><span class="line">item osd.8 weight 0.048</span><br><span class="line">&#125;</span><br><span class="line">host community-ceph13-3 &#123;</span><br><span class="line">id -7# do not change unnecessarily</span><br><span class="line">id -8 class hdd# do not change unnecessarily</span><br><span class="line"># weight 0.144</span><br><span class="line">alg straw2</span><br><span class="line">hash 0# rjenkins1</span><br><span class="line">item osd.2 weight 0.048</span><br><span class="line">item osd.5 weight 0.048</span><br><span class="line">item osd.7 weight 0.048</span><br><span class="line">&#125;</span><br><span class="line">root default &#123;</span><br><span class="line">id -1# do not change unnecessarily</span><br><span class="line">id -2 class hdd# do not change unnecessarily</span><br><span class="line"># weight 0.431</span><br><span class="line">alg straw2</span><br><span class="line">hash 0# rjenkins1</span><br><span class="line">item community-ceph13-1 weight 0.144</span><br><span class="line">item community-ceph13-2 weight 0.144</span><br><span class="line">item community-ceph13-3 weight 0.144</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># rules</span><br><span class="line">rule replicated_rule &#123;</span><br><span class="line">id 0</span><br><span class="line">type replicated</span><br><span class="line">min_size 1</span><br><span class="line">max_size 10</span><br><span class="line">step take default</span><br><span class="line">step chooseleaf firstn 0 type host</span><br><span class="line">step emit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># end crush map</span><br></pre></td></tr></table></figure><h3 id="Advanced-configuration"><a href="#Advanced-configuration" class="headerlink" title="Advanced configuration"></a>Advanced configuration</h3><p>当在设置devices需要更精细的控制OSD时，非常有用。它需要已存在的volume groups和logical volumes设置（<code>ceph-volume</code>不会创建这些卷）。</p><p>要使用此配置，必须使用logical volumes和volume groups填充<code>lvm_volumes</code>选项。此外，分区的绝对路径可用于<code>journal</code>，<code>block.db</code>和<code>block.wal</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">此配置使用ceph-volume lvm create来设置OSD</span><br></pre></td></tr></table></figure><p>支持的<code>lvm_volumes</code>配置设置：</p><ul><li><p><code>data</code>：logical volume名称或raw device（原始设备）的绝对路径（使用 100% 的原始设备创建 LV）</p></li><li><p><code>data_vg</code>：volume group名称，如果<code>data</code>是logical volume，则为必需。</p></li><li><p><code>crush_device_class</code>：生成OSD的CRUSH device class名，允许为每个OSD设置device class，而不像全局<code>crush_device_class</code>那样为所有OSD设置它们。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">如果在使用devices时为OSD设置crush_device_class，则必须使用全局crush_device_class选项设置它，如上所示。 当使用像lvm_volumes这样的devices时，无法为每个OSD定义特定的CRUSH device class。</span><br></pre></td></tr></table></figure><p><code>filestore</code> objectstore变量：</p><ul><li><code>journal</code>：logical volume名称或分区的绝对路径。</li><li><code>journal_vg</code>：volume group名称，如果journal是logical volume，则是必选。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">警告</span><br><span class="line">每个entry（条目）必须是唯一的，不允许重复的值</span><br></pre></td></tr></table></figure><p><code>bluestore</code>  objectstore变量：</p><ul><li><code>db</code>： logical volume名称或分区的绝对路径。</li><li><code>db_vg</code>： volume group名称，如果<code>db</code>是logical volume，则是必选。</li><li><code>wal</code>： logical volume名称或分区的绝对路径。</li><li><code>wal_vg</code>： volume group名称，如果<code>wal</code>是logical volume，则是必选。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">这些bluestore变量是可选的优化选项。 Bluestore的db和wal只会从更快的设备中受益。可以使用单个raw device（原始设备）创建bluestore OSD。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">警告</span><br><span class="line">每个entry（条目）必须是唯一的，不允许重复的值</span><br></pre></td></tr></table></figure><p>使用 raw devices（原始设备）的<code>bluestore</code>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">osd_objectstore: bluestore</span><br><span class="line">lvm_volumes:</span><br><span class="line">  - data: /dev/sda</span><br><span class="line">  - data: /dev/sdb</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">在这种情况下，将使用100％的devices创建volume groups和logical volumes。</span><br></pre></td></tr></table></figure><p>具有logical volumes的<code>bluestore</code>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">osd_objectstore: bluestore</span><br><span class="line">lvm_volumes:</span><br><span class="line">  - data: data-lv1</span><br><span class="line">    data_vg: data-vg1</span><br><span class="line">  - data: data-lv2</span><br><span class="line">    data_vg: data-vg2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">必须存在Volume groups和logical volumes。</span><br></pre></td></tr></table></figure><p>定义<code>wal</code>和<code>db</code>logical volumes的bluestore示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">osd_objectstore: bluestore</span><br><span class="line">lvm_volumes:</span><br><span class="line">  - data: data-lv1</span><br><span class="line">    data_vg: data-vg1</span><br><span class="line">    db: db-lv1</span><br><span class="line">    db_vg: db-vg1</span><br><span class="line">    wal: wal-lv1</span><br><span class="line">    wal_vg: wal-vg1</span><br><span class="line">  - data: data-lv2</span><br><span class="line">    data_vg: data-vg2</span><br><span class="line">    db: db-lv2</span><br><span class="line">    db_vg: db-vg2</span><br><span class="line">    wal: wal-lv2</span><br><span class="line">    wal_vg: wal-vg2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">必须存在volume groups和logical volumes。</span><br></pre></td></tr></table></figure><p>具有logical volumes的<code>filestore</code>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">osd_objectstore: filestore</span><br><span class="line">lvm_volumes:</span><br><span class="line">  - data: data-lv1</span><br><span class="line">    data_vg: data-vg1</span><br><span class="line">    journal: journal-lv1</span><br><span class="line">    journal_vg: journal-vg1</span><br><span class="line">  - data: data-lv2</span><br><span class="line">    data_vg: data-vg2</span><br><span class="line">    journal: journal-lv2</span><br><span class="line">    journal_vg: journal-vg2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意</span><br><span class="line">必须存在volume groups和logical volumes。</span><br></pre></td></tr></table></figure><h1 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h1><p>有关如何为ceph-ansible做出贡献的指导，请参阅以下部分。</p><ul><li><a href="http://docs.ceph.com/ceph-ansible/master/dev/index.html" target="_blank" rel="noopener">Contribution Guidelines</a></li></ul><h1 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h1><p>用于编写 ceph-ansible 功能测试方案的文档。</p><ul><li><p><a href="http://docs.ceph.com/ceph-ansible/master/testing/index.html" target="_blank" rel="noopener">Testing with ceph-ansible</a></p></li><li><p><a href="http://docs.ceph.com/ceph-ansible/master/testing/glossary.html" target="_blank" rel="noopener">Glossary</a></p></li></ul><h1 id="Demos"><a href="#Demos" class="headerlink" title="Demos"></a>Demos</h1><h2 id="Vagrant-Demo"><a href="#Vagrant-Demo" class="headerlink" title="Vagrant Demo"></a>Vagrant Demo</h2><p>在裸机上从头开始部署：<a href="https://youtu.be/E8-96NamLDo" target="_blank" rel="noopener">https://youtu.be/E8-96NamLDo</a></p><h2 id="Bare-metal-demo"><a href="#Bare-metal-demo" class="headerlink" title="Bare metal demo"></a>Bare metal demo</h2><p>在裸机上从头开始部署：<a href="https://youtu.be/dv_PEp9qAqg" target="_blank" rel="noopener">https://youtu.be/dv_PEp9qAqg</a></p><h1 id="ansible不配置ssh免密钥-使用密码登录"><a href="#ansible不配置ssh免密钥-使用密码登录" class="headerlink" title="ansible不配置ssh免密钥,使用密码登录"></a>ansible不配置ssh免密钥,使用密码登录</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1、编辑/etc/ansible/ansible.cfg</span><br><span class="line">取消注释：#host_key_checking = False</span><br><span class="line"></span><br><span class="line">2、编辑/etc/ansible/hosts</span><br><span class="line">[ceph_exporter]</span><br><span class="line">10.121.136.110ansible_user=rootansible_ssh_pass=root</span><br><span class="line">10.121.136.111ansible_user=root       ansible_ssh_pass=root</span><br><span class="line">10.121.136.112ansible_user=root       ansible_ssh_pass=root</span><br><span class="line">10.121.136.113ansible_user=root       ansible_ssh_pass=root</span><br><span class="line">10.121.136.114ansible_user=root       ansible_ssh_pass=root</span><br><span class="line">10.121.136.115ansible_user=root       ansible_ssh_pass=root</span><br><span class="line"></span><br><span class="line">[node_exporter]</span><br><span class="line">10.121.136.110ansible_user=root       ansible_ssh_pass=root</span><br><span class="line">10.121.136.111ansible_user=root       ansible_ssh_pass=root</span><br><span class="line">10.121.136.112ansible_user=root       ansible_ssh_pass=root</span><br><span class="line">10.121.136.113ansible_user=root       ansible_ssh_pass=root</span><br><span class="line">10.121.136.114ansible_user=root       ansible_ssh_pass=root</span><br><span class="line">10.121.136.115ansible_user=root       ansible_ssh_pass=root</span><br><span class="line"></span><br><span class="line">3、测试</span><br><span class="line">ansible all -m ping</span><br></pre></td></tr></table></figure><h1 id="清除集群中的LVM"><a href="#清除集群中的LVM" class="headerlink" title="清除集群中的LVM"></a>清除集群中的LVM</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@dev yujiang]# cat remove_ceph_lvm.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">set -x</span><br><span class="line"></span><br><span class="line">DEVICE_LIST=(a b c d e f g h i j k l)</span><br><span class="line">DEVICE_PATH=&quot;/dev&quot;</span><br><span class="line">DEVICE_PREFIX=&quot;sd&quot;</span><br><span class="line"></span><br><span class="line">VG=`ls -l /dev/ | grep ceph- | awk &apos;&#123;print $9&#125;&apos; `</span><br><span class="line"></span><br><span class="line">for name in $&#123;DEVICE_LIST[@]&#125;</span><br><span class="line">do</span><br><span class="line">echo $&#123;name&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for name in $&#123;VG[@]&#125;</span><br><span class="line">do</span><br><span class="line">LV=`ls -l $&#123;DEVICE_PATH&#125;/$&#123;name&#125; | grep osd- | awk &apos;&#123;print $9&#125;&apos;`</span><br><span class="line">for lv in $&#123;LV&#125;</span><br><span class="line">do</span><br><span class="line">LV_PATH=$&#123;DEVICE_PATH&#125;/$&#123;name&#125;/$&#123;lv&#125;</span><br><span class="line">lvremove $&#123;LV_PATH&#125;</span><br><span class="line">done</span><br><span class="line">vgremove $&#123;DEVICE_PATH&#125;/$&#123;name&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for name in $&#123;DEVICE_LIST[@]&#125;</span><br><span class="line">do</span><br><span class="line">pvremove $&#123;DEVICE_PATH&#125;/$&#123;DEVICE_PREFIX&#125;$&#123;name&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible</title>
      <link href="/2018/07/24/Ansible/"/>
      <url>/2018/07/24/Ansible/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Python</span><br><span class="line">Setuptools</span><br><span class="line">pip(可选)</span><br></pre></td></tr></table></figure><h2 id="Ansible快速安装"><a href="#Ansible快速安装" class="headerlink" title="Ansible快速安装"></a>Ansible快速安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装pip：easy_install pip</span><br><span class="line">安装Ansible：pip install ansible</span><br></pre></td></tr></table></figure><h2 id="Ansible源码安装"><a href="#Ansible源码安装" class="headerlink" title="Ansible源码安装"></a>Ansible源码安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取源码</span><br><span class="line">解压源码</span><br><span class="line">进入源码目录</span><br><span class="line">运行source ./hacking/env-setup</span><br></pre></td></tr></table></figure><h2 id="Ansible系统源安装"><a href="#Ansible系统源安装" class="headerlink" title="Ansible系统源安装"></a>Ansible系统源安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Centos</span><br><span class="line"> - yum install ansible</span><br><span class="line">Ubuntu</span><br><span class="line"> - apt-get install software-properties-common</span><br><span class="line"> - apt-add-repository ppa:ansible/ansible</span><br><span class="line"> - apt-get update</span><br><span class="line"> - apt-get install ansible</span><br></pre></td></tr></table></figure><h2 id="Ansible运行"><a href="#Ansible运行" class="headerlink" title="Ansible运行"></a>Ansible运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      client              server</span><br><span class="line">Ansible --&gt; ssh =====&gt; ssh --&gt; shell</span><br></pre></td></tr></table></figure><h2 id="Ansible配置文件路径搜索优先级"><a href="#Ansible配置文件路径搜索优先级" class="headerlink" title="Ansible配置文件路径搜索优先级"></a>Ansible配置文件路径搜索优先级</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANSIBLE_CONFIG</span><br><span class="line">./ansible.cfg</span><br><span class="line">~/.ansible.cfg</span><br><span class="line">/etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure><h2 id="Ansible配置文件获取"><a href="#Ansible配置文件获取" class="headerlink" title="Ansible配置文件获取"></a>Ansible配置文件获取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/ansible/目录下</span><br><span class="line">https://raw.github.com/ansible/ansible/devel/examples/ansible.cfg</span><br></pre></td></tr></table></figure><h2 id="Ansible配置详细"><a href="#Ansible配置详细" class="headerlink" title="Ansible配置详细"></a>Ansible配置详细</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">defaults默认配置项</span><br><span class="line">privilege_escalation执行命令的用户权限设置(ssh到客户机以哪个用户执行命令，关于这个用户的权限设置)</span><br><span class="line">paramiko_connection paramika插件设置(python插件实现的ssh协议，如果不设置会走Ansible自己的ssh协议通道)</span><br><span class="line">ssh_connection ssh连接设置</span><br><span class="line">accelerate</span><br><span class="line">selinux &amp; colors</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ask_pass &amp; ask_sudo_pass</span><br><span class="line">ask_pass：可以控制，Ansible剧本playbook是否会自动默认弹出密码输入框(遇到输入密码的情况下)</span><br><span class="line">ask_sudo_pass：用户使用的系统平台开启了sudo密码的话，应该开启这一参数(如果目标机开启了sudo免密码的话，应该开启该项，否则报错)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gather_subset</span><br><span class="line">gather_subset：设置手机的内容，包括all，network，hardware，virtual，facter，ohai</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">remote_port &amp; remote_tmp &amp; remote_user</span><br><span class="line">remote_port：设置远程客户机ssh监听的端口</span><br><span class="line">remote_tmp：设置远程客户机临时目录</span><br><span class="line">remote_user：设置远程客户机执行命令的用户(以哪个用户执行shell)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo_exe &amp; sudo_flags &amp; sudo_user</span><br><span class="line">sudo_exe：sudo命令路径(默认/usr/bin)</span><br><span class="line">sudo_flags：sudo参数</span><br><span class="line">sudo_user：能够使用sudo的user</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">action_plugins &amp; callback_plugins &amp; connection_plugins &amp; filter_plugins &amp; lookup_plugins &amp; vars_plugins</span><br><span class="line">开发者中心的插件相关功能，开发者可以开发相应的插件，来完成自己的功能。</span><br><span class="line">action_plugins：激活事件(在某个事件发生的时候，去执行插件中的内容)</span><br><span class="line">callback_plugins：回调</span><br><span class="line">connection_plugins：连接</span><br><span class="line">filter_plugins：过滤器</span><br><span class="line">lookup_plugins：加载路径</span><br><span class="line">vars_plugins：任何地方加载</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">forks</span><br><span class="line">forks：最大开辟的进程数，这个数不宜过大，过大性能损耗高，不易过小，过小并发性能低，一般的设置方法是cpu核数*2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module_name</span><br><span class="line">module_name：这个是/usr/bin/ansible的默认模块名(-m)。默认是&apos;command&apos;模块。之前提到过，command模块不支持shell变量，管道，配额。所以也许你希望把这个参数改为&apos;shell&apos;。</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vault_password_file</span><br><span class="line">vault_password_file：这个文件也可以是脚本的形式。如果你使用脚本而不是单纯文件的话，请确保它可以执行并且密码可以在标准输出上打印出来。如果你的脚本需要提示请求数据，请求将会发到标准错误输出中。</span><br><span class="line"></span><br><span class="line">存放远程客户机密码的文件，因为有时候sudo是需要输入密码的，而我们希望Ansible执行比较流畅(不需要人工干预)，这个时候可以通过机器代填密码的方式。这个文件可以是个脚本，也可以是单独的一条密码。如果是脚本，确保该脚本是可运行的，并且运行的，结果输出到标准输出中stdout。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pattern</span><br><span class="line">pattern：如果没有提供&quot;hosts&quot;节点，这是playbook要通信的默认主机组。默认值是对所有主机通信，如果不想被惊吓到，最好还是设置这个选项</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inventory &amp; library</span><br><span class="line">inventory：可通信主机的目录(默认/etc/ansible/hosts)</span><br><span class="line">library：Ansible默认搜索模块路径(默认/usr/share/my_modules/)</span><br></pre></td></tr></table></figure><h2 id="新手上路"><a href="#新手上路" class="headerlink" title="新手上路"></a>新手上路</h2><p>如何添加一台机器？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、编辑/etc/ansible/hosts</span><br><span class="line">2、添加本机的public SSH key到目标机器的authorized_keys</span><br><span class="line">3、添加本机的私钥到Ansible</span><br><span class="line">4、运行ansible all -m ping测试是否添加成功</span><br></pre></td></tr></table></figure><p>Ansible命令格式——ansible all -m ping</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、ansible命令主体 —— ansible/ansible-playbook</span><br><span class="line">2、被操作的目标机器的正则表达式 —— all</span><br><span class="line">3、指定要使用的模块 —— -m ping</span><br><span class="line">4、传入的参数（ ansible all -a &apos;ls&apos; ）</span><br></pre></td></tr></table></figure><p>执行ping模块发生了什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">唤起Ansible --&gt; 查询hosts，获取指定的目标机器 --&gt; 调用指定模块 --&gt; 传入参数 --&gt; 返回执行结果</span><br></pre></td></tr></table></figure><p>Ansible命令详解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-a 指定传入模块的参数</span><br><span class="line">-C -D 两个一起使用，检查hosts规则文件的修改</span><br><span class="line">-l 限制匹配规则的主机数</span><br><span class="line">--list-hosts 显示所有匹配规则的主机数</span><br><span class="line">-m -M 指定所使用的模块和模块的路径</span><br><span class="line">--syntax-check 检查语法</span><br><span class="line">-v 显示详细的日志</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible all -a &apos;ls&apos;</span><br><span class="line">ansible all -a &apos;ls&apos; --list-hosts</span><br></pre></td></tr></table></figure><p>Ansible——Inventory（分组）</p><p>什么是Inventory？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Ansible可同时操作属于一个组的多台主机，组和主机之间的关系通过inventory文件配置。默认的文件路径为/etc/ansible/hosts</span><br><span class="line">中文：库存、清单</span><br><span class="line">作用：分组</span><br><span class="line"></span><br><span class="line">一个简单的实例</span><br><span class="line">one.example.com</span><br><span class="line">[webservers]</span><br><span class="line">two.example.com</span><br><span class="line">three.example.com</span><br><span class="line">方括号[]中是组名，一个主机可以属于不同的组，比如一台服务器可以同时属于webserver组和vim组。这时，指定webserver或者vim组，都可以操作这台主机。</span><br><span class="line"></span><br><span class="line">ansible webservers -a &apos;ls&apos;</span><br><span class="line">ansible &lt;IP&gt; -a &apos;ls&apos;</span><br><span class="line"></span><br><span class="line">如何自定义连接端口？</span><br><span class="line">在编写hosts文件时，在域名或者ip后加上端口号，例如：</span><br><span class="line">192.168.100.101:5000</span><br><span class="line">one.example.com:6000</span><br><span class="line"></span><br><span class="line">IP域名写起来太长？起个别名吧</span><br><span class="line">jumper ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50</span><br><span class="line"></span><br><span class="line">不想以root用户登录</span><br><span class="line">例如：</span><br><span class="line">jumper ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50 ansible_ssh_user=papa</span><br><span class="line"></span><br><span class="line">机器太多，但是连续的，写起来好麻烦</span><br><span class="line">[vim]</span><br><span class="line">vim[1:50].example.com</span><br><span class="line">vim[a-f].example.com</span><br><span class="line"></span><br><span class="line">Inventory参数选项</span><br><span class="line">ansible_ssh_host</span><br><span class="line">ansible_ssh_port</span><br><span class="line">ansible_ssh_user</span><br><span class="line">ansible_ssh_pass  ssh密码(非公钥免密方式)</span><br><span class="line">ansible_sudo_pass sudo密码</span><br><span class="line">ansible_sudo_exe</span><br><span class="line">ansible_connection 与主机的连接类型。比如：local，ssh或者paramiko。</span><br><span class="line">ansible_ssh_private_key_file 私钥文件</span><br><span class="line">ansible_shell_type 目标系统的shell类型</span><br><span class="line">ansible_python_interpreter</span><br></pre></td></tr></table></figure><p>分文件管理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">分文件 —— 例如：</span><br><span class="line">/etc/ansible/group_vars/vim         (一组)</span><br><span class="line">/etc/ansible/group_vars/webservers  (一组)</span><br><span class="line">/etc/ansible/host_vars/foosball     (不分组)</span><br><span class="line">vim文件中的内容大致这样：</span><br><span class="line">---</span><br><span class="line">ntp_server:acme.example.org</span><br><span class="line">database_server:storage.example.org</span><br><span class="line">这时候文件名就是组名</span><br></pre></td></tr></table></figure><p>分文件夹管理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">分文件 —— 例如：</span><br><span class="line">/etc/ansible/group_vars/vim/install</span><br><span class="line">/etc/ansible/group_vars/vim/init</span><br><span class="line">/etc/ansible/host_vars/foosball</span><br><span class="line">install文件中的内容大致这样：</span><br><span class="line">---</span><br><span class="line">ntp_server:acme.example.org</span><br><span class="line">database_server:storage.example.org</span><br><span class="line">这时候文件夹名就是组名</span><br></pre></td></tr></table></figure><p>Ansible——Patterns</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">什么是Patterns？</span><br><span class="line">在Ansible中，Patterns是指我们通过类正则表达式的方式，决定与哪台主机进行交互</span><br><span class="line"></span><br><span class="line">1、所有hosts机器：all或者星号(*)</span><br><span class="line">例如：</span><br><span class="line">ansible all -m ping</span><br><span class="line">2、通过域名或者IP指定一台特定的机器</span><br><span class="line">例如：</span><br><span class="line">ansible one.example.com -m ping</span><br><span class="line">ansible 192.168.1.2 -m ping</span><br><span class="line">3、指定一组连续机器</span><br><span class="line">例如：</span><br><span class="line">ansible 192.168.1.* -m ping 指定192.168.1.0/24段的所有机器</span><br><span class="line">4、指定一组不相关的机器</span><br><span class="line">例如：</span><br><span class="line">ansible one.example.com:two.example.com -m ping 指定one two两台机器</span><br><span class="line">5、组也支持Patterns</span><br><span class="line">webservers -- 指定webserver组</span><br><span class="line">webservers:nginx -- 指定webservers和nginx两个组</span><br><span class="line">6、与和非</span><br><span class="line">webservers:!phoenix -- 指定在webserver组但不在phoenix组</span><br><span class="line">webservers:&amp;nginx -- 指定同时在webservers和nginx组</span><br><span class="line"></span><br><span class="line">问题：webservers:nginx:&amp;vim:!python:!mysql</span><br><span class="line">如上的语句是什么意思？</span><br><span class="line">温馨提示：匹配时从左到右依次匹配！</span><br></pre></td></tr></table></figure><p>Ansible——Ad-Hoc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">什么是Ad-Hoc</span><br><span class="line">这其实是一个概念性的名字，是相对于写Ansible playbook来说的。类似于在命令行敲入shell命令和写shell scripts两者之间的关系</span><br><span class="line">如果我们敲入一些命令去比较快的完成一些事情，而不需要将这些执行的命令保存下来，这样的命令就叫做ad-hoc命令。</span><br><span class="line"></span><br><span class="line">执行shell命令：</span><br><span class="line">ansible atlanta -a &quot;/sbin/reboot&quot; -f 10</span><br><span class="line">这个命令中，atlanta是一个组，这个组里面有很多服务器，&quot;/sbin/reboot&quot;命令会在atlanta组下的所有机器上执行。这里ssh-agent会fork出10个子进程(bash)以并行的方式执行reboot命令。如前所说&quot;每次重启10个&quot;即是以这种方式实现。</span><br><span class="line"></span><br><span class="line">指定用户执行shell命令：</span><br><span class="line">ansible atlanta -a &quot;/usr/bin/foo&quot; -u username</span><br><span class="line">使用sudo：</span><br><span class="line">ansible atlanta -a &quot;/usr/bin/foo&quot; -u username --sudo [--ask-sudo-pass]</span><br><span class="line"></span><br><span class="line">文件管理：</span><br><span class="line">创建文件夹：ansible webservers -m file -a &quot;dest=/path/to/c mode=755 owner=mdehaan group=mdehaan state=directory&quot;</span><br><span class="line">拷贝文件：ansible atlanta -m copy -a &quot;src=/etc/hosts dest=/tmp/hosts&quot;</span><br><span class="line"></span><br><span class="line">软件包管理：</span><br><span class="line">确认一个软件包已经安装，但不去升级它：ansible webservers -m yum -a &quot;name=acme state=present&quot;</span><br><span class="line">确认一个软件包的安装版本：ansible webservers -m yum -a &quot;name=acme-1.5 state=present&quot;</span><br><span class="line">确认一个软件包还没有安装：ansible webservers -m yum -a &quot;name=acme state=absent&quot;</span><br><span class="line"></span><br><span class="line">其他模块</span><br><span class="line">git模块：git相关</span><br><span class="line">service模块：系统服务相关</span><br><span class="line">setup模块：系统环境相关</span><br></pre></td></tr></table></figure><p>如何执行一个耗时的任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ansible all -B 3600 -P 0 -a &quot;/usr/bin/long_running_operation --do-stuff&quot;</span><br><span class="line">-B 1800 表示最多运行60分钟，-P 0表示不获取状态</span><br><span class="line"></span><br><span class="line">ansible all -B 1800 -P 60 -a &quot;/usr/bin/long_running_operation --do-stuff&quot;</span><br><span class="line">-B 1800表示最多运行30分钟，-P 60表示每隔一分钟获取一次状态</span><br><span class="line"></span><br><span class="line">ansible web1.example.com -m async_status -a &quot;jid=488359678239.2844&quot;</span><br></pre></td></tr></table></figure><h2 id="Ansible——Playbook简介"><a href="#Ansible——Playbook简介" class="headerlink" title="Ansible——Playbook简介"></a>Ansible——Playbook简介</h2><p>什么是playbook？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">简单来说，playbook是一种简单的配置管理系统与多机器部署系统的基础。与现有的其他系统有不同之处，且非常适合于复杂应用的部署。</span><br><span class="line"></span><br><span class="line">playbook可用于声明配置，更强大的地方在于，在playbooks中可以编排有序的执行过程，甚至于做到在多组机器间，来回有序的执行特别指定的步骤。并且可以同步或异步的发起任务。</span><br></pre></td></tr></table></figure><h2 id="Ansible-API"><a href="#Ansible-API" class="headerlink" title="Ansible API"></a>Ansible API</h2><p>API提供了哪些功能？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、调用Ansible的模块</span><br><span class="line">2、开发动态的Inventory数据源</span><br><span class="line">3、更好的控制playbook等功能的运行</span><br></pre></td></tr></table></figure><p>如何调用Ansible模块？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1、引入Ansible runner库</span><br><span class="line">2、初始化runner对象，传入相关参数</span><br><span class="line">3、运行runner对象的run函数</span><br><span class="line"></span><br><span class="line">示例代码（Ansible2.0之前）：</span><br><span class="line">import ansible.runner</span><br><span class="line"></span><br><span class="line">runner = ansible.runner.Runner(</span><br><span class="line">module_name=&apos;ping&apos;,</span><br><span class="line">module_args=&apos;&apos;,</span><br><span class="line">pattern=&apos;web*&apos;,</span><br><span class="line">forks=10</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">datastructrue = runner.run()</span><br></pre></td></tr></table></figure><h1 id="Directory-Layout-目录布局"><a href="#Directory-Layout-目录布局" class="headerlink" title="Directory Layout 目录布局"></a>Directory Layout 目录布局</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">production                # inventory file for production servers（生产服务器的inventory文件）</span><br><span class="line">staging                   # inventory file for staging environment（临时环境的inventory文件）</span><br><span class="line"></span><br><span class="line">group_vars/</span><br><span class="line">   group1.yml             # here we assign variables to particular groups（将变量分配给特定的groups）</span><br><span class="line">   group2.yml</span><br><span class="line">host_vars/</span><br><span class="line">   hostname1.yml          # here we assign variables to particular systems（将变量分配给特定systems）</span><br><span class="line">   hostname2.yml</span><br><span class="line"></span><br><span class="line">library/                  # if any custom modules, put them here (可选)（放置自定义modules）</span><br><span class="line">module_utils/             # if any custom module_utils to support modules, put them here (可选)（放置支持modules的自定义module_utils）</span><br><span class="line">filter_plugins/           # if any custom filter plugins, put them here (可选)（放置自定义filter plugins）</span><br><span class="line"></span><br><span class="line">site.yml                  # master playbook（playbook入口）</span><br><span class="line">webservers.yml            # playbook for webserver tier（webserver层playbook）</span><br><span class="line">dbservers.yml             # playbook for dbserver tier（dbserver层playbook）</span><br><span class="line"></span><br><span class="line">roles/</span><br><span class="line">    common/               # this hierarchy represents a &quot;role&quot;（这个层次代表role）</span><br><span class="line">        tasks/            #</span><br><span class="line">            main.yml      #  &lt;-- tasks file can include smaller files if warranted（tasks文件）</span><br><span class="line">        handlers/         #</span><br><span class="line">            main.yml      #  &lt;-- handlers file（处理程序文件）</span><br><span class="line">        templates/        #  &lt;-- files for use with the template resource（用于模板资源的文件）</span><br><span class="line">            ntp.conf.j2   #  &lt;------- templates end in .j2（模板以.j2结尾）</span><br><span class="line">        files/            #</span><br><span class="line">            bar.txt       #  &lt;-- files for use with the copy resource（用于复制资源的文件）</span><br><span class="line">            foo.sh        #  &lt;-- script files for use with the script resource（用于脚本资源的脚本文件）</span><br><span class="line">        vars/             #</span><br><span class="line">            main.yml      #  &lt;-- variables associated with this role（与此role关联的变量）</span><br><span class="line">        defaults/         #</span><br><span class="line">            main.yml      #  &lt;-- default lower priority variables for this role（此role的默认优先级较低的变量）</span><br><span class="line">        meta/             #</span><br><span class="line">            main.yml      #  &lt;-- role dependencies（role依赖）</span><br><span class="line">        library/          # roles can also include custom modules（role还可以包括自定义modules）</span><br><span class="line">        module_utils/     # roles can also include custom module_utils（role还可以包括自定义module_utils）</span><br><span class="line">        lookup_plugins/   # or other types of plugins, like lookup in this case（或其他类型的plugins，例如lookup）</span><br><span class="line"></span><br><span class="line">    webtier/              # same kind of structure as &quot;common&quot; was above, done for the webtier role（与上面的&quot;common&quot;相同的结构，为webtier role定义）</span><br><span class="line">    monitoring/           # &quot;&quot;</span><br><span class="line">    fooapp/               # &quot;&quot;</span><br></pre></td></tr></table></figure><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><p>查看环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-config dump</span><br></pre></td></tr></table></figure><h2 id="课程地址"><a href="#课程地址" class="headerlink" title="课程地址"></a>课程地址</h2><p><a href="https://www.imooc.com/video/15236" target="_blank" rel="noopener">https://www.imooc.com/video/15236</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golangpkg被墙解决办法</title>
      <link href="/2018/07/08/golangpkg%E8%A2%AB%E5%A2%99%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/07/08/golangpkg%E8%A2%AB%E5%A2%99%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>原文：<a href="http://www.10tiao.com/html/489/201702/2247483836/1.html" target="_blank" rel="noopener">http://www.10tiao.com/html/489/201702/2247483836/1.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$mkdir -p $GOPATH/src/golang.org/x/</span><br><span class="line">$cd $GOPATH/src/golang.org/x/</span><br><span class="line">$git clone https://github.com/golang/net.git net </span><br><span class="line">$go install net </span><br><span class="line">或者</span><br><span class="line">$git clone https://github.com/golang/text.git $GOPATH/src/golang.org/x/text</span><br><span class="line">$git clone https://github.com/golang/net.git $GOPATH/src/golang.org/x/net</span><br></pre></td></tr></table></figure><h3 id="go-get-获取第三方库"><a href="#go-get-获取第三方库" class="headerlink" title="go get 获取第三方库"></a>go get 获取第三方库</h3><ul><li>go get命令演示</li><li>使用gopm来获取无法下载的包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:~ yujiang$ go get -v github.com/gpmgo/gopm</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:~ yujiang$ cat ~/.bashrc</span><br><span class="line">export PATH=$PATH:/home/go/bin:/root/go/bin</span><br><span class="line">export GOPATH=&quot;/root/go&quot;</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ source ~/.bashrc</span><br><span class="line"></span><br><span class="line">yujiangdeMBP-13:~ yujiang$ gopm get -g -v golang.org/x/tools/cmd/goimports</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ ls go/src/golang.org/x/tools/imports/</span><br><span class="line">fix.go         fix_test.go    imports.go     mkindex.go     mkstdlib.go    sortimports.go zstdlib.go</span><br><span class="line"># 编译出goimports</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ go build  golang.org/x/tools/cmd/goimports</span><br><span class="line"># 编译并安装到$GOPATH/bin/目录下</span><br><span class="line">yujiangdeMBP-13:~ yujiang$ go install  golang.org/x/tools/cmd/goimports</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">go get -v github.com/golang/tools/go/...</span><br><span class="line">go get -v github.com/golang/tools/...</span><br><span class="line"></span><br><span class="line">go get -u golang.org/x/tools/...</span><br></pre></td></tr></table></figure><ul><li>go build编译</li><li>go install产生pkg文件和可执行文件</li><li>go run直接编译运行</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jenkins安装</title>
      <link href="/2018/06/18/jenkins%E5%AE%89%E8%A3%85/"/>
      <url>/2018/06/18/jenkins%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="centos-install"><a href="#centos-install" class="headerlink" title="centos install"></a>centos install</h1><p>安装文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://pkg.jenkins.io/redhat-stable/</span><br><span class="line">https://www.vultr.com/docs/how-to-install-jenkins-on-centos-7</span><br></pre></td></tr></table></figure><p>启动jenkins</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start jenkins.service</span><br><span class="line">systemctl enable jenkins.service</span><br></pre></td></tr></table></figure><p>中文插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Locale plugin</span><br></pre></td></tr></table></figure><p> 多任务插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Multijob plugin</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Repo for Microsoft Windows and Linux</title>
      <link href="/2018/06/15/Repo-for-Microsoft-Windows-and-Linux/"/>
      <url>/2018/06/15/Repo-for-Microsoft-Windows-and-Linux/</url>
      
        <content type="html"><![CDATA[<p>这是E.S.R.Labs Repo —— 就像Google Repo，但它也可以在Microsoft Windows运行。Repo是Google建立在Git之上的repository管理工具。必要时，Repo会统一许多Git repositories上传到版本控制系统，并使部分开发工作流程自动化。Repo并不意味着取代Git，只是为了更容易在多个repositories的环境中使用Git。repo command是一个可执行的Python脚本，您可以将其放在任何路径。在处理源文件时，您将使用Repo进行跨网络操作。例如，使用Repo命令，可以将多个repositories中的文件下载到本地工作目录中。</p><h2 id="Setup-steps-for-Microsoft-Windows"><a href="#Setup-steps-for-Microsoft-Windows" class="headerlink" title="Setup steps for Microsoft Windows"></a>Setup steps for Microsoft Windows</h2><p>修复权限以允许创建符号链接</p><p>如果您是Administrators group的member，则必须关闭<a href="https://support.microsoft.com/en-us/products/windows?os=windows-10" target="_blank" rel="noopener">User Access Control</a> (UAC)，然后重新启动计算机。</p><p>否则，您必须调整您的用户权限才能获得<a href="https://stackoverflow.com/questions/6722589/using-windows-mklink-for-linking-2-files" target="_blank" rel="noopener">SeCreateSymbolicLinkPrivilege</a>权限。editrights工具是作为Microsoft Windows的git-repo的一部分提供的。</p><p>Highly experimental（除开发此功能外，请勿使用！）：如果您不想使用符号链接，而是文件夹和文件的硬链接（hardlinks），则必须在<code>~/.gitconfig</code>中设置以下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[portable]</span><br><span class="line">      windowsNoSymlinks = true</span><br></pre></td></tr></table></figure><p>这不需要上述所说的设置权限。</p><p>已知问题：硬链接被git销毁，例如，当你删除一个branch时（breaks .git/config）。这会破坏project workspace！</p><h3 id="Download-and-install-Git"><a href="#Download-and-install-Git" class="headerlink" title="Download and install Git"></a>Download and install Git</h3><p>下载Git（<a href="http://git-scm.com/downloads）" target="_blank" rel="noopener">http://git-scm.com/downloads）</a></p><p>将Git添加到path环境变量中：例如C:\Program Files (x86)\Git\cmd;</p><p>将MinGW添加到path环境变量中：例如C:\Program Files (x86)\Git\bin;</p><h3 id="Download-and-install-Python"><a href="#Download-and-install-Python" class="headerlink" title="Download and install Python"></a>Download and install Python</h3><p>下载Python 2.7+（<a href="https://www.python.org/downloads/）" target="_blank" rel="noopener">https://www.python.org/downloads/）</a></p><p>将Python添加到path环境变量中：例如C:\Python27;</p><p>注意：git-repo在实验环境支持Python 3.x</p><h3 id="使用Windows-Command-Shell或Git-Bash下载并安装Repo"><a href="#使用Windows-Command-Shell或Git-Bash下载并安装Repo" class="headerlink" title="使用Windows Command Shell或Git Bash下载并安装Repo"></a>使用Windows Command Shell或Git Bash下载并安装Repo</h3><p>Windows Command Shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">md %USERPROFILE%\bin</span><br><span class="line">curl https://raw.githubusercontent.com/esrlabs/git-repo/stable/repo &gt; %USERPROFILE%/bin/repo</span><br><span class="line">curl https://raw.githubusercontent.com/esrlabs/git-repo/stable/repo.cmd &gt; %USERPROFILE%/bin/repo.cmd</span><br></pre></td></tr></table></figure><p>Windows PowerShell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">md $env:USERPROFILE\bin</span><br><span class="line">curl https://raw.githubusercontent.com/esrlabs/git-repo/stable/repo &gt; $env:USERPROFILE/bin/repo</span><br><span class="line">curl https://raw.githubusercontent.com/esrlabs/git-repo/stable/repo.cmd &gt; $env:USERPROFILE/bin/repo.cmd</span><br></pre></td></tr></table></figure><p>Git Bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">curl https://raw.githubusercontent.com/esrlabs/git-repo/stable/repo &gt; ~/bin/repo</span><br><span class="line">curl https://raw.githubusercontent.com/esrlabs/git-repo/stable/repo.cmd &gt; ~/bin/repo.cmd</span><br></pre></td></tr></table></figure><p>将Repo添加path环境变量：%USERPROFILE%\bin;</p><p>创建一个指向％USERPROFILE％的HOME环境变量（OpenSSH需要找到它的.ssh目录）。</p><p>创建一个GIT_EDITOR环境变量，其中包含一个editor可执行文件作为值。为此，首先将editor可执行文件的主目录添加到path环境变量中。例如，GIT_EDITOR可以设置为”notepad++.exe”，”gvim.exe”。</p><h3 id="Setup-steps-for-Linux"><a href="#Setup-steps-for-Linux" class="headerlink" title="Setup steps for Linux"></a>Setup steps for Linux</h3><p>下载并安装Git和Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core</span><br><span class="line">sudo apt-get install python</span><br></pre></td></tr></table></figure><p>下载并安装Repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/bin</span><br><span class="line">$ PATH=~/bin:$PATH</span><br><span class="line">$ curl https://raw.githubusercontent.com/esrlabs/git-repo/stable/repo &gt; ~/bin/repo</span><br><span class="line">$ chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>有关git-repo用法的更多详细说明，请访问<a href="http://source.android.com/source/using-repo.html" target="_blank" rel="noopener">git</a>-repo。</p><h3 id="常见问题解答"><a href="#常见问题解答" class="headerlink" title="常见问题解答"></a>常见问题解答</h3><ul><li>我无法看到repo状态的任何颜色</li></ul><p>用于repo状态的pager默认设置为less，除非另外配置，否则将忽略转义序列。您可以将环境变量LESS设置为-FRSX以减少处理颜色。 （您可能还想将LESSCHARSET设置为utf-8）</p><p>它仍然不起作用！</p><p>对pager有更多的选择。它的行为并不像less一样，但它对你来说可能已经足够了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.pager more</span><br></pre></td></tr></table></figure><p>或者，环境变量GIT_PAGER可以设置为more。</p><ul><li>在使用repo init初始化我的repo时，我在Windows Command Shell中遇到WindowsError</li></ul><p>如果在输出开始时出现警告，表示GPG不可用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">warning: gpg (GnuPG) is not available.</span><br><span class="line">warning: Installing it is strongly encouraged.</span><br></pre></td></tr></table></figure><p>你必须添加gpg.exe到你的PATH变量。可执行文件可以在Git安装文件夹<code>$GIT\usr\bin</code>中找到。当你使用Git Bash时，<code>$Git\usr\bin</code>文件夹已经被添加到你的PATH中。</p><h3 id="Developer-Information"><a href="#Developer-Information" class="headerlink" title="Developer Information"></a>Developer Information</h3><p>与official google repo同步</p><p>为了与official google repo git同步，这里是与official google repo的tag v1.12.33同步的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># add google git-repo remote with tag</span><br><span class="line">git remote add googlesource https://android.googlesource.com/tools/repo/</span><br><span class="line">git checkout v1.12.33 -b google-latest</span><br><span class="line"></span><br><span class="line"># checkout basis for resync</span><br><span class="line">git checkout google-git-repo-base -b update</span><br><span class="line">git merge --allow-unrelated-histories -Xtheirs --squash google-latest</span><br><span class="line">git commit -m &quot;Update: google git-repo v1.12.33&quot;</span><br><span class="line">git rebase stable</span><br><span class="line"></span><br><span class="line"># solve conflicts; keep portability in mind</span><br><span class="line"></span><br><span class="line">git checkout stable</span><br><span class="line">git rebase update</span><br><span class="line"></span><br><span class="line"># cleanup</span><br><span class="line">git branch -D update</span><br><span class="line">git branch -D google-latest</span><br></pre></td></tr></table></figure><h3 id="创建一个新的签名版本"><a href="#创建一个新的签名版本" class="headerlink" title="创建一个新的签名版本"></a>创建一个新的签名版本</h3><p>用于创建新版本repo的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag -s -u KEYID v0.4.16 -m &quot;COMMENT&quot;</span><br><span class="line">git push origin stable:stable</span><br><span class="line">git push origin v0.4.16</span><br></pre></td></tr></table></figure><p>替换KEYID（类似0x ..）</p><p>v0.4.16（两次）</p><p>用更多的解释替换COMMENT</p>]]></content>
      
      
      
        <tags>
            
            <tag> git-repo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LTP C Test Case教程</title>
      <link href="/2018/06/11/LTP-C-Test-Case%E6%95%99%E7%A8%8B/"/>
      <url>/2018/06/11/LTP-C-Test-Case%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>LTP测试可以用C或Shell脚本编写。</p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Git-clone主LTP repository，如自述文件中所述, 并更改目录到checked-out的Git repository。我们建议安装LTP并运行Quick guide（在自述文件中）中提到的测试之一，以确保您从良好的状态开始。我们还建议克隆Linux kernel repository以供参考，本指南将涉及主线kernel 4.12内的文件和目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git</span><br></pre></td></tr></table></figure><p>还有许多其他的repositories可以参考，包括GNU C library glibc和可选的C library musl。一些system calls被部分或完全实现在user land作为标准C  library的一部分。所以在这些情况下，C library是一个重要的参考。glibc是Linux最常用的C library，然而musl通常更容易理解。</p><p>实现system calls的方式因体系结构，以及内核版本和C library版本而异。要找出system calls是否真的在任何机器上访问内核，可以使用strace。这会拦截system calls并打印它们。我们将在后面的教程中使用它。</p><h2 id="Choose-a-System-Call-to-test"><a href="#Choose-a-System-Call-to-test" class="headerlink" title="Choose a System Call to test"></a>Choose a System Call to test</h2><p>我们将使用<code>statx()</code> system call来提供测试的具体示例。在撰写本文时，没有测试Linux内核版本4.11中的system call。Linux system call特定的测试主要包含在testcases/kernel/syscalls目录，但你也可以grep整个LTP repository以检查任何现有system call的用法。</p><p>找到当前未被LTP测试的system call的方法是在内核树中查看include/linux/syscalls.h。</p><h3 id="Find-an-untested-System-call"><a href="#Find-an-untested-System-call" class="headerlink" title="Find an untested System call"></a>Find an untested System call</h3><p>尝试找到一个未经测试的系统调用，它有一个手册页（即man syscall产生一个结果）。Git-clone最新的kernel man-pages repository是一个好主意。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git://git.kernel.org/pub/scm/docs/man-pages/man-pages.git</span><br></pre></td></tr></table></figure><p>在写这篇文章时，最新的man-pages release和repository HEAD之间的差异超过了100次commits。这代表了大约9周的变化。如果你使用的是稳定的Linux发行版，那么你的man-pages package可能已经有几年了。就像kernel一样，最好有Git repository作为参考。</p><h2 id="Create-the-test-skeleton"><a href="#Create-the-test-skeleton" class="headerlink" title="Create the test skeleton"></a>Create the test skeleton</h2><p>我将调用我的测试statx01.c，在你读这个文件名的时候，可能会采用这个文件名，所以可以根据需要增加文件名中的数字，或者用练习2.1中选择的system call替换statx。（怕被占用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir testcases/kernel/syscalls/statx</span><br><span class="line">$ cd testcases/kernel/syscalls/statx</span><br><span class="line">$ echo statx &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure><p>接下来打开statx01.c并添加如下。确保将right notice更改为您的name/company，如有必要，更正test name和最低kernel version。我将在下面解释代码的作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Copyright (c) 2017 Instruction Ignorer &lt;&quot;can&apos;t&quot;@be.bothered.com&gt;</span><br><span class="line"> *</span><br><span class="line"> * This program is free software: you can redistribute it and/or modify</span><br><span class="line"> * it under the terms of the GNU General Public License as published by</span><br><span class="line"> * the Free Software Foundation, either version 2 of the License, or</span><br><span class="line"> * (at your option) any later version.</span><br><span class="line"> *</span><br><span class="line"> * This program is distributed in the hope that it will be useful,</span><br><span class="line"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="line"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="line"> * GNU General Public License for more details.</span><br><span class="line"> *</span><br><span class="line"> * You should have received a copy of the GNU General Public License</span><br><span class="line"> * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Test statx</span><br><span class="line"> *</span><br><span class="line"> * All tests should start with a description of _what_ we are testing.</span><br><span class="line"> * Non-trivial explanations of _how_ the code works should also go here.</span><br><span class="line"> * Include relevant links, Git commit hashes and CVE numbers.</span><br><span class="line"> * Inline comments should be avoided.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#include &quot;tst_test.h&quot;</span><br><span class="line"></span><br><span class="line">static void run(void)</span><br><span class="line">&#123;</span><br><span class="line">tst_res(TPASS, &quot;Doing hardly anything is easy&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static struct tst_test test = &#123;</span><br><span class="line">.test_all = run,</span><br><span class="line">.min_kver = &quot;4.11&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从<code>#include</code>语句开始，我们将复制main LTP test library headers。这包括最常见的test API函数和test harness初始化代码。需要注意的是，这是一个完全普通的，独立的C程序，但缺少main()，因为它在tst_test.h中实现。</p><p>我们使用tst_test结构指定运行一部分测试代码。测试编写器可以设置各种回调，包括我们已经设置为运行（）的test.test_all。test writer可以设置各种回调, 包括test.test_all，我们已经设置run()。测试工具将在一个单独的进程（使用fork()）中执行此回调，如果在test.timeout秒后没有返回，则强制终止它。</p><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p>【1】<a href="https://github.com/linux-test-project/ltp/wiki/C-Test-Case-Tutorial" target="_blank" rel="noopener">https://github.com/linux-test-project/ltp/wiki/C-Test-Case-Tutorial</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> LTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用配置命令</title>
      <link href="/2018/06/08/Linux%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/06/08/Linux%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LSB Version::core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch</span><br><span class="line">Distributor ID:CentOS</span><br><span class="line">Description:CentOS Linux release 7.4.1708 (Core) </span><br><span class="line">Release:7.4.1708</span><br><span class="line">Codename:Core</span><br></pre></td></tr></table></figure><h2 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ~]# ip  -h</span><br><span class="line">Usage: ip [ OPTIONS ] OBJECT &#123; COMMAND | help &#125;</span><br><span class="line">       ip [ -force ] -batch filename</span><br><span class="line">where  OBJECT := &#123; link | address | addrlabel | route | rule | neigh | ntable |</span><br><span class="line">                   tunnel | tuntap | maddress | mroute | mrule | monitor | xfrm |</span><br><span class="line">                   netns | l2tp | macsec | tcp_metrics | token &#125;</span><br><span class="line">       OPTIONS := &#123; -V[ersion] | -s[tatistics] | -d[etails] | -r[esolve] |</span><br><span class="line">                    -h[uman-readable] | -iec |</span><br><span class="line">                    -f[amily] &#123; inet | inet6 | ipx | dnet | bridge | link &#125; |</span><br><span class="line">                    -4 | -6 | -I | -D | -B | -0 |</span><br><span class="line">                    -l[oops] &#123; maximum-addr-flush-attempts &#125; |</span><br><span class="line">                    -o[neline] | -t[imestamp] | -ts[hort] | -b[atch] [filename] |</span><br><span class="line">                    -rc[vbuf] [size] | -n[etns] name | -a[ll] &#125;</span><br></pre></td></tr></table></figure><h3 id="获取系统上所有网络接口的信息"><a href="#获取系统上所有网络接口的信息" class="headerlink" title="获取系统上所有网络接口的信息"></a>获取系统上所有网络接口的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ~]# ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 08:00:27:3a:98:1d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: enp0s8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 08:00:27:52:03:aa brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.56.102/24 brd 192.168.56.255 scope global dynamic enp0s8</span><br><span class="line">       valid_lft 945sec preferred_lft 945sec</span><br><span class="line">    inet6 fe80::4b2b:b766:22c:f503/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: enp0s9: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 08:00:27:3e:3e:e2 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN qlen 1000</span><br><span class="line">    link/ether 52:54:00:66:bf:e6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN qlen 1000</span><br><span class="line">    link/ether 52:54:00:66:bf:e6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br><span class="line">scope解释，ip地址和路由都有一个域的概念，主要是告诉内核他们起作用的上下文。</span><br><span class="line">在linux中，路由的域表明了目的网络和本机的距离。</span><br><span class="line">而ip地址的域说明了这个ip地址的作用域。</span><br><span class="line">在linux中一共有3种作用域，分别是HOST，LINK(对于ip地址来说说明这个地址是只在lan中使用，而对于route来说目的的地址在lan中),Universe/global(广域网的地址,对于route来说要到达这个地址肯定会多于1跳)。</span><br><span class="line">要注意，域的默认值是Universe，也就是说你不显示指明，则默认都是Universe。</span><br><span class="line"></span><br><span class="line">查看IP地址</span><br><span class="line">[root@cephL ~]# ip addr show enp0s8</span><br><span class="line">3: enp0s8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 08:00:27:52:03:aa brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.56.102/24 brd 192.168.56.255 scope global dynamic enp0s8</span><br><span class="line">       valid_lft 847sec preferred_lft 847sec</span><br><span class="line">    inet6 fe80::4b2b:b766:22c:f503/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">查看IPv6地址</span><br><span class="line">[root@cephL ~]# ip -6 addr show dev enp0s8</span><br><span class="line">3: enp0s8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 state UP qlen 1000</span><br><span class="line">    inet6 fe80::4b2b:b766:22c:f503/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">添加IP地址</span><br><span class="line">[root@cephL ~]# ip addr add 192.168.56.103/24 dev enp0s8</span><br><span class="line">删除IP地址</span><br><span class="line">[root@cephL ~]# ip addr del 192.168.56.103/24 dev enp0s8</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ~]# ip route show</span><br><span class="line">192.168.56.0/24 dev enp0s8 proto kernel scope link src 192.168.56.102 metric 100 </span><br><span class="line">192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1</span><br><span class="line"></span><br><span class="line">让kernel报告路由，它会发送一个数据包到指定的地址</span><br><span class="line">[root@cephL ~]# ip route get 61.135.169.125</span><br><span class="line">61.135.169.125 via 10.116.21.254 dev enp0s9 src 10.116.21.135 </span><br><span class="line">    cache</span><br><span class="line">（解释：61.135.169.125是访问的地址，10.116.21.254是默认路由，10.116.21.135是enp0s9设备IP地址）</span><br><span class="line"></span><br><span class="line">添加默认路由</span><br><span class="line">[root@cephL ~]# ip route add default via 10.116.21.253 dev enp0s9</span><br><span class="line">删除默认路由</span><br><span class="line">[root@cephL ~]# ip route del default via 10.116.21.253 dev enp0s9</span><br></pre></td></tr></table></figure><p>不同网络接口的统计信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ~]# ip -s link</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    RX: bytes  packets  errors  dropped overrun mcast   </span><br><span class="line">    189813592  61558    0       0       0       0       </span><br><span class="line">    TX: bytes  packets  errors  dropped carrier collsns </span><br><span class="line">    189813592  61558    0       0       0       0       </span><br><span class="line">2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT qlen 1000</span><br><span class="line">    link/ether 08:00:27:3a:98:1d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    RX: bytes  packets  errors  dropped overrun mcast   </span><br><span class="line">    0          0        0       0       0       0       </span><br><span class="line">    TX: bytes  packets  errors  dropped carrier collsns </span><br><span class="line">    0          0        0       0       0       0       </span><br><span class="line">3: enp0s8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT qlen 1000</span><br><span class="line">    link/ether 08:00:27:52:03:aa brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    RX: bytes  packets  errors  dropped overrun mcast   </span><br><span class="line">    104188     1104     0       0       0       0       </span><br><span class="line">    TX: bytes  packets  errors  dropped carrier collsns </span><br><span class="line">    159594     673      0       0       0       0       </span><br><span class="line">4: enp0s9: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT qlen 1000</span><br><span class="line">    link/ether 08:00:27:3e:3e:e2 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    RX: bytes  packets  errors  dropped overrun mcast   </span><br><span class="line">    53777      574      0       0       0       0       </span><br><span class="line">    TX: bytes  packets  errors  dropped carrier collsns </span><br><span class="line">    60106      623      0       0       0       0       </span><br><span class="line">5: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT qlen 1000</span><br><span class="line">    link/ether 52:54:00:66:bf:e6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    RX: bytes  packets  errors  dropped overrun mcast   </span><br><span class="line">    0          0        0       0       0       0       </span><br><span class="line">    TX: bytes  packets  errors  dropped carrier collsns </span><br><span class="line">    0          0        0       0       0       0       </span><br><span class="line">6: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN mode DEFAULT qlen 1000</span><br><span class="line">    link/ether 52:54:00:66:bf:e6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    RX: bytes  packets  errors  dropped overrun mcast   </span><br><span class="line">    0          0        0       0       0       0       </span><br><span class="line">    TX: bytes  packets  errors  dropped carrier collsns </span><br><span class="line">    0          0        0       0       0       0       </span><br><span class="line"></span><br><span class="line">查询特定接口统计信息</span><br><span class="line">[root@cephL ~]# ip -s link ls enp0s9</span><br><span class="line">4: enp0s9: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT qlen 1000</span><br><span class="line">    link/ether 08:00:27:3e:3e:e2 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    RX: bytes  packets  errors  dropped overrun mcast   </span><br><span class="line">    54527      583      0       0       0       0       </span><br><span class="line">    TX: bytes  packets  errors  dropped carrier collsns </span><br><span class="line">    60946      633      0       0       0       0</span><br></pre></td></tr></table></figure><p>ARP，查看接入的MAC地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ~]# ip neighbour</span><br><span class="line">192.168.56.1 dev enp0s8 lladdr 0a:00:27:00:00:00 DELAY</span><br><span class="line">10.116.21.254 dev enp0s9 lladdr 00:00:0c:07:ac:0c DELAY</span><br><span class="line">10.116.21.253 dev enp0s9 lladdr b4:de:31:c7:e7:47 STALE</span><br><span class="line">192.168.56.100 dev enp0s8 lladdr 08:00:27:3e:18:34 STALE</span><br><span class="line">10.116.21.252 dev enp0s9 lladdr b4:de:31:c7:d8:e7 STALE</span><br></pre></td></tr></table></figure><p>ip工具可以连续监视devices, addresses和routes的状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ~]# ip monitor all</span><br><span class="line">[nsid current]192.168.56.1 dev enp0s8 lladdr 0a:00:27:00:00:00 REACHABLE</span><br><span class="line">[nsid current]10.116.21.254 dev enp0s9 lladdr 00:00:0c:07:ac:0c STALE</span><br><span class="line">[nsid current]192.168.56.1 dev enp0s8 lladdr 0a:00:27:00:00:00 REACHABLE</span><br><span class="line">[nsid current]10.116.21.254 dev enp0s9 lladdr 00:00:0c:07:ac:0c REACHABLE</span><br><span class="line">[nsid current]3: enp0s8    inet 192.168.56.102/24 brd 192.168.56.255 scope global dynamic enp0s8</span><br><span class="line">       valid_lft 1200sec preferred_lft 1200sec</span><br></pre></td></tr></table></figure><p>up和down网络设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ~]# ip link set enp0s9 down </span><br><span class="line">[root@cephL ~]# ip route show</span><br><span class="line">192.168.56.0/24 dev enp0s8 proto kernel scope link src 192.168.56.102 metric 100 </span><br><span class="line">192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1</span><br><span class="line">[root@cephL ~]# ping www.baidu.com</span><br><span class="line">ping: www.baidu.com: 未知的名称或服务</span><br><span class="line"></span><br><span class="line">[root@cephL ~]# ip link set enp0s9 up</span><br><span class="line">[root@cephL ~]# ip route show</span><br><span class="line">default via 10.116.21.254 dev enp0s9 proto static metric 100 </span><br><span class="line">10.116.20.0/23 dev enp0s9 proto kernel scope link src 10.116.21.135 metric 100 </span><br><span class="line">192.168.56.0/24 dev enp0s8 proto kernel scope link src 192.168.56.102 metric 100 </span><br><span class="line">192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1</span><br><span class="line">[root@cephL ~]# ping www.baidu.com</span><br><span class="line">PING www.a.shifen.com (61.135.169.121) 56(84) bytes of data.</span><br><span class="line">64 bytes from 61.135.169.121 (61.135.169.121): icmp_seq=1 ttl=50 time=4.35 ms</span><br></pre></td></tr></table></figure><p>获取帮助信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ~]# ip route help</span><br><span class="line">Usage: ip route &#123; list | flush &#125; SELECTOR</span><br><span class="line">       ip route save SELECTOR</span><br><span class="line">       ip route restore</span><br><span class="line">       ip route showdump</span><br><span class="line">       ip route get ADDRESS [ from ADDRESS iif STRING ]</span><br><span class="line">                            [ oif STRING ]  [ tos TOS ]</span><br><span class="line">                            [ mark NUMBER ]</span><br><span class="line">       ip route &#123; add | del | change | append | replace &#125; ROUTE</span><br><span class="line">SELECTOR := [ root PREFIX ] [ match PREFIX ] [ exact PREFIX ]</span><br><span class="line">            [ table TABLE_ID ] [ proto RTPROTO ]</span><br><span class="line">            [ type TYPE ] [ scope SCOPE ]</span><br><span class="line">ROUTE := NODE_SPEC [ INFO_SPEC ]</span><br><span class="line">NODE_SPEC := [ TYPE ] PREFIX [ tos TOS ]</span><br><span class="line">             [ table TABLE_ID ] [ proto RTPROTO ]</span><br><span class="line">             [ scope SCOPE ] [ metric METRIC ]</span><br><span class="line">INFO_SPEC := NH OPTIONS FLAGS [ nexthop NH ]...</span><br><span class="line">NH := [ via ADDRESS ] [ dev STRING ] [ weight NUMBER ] NHFLAGS</span><br><span class="line">OPTIONS := FLAGS [ mtu NUMBER ] [ advmss NUMBER ]</span><br><span class="line">           [ rtt TIME ] [ rttvar TIME ] [reordering NUMBER ]</span><br><span class="line">           [ window NUMBER ] [ cwnd NUMBER ] [ initcwnd NUMBER ]</span><br><span class="line">           [ ssthresh NUMBER ] [ realms REALM ] [ src ADDRESS ]</span><br><span class="line">           [ rto_min TIME ] [ hoplimit NUMBER ] [ initrwnd NUMBER ]</span><br><span class="line">           [ features FEATURES ] [ quickack BOOL ] [ congctl NAME ]</span><br><span class="line">           [ expires TIME ]</span><br><span class="line">TYPE := &#123; unicast | local | broadcast | multicast | throw |</span><br><span class="line">          unreachable | prohibit | blackhole | nat &#125;</span><br><span class="line">TABLE_ID := [ local | main | default | all | NUMBER ]</span><br><span class="line">SCOPE := [ host | link | global | NUMBER ]</span><br><span class="line">NHFLAGS := [ onlink | pervasive ]</span><br><span class="line">RTPROTO := [ kernel | boot | static | NUMBER ]</span><br><span class="line">TIME := NUMBER[s|ms]</span><br><span class="line">BOOL := [1|0]</span><br><span class="line">FEATURES := ecn</span><br></pre></td></tr></table></figure><p>yum常用列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum provides  找到缺少的RPM依赖包，例如yum provides &apos;*/dirent.h&apos;</span><br></pre></td></tr></table></figure><p>查看ssh登录信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utmpdump /var/log/wtmp | cat</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>【1】<a href="https://linux.cn/article-3144-1.html" target="_blank" rel="noopener">https://linux.cn/article-3144-1.html</a></p><p>【2】<a href="https://www.jianshu.com/p/d89cc7ecb305" target="_blank" rel="noopener">https://www.jianshu.com/p/d89cc7ecb305</a></p><p>【3】<a href="http://www.pagefault.info/?p=240" target="_blank" rel="noopener">http://www.pagefault.info/?p=240</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近距离探索memcache缓存</title>
      <link href="/2018/05/31/%E8%BF%91%E8%B7%9D%E7%A6%BB%E6%8E%A2%E7%B4%A2memcache/"/>
      <url>/2018/05/31/%E8%BF%91%E8%B7%9D%E7%A6%BB%E6%8E%A2%E7%B4%A2memcache/</url>
      
        <content type="html"><![CDATA[<p>近距离探索memcache缓存笔记</p><p>课程地址：<a href="https://www.imooc.com/learn/527" target="_blank" rel="noopener">https://www.imooc.com/learn/527</a></p><p>课程教师：李虎头</p><h2 id="memcache解析"><a href="#memcache解析" class="headerlink" title="memcache解析"></a>memcache解析</h2><p>1-1内容解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.知道什么是Memcache</span><br><span class="line">2.知道在什么时候使用Memcache</span><br><span class="line">3.知道怎样使用Memcache优化网站或API</span><br></pre></td></tr></table></figure><p>1-2基础介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Memcache介绍</span><br><span class="line">1.什么是Memcache？</span><br><span class="line">分布式高速缓存系统</span><br><span class="line"></span><br><span class="line">2.Memcache有什么用？</span><br><span class="line">缓存层，前端频繁操作后端数据库时，减轻后端数据库压力，前端直接访问缓存层</span><br></pre></td></tr></table></figure><p>1-3理解Memcache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只有一张表的数据库</span><br></pre></td></tr></table></figure><table><thead><tr><th>#</th><th>名字</th><th>类型</th><th>整理</th></tr></thead><tbody><tr><td>1</td><td>key</td><td>varchar(255)</td><td>utf8_general_ci</td></tr><tr><td>2</td><td>value</td><td>text</td><td>utf8_general_ci</td></tr></tbody></table><p>1-4使用场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.非持久化存储：对数据存储要求不高</span><br><span class="line">2.分布式存储：不适合单机使用</span><br><span class="line">3.Key/Value存储：格式简单，不支持List、Array数据格式</span><br></pre></td></tr></table></figure><h2 id="memcache的安装"><a href="#memcache的安装" class="headerlink" title="memcache的安装"></a>memcache的安装</h2><p>2-1安装前的说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.编译安装 Libevent Memcache(需要先安装Libevent依赖)</span><br><span class="line">2.使用依赖管理工具yum、apt-get</span><br><span class="line">-PS：Memcache和Memcached的区别(建议使用Memcached，它是Memcache的升级版)</span><br></pre></td></tr></table></figure><p>2-2安装服务端实际操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">1.编译安装</span><br><span class="line">yum -y install automake libtool wget gcc gcc-c++ &amp;&amp; wget https://github.com/libevent/libevent/archive/release-2.1.8-stable.tar.gz &amp;&amp; tar zxvf release-2.1.8-stable.tar.gz &amp;&amp; cd libevent-release-2.1.8-stable/ &amp;&amp; ./autogen.sh &amp;&amp; ./configure &amp;&amp; make -j 2 &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">wget http://www.memcached.org/files/memcached-1.5.8.tar.gz &amp;&amp; cd memcached-1.5.8 &amp;&amp; ./configure &amp;&amp; make -j 2 &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">[root@cephL memcached-1.5.8]# /usr/local/bin/memcached -h</span><br><span class="line">/usr/local/bin/memcached: error while loading shared libraries: libevent-2.1.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">[root@cephL memcached-1.5.8]# ldd /usr/local/bin/memcached </span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffdd7d77000)</span><br><span class="line">libevent-2.1.so.6 =&gt; not found</span><br><span class="line">libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f2d78950000)</span><br><span class="line">libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f2d78583000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x000055b9e254c000)</span><br><span class="line">[root@cephL memcached-1.5.8]# LD_DEBUG=libs /usr/local/bin/memcached -v</span><br><span class="line">     51494:find library=libevent-2.1.so.6 [0]; searching</span><br><span class="line">     51494: search cache=/etc/ld.so.cache</span><br><span class="line">     51494: search path=/lib64/tls/x86_64:/lib64/tls:/lib64/x86_64:/lib64:/usr/lib64/tls/x86_64:/usr/lib64/tls:/usr/lib64/x86_64:/usr/lib64(system search path)</span><br><span class="line">     51494:  trying file=/lib64/tls/x86_64/libevent-2.1.so.6</span><br><span class="line">     51494:  trying file=/lib64/tls/libevent-2.1.so.6</span><br><span class="line">     51494:  trying file=/lib64/x86_64/libevent-2.1.so.6</span><br><span class="line">     51494:  trying file=/lib64/libevent-2.1.so.6</span><br><span class="line">     51494:  trying file=/usr/lib64/tls/x86_64/libevent-2.1.so.6</span><br><span class="line">     51494:  trying file=/usr/lib64/tls/libevent-2.1.so.6</span><br><span class="line">     51494:  trying file=/usr/lib64/x86_64/libevent-2.1.so.6</span><br><span class="line">     51494:  trying file=/usr/lib64/libevent-2.1.so.6</span><br><span class="line">     51494:</span><br><span class="line">/usr/local/bin/memcached: error while loading shared libraries: libevent-2.1.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">[root@cephL memcached-1.5.8]# ll /usr/local/lib/libevent-2.1.so.6</span><br><span class="line">lrwxrwxrwx. 1 root root 21 5月  29 18:48 /usr/local/lib/libevent-2.1.so.6 -&gt; libevent-2.1.so.6.0.2</span><br><span class="line">[root@cephL memcached-1.5.8]# ln -s /usr/local/lib/libevent-2.1.so.6 /usr/lib64/libevent-2.1.so.6</span><br><span class="line">[root@cephL memcached-1.5.8]# /usr/local/bin/memcached -d -l 127.0.0.1 -p 11211 -m 150 -u root</span><br><span class="line">[root@cephL memcached-1.5.8]# ps -ef | grep memcache</span><br><span class="line">root       51810       1  0 19:04 ?        00:00:00 /usr/local/bin/memcached -d -l 127.0.0.1 -p 11211 -m 150 -u root</span><br><span class="line"></span><br><span class="line">2.使用yum安装</span><br><span class="line">[root@cephL memcache]# yum install memcached</span><br><span class="line">[root@cephL memcache]# /usr/bin/memcached -d -l 127.0.0.1 -p 11211 -m 150 -u root</span><br><span class="line"></span><br><span class="line">[root@cephL memcache]# ps -ef | grep memcache</span><br><span class="line">root       40789       1  0 18:34 ?        00:00:00 /usr/bin/memcached -d -l 127.0.0.1 -p 11211 -m 150 -u root</span><br></pre></td></tr></table></figure><p>2-3客户端的安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.安装libmemcached</span><br><span class="line">wget https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz</span><br><span class="line">tar zxvf libmemcached-1.0.18.tar.gz &amp;&amp; cd libmemcached-1.0.18</span><br><span class="line">./configure --prefix=/usr/lib/libmemcached</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> memcache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ceph纠删码bluestore与filestore对比调研</title>
      <link href="/2018/05/25/Ceph%E7%BA%A0%E5%88%A0%E7%A0%81bluestore%E4%B8%8Efilestore%E5%AF%B9%E6%AF%94%E8%B0%83%E7%A0%94/"/>
      <url>/2018/05/25/Ceph%E7%BA%A0%E5%88%A0%E7%A0%81bluestore%E4%B8%8Efilestore%E5%AF%B9%E6%AF%94%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<p>最近学习Ceph Erasure code，查阅了网络上有许多资料。Erasure code的概念与理论相对成熟，但目前在Ceph中实现与应用上有诸多困难。所以这里只对Ceph Erasure code应用场景做比较。</p><p>使用Erasure code的目的是为了节省存储空间（以牺牲计算资源换取存储资源）。</p><p><strong>bluestore OSD</strong></p><p>在luminous版本之前，只适用于像RGW那样的应用场景（full object writes and appends），不支持partial writes。</p><p>（1）用法一</p><p>在luminous版本，为了适用于RBD和CephFS的场景，增加了partial writes功能，但是只有在bluestore OSD上可以启用。</p><p>Erasure coded pools不支持omap，因此要将它们与RBD和CephFS一起使用，必须明确指示它们将data存储在ec pool中，将metadata存储在replicated pool中。</p><p>对于CephFS，在创建file system时通过<a href="http://docs.ceph.com/docs/master/cephfs/file-layouts/" target="_blank" rel="noopener">file layouts</a>设定一个erasure coded pool作为默认的data pool。</p><p>（2）用法二</p><p>在erasure coded pool之前设置一个cache tier。</p><p><strong>filestore OSD</strong></p><p>（1）用法一</p><p>Erasure coded pools需要比replicated pools更多的资源，并且缺少一些功能，如omap。为了克服这些限制，可以在erasure coded pool之前设置一个cache tier。</p><p>由于使用cache tier并且与Erasure coded相关联，那么Erasure coded的性能同时与cache tier特性相关。这是一个纠结的问题！</p><p><strong>Ceph Cache Tiering</strong></p><p><img src="http://docs.ceph.com/docs/master/_images/ditaa-2982c5ed3031cac4f9e40545139e51fdb0b33897.png" alt></p><p>如上图，cache tier为客户端读取存储在后端的数据子集提供更好的I/O性能。在创建pool时，Cache Tier层pool作为Storage Tier层pool的缓存。 Ceph objecter handles 负责处理objects放置位置。 tiering agent 决定何时将缓存中的objects刷新到后端存储层。所以cache tier和后端存储层对Ceph clients来说是完全透明的。</p><p>但是，管理员可以配置此迁移的发生方式。 主要有两种情况：</p><p>Writeback Mode:</p><p>当管理员以writeback mode配置tiers时，Ceph clients将数据写入缓存层并从缓存层接收ACK。经过一段时间后，写入缓存层的数据将迁移到存储层，并从缓存层中清除。从概念上讲，缓存层被覆盖在后端存储层的“前面”。当Ceph client需要驻留在存储层中的数据时，cache tiering agent会在读取数据时将数据迁移到缓存层，然后将其发送到Ceph client。此后，Ceph client可以使用缓存层执行I/O，直到数据变为非活动状态。这对于易变数据（例如照片/视频编辑，交易数据等）是理想的。</p><p>Read-proxy Mode:</p><p>此模式将使用已存在于缓存层中的任何objects，但如果缓存中没有objects，则将请求代理到存储层。这对于从writeback mode转换为禁用缓存非常有用，因为它允许负载在缓存耗尽时正常运行，而无需向缓存中添加任何新objects。</p><p>cache tier所有迁移模式：</p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Ceph%E7%BA%A0%E5%88%A0%E7%A0%81bluestore%E4%B8%8Efilestore%E5%AF%B9%E6%AF%94%E8%B0%83%E7%A0%94/AAA30A7C3BB8C148411DB8D2C01C175D.jpg" alt></p><p><strong>官方文档明确指出：</strong></p><p><strong>A WORD OF CAUTION</strong></p><p>Cache tiering会降低大多数workloads的性能。用户在使用此功能之前应特别小心。</p><p><strong>Workload dependent:</strong></p><p>缓存是否会提高性能，高度依赖于负载。由于将objects移入或移出缓存会产生额外成本，因此只有在数据集中访问存在较大偏差时才会生效，这样大多数请求才会命中少量objects。缓存池应该大到足以捕获你的负载，以避免抖动。</p><p><strong>Difficult to benchmark:</strong></p><p>使用cache tiering，用户常规衡量性能的基准测试将显得很糟糕，部分原因是由于很少有人将请求集中在一小部分objects上，所以缓存“预热”可能需要很长时间，同时预热可能带来更高的成本。</p><p><strong>Usually slower:</strong></p><p>对于缓存分层不友好的负载，性能通常比没有设置cache tiering enabled的普通RADOS pool慢。</p><p><strong>librados object enumeration:</strong></p><p>在这种情况下，librados级别的object enumeration API并不一致。如果您的应用程序直接使用librados并依赖于object enumeration，则缓存分层可能无法按预期工作。 </p><p><strong>Complexity:</strong></p><p>启用缓存分层会带来额外的复杂性。这会增加其他用户尚未遇到的错误的可能性，并且会使您的部署处于更高级别的风险中。</p><p><strong>KNOWN GOOD WORKLOADS</strong></p><p><strong>RGW time-skewed:</strong></p><p>如果RGW负载几乎所有读取操作都针对最近写入的objects，可配置为一段时间后，将最近写入的对象从缓存层迁移到存储层，这种场景可以很好地工作。</p><p><strong>KNOWN BAD WORKLOADS</strong></p><p>已知下列配置对cache tiering效果不佳。</p><p><strong>RBD with replicated cache and erasure-coded base:</strong></p><p>这是一个常见的要求，但通常表现不佳。即使合理偏差的负载仍然会向cold objects发送一些small writes操作，由于erasure-coded pool尚不支持small writes操作，因此必须将整个（通常为4 MB）objects迁移到缓存中以满足small write（通常为4 KB）。只有少数用户成功部署了此配置，并且仅适用于他们，因为他们的数据extremely cold（备份）并且对性能没有任何要求。</p><p><strong>RBD with replicated cache and base:</strong></p><p>具有replicated base tier（存储层）的RBD效果要好于erasure coded base tier（存储层）时的RBD，但它仍高度依赖于负载中的偏差量，而且很难验证。用户需要很好地理解他们的负载，并需要调整缓存分层参数。</p><p><strong>总结</strong></p><p>1、 架构角度，如果想用Ceph Erasure code，推荐使用bluestore OSD，而不推荐filestore OSD。</p><p>抛开bluestore的稳定性不谈（待验证），filestore OSD的Ceph Erasure code依赖Ceph Cache Tiering会带来额外的复杂性，并且限制了应用场景。</p><p>摘自李运华：</p><p>组件越多，就越有可能其中某个组件出现故障，从而导致系统故障。这个概率可以算出来，假设组件的故障率是10%（有10%的时间不可用），那么有1个组件的系统可用性是(1-10%)=90%，有2个组件的系统的可用性是(1-10%)*(1-10%)=81%，两者的可用性相差9%。</p><p>2、如果使用filestore OSD的Ceph Erasure code，推荐应用在RGW time-skewed场景（官方推荐）。而Ceph Cache Tiering据生产环境落地还有一定距离。 </p><p>3、近来很多公司都在搞云计算、搞研发，有些是自主研发而有些是基于开源定制开发。如果是基于开源，根据之前的经验，代码直接提交到社区根据社区的发布流程会省去很多额外的工作。</p><p>自主研发版本控制是痛苦的，需要考虑社区base更新，自主研发的代码移植到社区最新base（查分代码到吐。。。），如果社区框架变动大，还需要调试改代码。如果是聪明的开发会找到一条扩展的路，尽量更改原有逻辑，如果更改原有逻辑，对测试来说是个很大的挑战。</p><p>4、对于产品化一个开源项目，如ceph，还是寻找一个稳定的方案，然后再搞研发，至少研发失败还给自己留条后路，因为你背后有一个强大的社区团队。</p><p><strong>附录</strong></p><p>中文文档，如看不懂请看英语原文</p><p><a href="https://lnsyyj.github.io/2018/05/12/CEPH-ERASURE-CODE/" target="_blank" rel="noopener">https://lnsyyj.github.io/2018/05/12/CEPH-ERASURE-CODE/</a></p><p><a href="https://lnsyyj.github.io/2018/05/12/CACHE-TIERING/" target="_blank" rel="noopener">https://lnsyyj.github.io/2018/05/12/CACHE-TIERING/</a></p><p><a href="https://lnsyyj.github.io/2018/05/15/ERASURE-CODE-PROFILES/" target="_blank" rel="noopener">https://lnsyyj.github.io/2018/05/15/ERASURE-CODE-PROFILES/</a></p><p><a href="https://lnsyyj.github.io/2018/05/16/JERASURE-ERASURE-CODE-PLUGIN/" target="_blank" rel="noopener">https://lnsyyj.github.io/2018/05/16/JERASURE-ERASURE-CODE-PLUGIN/</a></p><p><a href="https://lnsyyj.github.io/2018/05/16/ISA-ERASURE-CODE-PLUGIN/" target="_blank" rel="noopener">https://lnsyyj.github.io/2018/05/16/ISA-ERASURE-CODE-PLUGIN/</a></p><p><a href="https://lnsyyj.github.io/2018/05/17/LOCALLY-REPAIRABLE-ERASURE-CODE-PLUGIN/" target="_blank" rel="noopener">https://lnsyyj.github.io/2018/05/17/LOCALLY-REPAIRABLE-ERASURE-CODE-PLUGIN/</a></p><p><a href="https://lnsyyj.github.io/2018/05/18/SHEC-ERASURE-CODE-PLUGIN/" target="_blank" rel="noopener">https://lnsyyj.github.io/2018/05/18/SHEC-ERASURE-CODE-PLUGIN/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Avocado Test Framework</title>
      <link href="/2018/05/24/Avocado-Test-Framework/"/>
      <url>/2018/05/24/Avocado-Test-Framework/</url>
      
        <content type="html"><![CDATA[<p>Avocado是一组工具和库, 用于自动化测试。</p><p>以下是基于tag61版本的源码部署方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">编译安装方式：</span><br><span class="line">sudo yum  install -y python2 git gcc python-devel python-pip libvirt-devel libffi-devel openssl-devel libyaml-devel redhat-rpm-config xz-devel libvirt-python</span><br><span class="line"></span><br><span class="line">pip install --upgrade setuptools</span><br><span class="line"></span><br><span class="line">git clone https://github.com/avocado-framework/avocado.git</span><br><span class="line">cd avocado/</span><br><span class="line">git checkout -b my61 61.0</span><br><span class="line"></span><br><span class="line">make develop</span><br><span class="line">sudo make requirements</span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">遇到问题：</span><br><span class="line">[root@cephL avocado]# avocado -v</span><br><span class="line">Avocado 61.0</span><br><span class="line">[root@cephL avocado]# avocado -h</span><br><span class="line">usage: avocado [-h] [-v] [--config [CONFIG_FILE]] [--show [STREAM[:LVL]]] [-s]</span><br><span class="line">               </span><br><span class="line">               &#123;config,diff,distro,exec-path,list,multiplex,plugins,run,sysinfo,variants&#125;</span><br><span class="line">               ...</span><br><span class="line"></span><br><span class="line">Avocado Test Runner</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -v, --version         show program&apos;s version number and exit</span><br><span class="line">  --config [CONFIG_FILE]</span><br><span class="line">                        Use custom configuration from a file</span><br><span class="line">  --show [STREAM[:LVL]]</span><br><span class="line">                        List of comma separated builtin logs, or logging</span><br><span class="line">                        streams optionally followed by LEVEL (DEBUG,INFO,...).</span><br><span class="line">                        Builtin streams are: &quot;test&quot;: test output; &quot;debug&quot;:</span><br><span class="line">                        tracebacks and other debugging info; &quot;app&quot;:</span><br><span class="line">                        application output; &quot;early&quot;: early logging of other</span><br><span class="line">                        streams, including test (very verbose); &quot;remote&quot;:</span><br><span class="line">                        fabric/paramiko debug; &quot;all&quot;: all builtin streams;</span><br><span class="line">                        &quot;none&quot;: disables regular output (leaving only errors</span><br><span class="line">                        enabled). By default: &apos;app&apos;</span><br><span class="line">  -s, --silent          disables regular output (leaving only errors enabled)</span><br><span class="line"></span><br><span class="line">subcommands:</span><br><span class="line">  valid subcommands</span><br><span class="line"></span><br><span class="line">  &#123;config,diff,distro,exec-path,list,multiplex,plugins,run,sysinfo,variants&#125;</span><br><span class="line">                        subcommand help</span><br><span class="line">    config              Shows avocado config keys</span><br><span class="line">    diff                Shows the difference between 2 jobs.</span><br><span class="line">    distro              Shows detected Linux distribution</span><br><span class="line">    exec-path           Returns path to avocado bash libraries and exits.</span><br><span class="line">    list                List available tests</span><br><span class="line">    multiplex           Tool to analyze and visualize test variants and params</span><br><span class="line">    plugins             Displays plugin information</span><br><span class="line">    run                 Runs one or more tests (native test, test alias,</span><br><span class="line">                        binary or script)</span><br><span class="line">    sysinfo             Collect system information</span><br><span class="line">    variants            Tool to analyze and visualize test variants and params</span><br><span class="line">Failed to load plugin from module &quot;avocado_runner_remote&quot;: ImportError(&apos;No module named api&apos;,)</span><br><span class="line">Failed to load plugin from module &quot;avocado_runner_docker&quot;: ImportError(&apos;No module named api&apos;,)</span><br><span class="line">Failed to load plugin from module &quot;avocado_runner_vm&quot;: ImportError(&apos;No module named api&apos;,)</span><br><span class="line"></span><br><span class="line">fabric库升级导致No module named api，以下为解决办法：</span><br><span class="line">[root@cephL avocado]# pip list | grep fabric</span><br><span class="line">fabric (2.0.1)</span><br><span class="line">[root@cephL avocado]# pip uninstall fabric</span><br><span class="line">Uninstalling fabric-2.0.1:</span><br><span class="line">  /root/.local/lib/python2.7/site-packages/fabric-2.0.1-py2.7.egg</span><br><span class="line">Proceed (y/n)? y</span><br><span class="line">  Successfully uninstalled fabric-2.0.1</span><br><span class="line">[root@cephL avocado]# pip install fabric==1.14.0</span><br><span class="line"></span><br><span class="line">测试avocado运行状态</span><br><span class="line">[root@cephL avocado]# avocado run /bin/true </span><br><span class="line">JOB ID     : 7c46b08f9cc78635ef6d4c0b1109da7c5429812a</span><br><span class="line">JOB LOG    : /root/avocado/job-results/job-2018-05-24T21.58-7c46b08/job.log</span><br><span class="line"> (1/1) /bin/true: PASS (0.02 s)</span><br><span class="line">RESULTS    : PASS 1 | ERROR 0 | FAIL 0 | SKIP 0 | WARN 0 | INTERRUPT 0 | CANCEL 0</span><br><span class="line">JOB TIME   : 0.12 s</span><br><span class="line">JOB HTML   : /root/avocado/job-results/job-2018-05-24T21.58-7c46b08/results.html</span><br></pre></td></tr></table></figure><p>python依赖，以下版本运行正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL scripts]# pip list </span><br><span class="line">aexpect (1.4.0)</span><br><span class="line">asn1crypto (0.24.0)</span><br><span class="line">avocado-framework (61.0, /usr/lib/python2.7/site-packages/avocado_framework-61.0-py2.7.egg)</span><br><span class="line">avocado-framework-plugin-glib (61.0, /root/github/avocado/optional_plugins/glib)</span><br><span class="line">avocado-framework-plugin-golang (61.0, /root/github/avocado/optional_plugins/golang)</span><br><span class="line">avocado-framework-plugin-loader-yaml (61.0, /root/github/avocado/optional_plugins/loader_yaml)</span><br><span class="line">avocado-framework-plugin-result-html (61.0, /root/github/avocado/optional_plugins/html)</span><br><span class="line">avocado-framework-plugin-result-upload (61.0, /root/github/avocado/optional_plugins/result_upload)</span><br><span class="line">avocado-framework-plugin-resultsdb (61.0, /root/github/avocado/optional_plugins/resultsdb)</span><br><span class="line">avocado-framework-plugin-robot (61.0, /root/github/avocado/optional_plugins/robot)</span><br><span class="line">avocado-framework-plugin-runner-docker (61.0, /root/github/avocado/optional_plugins/runner_docker)</span><br><span class="line">avocado-framework-plugin-runner-remote (61.0, /root/github/avocado/optional_plugins/runner_remote)</span><br><span class="line">avocado-framework-plugin-runner-vm (61.0, /root/github/avocado/optional_plugins/runner_vm)</span><br><span class="line">avocado-framework-plugin-varianter-pict (61.0, /root/github/avocado/optional_plugins/varianter_pict)</span><br><span class="line">avocado-framework-plugin-varianter-yaml-to-mux (61.0, /root/github/avocado/optional_plugins/varianter_yaml_to_mux)</span><br><span class="line">Babel (0.9.6)</span><br><span class="line">backports.lzma (0.0.11)</span><br><span class="line">backports.ssl-match-hostname (3.5.0.1)</span><br><span class="line">bcrypt (3.1.4)</span><br><span class="line">Beaker (1.5.4)</span><br><span class="line">ceph-deploy (2.0.0)</span><br><span class="line">ceph-detect-init (1.0.1)</span><br><span class="line">ceph-disk (1.0.0)</span><br><span class="line">ceph-volume (1.0.0)</span><br><span class="line">cephfs (2.0.0)</span><br><span class="line">cffi (1.11.5)</span><br><span class="line">chardet (2.2.1)</span><br><span class="line">CherryPy (3.2.2)</span><br><span class="line">configobj (4.7.2)</span><br><span class="line">cryptography (2.2.2)</span><br><span class="line">decorator (3.4.0)</span><br><span class="line">Django (1.6.11.7)</span><br><span class="line">django-filter (0.9.2)</span><br><span class="line">djangorestframework (2.4.3)</span><br><span class="line">djangorestframework-bulk (0.2)</span><br><span class="line">enum34 (1.1.6)</span><br><span class="line">Fabric (1.14.0)</span><br><span class="line">Flask (0.10.1, /usr/lib/python2.7/site-packages)</span><br><span class="line">idna (2.6)</span><br><span class="line">iniparse (0.4)</span><br><span class="line">invoke (1.0.0)</span><br><span class="line">ipaddress (1.0.16)</span><br><span class="line">IPy (0.75)</span><br><span class="line">itsdangerous (0.23)</span><br><span class="line">Jinja2 (2.7.2)</span><br><span class="line">kmod (0.1)</span><br><span class="line">libvirt-python (3.9.0)</span><br><span class="line">M2Crypto (0.21.1)</span><br><span class="line">m2ext (0.1)</span><br><span class="line">Mako (0.8.1)</span><br><span class="line">MarkupSafe (0.11)</span><br><span class="line">netaddr (0.7.5)</span><br><span class="line">netifaces (0.10.4)</span><br><span class="line">nose (1.3.7)</span><br><span class="line">numpy (1.7.1)</span><br><span class="line">pam (0.1.4)</span><br><span class="line">paramiko (2.4.1)</span><br><span class="line">Paste (1.7.5.1)</span><br><span class="line">pbr (4.0.3)</span><br><span class="line">pecan (0.4.5)</span><br><span class="line">perf (0.1)</span><br><span class="line">Pillow (2.0.0)</span><br><span class="line">pip (8.1.2)</span><br><span class="line">policycoreutils-default-encoding (0.1)</span><br><span class="line">prettytable (0.7.2)</span><br><span class="line">psycopg2 (2.5.1)</span><br><span class="line">pudb (2017.1.4)</span><br><span class="line">pyasn1 (0.4.3)</span><br><span class="line">pycparser (2.18)</span><br><span class="line">pycurl (7.19.0)</span><br><span class="line">Pygments (2.2.0)</span><br><span class="line">pygobject (3.22.0)</span><br><span class="line">pygpgme (0.3)</span><br><span class="line">pyliblzma (0.5.3)</span><br><span class="line">PyNaCl (1.2.1)</span><br><span class="line">pyOpenSSL (0.13.1)</span><br><span class="line">pyparsing (1.5.6)</span><br><span class="line">pystache (0.5.4)</span><br><span class="line">python-linux-procfs (0.4.9)</span><br><span class="line">python-memcached (1.48)</span><br><span class="line">pyudev (0.15)</span><br><span class="line">pyxattr (0.5.1)</span><br><span class="line">PyYAML (3.12)</span><br><span class="line">rados (2.0.0)</span><br><span class="line">rbd (2.0.0)</span><br><span class="line">requests (2.6.0)</span><br><span class="line">resultsdb-api (2.0.0)</span><br><span class="line">rgw (2.0.0)</span><br><span class="line">robotframework (3.0.4)</span><br><span class="line">rtslib-fb (2.1.63)</span><br><span class="line">schedutils (0.4)</span><br><span class="line">seobject (0.1)</span><br><span class="line">sepolicy (1.1)</span><br><span class="line">setuptools (0.9.8)</span><br><span class="line">simplegeneric (0.8)</span><br><span class="line">simplejson (3.15.0)</span><br><span class="line">singledispatch (3.4.0.2)</span><br><span class="line">six (1.11.0)</span><br><span class="line">slip (0.4.0)</span><br><span class="line">slip.dbus (0.4.0)</span><br><span class="line">stevedore (1.28.0)</span><br><span class="line">Tempita (0.5.1)</span><br><span class="line">urlgrabber (3.10)</span><br><span class="line">urllib3 (1.10.2)</span><br><span class="line">urwid (2.0.1)</span><br><span class="line">virtualenv (16.0.0)</span><br><span class="line">WebOb (1.2.3)</span><br><span class="line">WebTest (1.3.4)</span><br><span class="line">Werkzeug (0.9.1)</span><br><span class="line">wheel (0.31.0)</span><br><span class="line">yum-metadata-parser (1.1.4)</span><br></pre></td></tr></table></figure><p>debug方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avocado --show test run examples/tests/sleeptest.py</span><br></pre></td></tr></table></figure><p>添加测试case方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ~]# mkdir testcase &amp;&amp; cd testcase</span><br><span class="line">[root@cephL ~]# vi sleeptest.py  (添加如下代码，http://avocado-framework.readthedocs.io/en/61.0/WritingTests.html)</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">from avocado import Test</span><br><span class="line">class SleepTest(Test):</span><br><span class="line">    def test(self):</span><br><span class="line">        sleep_length = self.params.get(&apos;sleep_length&apos;, default=1)</span><br><span class="line">        self.log.debug(&quot;Sleeping for %.2f seconds&quot;, sleep_length)</span><br><span class="line">        time.sleep(sleep_length)</span><br><span class="line">运行case</span><br><span class="line">[root@cephL ~]# avocado run /root/mac/testcase</span><br><span class="line">JOB ID     : b5fcd62a2baf4c3b94adb6cfd14fe6e8e767dc4a</span><br><span class="line">JOB LOG    : /root/avocado/job-results/job-2018-06-06T00.59-b5fcd62/job.log</span><br><span class="line"> (1/1) /root/mac/testcase/sleeptest.py:SleepTest.test: PASS (1.01 s)</span><br><span class="line">RESULTS    : PASS 1 | ERROR 0 | FAIL 0 | SKIP 0 | WARN 0 | INTERRUPT 0 | CANCEL 0</span><br><span class="line">JOB TIME   : 1.13 s</span><br><span class="line">JOB HTML   : /root/avocado/job-results/job-2018-06-06T00.59-b5fcd62/results.html</span><br></pre></td></tr></table></figure><h2 id="Accessing-test-parameters"><a href="#Accessing-test-parameters" class="headerlink" title="Accessing test parameters"></a>Accessing test parameters</h2><p>每个test都有一组参数，可以通过<code>self.params.get($name, $path=None, $default=None)</code>进行访问，其中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name - name of the parameter (key) --- 参数的名称(键)</span><br><span class="line">path - where to look for this parameter (when not specified uses mux-path) --- 在何处查找此参数(未指定时使用mux-path)</span><br><span class="line">default - what to return when param not found --- 未找到参数时返回的内容</span><br></pre></td></tr></table></figure><p>path有点棘手。Avocado使用tree来表示参数。在简单的场景中，您不必担心，您将在默认路径中找到所有值（values），但最终您可能需要check-out <a href="http://avocado-framework.readthedocs.io/en/61.0/TestParameters.html" target="_blank" rel="noopener">Test parameters</a>以了解详细信息。</p><p>假设您的test收到以下参数 (在下一节中您将学习如何执行这些参数):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ avocado variants -m examples/tests/sleeptenmin.py.data/sleeptenmin.yaml --variants 2</span><br><span class="line">...</span><br><span class="line">Variant 1:    /run/sleeptenmin/builtin, /run/variants/one_cycle</span><br><span class="line">    /run/sleeptenmin/builtin:sleep_method =&gt; builtin</span><br><span class="line">    /run/variants/one_cycle:sleep_cycles  =&gt; 1</span><br><span class="line">    /run/variants/one_cycle:sleep_length  =&gt; 600</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在test中, 您可以通过以下方法访问这些参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.params.get(&quot;sleep_method&quot;)    # returns &quot;builtin&quot;</span><br><span class="line">self.params.get(&quot;sleep_cycles&quot;, &apos;*&apos;, 10)    # returns 1</span><br><span class="line">self.params.get(&quot;sleep_length&quot;, &quot;/*/variants/*&quot;  # returns 600</span><br></pre></td></tr></table></figure><p>注意：在可能发生冲突的复杂情况下，path非常重要，因为当有多个具有相同key的values匹配查询时，avocado会引发异常。如前所述，您可以通过使用特定path或定义custom mux-path来避免这些情况，它允许指定解析层次结构。更多细节可以在<a href="http://avocado-framework.readthedocs.io/en/61.0/TestParameters.html" target="_blank" rel="noopener">Test parameters</a>中找到。</p><h2 id="Running-multiple-variants-of-tests"><a href="#Running-multiple-variants-of-tests" class="headerlink" title="Running multiple variants of tests"></a>Running multiple variants of tests</h2><p>在上一节中, 我们描述了如何处理参数。现在, 让我们来看看如何生成它们, 并使用不同的参数执行测试。</p><p>variants subsystem允许创建参数的多个variants（变体）, 以及使用这些参数variants（变体）执行测试。此subsystem是可插拔的, 因此您可以使用自定义插件来生成variants（变体）。为了简单起见，我们使用Avocado的主要实现，名为”yaml_to_mux”。</p><p>该”yaml_to_mux”插件接受YAML文件。这将创建一个树状结构，将变量存储为参数，并使用自定义标记（tags）将locations标记为”multiplex” domains。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The “yaml_to_mux” plugin accepts YAML files. Those will create a tree-like structure, store the variables as parameters and use custom tags to mark locations as “multiplex” domains.</span><br></pre></td></tr></table></figure><p>让我们使用<code>examples/tests/sleeptenmin.py.data/sleeptenmin.yaml</code>文件作为示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sleeptenmin: !mux</span><br><span class="line">    builtin:</span><br><span class="line">        sleep_method: builtin</span><br><span class="line">    shell:</span><br><span class="line">        sleep_method: shell</span><br><span class="line">variants: !mux</span><br><span class="line">    one_cycle:</span><br><span class="line">        sleep_cycles: 1</span><br><span class="line">        sleep_length: 600</span><br><span class="line">    six_cycles:</span><br><span class="line">        sleep_cycles: 6</span><br><span class="line">        sleep_length: 100</span><br><span class="line">    one_hundred_cycles:</span><br><span class="line">        sleep_cycles: 100</span><br><span class="line">        sleep_length: 6</span><br><span class="line">    six_hundred_cycles:</span><br><span class="line">        sleep_cycles: 600</span><br><span class="line">        sleep_length: 1</span><br></pre></td></tr></table></figure><p>其产生以下结构和参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">$ avocado variants -m examples/tests/sleeptenmin.py.data/sleeptenmin.yaml --summary 2 --variants 2</span><br><span class="line">Multiplex tree representation:</span><br><span class="line"> ┗━━ run</span><br><span class="line">      ┣━━ sleeptenmin</span><br><span class="line">      ┃    ╠══ builtin</span><br><span class="line">      ┃    ║     → sleep_method: builtin</span><br><span class="line">      ┃    ╚══ shell</span><br><span class="line">      ┃          → sleep_method: shell</span><br><span class="line">      ┗━━ variants</span><br><span class="line">           ╠══ one_cycle</span><br><span class="line">           ║     → sleep_length: 600</span><br><span class="line">           ║     → sleep_cycles: 1</span><br><span class="line">           ╠══ six_cycles</span><br><span class="line">           ║     → sleep_length: 100</span><br><span class="line">           ║     → sleep_cycles: 6</span><br><span class="line">           ╠══ one_hundred_cycles</span><br><span class="line">           ║     → sleep_length: 6</span><br><span class="line">           ║     → sleep_cycles: 100</span><br><span class="line">           ╚══ six_hundred_cycles</span><br><span class="line">                 → sleep_length: 1</span><br><span class="line">                 → sleep_cycles: 600</span><br><span class="line"></span><br><span class="line">Multiplex variants (8):</span><br><span class="line"></span><br><span class="line">Variant builtin-one_cycle-f659:    /run/sleeptenmin/builtin, /run/variants/one_cycle</span><br><span class="line">    /run/sleeptenmin/builtin:sleep_method =&gt; builtin</span><br><span class="line">    /run/variants/one_cycle:sleep_cycles  =&gt; 1</span><br><span class="line">    /run/variants/one_cycle:sleep_length  =&gt; 600</span><br><span class="line"></span><br><span class="line">Variant builtin-six_cycles-723b:    /run/sleeptenmin/builtin, /run/variants/six_cycles</span><br><span class="line">    /run/sleeptenmin/builtin:sleep_method =&gt; builtin</span><br><span class="line">    /run/variants/six_cycles:sleep_cycles =&gt; 6</span><br><span class="line">    /run/variants/six_cycles:sleep_length =&gt; 100</span><br><span class="line"></span><br><span class="line">Variant builtin-one_hundred_cycles-633a:    /run/sleeptenmin/builtin, /run/variants/one_hundred_cycles</span><br><span class="line">    /run/sleeptenmin/builtin:sleep_method         =&gt; builtin</span><br><span class="line">    /run/variants/one_hundred_cycles:sleep_cycles =&gt; 100</span><br><span class="line">    /run/variants/one_hundred_cycles:sleep_length =&gt; 6</span><br><span class="line"></span><br><span class="line">Variant builtin-six_hundred_cycles-a570:    /run/sleeptenmin/builtin, /run/variants/six_hundred_cycles</span><br><span class="line">    /run/sleeptenmin/builtin:sleep_method         =&gt; builtin</span><br><span class="line">    /run/variants/six_hundred_cycles:sleep_cycles =&gt; 600</span><br><span class="line">    /run/variants/six_hundred_cycles:sleep_length =&gt; 1</span><br><span class="line"></span><br><span class="line">Variant shell-one_cycle-55f5:    /run/sleeptenmin/shell, /run/variants/one_cycle</span><br><span class="line">    /run/sleeptenmin/shell:sleep_method  =&gt; shell</span><br><span class="line">    /run/variants/one_cycle:sleep_cycles =&gt; 1</span><br><span class="line">    /run/variants/one_cycle:sleep_length =&gt; 600</span><br><span class="line"></span><br><span class="line">Variant shell-six_cycles-9e23:    /run/sleeptenmin/shell, /run/variants/six_cycles</span><br><span class="line">    /run/sleeptenmin/shell:sleep_method   =&gt; shell</span><br><span class="line">    /run/variants/six_cycles:sleep_cycles =&gt; 6</span><br><span class="line">    /run/variants/six_cycles:sleep_length =&gt; 100</span><br><span class="line"></span><br><span class="line">Variant shell-one_hundred_cycles-586f:    /run/sleeptenmin/shell, /run/variants/one_hundred_cycles</span><br><span class="line">    /run/sleeptenmin/shell:sleep_method           =&gt; shell</span><br><span class="line">    /run/variants/one_hundred_cycles:sleep_cycles =&gt; 100</span><br><span class="line">    /run/variants/one_hundred_cycles:sleep_length =&gt; 6</span><br><span class="line"></span><br><span class="line">Variant shell-six_hundred_cycles-1e84:    /run/sleeptenmin/shell, /run/variants/six_hundred_cycles</span><br><span class="line">    /run/sleeptenmin/shell:sleep_method           =&gt; shell</span><br><span class="line">    /run/variants/six_hundred_cycles:sleep_cycles =&gt; 600</span><br><span class="line">    /run/variants/six_hundred_cycles:sleep_length =&gt; 1</span><br></pre></td></tr></table></figure><p>您可以看到它为每个multiplex domain创建了所有可能的variants（变体）。它们由YAML文件中的!mux 标签（tag）定义，并在树视图中以单行显示（与具有values的单个nodes的双线进行比较）。总共它会为每个test产生8个variants（变体）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ avocado run --mux-yaml examples/tests/sleeptenmin.py.data/sleeptenmin.yaml -- passtest.py</span><br><span class="line">JOB ID     : cc7ef22654c683b73174af6f97bc385da5a0f02f</span><br><span class="line">JOB LOG    : /home/medic/avocado/job-results/job-2017-01-22T11.26-cc7ef22/job.log</span><br><span class="line"> (1/8) passtest.py:PassTest.test;builtin-one_cycle-f659: PASS (0.01 s)</span><br><span class="line"> (2/8) passtest.py:PassTest.test;builtin-six_cycles-723b: PASS (0.01 s)</span><br><span class="line"> (3/8) passtest.py:PassTest.test;builtin-one_hundred_cycles-633a: PASS (0.01 s)</span><br><span class="line"> (4/8) passtest.py:PassTest.test;builtin-six_hundred_cycles-a570: PASS (0.01 s)</span><br><span class="line"> (5/8) passtest.py:PassTest.test;shell-one_cycle-55f5: PASS (0.01 s)</span><br><span class="line"> (6/8) passtest.py:PassTest.test;shell-six_cycles-9e23: PASS (0.01 s)</span><br><span class="line"> (7/8) passtest.py:PassTest.test;shell-one_hundred_cycles-586f: PASS (0.01 s)</span><br><span class="line"> (8/8) passtest.py:PassTest.test;shell-six_hundred_cycles-1e84: PASS (0.01 s)</span><br><span class="line">RESULTS    : PASS 8 | ERROR 0 | FAIL 0 | SKIP 0 | WARN 0 | INTERRUPT 0</span><br><span class="line">JOB TIME   : 0.16 s</span><br></pre></td></tr></table></figure><p>还有其他选项可以影响参数（params），请使用命令<code>avocado run -h</code>查看详细信息，或查看使用文档<a href="http://avocado-framework.readthedocs.io/en/61.0/TestParameters.html" target="_blank" rel="noopener">Test parameters</a>。</p><h3 id="执行case"><a href="#执行case" class="headerlink" title="执行case"></a>执行case</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL]# vi examples/tests/sleeptenmin.py.data/sleeptenmin.yaml</span><br><span class="line">sleeptenmin: !mux</span><br><span class="line">    builtin:</span><br><span class="line">        sleep_method: builtin</span><br><span class="line">    shell:</span><br><span class="line">        sleep_method: shell</span><br><span class="line">variants: !mux</span><br><span class="line">    one_cycle:</span><br><span class="line">        sleep_cycles: 1</span><br><span class="line">        sleep_length: 600</span><br><span class="line">    six_cycles:</span><br><span class="line">        sleep_cycles: 6</span><br><span class="line">        sleep_length: 100</span><br><span class="line">    one_hundred_cycles:</span><br><span class="line">        sleep_cycles: 100</span><br><span class="line">        sleep_length: 6</span><br><span class="line">    six_hundred_cycles:</span><br><span class="line">        sleep_cycles: 600</span><br><span class="line">        sleep_length: 1</span><br><span class="line"></span><br><span class="line">[root@cephL]# vi /root/mac/examples/tests/passtest.py</span><br><span class="line">#!/usr/bin/env python</span><br><span class="line">from avocado import main</span><br><span class="line">from avocado import Test</span><br><span class="line">class PassTest(Test):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Example test that passes.</span><br><span class="line">    :avocado: tags=fast</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def test(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        A test simply doesn&apos;t have to fail in order to pass</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        pass</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line">[root@cephL]# avocado run --mux-yaml /root/mac/examples/tests/sleeptenmin.py.data/sleeptenmin.yaml -- /root/mac/examples/tests/passtest.py</span><br><span class="line">JOB ID     : 2ae9467667984d8c686087859e953a20bfd294a2</span><br><span class="line">JOB LOG    : /root/avocado/job-results/job-2018-06-06T02.37-2ae9467/job.log</span><br><span class="line"> (1/8) /root/mac/examples/tests/passtest.py:PassTest.test;builtin-one_cycle-f659: PASS (0.01 s)</span><br><span class="line"> (2/8) /root/mac/examples/tests/passtest.py:PassTest.test;builtin-six_cycles-723b: PASS (0.01 s)</span><br><span class="line"> (3/8) /root/mac/examples/tests/passtest.py:PassTest.test;builtin-one_hundred_cycles-633a: PASS (0.02 s)</span><br><span class="line"> (4/8) /root/mac/examples/tests/passtest.py:PassTest.test;builtin-six_hundred_cycles-a570: PASS (0.01 s)</span><br><span class="line"> (5/8) /root/mac/examples/tests/passtest.py:PassTest.test;shell-one_cycle-55f5: PASS (0.01 s)</span><br><span class="line"> (6/8) /root/mac/examples/tests/passtest.py:PassTest.test;shell-six_cycles-9e23: PASS (0.01 s)</span><br><span class="line"> (7/8) /root/mac/examples/tests/passtest.py:PassTest.test;shell-one_hundred_cycles-586f: PASS (0.01 s)</span><br><span class="line"> (8/8) /root/mac/examples/tests/passtest.py:PassTest.test;shell-six_hundred_cycles-1e84: PASS (0.02 s)</span><br><span class="line">RESULTS    : PASS 8 | ERROR 0 | FAIL 0 | SKIP 0 | WARN 0 | INTERRUPT 0 | CANCEL 0</span><br><span class="line">JOB TIME   : 0.50 s</span><br><span class="line">JOB HTML   : /root/avocado/job-results/job-2018-06-06T02.37-2ae9467/results.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> automated testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实例妙解Sed和Awk的秘密</title>
      <link href="/2018/05/21/%E5%AE%9E%E4%BE%8B%E5%A6%99%E8%A7%A3Sed%E5%92%8CAwk%E7%9A%84%E7%A7%98%E5%AF%86/"/>
      <url>/2018/05/21/%E5%AE%9E%E4%BE%8B%E5%A6%99%E8%A7%A3Sed%E5%92%8CAwk%E7%9A%84%E7%A7%98%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>实例妙解Sed和Awk的秘密笔记</p><p>课程地址：<a href="http://www.imooc.com/learn/819" target="_blank" rel="noopener">http://www.imooc.com/learn/819</a></p><p>课程教师：annieose</p><h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><p>Linux工程师面对的问题</p><ul><li><p>面对一堆文本要分析？</p></li><li><p>面对乱乱的数据要处理？</p></li><li><p>面对长长的服务器日志找报错？</p></li></ul><p>sed和awk应用场景</p><ul><li>例如：在服务器日志fresh.log中，找到所有报错的日期</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &apos;/Error/p&apos; fresh.log | awk &apos;&#123;print $1&#125;&apos;</span><br></pre></td></tr></table></figure><p>Linux三大利器</p><ul><li><p>grep：查找                                     |</p></li><li><p>sed：行编辑器                               |        一行指令，轻松搞定</p></li><li><p>awk：文本处理工具                       |</p></li></ul><p>学习目标</p><ul><li>掌握sed/awk常用处理方法</li><li>得心应手使用工具</li><li>提高效率，事半功倍</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>主要内容</p><ul><li>正则表达式的应用与学习方法</li><li>正则中的字符/字符串</li><li>正则中的表达式</li></ul><p>正则表达式目标</p><ul><li><p>查找                                                        |</p></li><li><p>取出                                                        |        符合条件的某个字符或字符串</p></li><li><p>匹配                                                        |</p></li></ul><h2 id="正则单字符的表示方式"><a href="#正则单字符的表示方式" class="headerlink" title="正则单字符的表示方式"></a>正则单字符的表示方式</h2><p>字符  ==》  特定字符、范围内字符、任意字符  ==》  组合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">特定字符：某个具体的字符。例如：&apos;a&apos;，&apos;1&apos;</span><br><span class="line">grep &apos;a&apos; passwd</span><br><span class="line">grep &apos;1&apos; passwd</span><br><span class="line"></span><br><span class="line">范围内字符：单个字符[]</span><br><span class="line">数字字符：[0-9]，[259]</span><br><span class="line">grep [0-9] passwd</span><br><span class="line">grep [259] passwd</span><br><span class="line"></span><br><span class="line">小写字符：[a-z]</span><br><span class="line">grep &apos;[a-z]&apos; passwd</span><br><span class="line"></span><br><span class="line">大写字符：[A-Z]</span><br><span class="line">grep &apos;[A-Z]&apos; passwd</span><br><span class="line"></span><br><span class="line">扩大范围举例：</span><br><span class="line">grep &apos;[a-zA-Z]&apos; passwd</span><br><span class="line">grep &apos;[,:/_]&apos; passwd</span><br><span class="line"></span><br><span class="line">范围内字符：反向字符^</span><br><span class="line">取反：[^0-9]，[^0]</span><br><span class="line"></span><br><span class="line">任意字符：</span><br><span class="line">代表任何一个字符：&apos;.&apos;</span><br><span class="line">grep &apos;.&apos; passwd</span><br><span class="line">注意与[.]和\.的区别</span><br><span class="line">grep &apos;[.]&apos; passwd    代表小数点，而不是任意字符</span><br><span class="line">grep &apos;\.&apos; passwd     代表小数点，而不是任意字符</span><br></pre></td></tr></table></figure><h2 id="正则其他符号的表示方式"><a href="#正则其他符号的表示方式" class="headerlink" title="正则其他符号的表示方式"></a>正则其他符号的表示方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">边界字符：头尾字符</span><br><span class="line">^：^root注意与[^]的区别</span><br><span class="line">grep &apos;^root&apos; passwd</span><br><span class="line"></span><br><span class="line">$:bash$</span><br><span class="line">grep &apos;bash$&apos; passwd</span><br><span class="line"></span><br><span class="line">空行的表示：^$</span><br><span class="line">grep &apos;^$&apos; passwd</span><br><span class="line"></span><br><span class="line">元字符(代表普通字符或特殊字符)</span><br><span class="line">\w:匹配任何字类字符，包括下划线([A-Za-z0-9])</span><br><span class="line">\W:匹配任何非字类字符，([^A-Za-z0-9])</span><br><span class="line">grep &apos;\w&apos; passwd</span><br><span class="line">grep &apos;\W&apos; passwd</span><br><span class="line"></span><br><span class="line">\b:代表单词的分隔</span><br><span class="line">grep &apos;\bx\b&apos; passwd</span><br></pre></td></tr></table></figure><h2 id="正则组合-重复字符表示"><a href="#正则组合-重复字符表示" class="headerlink" title="正则组合-重复字符表示"></a>正则组合-重复字符表示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字符串 &apos;root&apos;   &apos;1000&apos;   &apos;m..c&apos;</span><br><span class="line">grep &apos;m..c&apos; passwd   (以m开头c结尾，长度为4的字符串)</span><br><span class="line">grep &apos;[A-Z][a-z]&apos; passwd    (大写字符与小写字符放在一起的字符串组合)</span><br><span class="line">grep &apos;\b[0-9][0-9]\b&apos; passwd   (两位数字的组合)</span><br></pre></td></tr></table></figure><p>字符串  ==》  重复 + 逻辑  ==》  组合表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">重复：</span><br><span class="line">*：零次或多次匹配前面的字符或子表达式</span><br><span class="line">+：一次或多次匹配前面的字符或子表达式</span><br><span class="line">?：零次或一次匹配前面的字符或子表达式</span><br><span class="line">[root@cephL ~]# cat test.txt </span><br><span class="line">sesesese</span><br><span class="line">se</span><br><span class="line">seeeeeeeee</span><br><span class="line">eeeeee</span><br><span class="line">soooooooo</span><br><span class="line">+se+se+</span><br><span class="line">[root@cephL ~]# grep &apos;se*&apos; test.txt </span><br><span class="line">sesesese</span><br><span class="line">se</span><br><span class="line">seeeeeeeee</span><br><span class="line">soooooooo</span><br><span class="line">+se+se+</span><br><span class="line">[root@cephL ~]# grep &apos;se\+&apos; test.txt </span><br><span class="line">sesesese</span><br><span class="line">se</span><br><span class="line">seeeeeeeee</span><br><span class="line">+se+se+</span><br><span class="line">[root@cephL ~]# grep &apos;se\?&apos; test.txt </span><br><span class="line">sesesese</span><br><span class="line">se</span><br><span class="line">seeeeeeeee</span><br><span class="line">soooooooo</span><br><span class="line">+se+se+</span><br><span class="line">[root@cephL ~]# grep &apos;\(se\)\+&apos; test.txt </span><br><span class="line">sesesese</span><br><span class="line">se</span><br><span class="line">seeeeeeeee</span><br><span class="line">+se+se+</span><br><span class="line"></span><br><span class="line">重复特定次数：&#123;n,m&#125;</span><br><span class="line">*：&#123;0,&#125;</span><br><span class="line">+：&#123;1,&#125;</span><br><span class="line">?：&#123;0,1&#125;</span><br><span class="line">[root@cephL ~]# grep &apos;\b[0-9]\&#123;2,3\&#125;\b&apos; passwd       (截取2位或3位数字)</span><br></pre></td></tr></table></figure><h2 id="正则组合-逻辑符合表示"><a href="#正则组合-逻辑符合表示" class="headerlink" title="正则组合-逻辑符合表示"></a>正则组合-逻辑符合表示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">任意字符串的表示：.*</span><br><span class="line">例如：^r.*    m.*c</span><br><span class="line">注意与m..c区别</span><br><span class="line">grep &apos;^r.*&apos; passwd</span><br><span class="line">grep &apos;m.*c&apos; passwd</span><br><span class="line">grep &apos;m..c&apos; passwd</span><br><span class="line">grep &apos;\bm.*c\b&apos; passwd</span><br><span class="line">grep &apos;\bm[a-z]*c\b&apos; passwd</span><br><span class="line">逻辑的表示：</span><br><span class="line">|：&apos;/bin\(false\|true\)&apos;</span><br><span class="line">grep &apos;bin/\(bash\|nologin\)&apos; passwd    (或者包含bash，或者包含nologin)</span><br><span class="line"></span><br><span class="line">正则表达式字符组合小结：</span><br><span class="line">重复的表示：* + ? &#123;,&#125;</span><br><span class="line">逻辑的表示：|</span><br></pre></td></tr></table></figure><h2 id="正则-案例演"><a href="#正则-案例演" class="headerlink" title="正则-案例演"></a>正则-案例演</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">案例一</span><br><span class="line">匹配4-10位qq号</span><br><span class="line">grep &apos;^[0-9]\&#123;4,10\&#125;$&apos; qq.txt</span><br><span class="line">案例二</span><br><span class="line">匹配15位或18位身份证号(支持带X的)</span><br><span class="line">grep &apos;^[1-9]\([0-9]\&#123;13\&#125;\|[0-9]\&#123;16\&#125;\)[0-9xX]$&apos; qq.txt</span><br><span class="line">案例三</span><br><span class="line">匹配密码(由数字、26个字母和下划线组成)</span><br><span class="line">grep &apos;^\w\+$&apos; qq.txt</span><br></pre></td></tr></table></figure><h2 id="正则总结"><a href="#正则总结" class="headerlink" title="正则总结"></a>正则总结</h2><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E5%AE%9E%E4%BE%8B%E5%A6%99%E8%A7%A3Sed%E5%92%8CAwk%E7%9A%84%E7%A7%98%E5%AF%86/p1.png?raw=true" alt></p><h1 id="巧妙破解sed"><a href="#巧妙破解sed" class="headerlink" title="巧妙破解sed"></a>巧妙破解sed</h1><h2 id="主要内容和原理介绍"><a href="#主要内容和原理介绍" class="headerlink" title="主要内容和原理介绍"></a>主要内容和原理介绍</h2><p>sed工具用途</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">自动处理文件</span><br><span class="line">分析日志文件</span><br><span class="line">修改配置文件</span><br></pre></td></tr></table></figure><h3 id="sed是如何进行文本处理的？"><a href="#sed是如何进行文本处理的？" class="headerlink" title="sed是如何进行文本处理的？"></a>sed是如何进行文本处理的？</h3><p>我们称sed是一个流处理编辑器</p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E5%AE%9E%E4%BE%8B%E5%A6%99%E8%A7%A3Sed%E5%92%8CAwk%E7%9A%84%E7%A7%98%E5%AF%86/QQ20180523-153042@2x.png?raw=true" alt></p><p>实际的处理流程是行处理</p><ul><li>sed一次处理一行内容</li><li>sed不改变文件内容（除非重定向）</li></ul><h2 id="sed应用的基本格式介绍"><a href="#sed应用的基本格式介绍" class="headerlink" title="sed应用的基本格式介绍"></a>sed应用的基本格式介绍</h2><p>正则选定文本  ==》  sed进行处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用sed格式：</span><br><span class="line">命令行格式</span><br><span class="line">`sed [options] &apos;command&apos; file(s)`</span><br><span class="line">`options: -e ; -n`</span><br><span class="line">`command: 行定位（正则）+ sed命令（操作）`</span><br><span class="line">脚本格式</span><br><span class="line">`sed -f scriptfile file(s)`</span><br></pre></td></tr></table></figure><p>使用sed举例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -n &apos;/root/p&apos;</span><br><span class="line">sed -e &apos;10,20d&apos; -e &apos;s/false/true/g&apos;</span><br></pre></td></tr></table></figure><h2 id="sed基本操作命令-p命令"><a href="#sed基本操作命令-p命令" class="headerlink" title="sed基本操作命令-p命令"></a>sed基本操作命令-p命令</h2><p>基本操作命令（1）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-p（打印相关的行）与-n配合使用</span><br><span class="line">sed -n &apos;p&apos; passwd</span><br><span class="line"></span><br><span class="line">定位一行：x;/pattern/         （x代表行号）</span><br><span class="line">sed -n &apos;10p&apos; passwd       (打印第10行)</span><br><span class="line">nl passwd | sed -n &apos;10p&apos;  (nl打印行号)</span><br><span class="line">sed -n &apos;/root/p&apos; passwd   (打印)</span><br><span class="line"></span><br><span class="line">定位几行：x,y;/pattern/,x;    （x，y代表行号）</span><br><span class="line">/pattern1/,/pattern2/;</span><br><span class="line">x,y!(取反)</span><br><span class="line"></span><br><span class="line">nl passwd  | sed -n &apos;10,20p&apos;(打印10行到20行)</span><br><span class="line">nl passwd  | sed -n &apos;/operator/,/games/p&apos;</span><br><span class="line">nl passwd | sed -n &apos;10!p&apos;        (不选择第10行)</span><br><span class="line">nl passwd | sed -n &apos;10,20!p&apos;     (不选择10行到20行)</span><br><span class="line"></span><br><span class="line">定位间隔几行：first~step</span><br><span class="line">nl passwd | sed -n &apos;1~2p&apos;(从第1行开始，间隔2-1行，再打印)</span><br></pre></td></tr></table></figure><p>基本操作命令（2）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-a （新增行）/ i（插入行）</span><br><span class="line">-c （替代行）</span><br><span class="line">-d（删除行）</span><br><span class="line">nl passwd | sed &apos;5a ===========&apos;     (第5行和第6行之间增加分隔符===========)</span><br><span class="line">nl passwd | sed &apos;1,5a===========&apos;    (第1行和第5行之间，每一行都增加分隔符===========）</span><br><span class="line">nl passwd | sed &apos;5i===========&apos;      (第5行之前插入分隔符===========)</span><br><span class="line">nl passwd | sed &apos;1,5i===========&apos;    (第1行和第5行之前，每一行都插入分隔符===========）</span><br><span class="line">nl passwd | sed &apos;40c 123123&apos;         (将40行替换成123123)</span><br><span class="line">nl passwd | sed &apos;35,40c 123123&apos;      (将35行到40行替换成123123，35行以后的内容就没有了，只有123123这一行，并不是每一行进行替换，而是对这些行做一个整体的替换)</span><br><span class="line">nl passwd | sed &apos;/mooc/d&apos;            (删除mooc所在行)</span><br><span class="line">sed不会改变源文件的内容，如果要保存结果需要重定向</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">案例一：优化服务器的配置</span><br><span class="line">在ssh的配置文件加入相应文本：</span><br><span class="line">&quot;</span><br><span class="line">Port 52113</span><br><span class="line">PermitRootLogin no</span><br><span class="line">PermitEmptyPasswords no</span><br><span class="line">&quot;</span><br><span class="line">sed &apos;$a \    port\ 52113 \n    permitroologin no&apos; sshd_config    (空格需要\转义)</span><br><span class="line"></span><br><span class="line">案例二：文本处理</span><br><span class="line">删除文本中空行</span><br><span class="line">sed &apos;/^$/d&apos; sshd_config      (空行用正则/^$/表示)</span><br><span class="line"></span><br><span class="line">案例三：服务器日志处理</span><br><span class="line">服务器log中找出error报错</span><br><span class="line">sed -n &apos;/Error/p&apos;</span><br></pre></td></tr></table></figure><p>基本操作命令（3）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-s（替换）：分隔符/,#等</span><br><span class="line">sed &apos;s/nologin/l/&apos; passwd         (nologin替换为l)</span><br><span class="line">-g（全局）：替换标志</span><br><span class="line">sed &apos;s/:/%/&apos; passwd      (只是把每一行的第一个&apos;:&apos;替换为&apos;%&apos;)</span><br><span class="line">sed &apos;s/:/%/g&apos; passwd     (所有的&apos;:&apos;都被替换为&apos;%&apos;)</span><br><span class="line"></span><br><span class="line">案例四：数据筛选</span><br><span class="line">获取enp0s8的ip</span><br><span class="line">ifconfig enp0s8 | sed -n &apos;/inet /p&apos; | sed &apos;s/inet//&apos;        (centos7)</span><br><span class="line">ifconfig enp0s8 | sed -n &apos;/inet /p&apos; | sed &apos;s/inet.*r://&apos;    (Ubuntu上有:)</span><br><span class="line">ifconfig enp0s8 | sed -n &apos;/inet /p&apos; | sed &apos;s/inet//&apos; | sed &apos;s/n.*$//&apos;</span><br></pre></td></tr></table></figure><p>高级操作命令（1）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-&#123;&#125;：多个sed命令，用;分开</span><br><span class="line">nl passwd | sed &apos;&#123;20,30d;s/nologin/login/&#125;&apos;   (先删除20行到30行，然后剩下的行nologin替换成login)</span><br></pre></td></tr></table></figure><p>高级操作命令（2）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-n：读取下一个输入行（用下一个命令处理）</span><br><span class="line">nl passwd | sed -n &apos;&#123;n;p&#125;&apos;    (你会发现跳行，输出2、4、6、8行。执行过程是sed读入一行后，接着n又读入下一行。输出偶数行)</span><br><span class="line">nl passwd | sed -n &apos;2~2p&apos;     (输出偶数行)</span><br><span class="line">nl passwd | sed -n &apos;&#123;p;n&#125;&apos;    (输出奇数行)</span><br><span class="line">nl passwd | sed -n &apos;1~2p&apos;     (输出奇数行，与上一条命令相等)</span><br></pre></td></tr></table></figure><p>高级操作命令（3）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-&amp;：替换固定字符串</span><br><span class="line">sed &apos;s/^[a-z_-]\+/&amp;           /&apos; passwd      (用户名后面加上空格)</span><br><span class="line">root:x:0:0:root:/root:/bin/bash              (源字符串)</span><br><span class="line">root           :x:0:0:root:/root:/bin/bash   (替换后字符串)</span><br><span class="line">如果替换的字符串与源字符串有重复串，可以用&amp;。类似于在源字符串后追加</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">案例一：大小写转换</span><br><span class="line">将用户名的首字母转换为大写/小写</span><br><span class="line">（元字符\u \l \U \L：转换为大写/小写字符，小写的\u和\l是对首字母的转换，大写的\U和\L是对一串字符的转换）</span><br><span class="line">sed &apos;s/^[a-z_-]\+/\u&amp;/&apos; passwd</span><br><span class="line"></span><br><span class="line">案例二：大小写转换</span><br><span class="line">将文件夹下的.txt文件名转换为大写</span><br><span class="line">ls *.txt | sed &apos;s/^\w\+/\U&amp;/&apos;</span><br><span class="line"></span><br><span class="line">案例三：数据筛选</span><br><span class="line">获取passwd中USER、UID和GID</span><br><span class="line">sed &apos;s/\(^[a-z_-]\+\):x:\([0-9]\+\):\([0-9]\+\):.*$/USER:\1 UID:\2 GID:\3/&apos; passwd</span><br></pre></td></tr></table></figure><p>高级操作命令（4）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-\( \)：替换某种(部分)字符串(\1,\2)</span><br><span class="line">案例二：数据筛选</span><br><span class="line">&quot;获取eth0的ip&quot;</span><br><span class="line">ifconfig enp0s9 | sed -n &apos;/inet /p&apos; | sed &apos;s/inet \([0-9.]\+\) .*$/\1/&apos; (centos 7)</span><br></pre></td></tr></table></figure><p>高级操作命令（5）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-r：复制指定文件插入到匹配行(不改变文件内容只改变输出，如果想改变文件内容需要重定向)</span><br><span class="line">-w：复制匹配行拷贝指定文件里(改变目标文件)</span><br><span class="line">用处：源文件和目标文件互相操作。</span><br><span class="line">sed &apos;1r 123.txt&apos; abc.txt    (从123.txt中读取内容，插入到abc.txt的第1行后 )</span><br><span class="line">sed &apos;1w abc.txt&apos; 123.txt    (从123.txt中读入，写入到abc.txt。1w是指定123.txt中的哪一行写入到abc.txt)</span><br></pre></td></tr></table></figure><p>高级操作命令（6）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q：退出sed</span><br><span class="line">nl passwd | sed &apos;10q&apos;   (执行到第10行就结束)</span><br><span class="line">nl passwd | sed &apos;/false/q&apos;   (找到第一个false就结束)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E5%AE%9E%E4%BE%8B%E5%A6%99%E8%A7%A3Sed%E5%92%8CAwk%E7%9A%84%E7%A7%98%E5%AF%86/QQ20180531-102131%402x.png" alt></p><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>主要用途：统计、制表</p><p>awk处理方式：awk一次处理一行内容、awk对每行可以切片处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &apos;&#123;print $1&#125;&apos;//输出首个单词</span><br></pre></td></tr></table></figure><p>使用awk的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、命令行格式：</span><br><span class="line">awk [options] &apos;command&apos; file(s)</span><br><span class="line">command: pattern &#123;awk 操作命令&#125;</span><br><span class="line">pattern: 正则表达式; 逻辑判断式</span><br><span class="line">command1: pattern &#123;awk 操作命令&#125;</span><br><span class="line">操作命令: 内置函数: print() printf() getline..;</span><br><span class="line">控制指令: if()&#123;...&#125;else&#123;...&#125;;while()&#123;...&#125;;</span><br><span class="line"></span><br><span class="line">2、脚本格式：</span><br><span class="line">awk -f awk-script-file file(s)</span><br></pre></td></tr></table></figure><p>awk内置参数应用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">awk 内置变量1</span><br><span class="line">$0：表示整个当前行</span><br><span class="line">$1：每行第一个字段</span><br><span class="line">$2：每行第二个字段</span><br><span class="line">这些字段是怎样划分的呢？我们用分隔符</span><br><span class="line">awk内置参数：分隔符</span><br><span class="line">options：-F field-separator(默认为空格)</span><br><span class="line">例如：awk -F &apos;:&apos; &apos;&#123;print $3&#125;&apos; /etc/passwd</span><br><span class="line"></span><br><span class="line">[root@cephL]# awk -F &apos;:&apos; &apos;&#123;print $1,$3&#125;&apos; passwd </span><br><span class="line">              awk -F &apos;:&apos; &apos;&#123;print $1&quot; &quot;$3&#125;&apos; passwd</span><br><span class="line">              awk -F &apos;:&apos; &apos;&#123;print $1&quot;\t&quot;$3&#125;&apos; passwd</span><br><span class="line">              awk -F &apos;:&apos; &apos;&#123;print &quot;User:&quot;$1&quot;\t&quot;&quot;UID:&quot;$3&#125;&apos; passwd</span><br><span class="line">awk内置变量：</span><br><span class="line">NR：每行的记录号(行)</span><br><span class="line">NF：字段数量变量(列)</span><br><span class="line">FILENAME：正在处理的文件名</span><br><span class="line">例如：awk -F &apos;:&apos; &apos;print FILENAME&apos; passwd</span><br></pre></td></tr></table></figure><p>awk内置参数应用案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">案例一：</span><br><span class="line">显示/etc/passwd每行的行号，每行的列数，对应行的用户名(print，printf)</span><br><span class="line">awk -F &apos;:&apos; &apos;&#123;print &quot;Line: &quot;NR,&quot;Col: &quot;NF,&quot;User: &quot;$1&#125;&apos; passwd</span><br><span class="line">awk -F &apos;:&apos; &apos;&#123;printf(&quot;Line: %3s Col: %s User: %s\n&quot;,NR,NF,$1)&#125;&apos; passwd</span><br><span class="line"></span><br><span class="line">案例二：</span><br><span class="line">显示/etc/passwd中用户ID大于100的行号和用户名(if...else...)</span><br><span class="line">awk -F &apos;:&apos; &apos;&#123;if ($3&gt;100) print &quot;Line: &quot;NR,&quot;User: &quot;$1&#125;&apos; passwd</span><br><span class="line">案例三：</span><br><span class="line">在服务器log中找出&apos;Error&apos;的发生日期</span><br><span class="line">sed &apos;/Error/p&apos; fresh.log | awk &apos;&#123;print $1&#125;&apos;</span><br><span class="line">awk &apos;/Error/&#123;print $1&#125;&apos; fresh.log</span><br></pre></td></tr></table></figure><p>使用awk——逻辑判断式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">command: pattern &#123;awk 操作命令&#125;</span><br><span class="line">pattern: 正则表达式;逻辑判断式</span><br><span class="line"></span><br><span class="line">awk逻辑</span><br><span class="line">~,!~:匹配正则表达式</span><br><span class="line">==,!=,&lt;,&gt;:判断逻辑表达式</span><br><span class="line"></span><br><span class="line">1、第一个字段是&apos;m&apos;开头的</span><br><span class="line">awk -F &apos;:&apos; &apos;$1~/^m.*/&#123;print $1&#125;&apos; passwd</span><br><span class="line">2、第一个字段不是&apos;m&apos;开头的</span><br><span class="line">awk -F &apos;:&apos; &apos;$1!~/^m.*/&#123;print $1&#125;&apos; passwd</span><br><span class="line">3、第三个字段大于100</span><br><span class="line">awk -F &apos;:&apos; &apos;$3&gt;100&#123;print $1,$3&#125;&apos; passwd</span><br></pre></td></tr></table></figure><p>使用awk——扩展格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1、命令行格式：</span><br><span class="line">awk [options] &apos;command&apos; file(s)</span><br><span class="line">command2扩展</span><br><span class="line">BEGIN&#123;print &quot;start&quot;&#125; pattern&#123;commands&#125; END&#123;print &quot;end&quot;&#125;</span><br><span class="line">awk是以行为操作单位的，BEGIN是在没有读入第一行之间执行的，END是处理完最后一行执行的</span><br><span class="line"></span><br><span class="line">案例一：</span><br><span class="line">制表显示/etc/passwd每行的行号，每行的列数，对应行的用户名</span><br><span class="line">awk -F &apos;:&apos; &apos;BEGIN&#123;print &quot;Line\tCol\tUser&quot;&#125;&#123;print NR&quot;\t&quot;NF&quot;\t&quot;$1&#125;END&#123;print &quot;---&quot;FILENAME&quot;---&quot;&#125;&apos; passwd</span><br><span class="line"></span><br><span class="line">案例二：</span><br><span class="line">统计当前文件夹下的文件/文件夹占用的大小</span><br><span class="line">ls -l | awk &apos;BEGIN&#123;size=0&#125;&#123;size+=$5&#125;END&#123;print &quot;size is &quot;size/1024/1024&quot;M&quot;&#125;&apos;</span><br><span class="line"></span><br><span class="line">案例三：</span><br><span class="line">统计显示/etc/passwd的账户总人数</span><br><span class="line">awk -F &apos;:&apos; &apos;BEGIN&#123;count=0&#125;$1!~/^$/&#123;count++&#125;END&#123;print &quot;count = &quot;count&#125;&apos; passwd</span><br><span class="line">统计显示UID大于100的用户名</span><br><span class="line">awk -F &apos;:&apos; &apos;BEGIN&#123;count=0&#125;&#123;if ($3 &gt; 100) name[count++]=$1&#125;END&#123;for(i=0;i&lt;count;i++) print i,name[i]&#125;&apos; passwd</span><br><span class="line"></span><br><span class="line">案例四：</span><br><span class="line">统计netstat -anp 状态下为LISTEN和CONNECTED的连接数量</span><br><span class="line">netstat -anp | awk &apos;$6~/CONNECTED|LISTEN/&#123;sum[$6]++&#125;END&#123;for(i in sum)print i,sum[i]&#125;&apos;</span><br></pre></td></tr></table></figure><p>awk VS sed</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk和sed都可以处理文本</span><br><span class="line">awk侧重于复杂逻辑处理</span><br><span class="line">sed侧重于正则处理</span><br><span class="line"></span><br><span class="line">awk和sed可以共同使用</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/%E5%AE%9E%E4%BE%8B%E5%A6%99%E8%A7%A3Sed%E5%92%8CAwk%E7%9A%84%E7%A7%98%E5%AF%86/QQ20180530-000840%402x.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CEPH-VOLUME</title>
      <link href="/2018/05/19/CEPH-VOLUME/"/>
      <url>/2018/05/19/CEPH-VOLUME/</url>
      
        <content type="html"><![CDATA[<h1 id="CEPH-VOLUME"><a href="#CEPH-VOLUME" class="headerlink" title="CEPH-VOLUME"></a>CEPH-VOLUME</h1><p>使用pluggable（可插拔）工具将 OSDs 与 lvm 或physical disks等不同的device技术部署在一起（<a href="http://docs.ceph.com/docs/master/ceph-volume/lvm/" target="_blank" rel="noopener">lvm</a>本身被视为plugin）, 并尝试采用predictable、robust的方法来preparing、activating和starting OSDs。</p><p><a href="http://docs.ceph.com/docs/master/ceph-volume/intro/#ceph-volume-overview" target="_blank" rel="noopener">Overview</a>|<a href="http://docs.ceph.com/docs/master/dev/ceph-volume/plugins/#ceph-volume-plugins" target="_blank" rel="noopener">Plugin Guide</a></p><h3 id="Command-Line-Subcommands"><a href="#Command-Line-Subcommands" class="headerlink" title="Command Line Subcommands"></a>Command Line Subcommands</h3><p>目前支持<code>lvm</code>，以及已经使用<code>ceph-disk</code>部署的普通磁盘（带有GPT分区）。</p><ul><li><p><a href="http://docs.ceph.com/docs/master/ceph-volume/lvm/#ceph-volume-lvm" target="_blank" rel="noopener">lvm</a></p></li><li><p><a href="http://docs.ceph.com/docs/master/ceph-volume/simple/#ceph-volume-simple" target="_blank" rel="noopener">simple</a></p></li></ul><h3 id="Node-inventory"><a href="#Node-inventory" class="headerlink" title="Node inventory"></a>Node inventory</h3><p><a href="http://docs.ceph.com/docs/master/ceph-volume/inventory/#ceph-volume-inventory" target="_blank" rel="noopener">inventory</a>子命令提供有关节点物理磁盘inventory（清单）的信息和元数据。</p><h1 id="MIGRATING"><a href="#MIGRATING" class="headerlink" title="MIGRATING"></a>MIGRATING</h1><p>从Ceph版本13.0.0开始，不推荐使用ceph-disk。弃用警告中的link会链接到此页面。强烈建议用户开始使用ceph-volume。有两种迁移途径：</p><p>1、保留使用ceph-disk部署的OSD：<a href="http://docs.ceph.com/docs/master/ceph-volume/simple/#ceph-volume-simple" target="_blank" rel="noopener">simple</a> 命令在禁用ceph-disk触发的同时，提供了接管管理的方法。</p><p>2、用ceph-volume重新部署现存的OSD：详细信息请参照 <a href="http://docs.ceph.com/docs/master/rados/operations/add-or-rm-osds/#rados-replacing-an-osd" target="_blank" rel="noopener">Replacing an OSD</a></p><p>有关为何删除ceph-disk的详细信息，请参阅<a href="http://docs.ceph.com/docs/master/ceph-volume/intro/#ceph-disk-replaced" target="_blank" rel="noopener">Why was ceph-disk replaced?</a> 章节。</p><h3 id="NEW-DEPLOYMENTS"><a href="#NEW-DEPLOYMENTS" class="headerlink" title="NEW DEPLOYMENTS"></a>NEW DEPLOYMENTS</h3><p>对于新的部署，推荐使用<a href="http://docs.ceph.com/docs/master/ceph-volume/lvm/#ceph-volume-lvm" target="_blank" rel="noopener">lvm</a>，它可以使用任何logical volume作为data OSD 的输入, 也可以从device中设置minimal/naive logical volume。</p><h3 id="EXISTING-OSDS"><a href="#EXISTING-OSDS" class="headerlink" title="EXISTING OSDS"></a>EXISTING OSDS</h3><p>如果群集已经具有ceph-disk提供的OSDs，则ceph-volume可以用<a href="http://docs.ceph.com/docs/master/ceph-volume/simple/#ceph-volume-simple" target="_blank" rel="noopener">simple</a>的方式接管。在data device或OSD directory上完成扫描，并且ceph-disk被完全禁用。完全支持加密。</p><h1 id="LVM"><a href="#LVM" class="headerlink" title="LVM"></a>LVM</h1><p>实现此功能需要通过lvm子命令来部署OSDs：<code>ceph-volume lvm</code></p><h2 id="Command-Line-Subcommands-1"><a href="#Command-Line-Subcommands-1" class="headerlink" title="Command Line Subcommands"></a>Command Line Subcommands</h2><h3 id="prepare"><a href="#prepare" class="headerlink" title="prepare"></a>prepare</h3><p><a href="http://docs.ceph.com/docs/master/ceph-volume/lvm/prepare/#ceph-volume-lvm-prepare" target="_blank" rel="noopener">prepare</a></p><p>该子命令允许<a href="http://docs.ceph.com/docs/master/glossary/#term-filestore" target="_blank" rel="noopener">filestore</a>或<a href="http://docs.ceph.com/docs/master/glossary/#term-bluestore" target="_blank" rel="noopener">bluestore</a>设置。 建议在使用<code>ceph-volume lvm</code>之前预先配置逻辑卷。除添加额外元数据外，逻辑卷不会改变。</p><p>为了帮助识别volumes，preparing的过程中该工具使用<a href="http://docs.ceph.com/docs/master/glossary/#term-lvm-tags" target="_blank" rel="noopener">LVM tags</a>分配一些元数据信息。</p><p><a href="http://docs.ceph.com/docs/master/glossary/#term-lvm-tags" target="_blank" rel="noopener">LVM tags</a>使volume易于发现，帮助识别它们作为Ceph系统的一部分，扮演着什么角色（journal, filestore, bluestore, etc…）</p><p>虽然最初支持<a href="http://docs.ceph.com/docs/master/glossary/#term-filestore" target="_blank" rel="noopener">filestore</a>（默认情况下支持），但可以使用以下命令指定：</p><ul><li><a href="http://docs.ceph.com/docs/master/ceph-volume/lvm/prepare/#ceph-volume-lvm-prepare-filestore" target="_blank" rel="noopener">–filestore</a></li><li><a href="http://docs.ceph.com/docs/master/ceph-volume/lvm/prepare/#ceph-volume-lvm-prepare-bluestore" target="_blank" rel="noopener">–bluestore</a></li></ul><p><strong>FILESTORE</strong></p><p>这是OSD backend，允许为<a href="http://docs.ceph.com/docs/master/glossary/#term-filestore" target="_blank" rel="noopener">filestore</a> objectstore OSD 准备逻辑卷。</p><p>它可以使用逻辑卷作为OSD data和带分区的physical device或逻辑卷作为journal。除了遵循data和journal的最小大小要求外,这些卷不需要特殊准备。</p><p>API调用如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph-volume lvm prepare --filestore --data volume_group/lv_name --journal journal</span><br></pre></td></tr></table></figure><p>启用<a href="http://docs.ceph.com/docs/mimic/ceph-volume/lvm/encryption/#ceph-volume-lvm-encryption" target="_blank" rel="noopener">encryption</a>（加密），需要使用–dmcrypt标志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph-volume lvm prepare --filestore --dmcrypt --data volume_group/lv_name --journal journal</span><br></pre></td></tr></table></figure><p><a href="http://docs.ceph.com/docs/master/ceph-volume/lvm/activate/#ceph-volume-lvm-activate" target="_blank" rel="noopener">activate</a></p><p><a href="http://docs.ceph.com/docs/master/ceph-volume/lvm/create/#ceph-volume-lvm-create" target="_blank" rel="noopener">create</a></p><p><a href="http://docs.ceph.com/docs/master/ceph-volume/lvm/list/#ceph-volume-lvm-list" target="_blank" rel="noopener">list</a></p><h3 id="Internal-functionality"><a href="#Internal-functionality" class="headerlink" title="Internal functionality"></a>Internal functionality</h3><p>lvm子命令的其他部分是internal的，不向用户公开，这些部分解释了如何协同工作，阐明了工具的工作流程。</p><p><a href="http://docs.ceph.com/docs/master/ceph-volume/lvm/systemd/#ceph-volume-lvm-systemd" target="_blank" rel="noopener">Systemd Units</a> | <a href="http://docs.ceph.com/docs/master/dev/ceph-volume/lvm/#ceph-volume-lvm-api" target="_blank" rel="noopener">lvm</a></p><h1 id="SIMPLE"><a href="#SIMPLE" class="headerlink" title="SIMPLE"></a>SIMPLE</h1><p>实现此功能需要通过simple子命令来管理OSD：<code>ceph-volume simple</code></p><h3 id="Command-Line-Subcommands-2"><a href="#Command-Line-Subcommands-2" class="headerlink" title="Command Line Subcommands"></a>Command Line Subcommands</h3><ul><li><a href="http://docs.ceph.com/docs/master/ceph-volume/simple/scan/#ceph-volume-simple-scan" target="_blank" rel="noopener">scan</a></li><li><a href="http://docs.ceph.com/docs/master/ceph-volume/simple/activate/#ceph-volume-simple-activate" target="_blank" rel="noopener">activate</a></li><li><a href="http://docs.ceph.com/docs/master/ceph-volume/simple/systemd/#ceph-volume-simple-systemd" target="_blank" rel="noopener">systemd</a></li></ul><p>通过接管管理，它会disable所有用于在startup时触发device的ceph-disk systemd units，依赖基本的（可定制的）JSON配置和systemd来启动OSD。</p><p>此过程包括两个步骤：</p><p>1、<a href="http://docs.ceph.com/docs/master/ceph-volume/simple/scan/#ceph-volume-simple-scan" target="_blank" rel="noopener">Scan</a>（扫描）正在运行的OSD或data device</p><p>2、<a href="http://docs.ceph.com/docs/master/ceph-volume/simple/activate/#ceph-volume-simple-activate" target="_blank" rel="noopener">Activate</a>（激活）扫描的OSD</p><p>扫描将推断出ceph-volume启动OSD所需的所有内容，因此当需要激活时，OSD可以正常启动而不会受到来自ceph-disk的干扰。</p><p>作为激活过程的一部分，负责对udev事件作出反应的ceph-disk的systemd units链接到/dev/null，以便它们完全处于非活动状态。</p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">ceph-volume lvm（使用LVM和LVM-based技术，像dmcache去部署OSD）</span><br><span class="line">1、activate                 Discover and mount the LVM device associated with an OSD ID and start the Ceph OSD（Discover并mount与OSD ID关联的LVM设备，然后启动Ceph OSD）</span><br><span class="line">2、prepare                  Format an LVM device and associate it with an OSD（Format LVM device并将其与OSD关联）</span><br><span class="line">3、create                   Create a new OSD from an LVM device（从LVM device创建新的OSD）</span><br><span class="line">4、list                     list logical volumes and devices associated with Ceph（列出与Ceph相关的logical volumes和devices）</span><br><span class="line">5、batch                    Automatically size devices for multi-OSD provisioning with minimal interaction（自动调整devices大小，以最少的交互进行多OSD配置）</span><br><span class="line">6、trigger                  systemd helper to activate an OSD（systemd助手来激活OSD）</span><br><span class="line">7、zap                      Removes all data and filesystems from a logical volume or partition.（从logical volume或分区中删除所有数据和文件系统。）</span><br><span class="line"></span><br><span class="line">ceph-volume simple（使用ceph-volume管理已部署的OSD）</span><br><span class="line">1、trigger                  systemd helper to activate an OSD（systemd助手来激活OSD）</span><br><span class="line">2、activate                 Enable systemd units to mount configured devices and start a Ceph OSD（使systemd units可以mount已配置的devices，并启动Ceph OSD）</span><br><span class="line">3、scan                     Capture metadata from all running ceph-disk OSDs, OSD data partition or directory（从所有正在运行的ceph-disk OSDs，OSD数据分区或目录中捕获元数据）</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"># ceph-volume simple scan</span><br><span class="line">执行命令后，会生成类似/etc/ceph/osd/0-ab0a204a-42e3-4a47-ab4c-0888edf429cb.json文件，文件内容为：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;active&quot;: &quot;ok&quot;, </span><br><span class="line">    &quot;block&quot;: &#123;</span><br><span class="line">        &quot;path&quot;: &quot;/dev/disk/by-partuuid/0818811f-d70e-4ff0-91c9-58cd701c9a19&quot;, </span><br><span class="line">        &quot;uuid&quot;: &quot;0818811f-d70e-4ff0-91c9-58cd701c9a19&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;block_uuid&quot;: &quot;0818811f-d70e-4ff0-91c9-58cd701c9a19&quot;, </span><br><span class="line">    &quot;bluefs&quot;: 1, </span><br><span class="line">    &quot;ceph_fsid&quot;: &quot;c4051efa-1997-43ef-8497-fb02bdf08233&quot;, </span><br><span class="line">    &quot;cluster_name&quot;: &quot;ceph&quot;, </span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;path&quot;: &quot;/dev/vdc1&quot;, </span><br><span class="line">        &quot;uuid&quot;: &quot;ab0a204a-42e3-4a47-ab4c-0888edf429cb&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;fsid&quot;: &quot;ab0a204a-42e3-4a47-ab4c-0888edf429cb&quot;, </span><br><span class="line">    &quot;keyring&quot;: &quot;AQB1FLFdXVHVARAARTKkxT1xgrDNU/QECUqdxA==&quot;, </span><br><span class="line">    &quot;kv_backend&quot;: &quot;rocksdb&quot;, </span><br><span class="line">    &quot;magic&quot;: &quot;ceph osd volume v026&quot;, </span><br><span class="line">    &quot;mkfs_done&quot;: &quot;yes&quot;, </span><br><span class="line">    &quot;ready&quot;: &quot;ready&quot;, </span><br><span class="line">    &quot;systemd&quot;: &quot;&quot;, </span><br><span class="line">    &quot;type&quot;: &quot;bluestore&quot;, </span><br><span class="line">    &quot;whoami&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># ceph-volume simple activate --all</span><br><span class="line">--&gt; activating OSD specified in /etc/ceph/osd/1-fe327306-54a4-4362-870d-92d28cf65e42.json</span><br><span class="line">Running command: ln -snf /dev/vdc2 /var/lib/ceph/osd/ceph-1/block</span><br><span class="line">Running command: chown -R ceph:ceph /dev/vdc2</span><br><span class="line">Running command: systemctl enable ceph-volume@simple-1-fe327306-54a4-4362-870d-92d28cf65e42</span><br><span class="line">Running command: ln -sf /dev/null /etc/systemd/system/ceph-disk@.service</span><br><span class="line">--&gt; All ceph-disk systemd units have been disabled to prevent OSDs getting triggered by UDEV events</span><br><span class="line">Running command: systemctl enable --runtime ceph-osd@1</span><br><span class="line">Running command: systemctl start ceph-osd@1</span><br><span class="line">--&gt; Successfully activated OSD 1 with FSID fe327306-54a4-4362-870d-92d28cf65e42</span><br><span class="line"></span><br><span class="line">ceph-volume inventory（获取此节点可用的disk清单）</span><br><span class="line">例如：</span><br><span class="line">ceph-volume inventory</span><br><span class="line">Device Path               Size         rotates available Model name</span><br><span class="line">/dev/vdb                  64.00 MB     True    True</span><br><span class="line">/dev/vdc                  50.00 GB     True    True</span><br><span class="line">/dev/vda                  100.00 GB    True    False</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-Luminous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHEC ERASURE CODE PLUGIN</title>
      <link href="/2018/05/18/SHEC-ERASURE-CODE-PLUGIN/"/>
      <url>/2018/05/18/SHEC-ERASURE-CODE-PLUGIN/</url>
      
        <content type="html"><![CDATA[<p>shec plugin封装了<a href="http://tracker.ceph.com/projects/ceph/wiki/Shingled_Erasure_Code_(SHEC)" target="_blank" rel="noopener">multiple SHEC</a>库。它允许ceph比Reed Solomon codes更有效地恢复数据。</p><h2 id="CREATE-AN-SHEC-PROFILE"><a href="#CREATE-AN-SHEC-PROFILE" class="headerlink" title="CREATE AN SHEC PROFILE"></a>CREATE AN SHEC PROFILE</h2><p>创建一个新的shec erasure code profile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ceph osd erasure-code-profile set &#123;name&#125; \</span><br><span class="line">     plugin=shec \</span><br><span class="line">     [k=&#123;data-chunks&#125;] \</span><br><span class="line">     [m=&#123;coding-chunks&#125;] \</span><br><span class="line">     [c=&#123;durability-estimator&#125;] \</span><br><span class="line">     [crush-root=&#123;root&#125;] \</span><br><span class="line">     [crush-failure-domain=&#123;bucket-type&#125;] \</span><br><span class="line">     [crush-device-class=&#123;device-class&#125;] \</span><br><span class="line">     [directory=&#123;directory&#125;] \</span><br><span class="line">     [--force]</span><br></pre></td></tr></table></figure><p>其中：</p><p>k={data-chunks}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:每个object都分为多个data-chunks parts，每个part存储在不同的OSD上。</span><br><span class="line">Type:Integer</span><br><span class="line">Required:No.</span><br><span class="line">Default:4</span><br></pre></td></tr></table></figure><p>m={coding-chunks}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:计算每个object的coding chunks并将它们存储在不同的OSD上。coding chunks的数量也是在不丢失数据的情况下，允许损失OSD的数量。</span><br><span class="line">Type:Integer</span><br><span class="line">Required:No.</span><br><span class="line">Default:3</span><br></pre></td></tr></table></figure><p>c={durability-estimator}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description:校验chunk的数量，每个data chunk都包含在计算范围内。该数字被用作耐久性估算。例如，如果c = 2，则可以在不丢失数据的情况下down掉2个OSD。</span><br><span class="line">The number of parity chunks each of which includes each data chunk in its calculation range. The number is used as a durability estimator. For instance, if c=2, 2 OSDs can be down without losing data.</span><br><span class="line">Type:Integer</span><br><span class="line">Required:No.</span><br><span class="line">Default:2</span><br></pre></td></tr></table></figure><p>crush-root={root}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:crush bucket名字用于CRUSH rule的first step。&quot;take&quot;为step的默认值。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:default</span><br></pre></td></tr></table></figure><p>crush-failure-domain={bucket-type}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:确保不要有两个chunks位于相同故障域的bucket中。例如，如果故障域是host，则不会在同一主机上存储两个chunks。它用于创建CRUSH rule step，比如step chooseleaf host。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:host</span><br></pre></td></tr></table></figure><p>crush-device-class={device-class}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:使用CRUSH map中的crush device class名称，限定存储到特定class devices（例如SSD或HDD）。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:</span><br></pre></td></tr></table></figure><p>directory={directory}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:设置加载erasure code plugin的目录名。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:/usr/lib/ceph/erasure-code</span><br></pre></td></tr></table></figure><p>–force</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Description:用相同的名称覆盖已有的profile。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br></pre></td></tr></table></figure><h2 id="BRIEF-DESCRIPTION-OF-SHEC’S-LAYOUTS"><a href="#BRIEF-DESCRIPTION-OF-SHEC’S-LAYOUTS" class="headerlink" title="BRIEF DESCRIPTION OF SHEC’S LAYOUTS"></a>BRIEF DESCRIPTION OF SHEC’S LAYOUTS</h2><h3 id="SPACE-EFFICIENCY"><a href="#SPACE-EFFICIENCY" class="headerlink" title="SPACE EFFICIENCY"></a>SPACE EFFICIENCY</h3><p>Space efficiency是data chunks与object中所有chunks的比率，表示为k /（k + m）。为了提高space efficiency，您应该增加k或减少m。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">space efficiency of SHEC(4,3,2) = 4/(4+3) = 0.57</span><br><span class="line">SHEC(5,3,2) or SHEC(4,2,2) improves SHEC(4,3,2)&apos;s space efficiency</span><br></pre></td></tr></table></figure><h3 id="DURABILITY"><a href="#DURABILITY" class="headerlink" title="DURABILITY"></a>DURABILITY</h3><p>SHEC（= c）的第三个参数是一个耐久性估算，它近似于在不丢失数据的情况下可以丢失OSD的数量。SHEC（4,3,2）的耐久性估算= 2</p><h3 id="RECOVERY-EFFICIENCY"><a href="#RECOVERY-EFFICIENCY" class="headerlink" title="RECOVERY EFFICIENCY"></a>RECOVERY EFFICIENCY</h3><p>描述recovery efficiency的计算超出了本文件的范围，但至少在不增加c的情况下增加m可以提高恢复效率。（但是，在这种情况下，我们必须牺牲space efficiency。）</p><p>SHEC（4,2,2）→SHEC（4,3,2）：提高了recovery efficiency</p><h2 id="ERASURE-CODE-PROFILE-EXAMPLES"><a href="#ERASURE-CODE-PROFILE-EXAMPLES" class="headerlink" title="ERASURE CODE PROFILE EXAMPLES"></a>ERASURE CODE PROFILE EXAMPLES</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ceph osd erasure-code-profile set SHECprofile \</span><br><span class="line">     plugin=shec \</span><br><span class="line">     k=8 m=4 c=3 \</span><br><span class="line">     crush-failure-domain=host</span><br><span class="line">$ ceph osd pool create shecpool 256 256 erasure SHECprofile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-Luminous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LOCALLY REPAIRABLE ERASURE CODE PLUGIN</title>
      <link href="/2018/05/17/LOCALLY-REPAIRABLE-ERASURE-CODE-PLUGIN/"/>
      <url>/2018/05/17/LOCALLY-REPAIRABLE-ERASURE-CODE-PLUGIN/</url>
      
        <content type="html"><![CDATA[<p>通过jerasure plugin，当erasure coded的object存储在多个OSD中时，恢复丢失的1个OSD数据需要从所有其他OSD读取数据并修复。例如，如果jerasure配置为k = 8和m = 4，则丢失1个OSD需要从其他11个OSD读取并修复。</p><p>lrc erasure code plugin创建本地奇偶校验chunks，以便能够使用较少的OSD恢复。例如，如果lrc配置为k = 8，m = 4和l = 4，则会为每4个OSD创建一个附加奇偶校验chunk。当1个OSD丢失时，只需要使用4个OSD而不是11个来恢复。</p><h2 id="ERASURE-CODE-PROFILE-EXAMPLES"><a href="#ERASURE-CODE-PROFILE-EXAMPLES" class="headerlink" title="ERASURE CODE PROFILE EXAMPLES"></a>ERASURE CODE PROFILE EXAMPLES</h2><h3 id="REDUCE-RECOVERY-BANDWIDTH-BETWEEN-HOSTS"><a href="#REDUCE-RECOVERY-BANDWIDTH-BETWEEN-HOSTS" class="headerlink" title="REDUCE RECOVERY BANDWIDTH BETWEEN HOSTS"></a>REDUCE RECOVERY BANDWIDTH BETWEEN HOSTS</h3><p>当所有主机连接到相同的交换机时，实际上可以观察到减少的带宽。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ceph osd erasure-code-profile set LRCprofile \</span><br><span class="line">     plugin=lrc \</span><br><span class="line">     k=4 m=2 l=3 \</span><br><span class="line">     crush-failure-domain=host</span><br><span class="line">$ ceph osd pool create lrcpool 12 12 erasure LRCprofile</span><br></pre></td></tr></table></figure><h3 id="REDUCE-RECOVERY-BANDWIDTH-BETWEEN-RACKS"><a href="#REDUCE-RECOVERY-BANDWIDTH-BETWEEN-RACKS" class="headerlink" title="REDUCE RECOVERY BANDWIDTH BETWEEN RACKS"></a>REDUCE RECOVERY BANDWIDTH BETWEEN RACKS</h3><p>在Firefly中，只有当primary OSD与丢失chunk在同一个rack中时，才会观察到减少的带宽。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ceph osd erasure-code-profile set LRCprofile \</span><br><span class="line">     plugin=lrc \</span><br><span class="line">     k=4 m=2 l=3 \</span><br><span class="line">     crush-locality=rack \</span><br><span class="line">     crush-failure-domain=host</span><br><span class="line">$ ceph osd pool create lrcpool 12 12 erasure LRCprofile</span><br></pre></td></tr></table></figure><h2 id="CREATE-AN-LRC-PROFILE"><a href="#CREATE-AN-LRC-PROFILE" class="headerlink" title="CREATE AN LRC PROFILE"></a>CREATE AN LRC PROFILE</h2><p>创建新的lrc erasure code profile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ceph osd erasure-code-profile set &#123;name&#125; \</span><br><span class="line">     plugin=lrc \</span><br><span class="line">     k=&#123;data-chunks&#125; \</span><br><span class="line">     m=&#123;coding-chunks&#125; \</span><br><span class="line">     l=&#123;locality&#125; \</span><br><span class="line">     [crush-root=&#123;root&#125;] \</span><br><span class="line">     [crush-locality=&#123;bucket-type&#125;] \</span><br><span class="line">     [crush-failure-domain=&#123;bucket-type&#125;] \</span><br><span class="line">     [crush-device-class=&#123;device-class&#125;] \</span><br><span class="line">     [directory=&#123;directory&#125;] \</span><br><span class="line">     [--force]</span><br></pre></td></tr></table></figure><p>其中：</p><p>k={data chunks}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:每个object都分为多个data-chunks parts，每个part存储在不同的OSD上。</span><br><span class="line">Type:Integer</span><br><span class="line">Required:Yes.</span><br><span class="line">Example:4</span><br></pre></td></tr></table></figure><p>m={coding-chunks}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:计算每个object的coding chunks并将它们存储在不同的OSD上。coding chunks的数量也是在不丢失数据的情况下，允许损失OSD的数量。</span><br><span class="line">Type:Integer</span><br><span class="line">Required:Yes.</span><br><span class="line">Example:2</span><br></pre></td></tr></table></figure><p>l={locality}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Description:将coding和data chunks分组为指定size locality的sets。例如，对于k = 4和m = 2，当locality = 3时，创建2个groups，每个group中3个。每个set都可以在不读取另一set中chunks的情况下恢复。</span><br><span class="line"></span><br><span class="line">Group the coding and data chunks into sets of size locality. For instance, for k=4 and m=2, when locality=3 two groups of three are created. Each set can be recovered without reading chunks from another set.</span><br><span class="line">Type:Integer</span><br><span class="line">Required:Yes.</span><br><span class="line">Example:3</span><br></pre></td></tr></table></figure><p>crush-root={root}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:crush bucket名字用于CRUSH rule的first step。&quot;take&quot;为step的默认值。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:default</span><br></pre></td></tr></table></figure><p>crush-locality={bucket-type}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:crush bucket的type，其中由l定义的每个chunks集合将被存储。例如，如果它被设置为rack，则每个l chunks将被放置在不同的rack中。它用于创建CRUSH rule step，如step选择rack。如果没有设置，则不会进行这样的分组。</span><br><span class="line">The type of the crush bucket in which each set of chunks defined by l will be stored. For instance, if it is set to rack, each group of l chunks will be placed in a different rack. It is used to create a CRUSH rule step such as step choose rack. If it is not set, no such grouping is done.</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br></pre></td></tr></table></figure><p>crush-failure-domain={bucket-type}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Description:确保不要有两个chunks位于相同故障域的bucket中。例如，如果故障域是host，则不会在同一主机上存储两个chunks。它用于创建CRUSH rule step，比如step chooseleaf host。</span><br><span class="line"></span><br><span class="line">Ensure that no two chunks are in a bucket with the same failure domain. For instance, if the failure domain is host no two chunks will be stored on the same host. It is used to create a CRUSH rule step such as step chooseleaf host.</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:host</span><br></pre></td></tr></table></figure><p>crush-device-class={device-class}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:使用CRUSH map中的crush device class名称，限定存储到特定class devices（例如SSD或HDD）。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:</span><br></pre></td></tr></table></figure><p>directory={directory}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:设置加载erasure code plugin的目录名。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:/usr/lib/ceph/erasure-code</span><br></pre></td></tr></table></figure><p>–force</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Description:用相同的名称覆盖已有的profile。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br></pre></td></tr></table></figure><h2 id="LOW-LEVEL-PLUGIN-CONFIGURATION"><a href="#LOW-LEVEL-PLUGIN-CONFIGURATION" class="headerlink" title="LOW LEVEL PLUGIN CONFIGURATION"></a>LOW LEVEL PLUGIN CONFIGURATION</h2><p>k和m的和必须是l parameter的倍数。low level configuration parameters不会施加这样的限制，并且为了特定目的而使用它可能更加方便。例如可以定义两个groups，一个group有4个chunks，另一个group有3个chunks。还可以递归地定义locality sets，例如datacenters和racks到datacenters。通过生成low level configuration来实现k/m/l。</p><p>lrc erasure code plugin递归地应用erasure code技术，以便在大多数情况下从某些chunks的丢失中仅恢复需要的可用chunks的子集。例如，three coding steps被描述为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chunk nr    01234567</span><br><span class="line">step 1      _cDD_cDD</span><br><span class="line">step 2      cDDD____</span><br><span class="line">step 3      ____cDDD</span><br></pre></td></tr></table></figure><p>其中c是从data chunks D计算出的coding chunks，丢失的chunk 7，可以用后4个chunks恢复。丢失的chunk 2的chunk可以用前4个chunks恢复。</p><h2 id="ERASURE-CODE-PROFILE-EXAMPLES-USING-LOW-LEVEL-CONFIGURATION"><a href="#ERASURE-CODE-PROFILE-EXAMPLES-USING-LOW-LEVEL-CONFIGURATION" class="headerlink" title="ERASURE CODE PROFILE EXAMPLES USING LOW LEVEL CONFIGURATION"></a>ERASURE CODE PROFILE EXAMPLES USING LOW LEVEL CONFIGURATION</h2><h3 id="MINIMAL-TESTING"><a href="#MINIMAL-TESTING" class="headerlink" title="MINIMAL TESTING"></a>MINIMAL TESTING</h3><p>它严格等同于使用默认的erasure code profile。DD意味着K = 2，c意味着M = 1，并且使用默认的jerasure  plugin。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ceph osd erasure-code-profile set LRCprofile \</span><br><span class="line">     plugin=lrc \</span><br><span class="line">     mapping=DD_ \</span><br><span class="line">     layers=&apos;[ [ &quot;DDc&quot;, &quot;&quot; ] ]&apos;</span><br><span class="line">$ ceph osd pool create lrcpool 12 12 erasure LRCprofile</span><br></pre></td></tr></table></figure><h3 id="REDUCE-RECOVERY-BANDWIDTH-BETWEEN-HOSTS-1"><a href="#REDUCE-RECOVERY-BANDWIDTH-BETWEEN-HOSTS-1" class="headerlink" title="REDUCE RECOVERY BANDWIDTH BETWEEN HOSTS"></a>REDUCE RECOVERY BANDWIDTH BETWEEN HOSTS</h3><p>当所有主机连接到同一个交换机时，可以观察到减少的带宽使用情况。它相当于k = 4，m = 2和l = 3，尽管chunks的layout不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ceph osd erasure-code-profile set LRCprofile \</span><br><span class="line">     plugin=lrc \</span><br><span class="line">     mapping=__DD__DD \</span><br><span class="line">     layers=&apos;[</span><br><span class="line">               [ &quot;_cDD_cDD&quot;, &quot;&quot; ],</span><br><span class="line">               [ &quot;cDDD____&quot;, &quot;&quot; ],</span><br><span class="line">               [ &quot;____cDDD&quot;, &quot;&quot; ],</span><br><span class="line">             ]&apos;</span><br><span class="line">$ ceph osd pool create lrcpool 12 12 erasure LRCprofile</span><br></pre></td></tr></table></figure><h3 id="REDUCE-RECOVERY-BANDWIDTH-BETWEEN-RACKS-1"><a href="#REDUCE-RECOVERY-BANDWIDTH-BETWEEN-RACKS-1" class="headerlink" title="REDUCE RECOVERY BANDWIDTH BETWEEN RACKS"></a>REDUCE RECOVERY BANDWIDTH BETWEEN RACKS</h3><p>在Firefly中，只有当primary OSD与丢失chunk在同一个rack中时，才会观察到减少的带宽。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ceph osd erasure-code-profile set LRCprofile \</span><br><span class="line">     plugin=lrc \</span><br><span class="line">     mapping=__DD__DD \</span><br><span class="line">     layers=&apos;[</span><br><span class="line">               [ &quot;_cDD_cDD&quot;, &quot;&quot; ],</span><br><span class="line">               [ &quot;cDDD____&quot;, &quot;&quot; ],</span><br><span class="line">               [ &quot;____cDDD&quot;, &quot;&quot; ],</span><br><span class="line">             ]&apos; \</span><br><span class="line">     crush-steps=&apos;[</span><br><span class="line">                     [ &quot;choose&quot;, &quot;rack&quot;, 2 ],</span><br><span class="line">                     [ &quot;chooseleaf&quot;, &quot;host&quot;, 4 ],</span><br><span class="line">                    ]&apos;</span><br><span class="line">$ ceph osd pool create lrcpool 12 12 erasure LRCprofile</span><br></pre></td></tr></table></figure><h3 id="TESTING-WITH-DIFFERENT-ERASURE-CODE-BACKENDS"><a href="#TESTING-WITH-DIFFERENT-ERASURE-CODE-BACKENDS" class="headerlink" title="TESTING WITH DIFFERENT ERASURE CODE BACKENDS"></a>TESTING WITH DIFFERENT ERASURE CODE BACKENDS</h3><p>LRC现在使用jerasure作为默认的EC backend。可以使用low level configuration在每个layer基础上指定EC backend/algorithm。layers=’[ [ “DDc”, “” ] ]’ 的第二个参数实际上是用于此level的erasure code profile。下面的例子指定了在lrcpool中使用cauchy technique的ISA backend。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ceph osd erasure-code-profile set LRCprofile \</span><br><span class="line">     plugin=lrc \</span><br><span class="line">     mapping=DD_ \</span><br><span class="line">     layers=&apos;[ [ &quot;DDc&quot;, &quot;plugin=isa technique=cauchy&quot; ] ]&apos;</span><br><span class="line">$ ceph osd pool create lrcpool 12 12 erasure LRCprofile</span><br></pre></td></tr></table></figure><p>您还可以为每个layer使用不同的erasure code profile。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ceph osd erasure-code-profile set LRCprofile \</span><br><span class="line">     plugin=lrc \</span><br><span class="line">     mapping=__DD__DD \</span><br><span class="line">     layers=&apos;[</span><br><span class="line">               [ &quot;_cDD_cDD&quot;, &quot;plugin=isa technique=cauchy&quot; ],</span><br><span class="line">               [ &quot;cDDD____&quot;, &quot;plugin=isa&quot; ],</span><br><span class="line">               [ &quot;____cDDD&quot;, &quot;plugin=jerasure&quot; ],</span><br><span class="line">             ]&apos;</span><br><span class="line">$ ceph osd pool create lrcpool 12 12 erasure LRCprofile</span><br></pre></td></tr></table></figure><h2 id="ERASURE-CODING-AND-DECODING-ALGORITHM"><a href="#ERASURE-CODING-AND-DECODING-ALGORITHM" class="headerlink" title="ERASURE CODING AND DECODING ALGORITHM"></a>ERASURE CODING AND DECODING ALGORITHM</h2><p>在layers中找到的steps描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chunk nr    01234567</span><br><span class="line"></span><br><span class="line">step 1      _cDD_cDD</span><br><span class="line">step 2      cDDD____</span><br><span class="line">step 3      ____cDDD</span><br></pre></td></tr></table></figure><p>按顺序应用。例如，如果一个4K的object被encoded，它将首先通过step 1并被分成4个1K的chunk（4个大写D）。它们按顺序存储在chunk 2,3,6和7中。由此计算出两个coding chunks（两个小写字母c）。coding chunks分别存储在chunk 1和5中。</p><p>step 2以类似的方式重新使用由step 1创建的内容，并在位置0处存储单个coding chunk c。为了便于阅读，最后四个标记有下划线（_）的chunks将被忽略。</p><p>step 3在位置4存储单个coding chunk c。由step 1创建的3个chunks被用于计算该coding chunk，即来自step 1的coding chunk在step 3中变为data chunk。</p><p>如果chunk 2丢失：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chunk nr    01234567</span><br><span class="line"></span><br><span class="line">step 1      _c D_cDD</span><br><span class="line">step 2      cD D____</span><br><span class="line">step 3      __ _cDDD</span><br></pre></td></tr></table></figure><p>decoding将尝试通过以相反的顺序来执行steps恢复它：step 3然后是step 2，最后是step 1。</p><p>step 3对chunk 2（即它是下划线）一无所知并被跳过。</p><p>存储在chunk 0中来自step 2的coding chunk允许其恢复chunk 2的内容。没有更多的chunks要恢复，过程停止，不考虑step 1。</p><p>恢复chunk 2需要读取chunks 0,1,3，并写回chunk 2。</p><p>如果chunk 2,3,6丢失：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chunk nr    01234567</span><br><span class="line"></span><br><span class="line">step 1      _c  _c D</span><br><span class="line">step 2      cD  __ _</span><br><span class="line">step 3      __  cD D</span><br></pre></td></tr></table></figure><p>step 3可以恢复chunk 6的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chunk nr    01234567</span><br><span class="line"></span><br><span class="line">step 1      _c  _cDD</span><br><span class="line">step 2      cD  ____</span><br><span class="line">step 3      __  cDDD</span><br></pre></td></tr></table></figure><p>step 2无法恢复并被跳过，因为缺少两个chunks（2,3），并且它只能从一个缺失的chunk中恢复。</p><p>存储在chunk 1,5中的来自step 1的coding chunk允许它恢复chunk 2,3的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chunk nr    01234567</span><br><span class="line"></span><br><span class="line">step 1      _cDD_cDD</span><br><span class="line">step 2      cDDD____</span><br><span class="line">step 3      ____cDDD</span><br></pre></td></tr></table></figure><h2 id="CONTROLLING-CRUSH-PLACEMENT"><a href="#CONTROLLING-CRUSH-PLACEMENT" class="headerlink" title="CONTROLLING CRUSH PLACEMENT"></a>CONTROLLING CRUSH PLACEMENT</h2><p>默认的CRUSH rule提供位于不同hosts上隔离OSD。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chunk nr    01234567</span><br><span class="line"></span><br><span class="line">step 1      _cDD_cDD</span><br><span class="line">step 2      cDDD____</span><br><span class="line">step 3      ____cDDD</span><br></pre></td></tr></table></figure><p>需要8个OSD，每个chunk需要一个OSD。如果hosts位于两个相邻的racks中，则前4个chunks可以放在第一个rack中，最后4个放在第二个rack中。因此，从丢失的单个OSD中恢复并不需要在两个racks之间使用带宽。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crush-steps=&apos;[ [ &quot;choose&quot;, &quot;rack&quot;, 2 ], [ &quot;chooseleaf&quot;, &quot;host&quot;, 4 ] ]&apos;</span><br></pre></td></tr></table></figure><p>将创建一个rule，将选择两个类型rack的crush buckets，为它们每个选择4个OSD，它们中的每一个都位于类型host的不同buckets中。</p><p>CRUSH rule也可以手动制作以实现更精细的控制。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-Luminous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISA ERASURE CODE PLUGIN</title>
      <link href="/2018/05/16/ISA-ERASURE-CODE-PLUGIN/"/>
      <url>/2018/05/16/ISA-ERASURE-CODE-PLUGIN/</url>
      
        <content type="html"><![CDATA[<p>ISA plugin封装了<a href="https://01.org/intel%C2%AE-storage-acceleration-library-open-source-version/" target="_blank" rel="noopener">ISA</a>库。 它只能在Intel处理器上运行。</p><h2 id="CREATE-AN-ISA-PROFILE"><a href="#CREATE-AN-ISA-PROFILE" class="headerlink" title="CREATE AN ISA PROFILE"></a>CREATE AN ISA PROFILE</h2><p>创建新的isa erasure code profile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ceph osd erasure-code-profile set &#123;name&#125; \</span><br><span class="line">     plugin=isa \</span><br><span class="line">     technique=&#123;reed_sol_van|cauchy&#125; \</span><br><span class="line">     [k=&#123;data-chunks&#125;] \</span><br><span class="line">     [m=&#123;coding-chunks&#125;] \</span><br><span class="line">     [crush-root=&#123;root&#125;] \</span><br><span class="line">     [crush-failure-domain=&#123;bucket-type&#125;] \</span><br><span class="line">     [crush-device-class=&#123;device-class&#125;] \</span><br><span class="line">     [directory=&#123;directory&#125;] \</span><br><span class="line">     [--force]</span><br></pre></td></tr></table></figure><p>其中：</p><p>k={data chunks}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:每个object都分为多个data-chunks parts，每个part存储在不同的OSD上。</span><br><span class="line">Type:Integer</span><br><span class="line">Required:No.</span><br><span class="line">Default:7</span><br></pre></td></tr></table></figure><p>m={coding-chunks}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:计算每个object的coding chunks并将它们存储在不同的OSD上。coding chunks的数量也是在不丢失数据的情况下，允许损失OSD的数量。</span><br><span class="line">Type:Integer</span><br><span class="line">Required:No.</span><br><span class="line">Default:3</span><br></pre></td></tr></table></figure><p>technique={reed_sol_van|cauchy}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Description:ISA插件有两种Reed Solomon形式（https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction）。</span><br><span class="line">如果设置了reed_sol_van，则为Vandermonde，</span><br><span class="line">如果设置了cauchy（https://en.wikipedia.org/wiki/Vandermonde_matrix），则为Cauchy（https://en.wikipedia.org/wiki/Cauchy_matrix）。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:reed_sol_van</span><br></pre></td></tr></table></figure><p>crush-root={root}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:crush bucket名字用于CRUSH rule的first step。&quot;take&quot;为step的默认值。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:default</span><br></pre></td></tr></table></figure><p>crush-failure-domain={bucket-type}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:确保不要有两个chunks位于相同故障域的bucket中。例如，如果故障域是host，则不会在同一主机上存储两个chunks。它用于创建CRUSH rule step，比如step chooseleaf host。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:host</span><br></pre></td></tr></table></figure><p>crush-device-class={device-class}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:使用CRUSH map中的crush device class名称，限定存储到特定class devices（例如SSD或HDD）。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:</span><br></pre></td></tr></table></figure><p>directory={directory}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:设置加载erasure code plugin的目录名。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:/usr/lib/ceph/erasure-code</span><br></pre></td></tr></table></figure><p>–force</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Description:用相同的名称覆盖已有的profile。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-Luminous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JERASURE ERASURE CODE PLUGIN</title>
      <link href="/2018/05/16/JERASURE-ERASURE-CODE-PLUGIN/"/>
      <url>/2018/05/16/JERASURE-ERASURE-CODE-PLUGIN/</url>
      
        <content type="html"><![CDATA[<p>jerasure plugin是最通用和灵活的插件，它也是Ceph erasure coded pools的默认设置。</p><p>jerasure plugin封装了<a href="http://jerasure.org/" target="_blank" rel="noopener">Jerasure</a>库。建议阅读Jelasure文档以更好地理解参数。</p><h2 id="CREATE-A-JERASURE-PROFILE"><a href="#CREATE-A-JERASURE-PROFILE" class="headerlink" title="CREATE A JERASURE PROFILE"></a>CREATE A JERASURE PROFILE</h2><p>创建新的jerasure erasure code profile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ceph osd erasure-code-profile set &#123;name&#125; \</span><br><span class="line">     plugin=jerasure \</span><br><span class="line">     k=&#123;data-chunks&#125; \</span><br><span class="line">     m=&#123;coding-chunks&#125; \</span><br><span class="line">     technique=&#123;reed_sol_van|reed_sol_r6_op|cauchy_orig|cauchy_good|liberation|blaum_roth|liber8tion&#125; \</span><br><span class="line">     [crush-root=&#123;root&#125;] \</span><br><span class="line">     [crush-failure-domain=&#123;bucket-type&#125;] \</span><br><span class="line">     [crush-device-class=&#123;device-class&#125;] \</span><br><span class="line">     [directory=&#123;directory&#125;] \</span><br><span class="line">     [--force]</span><br></pre></td></tr></table></figure><p>其中：</p><p>k={data chunks}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:每个object都分为多个data-chunks parts，每个part存储在不同的OSD上。</span><br><span class="line">Type:Integer</span><br><span class="line">Required:Yes.</span><br><span class="line">Example:4</span><br></pre></td></tr></table></figure><p>m={coding-chunks}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:计算每个object的coding chunks并将它们存储在不同的OSD上。coding chunks的数量也是在不丢失数据的情况下，允许损失OSD的数量。</span><br><span class="line">Type:Integer</span><br><span class="line">Required:Yes.</span><br><span class="line">Example:2</span><br></pre></td></tr></table></figure><p>technique={reed_sol_van|reed_sol_r6_op|cauchy_orig|cauchy_good|liberation|blaum_roth|liber8tion}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:更灵活的technique是reed_sol_van：只需要设置k和m。cauchy_good technique可以更快但您需要调优packetsize。reed_sol_r6_op，liberation，blaum_roth，liber8tion都与RAID6等价，因为它们只能配置m=2。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:reed_sol_van</span><br></pre></td></tr></table></figure><p>packetsize={bytes}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:encoding将在一次bytes大小的packets上完成。选择合理的packet大小是困难的。Jeasure文档包含了关于这个topic的大量信息。</span><br><span class="line">Type:Integer</span><br><span class="line">Required:No.</span><br><span class="line">Default:2048</span><br></pre></td></tr></table></figure><p>crush-root={root}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description:crush bucket名字用于CRUSH rule的first step。&quot;take&quot;为step的默认值。</span><br><span class="line">The name of the crush bucket used for the first step of the CRUSH rule. For intance step take default.</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:default</span><br></pre></td></tr></table></figure><p>crush-failure-domain={bucket-type}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:确保不要有两个chunks位于相同故障域的bucket中。例如，如果故障域是host，则不会在同一主机上存储两个chunks。它用于创建CRUSH rule step，比如step chooseleaf host。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:host</span><br></pre></td></tr></table></figure><p>crush-device-class={device-class}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Description:使用CRUSH map中的crush device class名称，限定存储到特定class devices（例如SSD或HDD）。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br></pre></td></tr></table></figure><p>directory={directory}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:设置加载erasure code plugin的目录名。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:/usr/lib/ceph/erasure-code</span><br></pre></td></tr></table></figure><p>–force</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Description:以相同的名称重写已经存在的profile。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-Luminous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERASURE CODE PROFILES</title>
      <link href="/2018/05/15/ERASURE-CODE-PROFILES/"/>
      <url>/2018/05/15/ERASURE-CODE-PROFILES/</url>
      
        <content type="html"><![CDATA[<p>Erasure code由profile定义，并在erasure coded pool关联CRUSH rule时使用。</p><p>默认的erasure code profile（在Ceph集群初始化时被创建）提供了与两个副本相同的冗余级别，但相比两副本需要的磁盘空间减少了25％。它被描述为k = 2和m = 1的profile，这意味着信息分布在三个OSD（k + m == 3）上，其中一份可以被丢失。</p><p>为了在不增加raw space的情况下提高冗余度，可以创建新的profile。例如，k = 10和m = 4的profile可以通过在14（k + m = 14）个OSD上分散一个object来支撑4个（m = 4）OSD的丢失。首先将object分成10个chunks（如果object为10MB，每个chunk为1MB）并且计算4个coding chunks用于recovery（每个coding chunk具有与data chunk相同的大小，即1MB）。raw space开销只有40％，即使四个OSD同时中断，object也不会丢失。</p><ul><li><a href="http://docs.ceph.com/docs/master/rados/operations/erasure-code-jerasure/" target="_blank" rel="noopener">Jerasure erasure code plugin</a></li><li><a href="http://docs.ceph.com/docs/master/rados/operations/erasure-code-isa/" target="_blank" rel="noopener">ISA erasure code plugin</a></li><li><a href="http://docs.ceph.com/docs/master/rados/operations/erasure-code-lrc/" target="_blank" rel="noopener">Locally repairable erasure code plugin</a></li><li><a href="http://docs.ceph.com/docs/master/rados/operations/erasure-code-shec/" target="_blank" rel="noopener">SHEC erasure code plugin</a></li></ul><h2 id="OSD-ERASURE-CODE-PROFILE-SET"><a href="#OSD-ERASURE-CODE-PROFILE-SET" class="headerlink" title="OSD ERASURE-CODE-PROFILE SET"></a>OSD ERASURE-CODE-PROFILE SET</h2><p>创建新的erasure code profile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ceph osd erasure-code-profile set &#123;name&#125; \</span><br><span class="line">     [&#123;directory=directory&#125;] \</span><br><span class="line">     [&#123;plugin=plugin&#125;] \</span><br><span class="line">     [&#123;stripe_unit=stripe_unit&#125;] \</span><br><span class="line">     [&#123;key=value&#125; ...] \</span><br><span class="line">     [--force]</span><br></pre></td></tr></table></figure><p>其中：</p><p>{directory=directory}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:设置加载erasure code plugin的目录名。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:/usr/lib/ceph/erasure-code</span><br></pre></td></tr></table></figure><p>{plugin=plugin}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Description:使用erasure code plugin计算coding chunks和recover missing chunks。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br><span class="line">Default:jerasure</span><br></pre></td></tr></table></figure><p>{stripe_unit=stripe_unit}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Description:data chunk中每个stripe的数据量。例如，具有2个data chunks并且StruPeyUng=4K的profile将在chunk 0中放置0-4K，在chunk 1中放置4K-8K，然后再在chunk 0中放置8K-12K。4K的倍数可以获得最佳的性能。当创建pool时，默认值取自monitor config中的osd_pool_erasure_code_stripe_unit。使用此profile的pool的stripe_width将是data chunks数乘以此stripe_unit的数量。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br></pre></td></tr></table></figure><p>{key=value}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Description:其余的key/value对semantic由erasure code plugin定义。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br></pre></td></tr></table></figure><p>–force</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Description:以相同的名称覆盖现有的profile，并允许设置非4K对齐的stripe_unit。</span><br><span class="line">Type:String</span><br><span class="line">Required:No.</span><br></pre></td></tr></table></figure><h2 id="OSD-ERASURE-CODE-PROFILE-RM"><a href="#OSD-ERASURE-CODE-PROFILE-RM" class="headerlink" title="OSD ERASURE-CODE-PROFILE RM"></a>OSD ERASURE-CODE-PROFILE RM</h2><p>删除一个erasure code profile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd erasure-code-profile rm &#123;name&#125;</span><br></pre></td></tr></table></figure><p>如果profile被某个pool引用，删除将失败。</p><h2 id="OSD-ERASURE-CODE-PROFILE-GET"><a href="#OSD-ERASURE-CODE-PROFILE-GET" class="headerlink" title="OSD ERASURE-CODE-PROFILE GET"></a>OSD ERASURE-CODE-PROFILE GET</h2><p>显示一个erasure code profile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd erasure-code-profile get &#123;name&#125;</span><br></pre></td></tr></table></figure><h2 id="OSD-ERASURE-CODE-PROFILE-LS"><a href="#OSD-ERASURE-CODE-PROFILE-LS" class="headerlink" title="OSD ERASURE-CODE-PROFILE LS"></a>OSD ERASURE-CODE-PROFILE LS</h2><p>列出所有erasure code profiles的名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd erasure-code-profile ls</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-Luminous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CACHE TIERING</title>
      <link href="/2018/05/12/CACHE-TIERING/"/>
      <url>/2018/05/12/CACHE-TIERING/</url>
      
        <content type="html"><![CDATA[<p>cache tier为Ceph Clients读取存储在后端的数据子集提供更好的I/O性能。Cache tiering意味着创建pool时，可以为pool配置一个相对更快/更昂贵的存储设备作为缓存层，并且配置一个经济的后端数据存储pool（由erasure-coded或相对较慢/较便宜的设备组成）。Ceph objecter handles 负责处理放置objects位置，并且tiering agent 决定何时将缓存中的objects刷新到后端存储层。所以cache tier和后端存储层对Ceph clients来说是完全透明的。</p><p><img src="http://docs.ceph.com/docs/master/_images/ditaa-2982c5ed3031cac4f9e40545139e51fdb0b33897.png" alt></p><p>cache tiering agent handles自动处理缓存层和后端存储层之间的数据迁移。但是，管理员可以配置此迁移的发生方式。 主要有两种情况：</p><ul><li>Writeback Mode: </li></ul><p>当管理员以writeback mode配置tiers时，Ceph clients将数据写入缓存层并从缓存层接收ACK。经过一段时间后，写入缓存层的数据将迁移到存储层，并从缓存层中清除。从概念上讲，缓存层被覆盖在后端存储层的“前面”。当Ceph client需要驻留在存储层中的数据时，cache tiering agent会在读取数据时将数据迁移到缓存层，然后将其发送到Ceph client。此后，Ceph client可以使用缓存层执行I/O，直到数据变为非活动状态。这对于易变数据（例如照片/视频编辑，交易数据等）是理想的。</p><ul><li>Read-proxy Mode: </li></ul><p>此模式将使用已存在于缓存层中的任何objects，但如果缓存中没有objects，则将请求代理到存储层。这对于从writeback mode转换为禁用缓存非常有用，因为它允许负载在缓存耗尽时正常运行，而无需向缓存中添加任何新objects。</p><h2 id="A-WORD-OF-CAUTION"><a href="#A-WORD-OF-CAUTION" class="headerlink" title="A WORD OF CAUTION"></a>A WORD OF CAUTION</h2><p>Cache tiering会降低大多数负载的性能。用户在使用此功能之前应特别小心</p><ul><li>Workload dependent: </li></ul><p>缓存是否会提高性能，高度依赖于负载。由于将objects移入或移出缓存会产生额外成本，因此只有在数据集中访问存在较大偏差时才会生效，这样大多数请求才会命中少量objects。缓存池应该大到足以捕获你的负载，以避免抖动。</p><ul><li>Difficult to benchmark: </li></ul><p>使用cache tiering，用户常规衡量性能的基准测试将显得很糟糕，部分原因是由于很少有人将请求集中在一小部分objects上，所以缓存“预热”可能需要很长时间，同时预热可能带来更高的成本。</p><ul><li>Usually slower: </li></ul><p>对于缓存分层不友好的负载，性能通常比没有设置cache tiering enabled的普通RADOS pool慢。</p><ul><li>librados object enumeration: </li></ul><p>在这种情况下，librados级别的object enumeration API并不一致。如果您的应用程序直接使用librados并依赖于object enumeration，则缓存分层可能无法按预期工作。 （这对于RGW，RBD或CephFS来说不是问题。）</p><ul><li>Complexity: </li></ul><p>启用缓存分层会带来额外的复杂性。这会增加其他用户尚未遇到的错误的可能性，并且会使您的部署处于更高级别的风险中。</p><h3 id="KNOWN-GOOD-WORKLOADS"><a href="#KNOWN-GOOD-WORKLOADS" class="headerlink" title="KNOWN GOOD WORKLOADS"></a>KNOWN GOOD WORKLOADS</h3><ul><li>RGW time-skewed: </li></ul><p>如果RGW负载几乎所有读取操作都针对最近写入的objects，可配置为一段时间后，将最近写入的对象从缓存层迁移到存储层，这种场景可以很好地工作。</p><h3 id="KNOWN-BAD-WORKLOADS"><a href="#KNOWN-BAD-WORKLOADS" class="headerlink" title="KNOWN BAD WORKLOADS"></a>KNOWN BAD WORKLOADS</h3><p>已知下列配置对cache tiering效果不佳。</p><ul><li>RBD with replicated cache and erasure-coded base: </li></ul><p>这是一个常见的要求，但通常表现不佳。即使合理偏差的负载仍然会向cold objects发送一些small writes操作，由于erasure-coded pool尚不支持small writes操作，因此必须将整个（通常为4 MB）objects迁移到缓存中以满足small write（通常为4 KB）。只有少数用户成功部署了此配置，并且仅适用于他们，因为他们的数据extremely cold（备份）并且对性能没有任何要求。</p><ul><li>RBD with replicated cache and base: </li></ul><p>具有replicated base tier（存储层）的RBD，效果要好于erasure coded base tier（存储层）时的RBD，但它仍高度依赖于负载中的偏差量，而且很难验证。用户需要很好地理解他们的负载，并需要调整缓存分层参数。</p><h2 id="SETTING-UP-POOLS"><a href="#SETTING-UP-POOLS" class="headerlink" title="SETTING UP POOLS"></a>SETTING UP POOLS</h2><p>要设置cache tiering，您必须有两个pool。 一个pool充当backing storage，另一个pool充当cache。</p><h3 id="SETTING-UP-A-BACKING-STORAGE-POOL"><a href="#SETTING-UP-A-BACKING-STORAGE-POOL" class="headerlink" title="SETTING UP A BACKING STORAGE POOL"></a>SETTING UP A BACKING STORAGE POOL</h3><p>设置backing storage pool通常涉及以下两种方案之一：</p><ul><li>Standard Storage: </li></ul><p>在这种情况下，pool在Ceph Storage Cluster中存储object的多个副本。</p><ul><li>Erasure Coding: </li></ul><p>在这种情况下，pool使用erasure coding来更有效地存储数据，并且性能折衷很小。</p><p>在standard storage方案中，您可以设置CRUSH rule来建立故障域（例如，osd, host, chassis, rack, row, 等）。当rule中的所有存储驱动器都具有相同的大小，速度（RPM-转速和吞吐量）和类型时，Ceph OSD Daemons会达到最佳性能。有关创建rule的详细信息，请参阅<a href="http://docs.ceph.com/docs/master/rados/operations/crush-map/" target="_blank" rel="noopener">CRUSH Maps</a>。一旦你创建了rule，就可以创建backing storage pool了。</p><p>在erasure coding方案中，pool创建参数将自动生成适当的rule。 有关详细信息，请参阅<a href="http://docs.ceph.com/docs/master/rados/operations/pools/#create-a-pool" target="_blank" rel="noopener">Create a Pool</a>。</p><p>在随后的例子中，我们将backing storage pool称为cold-storage。</p><h3 id="SETTING-UP-A-CACHE-POOL"><a href="#SETTING-UP-A-CACHE-POOL" class="headerlink" title="SETTING UP A CACHE POOL"></a>SETTING UP A CACHE POOL</h3><p>设置cache pool遵循与standard storage方案相同的过程，但有这样的区别：作为cache tier（缓存层）的驱动器通常是服务器中的高性能驱动器，并具有自己的CRUSH rule。在设置这样的rule时，应该考虑具有高性能驱动器的主机，忽略不具有高性能驱动器的主机。有关详细信息，请参阅<a href="http://docs.ceph.com/docs/master/rados/operations/crush-map-edits/#placing-different-pools-on-different-osds" target="_blank" rel="noopener">Placing Different Pools on Different OSDs</a>。</p><p>在后面的例子中，我们将把cache pool称为hot-storage，将backing pool称为cold-storage。</p><p>有关cache tier配置和默认值，请参阅<a href="http://docs.ceph.com/docs/master/rados/operations/pools/#set-pool-values" target="_blank" rel="noopener">Pools - Set Pool Values</a>。</p><h2 id="CREATING-A-CACHE-TIER"><a href="#CREATING-A-CACHE-TIER" class="headerlink" title="CREATING A CACHE TIER"></a>CREATING A CACHE TIER</h2><p>设置cache tier涉及到关联backing storage pool和cache pool。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier add &#123;storagepool&#125; &#123;cachepool&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier add cold-storage hot-storage</span><br></pre></td></tr></table></figure><p>要设置cache模式，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier cache-mode &#123;cachepool&#125; &#123;cache-mode&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier cache-mode hot-storage writeback</span><br></pre></td></tr></table></figure><p>cache tiers覆盖backing storage tier，他们需要一个额外的步骤：您必须将所有客户端流量从storage pool引导到cache pool。要将客户端流量直接指向cache pool，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier set-overlay &#123;storagepool&#125; &#123;cachepool&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier set-overlay cold-storage hot-storage</span><br></pre></td></tr></table></figure><h2 id="CONFIGURING-A-CACHE-TIER"><a href="#CONFIGURING-A-CACHE-TIER" class="headerlink" title="CONFIGURING A CACHE TIER"></a>CONFIGURING A CACHE TIER</h2><p>Cache tiers有几个配置选项。您可以使用以下方法来设置cache tier配置选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;cachepool&#125; &#123;key&#125; &#123;value&#125;</span><br></pre></td></tr></table></figure><p>有关详细信息，请参阅<a href="http://docs.ceph.com/docs/master/rados/operations/pools/#set-pool-values" target="_blank" rel="noopener">Pools - Set Pool Values</a>。</p><h3 id="TARGET-SIZE-AND-TYPE"><a href="#TARGET-SIZE-AND-TYPE" class="headerlink" title="TARGET SIZE AND TYPE"></a>TARGET SIZE AND TYPE</h3><p>Ceph的cache tiers对hit_set_type使用<a href="https://en.wikipedia.org/wiki/Bloom_filter" target="_blank" rel="noopener">Bloom Filter</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;cachepool&#125; hit_set_type bloom</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set hot-storage hit_set_type bloom</span><br></pre></td></tr></table></figure><p>hit_set_count和hit_set_period限定要存储多少个这样的HitSet，以及每个HitSet应该cover多长时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;cachepool&#125; hit_set_count 12</span><br><span class="line">ceph osd pool set &#123;cachepool&#125; hit_set_period 14400</span><br><span class="line">ceph osd pool set &#123;cachepool&#125; target_max_bytes 1000000000000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：更大的hit_set_count会导致ceph-osd进程消耗更多的内存。</span><br></pre></td></tr></table></figure><p>分级访问，随着时间的推移，可以让Ceph确定是否一个Ceph client访问某个object至少一次，或者在一段时间内（“age” vs “temperature”）超过一次。</p><p>min_read_recency_for_promote决定在处理读取操作时，有多少HitSet检查object的存在。检查结果用于决定是否异步提升object。它的值应该在0到hit_set_count之间。如果它设置为0，则该object总是被提升。如果它设置为1，则检查当前的HitSet。如果这个object在当前的HitSet中，它会被提升。否则不是。对于其他值，将检查存档HitSet的确切数量。如果在最近的min_read_recency_for_promote HitSets中找到该object，则会提升该object。</p><p>可以为写入操作设置一个类似的参数，即min_write_recency_for_promote。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;cachepool&#125; min_read_recency_for_promote 2</span><br><span class="line">ceph osd pool set &#123;cachepool&#125; min_write_recency_for_promote 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：时间越长，min_read_recency_for_promote和min_write_recency_for_promote`value值越高，ceph-osd daemon消耗的内存就越多。特别是，当agent处于active状态刷新或逐出缓存objects时，所有hit_set_count HitSets都将加载到内存中。</span><br></pre></td></tr></table></figure><h3 id="CACHE-SIZING"><a href="#CACHE-SIZING" class="headerlink" title="CACHE SIZING"></a>CACHE SIZING</h3><p>cache tiering agent执行两个主要功能：</p><ul><li>Flushing: </li></ul><p>agent识别修改的（或脏的）objects，并将它们转发到storage pool以进行长期存储。</p><ul><li>Evicting: </li></ul><p>agent标识未被修改（或干净的）的objects，并从缓存中逐出其中不常用的objects。</p><h3 id="ABSOLUTE-SIZING"><a href="#ABSOLUTE-SIZING" class="headerlink" title="ABSOLUTE SIZING"></a>ABSOLUTE SIZING</h3><p>cache tiering agent可以基于字节总数或objects总数来flush或者evict objects。要指定最大字节数，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;cachepool&#125; target_max_bytes &#123;#bytes&#125;</span><br></pre></td></tr></table></figure><p>例如，以1TB flush或evict，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set hot-storage target_max_bytes 1099511627776</span><br></pre></td></tr></table></figure><p>要指定objects的最大数量，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;cachepool&#125; target_max_objects &#123;#objects&#125;</span><br></pre></td></tr></table></figure><p>例如，要flush或evict 1M个对象，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set hot-storage target_max_objects 1000000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：Ceph无法自动确定cache pool的大小，因此在此需要配置一个绝对值大小，否则flush/evict将不起作用。 如果您指定了这两个限制，则在触发阈值时，cache tiering agent将开始flushing或evicting。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：只有在达到target_max_bytes或target_max_objects时，所有client请求才会被blocked</span><br></pre></td></tr></table></figure><h3 id="RELATIVE-SIZING"><a href="#RELATIVE-SIZING" class="headerlink" title="RELATIVE SIZING"></a>RELATIVE SIZING</h3><p>cache tiering agent可以根据cache pool大小flush或evict objects（由target_max_bytes / target_max_objects指定绝对大小）。当cache pool由（有）一定比例修改过的（或脏）objects组成时，cache tiering agent将其flush到storage pool。要设置cache_target_dirty_ratio，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;cachepool&#125; cache_target_dirty_ratio &#123;0.0..1.0&#125;</span><br></pre></td></tr></table></figure><p>例如，将值设置为0.4将在修改过的（脏的）objects达到cache pool的容量40％时开始flushing：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set hot-storage cache_target_dirty_ratio 0.4</span><br></pre></td></tr></table></figure><p>当脏objects达到其容量的一定比例时，以较高的速度flush脏objects。要设置cache_target_dirty_high_ratio：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;cachepool&#125; cache_target_dirty_high_ratio &#123;0.0..1.0&#125;</span><br></pre></td></tr></table></figure><p>例如，将值设置为0.6将在脏objects达到cache pool容量的60％时开始大量flush脏objects。显然，我们最好设置dirty_ratio和full_ratio之间的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set hot-storage cache_target_dirty_high_ratio 0.6</span><br></pre></td></tr></table></figure><p>当cache pool达到其容量的一定比例时，cache tiering agent将驱逐objects以保持可用容量。要设置cache_target_full_ratio，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;cachepool&#125; cache_target_full_ratio &#123;0.0..1.0&#125;</span><br></pre></td></tr></table></figure><p>例如，将值设置为0.8，当它们达到cache pool容量的80％时，开始flushing未修改的（干净）objects：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set hot-storage cache_target_full_ratio 0.8</span><br></pre></td></tr></table></figure><h3 id="CACHE-AGE"><a href="#CACHE-AGE" class="headerlink" title="CACHE AGE"></a>CACHE AGE</h3><p>您可以在cache tiering agent将最近修改的（或脏的）object刷新到backing storage pool之前指定object的最小age：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;cachepool&#125; cache_min_flush_age &#123;#seconds&#125;</span><br></pre></td></tr></table></figure><p>例如，要在10分钟后flush修改的（或脏的）objects，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set hot-storage cache_min_flush_age 600</span><br></pre></td></tr></table></figure><p>您可以指定object在缓存层被evict之前的最小age：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool &#123;cache-tier&#125; cache_min_evict_age &#123;#seconds&#125;</span><br></pre></td></tr></table></figure><p>例如，要在30分钟后evict object，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set hot-storage cache_min_evict_age 1800</span><br></pre></td></tr></table></figure><h2 id="REMOVING-A-CACHE-TIER"><a href="#REMOVING-A-CACHE-TIER" class="headerlink" title="REMOVING A CACHE TIER"></a>REMOVING A CACHE TIER</h2><p>删除cache tier取决于它是writeback cache还是read-only cache。</p><h3 id="REMOVING-A-READ-ONLY-CACHE"><a href="#REMOVING-A-READ-ONLY-CACHE" class="headerlink" title="REMOVING A READ-ONLY CACHE"></a>REMOVING A READ-ONLY CACHE</h3><p>由于read-only cache中没有修改过的（脏的）数据，因此可以直接禁用并删除它，在缓存中objects的最新更改不会丢失。</p><p>1、将cache-mode更改为none以禁用它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier cache-mode &#123;cachepool&#125; none</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier cache-mode hot-storage none</span><br></pre></td></tr></table></figure><p>2、从backing pool上移除cache pool。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier remove &#123;storagepool&#125; &#123;cachepool&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier remove cold-storage hot-storage</span><br></pre></td></tr></table></figure><h3 id="REMOVING-A-WRITEBACK-CACHE"><a href="#REMOVING-A-WRITEBACK-CACHE" class="headerlink" title="REMOVING A WRITEBACK CACHE"></a>REMOVING A WRITEBACK CACHE</h3><p>由于writeback cache中可能修改了数据，因此必须采取措施，确保在禁用和删除缓存中的objects之前不会丢失任何最新更改。</p><p>1、将cache mode更改为forward，以便最新的和修改的objects将flush到backing storage pool。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier cache-mode &#123;cachepool&#125; forward</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier cache-mode hot-storage forward</span><br></pre></td></tr></table></figure><p>2、确保cache pool已被flush。 这可能需要几分钟的时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rados -p &#123;cachepool&#125; ls</span><br></pre></td></tr></table></figure><p>如果cache pool仍有objects，则可以手动flush它们。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rados -p &#123;cachepool&#125; cache-flush-evict-all</span><br></pre></td></tr></table></figure><p>3、删除overlay，以便client不会将流量导向缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier remove-overlay &#123;storagetier&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier remove-overlay cold-storage</span><br></pre></td></tr></table></figure><p>4、最后，从backing storage pool上移除cache tier pool。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier remove &#123;storagepool&#125; &#123;cachepool&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd tier remove cold-storage hot-storage</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-Luminous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CEPH ERASURE CODE</title>
      <link href="/2018/05/12/CEPH-ERASURE-CODE/"/>
      <url>/2018/05/12/CEPH-ERASURE-CODE/</url>
      
        <content type="html"><![CDATA[<p>为了承受OSD丢失，一个Ceph pool与一个类型相关联（大多数情况下每个磁盘有一个OSD）。当创建pool时，默认选择replicate，这意味着每个object都被复制到多个磁盘上。可以使用Erasure Code pool类型替代replicate，以节省空间。</p><h2 id="CREATING-A-SAMPLE-ERASURE-CODED-POOL"><a href="#CREATING-A-SAMPLE-ERASURE-CODED-POOL" class="headerlink" title="CREATING A SAMPLE ERASURE CODED POOL"></a>CREATING A SAMPLE ERASURE CODED POOL</h2><p>最简单的erasure coded pool相当于RAID5，并且至少需要三台主机：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ceph osd pool create ecpool 12 12 erasure</span><br><span class="line">pool 'ecpool' created</span><br><span class="line"><span class="meta">$</span> echo ABCDEFGHI | rados --pool ecpool put NYAN -</span><br><span class="line"><span class="meta">$</span> rados --pool ecpool get NYAN -</span><br><span class="line">ABCDEFGHI</span><br></pre></td></tr></table></figure><p>请注意，pool 中的12表示placement groups的数量。</p><h2 id="ERASURE-CODE-PROFILES"><a href="#ERASURE-CODE-PROFILES" class="headerlink" title="ERASURE CODE PROFILES"></a>ERASURE CODE PROFILES</h2><p>默认的erasure code profile会承受丢失1个OSD。它相当于一个大小为2的replicated pool，但需要1.5TB而不是2TB来存储1TB的数据。默认profile显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ceph osd erasure-code-profile get default</span><br><span class="line">k=2</span><br><span class="line">m=1</span><br><span class="line">plugin=jerasure</span><br><span class="line">crush-failure-domain=host</span><br><span class="line">technique=reed_sol_van</span><br></pre></td></tr></table></figure><p>选择正确的profile非常重要，因为在创建pool后无法对其进行修改：需要创建具有不同profile的新pool，并将先前pool中的所有objects都移动到新的pool中。</p><p>profile最重要的参数是K，M和crush-failure-domain，因为它们定义了存储开销和数据持久性。例如，期望在系统架构中必须承受两个racks间的损失，并且控制额外增加40％存储开销，则可以定义以下profile：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ceph osd erasure-code-profile set myprofile \</span><br><span class="line">   k=3 \</span><br><span class="line">   m=2 \</span><br><span class="line">   crush-failure-domain=rack</span><br><span class="line"><span class="meta">$</span> ceph osd pool create ecpool 12 12 erasure myprofile</span><br><span class="line"><span class="meta">$</span> echo ABCDEFGHI | rados --pool ecpool put NYAN -</span><br><span class="line"><span class="meta">$</span> rados --pool ecpool get NYAN -</span><br><span class="line">ABCDEFGHI</span><br></pre></td></tr></table></figure><p>NYAN object将被分成三部分（K = 3），并创建两个附加chunks（M = 2）。M的值定义了可以同时丢失多少OSD而不损失任何数据。crush-failure-domain = rack将创建一个CRUSH rule，以确保没有两个chunks存储在同一个rack中。</p><p><img src="http://docs.ceph.com/docs/master/_images/ditaa-96fe8c3c73e5e54cf27fa8a4d64ed08d17679ba3.png" alt></p><p>更多信息可以在<a href="http://docs.ceph.com/docs/master/rados/operations/erasure-code-profile/" target="_blank" rel="noopener">erasure code profiles documentation</a>中找到。</p><h2 id="ERASURE-CODING-WITH-OVERWRITES"><a href="#ERASURE-CODING-WITH-OVERWRITES" class="headerlink" title="ERASURE CODING WITH OVERWRITES"></a>ERASURE CODING WITH OVERWRITES</h2><p>默认情况下，erasure coded pools仅适用于像RGW那样，完整object writes和appends的场景。Luminous版本，可以为每个pool设置启用erasure coded pool的partial writes。 这让RBD和CephFS可以将他们的数据存储在erasure coded pool中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set ec_pool allow_ec_overwrites true</span><br></pre></td></tr></table></figure><p>这只能对bluestore OSD上的pool启用，因为bluestore的checksumming用于在deep-scrub过程中检查bitrot或其他corruption。除了不安全之外，使用filestore进行ec overwrites，相对于bluestore性能低。</p><p>Erasure coded pools不支持omap（ObjectMap），因此要将它们与RBD和CephFS一起使用，必须明确指示它们将data存储在ec pool中，将metadata存储在replicated pool中。对于RBD，这意味着在创建image时，需要使用–data-pool指定erasure coded pool：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbd create --size 1G --data-pool ec_pool replicated_pool/image_name</span><br></pre></td></tr></table></figure><p>对于CephFS，在创建file system时或者通过<a href="http://docs.ceph.com/docs/master/cephfs/file-layouts/" target="_blank" rel="noopener">file layouts</a>设定一个erasure coded pool作为默认的data pool。</p><h2 id="ERASURE-CODED-POOL-AND-CACHE-TIERING"><a href="#ERASURE-CODED-POOL-AND-CACHE-TIERING" class="headerlink" title="ERASURE CODED POOL AND CACHE TIERING"></a>ERASURE CODED POOL AND CACHE TIERING</h2><p>Erasure coded pools需要比replicated pools更多的资源，并且缺少一些功能，如omap。为了克服这些限制，可以在erasure coded pool之前设置一个<a href="http://docs.ceph.com/docs/master/rados/operations/cache-tiering/" target="_blank" rel="noopener">cache tier</a>。</p><p>例如，hot-storage pool由fast storage设备组成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ceph osd tier add ecpool hot-storage</span><br><span class="line"><span class="meta">$</span> ceph osd tier cache-mode hot-storage writeback</span><br><span class="line"><span class="meta">$</span> ceph osd tier set-overlay ecpool hot-storage</span><br></pre></td></tr></table></figure><p>hot-storage pool作为ecpool的tier，将数据以writeback模式回写至ecpool，所以每次write和read这个ecpool的时候，实际使用的是hot-storage。</p><p>更多信息可以在<a href="http://docs.ceph.com/docs/master/rados/operations/cache-tiering/" target="_blank" rel="noopener">cache tiering documentation</a>中找到。</p><h2 id="GLOSSARY"><a href="#GLOSSARY" class="headerlink" title="GLOSSARY"></a>GLOSSARY</h2><p>chunk</p><p>当encoding function被调用时，它返回相同大小的chunks。Data chunks可以连接起来重建original object和coding chunks，这些chunks可以用来重建丢失的chunk。</p><p>K</p><p>data chunks的数量，即original object被划分成chunks的数量。例如，如果K = 2，10KB objects分为每个5KB的K个objects。</p><p>M</p><p>coding chunks的数量，即由encoding functions计算的附加chunks的数量。如果有2个coding chunks，这意味着2个OSD可以在不丢失数据的情况下out。</p><h2 id="TABLE-OF-CONTENT"><a href="#TABLE-OF-CONTENT" class="headerlink" title="TABLE OF CONTENT"></a>TABLE OF CONTENT</h2><p><a href="http://docs.ceph.com/docs/master/rados/operations/erasure-code-profile/" target="_blank" rel="noopener">Erasure code profiles</a><br><a href="http://docs.ceph.com/docs/master/rados/operations/erasure-code-jerasure/" target="_blank" rel="noopener">Jerasure erasure code plugin</a><br><a href="http://docs.ceph.com/docs/master/rados/operations/erasure-code-isa/" target="_blank" rel="noopener">ISA erasure code plugin</a><br><a href="http://docs.ceph.com/docs/master/rados/operations/erasure-code-lrc/" target="_blank" rel="noopener">Locally repairable erasure code plugin</a><br><a href="http://docs.ceph.com/docs/master/rados/operations/erasure-code-shec/" target="_blank" rel="noopener">SHEC erasure code plugin</a></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/CEPH-ERASURE-CODE/ec.png" alt></p><p>ObjectMap参考链接：</p><p>【1】<a href="http://bean-li.github.io/ceph-omap" target="_blank" rel="noopener">http://bean-li.github.io/ceph-omap</a></p><p>【2】<a href="https://my.oschina.net/u/2460844/blog/604530" target="_blank" rel="noopener">https://my.oschina.net/u/2460844/blog/604530</a></p><p>【3】<a href="http://www.wzxue.com/ceph-filestore" target="_blank" rel="noopener">http://www.wzxue.com/ceph-filestore</a></p><p>ceph中所有块设备、对象存储、文件存储最后都要转化为对象（object），这个object包含3个元素：data、xattr、omap。</p><ul><li>data是保存对象的数据。</li><li>xattr是保存对象的扩展属性，每个对象文件都可以设置文件的属性，这个属性是一个key/value值对，但是受到文件系统的限制，key/value对的个数和每个value的大小都进行了限制。</li><li>如果要设置的对象的key/value不能存储在文件的扩展属性中，还存在另外一种方式保存omap，omap实际上是保存到了key/vaule  值对的数据库levelDB（L版是RocksDB）中，在这里value的值限制要比xattr中好的多。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-Luminous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iozone使用</title>
      <link href="/2018/05/09/iozone%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/05/09/iozone%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="yum安装方法"><a href="#yum安装方法" class="headerlink" title="yum安装方法"></a>yum安装方法</h3><p>1、安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y iozone</span><br></pre></td></tr></table></figure><p>2、参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iozone -l 1 -u 1 -r 16k -s 64g -F</span><br></pre></td></tr></table></figure><p>-l是最小进程数量lower  </p><p>-u是最大进程数量upper</p><p>-r是读写的基本单位，16k作为读写的基本单位，根据模拟应用程序进行合理设置（目的是模拟真实应用）</p><p>-s指定默认读写的大小，建议不要指定的太小，一般指定的是内存的2倍</p><p>-F指定测试文件位置，可以是多个</p><h3 id="编译安装方法"><a href="#编译安装方法" class="headerlink" title="编译安装方法"></a>编译安装方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">wget http://www.iozone.org/src/current/iozone3_471.tar</span><br><span class="line">tar xvf iozone3_471.tar</span><br><span class="line">cd iozone3_471/src/current/</span><br><span class="line"></span><br><span class="line">ARM平台：</span><br><span class="line">make linux-arm</span><br><span class="line">X86平台：</span><br><span class="line">make linux-AMD64</span><br><span class="line"></span><br><span class="line">cp iozone /usr/bin/</span><br><span class="line">./iozone -+u -+d -+p -+t -z -l 1 -u 1 -r 4k -s 1G -F /home/node-3/1-FILE</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go并发编程案例解析</title>
      <link href="/2018/05/01/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/05/01/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>Go并发编程案例解析学习笔记</p><p>课程地址：<a href="https://www.imooc.com/video/17021" target="_blank" rel="noopener">https://www.imooc.com/video/17021</a></p><p>课程教师：<a href="https://www.imooc.com/u/6498986/courses?sort=publish" target="_blank" rel="noopener">麦可同学</a></p><h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><ul><li>并发编程基础知识介绍</li><li>日志监控系统实战</li><li>课程总结</li></ul><h3 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h3><ul><li>有一定的编程基础</li></ul><ul><li>了解Golang基本语法</li><li>有并发编程经验就更好了</li></ul><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-143535%402x.png" alt></p><h2 id="常见并发模型讲解"><a href="#常见并发模型讲解" class="headerlink" title="常见并发模型讲解"></a>常见并发模型讲解</h2><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-144809@2x.png" alt></p><h3 id="Golang并发实现"><a href="#Golang并发实现" class="headerlink" title="Golang并发实现"></a>Golang并发实现</h3><ul><li>程序并发执行（goroutine）</li><li>多个goroutine间的数据同步与通信（channels）</li><li>多个channels选择数据读取或者写入（select）</li></ul><h3 id="Goroutines（程序并发执行）"><a href="#Goroutines（程序并发执行）" class="headerlink" title="Goroutines（程序并发执行）"></a>Goroutines（程序并发执行）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo()//执行函数foo，程序等待函数foo返回</span><br><span class="line"></span><br><span class="line">go foo()//执行函数foo</span><br><span class="line">bar()//不用等待foo返回</span><br></pre></td></tr></table></figure><h3 id="Channels（多个goroutines间的数据同步与通信）"><a href="#Channels（多个goroutines间的数据同步与通信）" class="headerlink" title="Channels（多个goroutines间的数据同步与通信）"></a>Channels（多个goroutines间的数据同步与通信）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c := make(chan string)//创建一个channel</span><br><span class="line">go func()&#123;</span><br><span class="line">    time.Sleep(1 * time.Second)</span><br><span class="line">    c &lt;- &quot;message from closure&quot;//发送数据到channel中</span><br><span class="line">&#125;()//这个()表示调用该函数</span><br><span class="line">msg := &lt;-c//阻塞直到接收到数据</span><br></pre></td></tr></table></figure><h3 id="Select（从多个channel中读取或写入数据）"><a href="#Select（从多个channel中读取或写入数据）" class="headerlink" title="Select（从多个channel中读取或写入数据）"></a>Select（从多个channel中读取或写入数据）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select &#123;</span><br><span class="line">    case v := &lt;-c1:</span><br><span class="line">    fmt.Println(&quot;channel 1 sends&quot;, v)</span><br><span class="line">    case v := &lt;-c2:</span><br><span class="line">    fmt.Println(&quot;channel 2 sends&quot;, v&quot;)</span><br><span class="line">    default://可选</span><br><span class="line">    fmt.Println(&quot;neither channel was ready&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并发拓展：并发与并行"><a href="#并发拓展：并发与并行" class="headerlink" title="并发拓展：并发与并行"></a>并发拓展：并发与并行</h2><p>定义：</p><ul><li>并发：指同一时刻，系统通过调度，来回切换交替的运行多个任务，“看起来”是同时进行</li><li>并行：指同一时刻，两个任务“真正的”同时进行</li></ul><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-151148@2x.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-151435@2x.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-152335@2x.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-152356@2x.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-152503@2x.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-152603@2x.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-152657@2x.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-152740@2x.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-152814@2x.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-152904@2x.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180501-143535@2x.png" alt></p><p>可以把《实时读取》《解析》《写入》拆成多个模块，使用多个goroutine。那么这么多个goroutine是并行执行还是并发执行呢？换句话说，多个goroutine执行，是一个CPU核心通过不断的切换时间片，并发的执行？还是将goroutine分散到多核的CPU并行的执行？这个问题Golang为我们屏蔽掉了，编程人员不需要考虑这个问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>将复杂的任务拆分，通过goroutine去并发执行</li><li>通过channel做数据的同步与通信</li></ul><h2 id="Golang中的面向对象"><a href="#Golang中的面向对象" class="headerlink" title="Golang中的面向对象"></a>Golang中的面向对象</h2><p>Golang中没有类和对象的概念，但是支持</p><ul><li>struct</li><li>interface</li></ul><p>传统的面向对象中，继承、封装、多态都可以基于这两个特性来实现。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体，baz相当于成员变量，可以看做是类</span></span><br><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> &#123;</span><br><span class="line">    baz <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收者Receiver，接收之后，就可以使用结构体中的字段了，相当于成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *Foo)</span> <span class="title">echo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(f.baz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在main中初始化结构体，相当于实例化一个类，然后调用成员方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    f := Foo&#123;baz: <span class="string">"hello, struct"</span>&#125;</span><br><span class="line">    f.echo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承（个人认为这是设计模式中的组合）"><a href="#继承（个人认为这是设计模式中的组合）" class="headerlink" title="继承（个人认为这是设计模式中的组合）"></a>继承（个人认为这是设计模式中的组合）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Foo结构体</span></span><br><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> &#123;</span><br><span class="line">    baz <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收者Receiver，Foo成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *Foo)</span> <span class="title">echo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(f.baz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Bar结构体中直接把Foo结构体写进来，这个叫匿名字段。这样写之后，Bar结构体就拥有了Foo结构体的所有特性</span></span><br><span class="line"><span class="keyword">type</span> Bar <span class="keyword">struct</span> &#123;</span><br><span class="line">    Foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在main函数中初始化Bar结构体，然后直接调用echo()方法，echo()方法其实是Foo中的成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b := Bar&#123;Foo&#123;baz: <span class="string">"hello, struct"</span>&#125;&#125;</span><br><span class="line">    b.echo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个interface，可以看成是一组方法的集合，通过interface定义一些对象的行为</span></span><br><span class="line"><span class="keyword">type</span> Foo <span class="keyword">interface</span> &#123;</span><br><span class="line">    qux()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Bar和Baz两个结构体</span></span><br><span class="line"><span class="keyword">type</span> Bar <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="keyword">type</span> Baz <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bar和Baz两个结构体分别实现了qux()函数，这样就可以说Bar和Baz都是Foo这种类型了。这里并没有显示的说我实现了Foo这个接口，只要结构体中实现了qux()这个函数，就认为它实现了这个接口，这就是所谓的非侵入式接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bar)</span> <span class="title">qux</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Baz)</span> <span class="title">qux</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在main中，定义了f的变量，它的类型是Foo。无论是Bar还是Baz都可以赋值给f这个变量，这也证明了Bar&#123;&#125;和Baz&#123;&#125;是同一类型。可以说类型相同，实现不同</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f Foo</span><br><span class="line">    f = Bar&#123;&#125;</span><br><span class="line">    f = Baz&#123;&#125;</span><br><span class="line">    fmt.Println(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日志监控程序的实现"><a href="#日志监控程序的实现" class="headerlink" title="日志监控程序的实现"></a>日志监控程序的实现</h2><h3 id="日志分析系统实战"><a href="#日志分析系统实战" class="headerlink" title="日志分析系统实战"></a>日志分析系统实战</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LogProcess <span class="keyword">struct</span> &#123;</span><br><span class="line">rc <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">wc <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">path <span class="keyword">string</span><span class="comment">// 读取文件的路径</span></span><br><span class="line">influxDBDsn<span class="keyword">string</span><span class="comment">// influx data source</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LogProcess)</span> <span class="title">ReadFromFile</span><span class="params">()</span></span> &#123;<span class="comment">// 需要代码优化，只能从文件中读取数据</span></span><br><span class="line"><span class="comment">// 读取模块</span></span><br><span class="line">line := <span class="string">"message"</span></span><br><span class="line">l.rc &lt;- line</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LogProcess)</span> <span class="title">Process</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 解析模块</span></span><br><span class="line">data := &lt;- l.rc</span><br><span class="line">l.wc &lt;- strings.ToUpper(data)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LogProcess)</span> <span class="title">WriteToInfluxDB</span><span class="params">()</span></span> &#123;<span class="comment">// 需要代码优化，只能向influxDB中写入数据</span></span><br><span class="line"><span class="comment">// 写入模块</span></span><br><span class="line">fmt.Println(&lt;-l.wc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lp := LogProcess&#123;</span><br><span class="line">rc : <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>),</span><br><span class="line">wc : <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>),</span><br><span class="line">path: <span class="string">"/tmp/access.log"</span>,</span><br><span class="line">influxDBDsn: <span class="string">""</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> lp.ReadFromFile()</span><br><span class="line"><span class="keyword">go</span> lp.Process()</span><br><span class="line"><span class="keyword">go</span> lp.WriteToInfluxDB()</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口，抽象读取模块</span></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">Read(rc <span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadFromFile <span class="keyword">struct</span> &#123;</span><br><span class="line">path <span class="keyword">string</span><span class="comment">// 读取文件的路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *ReadFromFile)</span> <span class="title">Read</span><span class="params">(rc <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 读取模块</span></span><br><span class="line">line := <span class="string">"message"</span></span><br><span class="line">rc &lt;- line</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口，抽象写入模块</span></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">Write(wc <span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WriteToInfluxDB <span class="keyword">struct</span> &#123;</span><br><span class="line">influxDBDsn<span class="keyword">string</span><span class="comment">//influx data source</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *WriteToInfluxDB)</span> <span class="title">Write</span><span class="params">(wc <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 写入模块</span></span><br><span class="line">fmt.Println(&lt;-wc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LogProcess <span class="keyword">struct</span> &#123;</span><br><span class="line">rc <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">wc <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">read Reader</span><br><span class="line">write Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LogProcess)</span> <span class="title">Process</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 解析模块</span></span><br><span class="line">data := &lt;- l.rc</span><br><span class="line">l.wc &lt;- strings.ToUpper(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := &amp;ReadFromFile&#123;</span><br><span class="line">path: <span class="string">"/tmp/access.log"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w := &amp;WriteToInfluxDB&#123;</span><br><span class="line">influxDBDsn: <span class="string">""</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lp := LogProcess&#123;</span><br><span class="line">rc : <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>),</span><br><span class="line">wc : <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>),</span><br><span class="line">read: r,</span><br><span class="line">write: w,</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">go</span> lp.read.Read(lp.rc)</span><br><span class="line"><span class="keyword">go</span> lp.Process()</span><br><span class="line"><span class="keyword">go</span> lp.write.Write(lp.wc)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取模块实现"><a href="#读取模块实现" class="headerlink" title="读取模块实现"></a>读取模块实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个接口，抽象读取模块和写入模块</span></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">Read(rc <span class="keyword">chan</span> []<span class="keyword">byte</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadFromFile <span class="keyword">struct</span> &#123;</span><br><span class="line">path <span class="keyword">string</span><span class="comment">// 读取文件的路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *ReadFromFile)</span> <span class="title">Read</span><span class="params">(rc <span class="keyword">chan</span> []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 读取模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 打开文件</span></span><br><span class="line">f,err := os.Open(l.path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"open file error : %s \n"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 从文件末尾开始逐行读取文件内容</span></span><br><span class="line">f.Seek(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">rd := bufio.NewReader(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 写入到Read Channel中</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, err := rd.ReadBytes(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"ReadBytes error : %s"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">rc &lt;- line[:<span class="built_in">len</span>(line) - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">Write(wc <span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WriteToInfluxDB <span class="keyword">struct</span> &#123;</span><br><span class="line">influxDBDsn<span class="keyword">string</span><span class="comment">//influx data source</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *WriteToInfluxDB)</span> <span class="title">Write</span><span class="params">(wc <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 写入模块</span></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> wc&#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LogProcess <span class="keyword">struct</span> &#123;</span><br><span class="line">rc <span class="keyword">chan</span> []<span class="keyword">byte</span></span><br><span class="line">wc <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">read Reader</span><br><span class="line">write Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LogProcess)</span> <span class="title">Process</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 解析模块</span></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> l.rc &#123;</span><br><span class="line">l.wc &lt;- strings.ToUpper(<span class="keyword">string</span>(v))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := &amp;ReadFromFile&#123;</span><br><span class="line">path: <span class="string">"/tmp/access.log"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w := &amp;WriteToInfluxDB&#123;</span><br><span class="line">influxDBDsn: <span class="string">""</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lp := LogProcess&#123;</span><br><span class="line">rc : <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="keyword">byte</span>),</span><br><span class="line">wc : <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>),</span><br><span class="line">read: r,</span><br><span class="line">write: w,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> lp.read.Read(lp.rc)</span><br><span class="line"><span class="keyword">go</span> lp.Process()</span><br><span class="line"><span class="keyword">go</span> lp.write.Write(lp.wc)</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">60</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析模块的实现"><a href="#解析模块的实现" class="headerlink" title="解析模块的实现"></a>解析模块的实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个接口，抽象读取模块和写入模块</span></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">Read(rc <span class="keyword">chan</span> []<span class="keyword">byte</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadFromFile <span class="keyword">struct</span> &#123;</span><br><span class="line">path <span class="keyword">string</span><span class="comment">// 读取文件的路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *ReadFromFile)</span> <span class="title">Read</span><span class="params">(rc <span class="keyword">chan</span> []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 读取模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 打开文件</span></span><br><span class="line">f,err := os.Open(l.path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"open file error : %s \n"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 从文件末尾开始逐行读取文件内容</span></span><br><span class="line">f.Seek(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">rd := bufio.NewReader(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 写入到Read Channel中</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, err := rd.ReadBytes(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"ReadBytes error : %s"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">rc &lt;- line[:<span class="built_in">len</span>(line) - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">Write(wc <span class="keyword">chan</span> *Message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WriteToInfluxDB <span class="keyword">struct</span> &#123;</span><br><span class="line">influxDBDsn<span class="keyword">string</span><span class="comment">//influx data source</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *WriteToInfluxDB)</span> <span class="title">Write</span><span class="params">(wc <span class="keyword">chan</span> *Message)</span></span> &#123;</span><br><span class="line"><span class="comment">// 写入模块</span></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> wc&#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LogProcess <span class="keyword">struct</span> &#123;</span><br><span class="line">rc <span class="keyword">chan</span> []<span class="keyword">byte</span></span><br><span class="line">wc <span class="keyword">chan</span> *Message</span><br><span class="line">read Reader</span><br><span class="line">write Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">TimeLocaltime.Time</span><br><span class="line">ByteSent<span class="keyword">int</span></span><br><span class="line">Path, Method, Scheme, Status<span class="keyword">string</span></span><br><span class="line">UpstreamTime, RequestTime<span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LogProcess)</span> <span class="title">Process</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 解析模块</span></span><br><span class="line"><span class="comment">// 172.0.0.12 - - [04/Mar/2018:13:49:52 +0000] http "GET /foo?query=t HTTP:1.0" 200 2133 "-" "KeepAliveClient" "-" 1.005 1.854</span></span><br><span class="line"></span><br><span class="line">r := regexp.MustCompile(<span class="string">`([\d\.]+)\s+([^ \[]+)\s+([^ \[]+)\s+\[([^\]]+)\]\s+([a-z]+)\s+\"([^"]+)\"\s+(\d&#123;3&#125;)\s+(\d+)\s+\"([^"]+)\"\s+\"(.*?)\"\s+\"([\d\.-]+)\"\s+([\d\.-]+)\s+([\d\.-]+)`</span>)</span><br><span class="line">loc , _ := time.LoadLocation(<span class="string">"Asia/Shanghai"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 从Read Channel中读取每行日志数据</span></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> l.rc &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 正则提取所需的监控数据（path，status，method等）</span></span><br><span class="line">ret := r.FindStringSubmatch(<span class="keyword">string</span>(v))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ret) != <span class="number">14</span> &#123;</span><br><span class="line">log.Println(<span class="string">"FindStringSubmatch failed : "</span>, <span class="keyword">string</span>(v))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message := &amp;Message&#123;&#125;</span><br><span class="line">t, err := time.ParseInLocation(<span class="string">"02/Jan/2006:15:04:05 +0000"</span>, ret[<span class="number">4</span>], loc)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"ParseInLocation failed : "</span>, err.Error(), ret[<span class="number">4</span>])</span><br><span class="line">&#125;</span><br><span class="line">message.TimeLocal = t</span><br><span class="line"></span><br><span class="line">byteSent, _ := strconv.Atoi(ret[<span class="number">8</span>])</span><br><span class="line">message.ByteSent = byteSent</span><br><span class="line"></span><br><span class="line">reqSli := strings.Split(ret[<span class="number">6</span>],<span class="string">" "</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(reqSli) != <span class="number">3</span> &#123;</span><br><span class="line">log.Println(<span class="string">"string.Split failed : "</span>, ret[<span class="number">6</span>])</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">message.Method = reqSli[<span class="number">0</span>]</span><br><span class="line">u, err := url.Parse(reqSli[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"url parse failed : "</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">message.Path = u.Path</span><br><span class="line"></span><br><span class="line">message.Scheme = ret[<span class="number">5</span>]</span><br><span class="line">message.Status = ret[<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">upstreamTime, err := strconv.ParseFloat(ret[<span class="number">12</span>],<span class="number">64</span>)</span><br><span class="line">message.UpstreamTime = upstreamTime</span><br><span class="line"></span><br><span class="line">requestTime, err := strconv.ParseFloat(ret[<span class="number">13</span>], <span class="number">64</span>)</span><br><span class="line">message.RequestTime = requestTime</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 写入Write Channel</span></span><br><span class="line">l.wc &lt;- message</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := &amp;ReadFromFile&#123;</span><br><span class="line">path: <span class="string">"/tmp/access.log"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w := &amp;WriteToInfluxDB&#123;</span><br><span class="line">influxDBDsn: <span class="string">""</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lp := LogProcess&#123;</span><br><span class="line">rc : <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="keyword">byte</span>),</span><br><span class="line">wc : <span class="built_in">make</span>(<span class="keyword">chan</span> *Message),</span><br><span class="line">read: r,</span><br><span class="line">write: w,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> lp.read.Read(lp.rc)</span><br><span class="line"><span class="keyword">go</span> lp.Process()</span><br><span class="line"><span class="keyword">go</span> lp.write.Write(lp.wc)</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">60</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入模块流程讲解"><a href="#写入模块流程讲解" class="headerlink" title="写入模块流程讲解"></a>写入模块流程讲解</h3><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180504-145716@2x.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180504-145859@2x.png" alt></p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180504-150125@2x.png" alt></p><p>在URL中，<code>db=mydb</code>指定database。使用逗号做分隔’,’，<code>cpu_usage</code>表示measurement。<code>host=server01,region=us-west value=0.64 1434055562000000000</code>表示points。<code>host=server01,region=us-west</code>表示points中的tags，<code>value=0.64</code>表示points中的fields，<code>1434055562000000000</code>表示points中的time。</p><p><img src="https://raw.githubusercontent.com/lnsyyj/lnsyyj.github.io/hexo/Blog/source/_posts/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/WX20180504-160707@2x.png" alt></p><p>influxDB提供了Golang的客户端，可以使用这个客户端很方便的写入数据<code>https://github.com/influxdata/influxdb/tree/master/client</code>，首先先引入包<code>&quot;github.com/influxdata/influxdb/client/v2&quot;</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/influxdata/influxdb/client/v2"</span></span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个接口，抽象读取模块和写入模块</span></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">Read(rc <span class="keyword">chan</span> []<span class="keyword">byte</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadFromFile <span class="keyword">struct</span> &#123;</span><br><span class="line">path <span class="keyword">string</span><span class="comment">// 读取文件的路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *ReadFromFile)</span> <span class="title">Read</span><span class="params">(rc <span class="keyword">chan</span> []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 读取模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 打开文件</span></span><br><span class="line">f,err := os.Open(l.path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"open file error : %s \n"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 从文件末尾开始逐行读取文件内容</span></span><br><span class="line">f.Seek(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">rd := bufio.NewReader(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 写入到Read Channel中</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, err := rd.ReadBytes(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"ReadBytes error : %s"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">rc &lt;- line[:<span class="built_in">len</span>(line) - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">Write(wc <span class="keyword">chan</span> *Message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WriteToInfluxDB <span class="keyword">struct</span> &#123;</span><br><span class="line">influxDBDsn<span class="keyword">string</span><span class="comment">//influx data source</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *WriteToInfluxDB)</span> <span class="title">Write</span><span class="params">(wc <span class="keyword">chan</span> *Message)</span></span> &#123;</span><br><span class="line"><span class="comment">// 写入模块</span></span><br><span class="line"><span class="comment">// 1.初始化influxDB client</span></span><br><span class="line"><span class="comment">// 2.从Write Channel中读取监控数据</span></span><br><span class="line"><span class="comment">// 3.构造数据并写入influxDB</span></span><br><span class="line"></span><br><span class="line">infSli := strings.Split(l.influxDBDsn, <span class="string">"@"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new HTTPClient</span></span><br><span class="line">c, err := client.NewHTTPClient(client.HTTPConfig&#123;</span><br><span class="line">Addr:     infSli[<span class="number">0</span>],</span><br><span class="line">Username: infSli[<span class="number">1</span>],</span><br><span class="line">Password: infSli[<span class="number">2</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> wc&#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new point batch</span></span><br><span class="line">bp, err := client.NewBatchPoints(client.BatchPointsConfig&#123;</span><br><span class="line">Database:  infSli[<span class="number">3</span>],</span><br><span class="line">Precision: infSli[<span class="number">4</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a point and add to batch</span></span><br><span class="line">tags := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"Path"</span>: v.Path, <span class="string">"Method"</span>: v.Method, <span class="string">"Scheme"</span>: v.Scheme, <span class="string">"Status"</span>: v.Status&#125;</span><br><span class="line">fields := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"UpstreamTime"</span>:   v.UpstreamTime,</span><br><span class="line"><span class="string">"RequestTime"</span>: v.RequestTime,</span><br><span class="line"><span class="string">"BytesSent"</span>:   v.ByteSent,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pt, err := client.NewPoint(<span class="string">"nginx_log"</span>, tags, fields, v.TimeLocal)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">bp.AddPoint(pt)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write the batch</span></span><br><span class="line"><span class="keyword">if</span> err := c.Write(bp); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Close client resources</span></span><br><span class="line"><span class="keyword">if</span> err := c.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"write success"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LogProcess <span class="keyword">struct</span> &#123;</span><br><span class="line">rc <span class="keyword">chan</span> []<span class="keyword">byte</span></span><br><span class="line">wc <span class="keyword">chan</span> *Message</span><br><span class="line">read Reader</span><br><span class="line">write Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">TimeLocaltime.Time</span><br><span class="line">ByteSent<span class="keyword">int</span></span><br><span class="line">Path, Method, Scheme, Status<span class="keyword">string</span></span><br><span class="line">UpstreamTime, RequestTime<span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LogProcess)</span> <span class="title">Process</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 解析模块</span></span><br><span class="line"><span class="comment">// 172.0.0.12 - - [04/Mar/2018:13:49:52 +0000] http "GET /foo?query=t HTTP:1.0" 200 2133 "-" "KeepAliveClient" "-" 1.005 1.854</span></span><br><span class="line"></span><br><span class="line">r := regexp.MustCompile(<span class="string">`([\d\.]+)\s+([^ \[]+)\s+([^ \[]+)\s+\[([^\]]+)\]\s+([a-z]+)\s+\"([^"]+)\"\s+(\d&#123;3&#125;)\s+(\d+)\s+\"([^"]+)\"\s+\"(.*?)\"\s+\"([\d\.-]+)\"\s+([\d\.-]+)\s+([\d\.-]+)`</span>)</span><br><span class="line">loc , _ := time.LoadLocation(<span class="string">"Asia/Shanghai"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 从Read Channel中读取每行日志数据</span></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> l.rc &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 正则提取所需的监控数据（path，status，method等）</span></span><br><span class="line">ret := r.FindStringSubmatch(<span class="keyword">string</span>(v))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ret) != <span class="number">14</span> &#123;</span><br><span class="line">log.Println(<span class="string">"FindStringSubmatch failed : "</span>, <span class="keyword">string</span>(v))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message := &amp;Message&#123;&#125;</span><br><span class="line">t, err := time.ParseInLocation(<span class="string">"02/Jan/2006:15:04:05 +0000"</span>, ret[<span class="number">4</span>], loc)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"ParseInLocation failed : "</span>, err.Error(), ret[<span class="number">4</span>])</span><br><span class="line">&#125;</span><br><span class="line">message.TimeLocal = t</span><br><span class="line"></span><br><span class="line">byteSent, _ := strconv.Atoi(ret[<span class="number">8</span>])</span><br><span class="line">message.ByteSent = byteSent</span><br><span class="line"></span><br><span class="line">reqSli := strings.Split(ret[<span class="number">6</span>],<span class="string">" "</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(reqSli) != <span class="number">3</span> &#123;</span><br><span class="line">log.Println(<span class="string">"string.Split failed : "</span>, ret[<span class="number">6</span>])</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">message.Method = reqSli[<span class="number">0</span>]</span><br><span class="line">u, err := url.Parse(reqSli[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"url parse failed : "</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">message.Path = u.Path</span><br><span class="line"></span><br><span class="line">message.Scheme = ret[<span class="number">5</span>]</span><br><span class="line">message.Status = ret[<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">upstreamTime, err := strconv.ParseFloat(ret[<span class="number">12</span>],<span class="number">64</span>)</span><br><span class="line">message.UpstreamTime = upstreamTime</span><br><span class="line"></span><br><span class="line">requestTime, err := strconv.ParseFloat(ret[<span class="number">13</span>], <span class="number">64</span>)</span><br><span class="line">message.RequestTime = requestTime</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 写入Write Channel</span></span><br><span class="line">l.wc &lt;- message</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path, influxDsn <span class="keyword">string</span></span><br><span class="line">flag.StringVar(&amp;path, <span class="string">"path"</span>, <span class="string">"/tmp/access.log"</span>, <span class="string">"read file path"</span>)</span><br><span class="line">flag.StringVar(&amp;influxDsn, <span class="string">"influxDsn"</span>, <span class="string">"http://127.0.0.1:8086@imooc@imoocpass@nginx@s"</span>, <span class="string">"influx data source"</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">r := &amp;ReadFromFile&#123;</span><br><span class="line">path: path,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w := &amp;WriteToInfluxDB&#123;</span><br><span class="line">influxDBDsn: influxDsn,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lp := LogProcess&#123;</span><br><span class="line">rc : <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="keyword">byte</span>),</span><br><span class="line">wc : <span class="built_in">make</span>(<span class="keyword">chan</span> *Message),</span><br><span class="line">read: r,</span><br><span class="line">write: w,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> lp.read.Read(lp.rc)</span><br><span class="line"><span class="keyword">go</span> lp.Process()</span><br><span class="line"><span class="keyword">go</span> lp.write.Write(lp.wc)</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">6000</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监控模块的实现"><a href="#监控模块的实现" class="headerlink" title="监控模块的实现"></a>监控模块的实现</h3><p>1、总处理日志行数</p><p>2、系统吞吐量</p><p>3、read channel长度</p><p>4、write channel长度</p><p>5、运行总时间</p><p>6、错误数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">"strings"</span><br><span class="line">"fmt"</span><br><span class="line">"time"</span><br><span class="line">"os"</span><br><span class="line">"bufio"</span><br><span class="line">"io"</span><br><span class="line">"regexp"</span><br><span class="line">"log"</span><br><span class="line">"strconv"</span><br><span class="line">"net/url"</span><br><span class="line"></span><br><span class="line">"github.com/influxdata/influxdb/client/v2"</span><br><span class="line">"flag"</span><br><span class="line">"net/http"</span><br><span class="line">"encoding/json"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 定义两个接口，抽象读取模块和写入模块</span><br><span class="line">type Reader interface &#123;</span><br><span class="line">Read(rc chan []byte)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type ReadFromFile struct &#123;</span><br><span class="line">path string// 读取文件的路径</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (l *ReadFromFile) Read(rc chan []byte) &#123;</span><br><span class="line">// 读取模块</span><br><span class="line"></span><br><span class="line">// 1. 打开文件</span><br><span class="line">f,err := os.Open(l.path)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(fmt.Sprintf("open file error : %s \n", err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 从文件末尾开始逐行读取文件内容</span><br><span class="line">f.Seek(0,2)</span><br><span class="line">rd := bufio.NewReader(f)</span><br><span class="line"></span><br><span class="line">// 3. 写入到Read Channel中</span><br><span class="line">for &#123;</span><br><span class="line">line, err := rd.ReadBytes('\n')</span><br><span class="line">if err == io.EOF &#123;</span><br><span class="line">time.Sleep(500 * time.Millisecond)</span><br><span class="line">continue</span><br><span class="line">&#125; else if err != nil &#123;</span><br><span class="line">panic(fmt.Sprintf("ReadBytes error : %s", err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">TypeMonitorChan &lt;- TypeHandleLine</span><br><span class="line">rc &lt;- line[:len(line) - 1]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Writer interface &#123;</span><br><span class="line">Write(wc chan *Message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type WriteToInfluxDB struct &#123;</span><br><span class="line">influxDBDsnstring//influx data source</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (l *WriteToInfluxDB) Write(wc chan *Message) &#123;</span><br><span class="line">// 写入模块</span><br><span class="line">// 1.初始化influxDB client</span><br><span class="line">// 2.从Write Channel中读取监控数据</span><br><span class="line">// 3.构造数据并写入influxDB</span><br><span class="line"></span><br><span class="line">infSli := strings.Split(l.influxDBDsn, "@")</span><br><span class="line"></span><br><span class="line">// Create a new HTTPClient</span><br><span class="line">c, err := client.NewHTTPClient(client.HTTPConfig&#123;</span><br><span class="line">Addr:     infSli[0],</span><br><span class="line">Username: infSli[1],</span><br><span class="line">Password: infSli[2],</span><br><span class="line">&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for v := range wc&#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">defer c.Close()</span><br><span class="line"></span><br><span class="line">// Create a new point batch</span><br><span class="line">bp, err := client.NewBatchPoints(client.BatchPointsConfig&#123;</span><br><span class="line">Database:  infSli[3],</span><br><span class="line">Precision: infSli[4],</span><br><span class="line">&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Create a point and add to batch</span><br><span class="line">tags := map[string]string&#123;"Path": v.Path, "Method": v.Method, "Scheme": v.Scheme, "Status": v.Status&#125;</span><br><span class="line">fields := map[string]interface&#123;&#125;&#123;</span><br><span class="line">"UpstreamTime":   v.UpstreamTime,</span><br><span class="line">"RequestTime": v.RequestTime,</span><br><span class="line">"BytesSent":   v.ByteSent,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pt, err := client.NewPoint("nginx_log", tags, fields, v.TimeLocal)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">bp.AddPoint(pt)</span><br><span class="line"></span><br><span class="line">// Write the batch</span><br><span class="line">if err := c.Write(bp); err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Close client resources</span><br><span class="line">if err := c.Close(); err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println("write success")</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type LogProcess struct &#123;</span><br><span class="line">rc chan []byte</span><br><span class="line">wc chan *Message</span><br><span class="line">read Reader</span><br><span class="line">write Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Message struct &#123;</span><br><span class="line">TimeLocaltime.Time</span><br><span class="line">ByteSentint</span><br><span class="line">Path, Method, Scheme, Statusstring</span><br><span class="line">UpstreamTime, RequestTimefloat64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//系统状态监控</span><br><span class="line">type SystemInfo struct &#123;</span><br><span class="line">HandleLine int `json:"HandleLine"`//总处理日志行数</span><br><span class="line">Tps float64`json:"tps"`//系统吞吐量</span><br><span class="line">ReadChanLenint `json:"ReadChanLen"`//read channel 长度</span><br><span class="line">WriteChanLen int`json:"WriteChanLen"`//write channel 长度</span><br><span class="line">RunTimestring`json:"RunTime"`//运行总时间</span><br><span class="line">ErrNumint`json:"ErrNum"`//错误数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">TypeHandleLine = 0</span><br><span class="line">TypeErrNum = 1</span><br><span class="line">)</span><br><span class="line">var TypeMonitorChan = make(chan int, 200)</span><br><span class="line"></span><br><span class="line">type Monitor struct &#123;</span><br><span class="line">startTime time.Time</span><br><span class="line">data SystemInfo</span><br><span class="line">tpsSli[]int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (m *Monitor) start(lp *LogProcess) &#123;</span><br><span class="line">// 消费数据</span><br><span class="line">go func() &#123;</span><br><span class="line">for n := range TypeMonitorChan &#123;</span><br><span class="line">switch n &#123;</span><br><span class="line">case TypeErrNum:</span><br><span class="line">m.data.ErrNum += 1</span><br><span class="line">case TypeHandleLine:</span><br><span class="line">m.data.HandleLine += 1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">ticker := time.NewTicker(time.Second * 5)</span><br><span class="line">go func() &#123;</span><br><span class="line">for &#123;</span><br><span class="line">&lt;-ticker.C</span><br><span class="line">m.tpsSli = append(m.tpsSli, m.data.HandleLine)</span><br><span class="line">if len(m.tpsSli) &gt; 2 &#123;</span><br><span class="line">m.tpsSli = m.tpsSli[1:]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">http.HandleFunc("/monitor", func(writer http.ResponseWriter, request *http.Request) &#123;</span><br><span class="line">m.data.RunTime = time.Now().Sub(m.startTime).String()</span><br><span class="line">m.data.WriteChanLen = len(lp.wc)</span><br><span class="line">m.data.ReadChanLen = len(lp.rc)</span><br><span class="line"></span><br><span class="line">if len(m.tpsSli) &gt;= 2 &#123;</span><br><span class="line">m.data.Tps = float64(m.tpsSli[1] - m.tpsSli[0]) / 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret, _ := json.MarshalIndent(m.data,"","\t")</span><br><span class="line">io.WriteString(writer, string(ret))</span><br><span class="line">&#125;)</span><br><span class="line">http.ListenAndServe(":9193", nil)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (l *LogProcess) Process() &#123;</span><br><span class="line">// 解析模块</span><br><span class="line">// 172.0.0.12 - - [04/Mar/2018:13:49:52 +0000] http "GET /foo?query=t HTTP:1.0" 200 2133 "-" "KeepAliveClient" "-" 1.005 1.854</span><br><span class="line"></span><br><span class="line">r := regexp.MustCompile(`([\d\.]+)\s+([^ \[]+)\s+([^ \[]+)\s+\[([^\]]+)\]\s+([a-z]+)\s+\"([^"]+)\"\s+(\d&#123;3&#125;)\s+(\d+)\s+\"([^"]+)\"\s+\"(.*?)\"\s+\"([\d\.-]+)\"\s+([\d\.-]+)\s+([\d\.-]+)`)</span><br><span class="line">loc , _ := time.LoadLocation("Asia/Shanghai")</span><br><span class="line"></span><br><span class="line">// 1. 从Read Channel中读取每行日志数据</span><br><span class="line">for v := range l.rc &#123;</span><br><span class="line"></span><br><span class="line">// 2. 正则提取所需的监控数据（path，status，method等）</span><br><span class="line">ret := r.FindStringSubmatch(string(v))</span><br><span class="line">if len(ret) != 14 &#123;</span><br><span class="line">TypeMonitorChan &lt;- TypeErrNum</span><br><span class="line">log.Println("FindStringSubmatch failed : ", string(v))</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message := &amp;Message&#123;&#125;</span><br><span class="line">t, err := time.ParseInLocation("02/Jan/2006:15:04:05 +0000", ret[4], loc)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">TypeMonitorChan &lt;- TypeErrNum</span><br><span class="line">log.Println("ParseInLocation failed : ", err.Error(), ret[4])</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">message.TimeLocal = t</span><br><span class="line"></span><br><span class="line">byteSent, _ := strconv.Atoi(ret[8])</span><br><span class="line">message.ByteSent = byteSent</span><br><span class="line"></span><br><span class="line">reqSli := strings.Split(ret[6]," ")</span><br><span class="line">if len(reqSli) != 3 &#123;</span><br><span class="line">TypeMonitorChan &lt;- TypeErrNum</span><br><span class="line">log.Println("string.Split failed : ", ret[6])</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">message.Method = reqSli[0]</span><br><span class="line">u, err := url.Parse(reqSli[1])</span><br><span class="line">if err != nil &#123;</span><br><span class="line">TypeMonitorChan &lt;- TypeErrNum</span><br><span class="line">log.Println("url parse failed : ", err)</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">message.Path = u.Path</span><br><span class="line"></span><br><span class="line">message.Scheme = ret[5]</span><br><span class="line">message.Status = ret[7]</span><br><span class="line"></span><br><span class="line">upstreamTime, err := strconv.ParseFloat(ret[12],64)</span><br><span class="line">message.UpstreamTime = upstreamTime</span><br><span class="line"></span><br><span class="line">requestTime, err := strconv.ParseFloat(ret[13], 64)</span><br><span class="line">message.RequestTime = requestTime</span><br><span class="line"></span><br><span class="line">// 3. 写入Write Channel</span><br><span class="line">l.wc &lt;- message</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">var path, influxDsn string</span><br><span class="line">flag.StringVar(&amp;path, "path", "/tmp/access.log", "read file path")</span><br><span class="line">flag.StringVar(&amp;influxDsn, "influxDsn", "http://127.0.0.1:8086@imooc@imoocpass@nginx@s", "influx data source")</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">r := &amp;ReadFromFile&#123;</span><br><span class="line">path: path,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w := &amp;WriteToInfluxDB&#123;</span><br><span class="line">influxDBDsn: influxDsn,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lp := LogProcess&#123;</span><br><span class="line">rc : make(chan []byte),</span><br><span class="line">wc : make(chan *Message),</span><br><span class="line">read: r,</span><br><span class="line">write: w,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">go lp.read.Read(lp.rc)</span><br><span class="line">go lp.Process()</span><br><span class="line">go lp.write.Write(lp.wc)</span><br><span class="line"></span><br><span class="line">m := &amp;Monitor&#123;</span><br><span class="line">startTime: time.Now(),</span><br><span class="line">data: SystemInfo&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">m.start(&amp;lp)</span><br><span class="line"></span><br><span class="line">//time.Sleep(6000 * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Package flag</title>
      <link href="/2018/04/27/Package-flag/"/>
      <url>/2018/04/27/Package-flag/</url>
      
        <content type="html"><![CDATA[<h1 id="Package-flag"><a href="#Package-flag" class="headerlink" title="Package flag"></a>Package flag</h1><p>import “flag”</p><p>Package flag实现了command-line flag解析</p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage:"></a>Usage:</h3><p>定义flags使用flag.String(), Bool(), Int()等。</p><p>以下声明了一个整型flag，名字是-flagname，存储在指针ip中，类型为*int。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &quot;flag&quot;</span><br><span class="line">var ip = flag.Int(&quot;flagname&quot;, 1234, &quot;help message for flagname&quot;)</span><br></pre></td></tr></table></figure><p>如果你喜欢，你可以使用Var()函数将flag绑定到一个变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var flagvar int</span><br><span class="line">func init() &#123;</span><br><span class="line">flag.IntVar(&amp;flagvar, &quot;flagname&quot;, 1234, &quot;help message for flagname&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，您可以创建满足Value接口（指针接收器）的自定义flags</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag.Var(&amp;flagVal, &quot;name&quot;, &quot;help message for flagname&quot;)</span><br></pre></td></tr></table></figure><p>对于这样的flags，默认值是变量的初始值。</p><p>所有flags定义后，调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag.Parse()</span><br></pre></td></tr></table></figure><p>将命令行解析为所定义的flags。</p><p>flags可以直接使用。如果你使用flags本身，它们都是指针；如果你绑定到变量，它们就是值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(&quot;ip has value &quot;, *ip)</span><br><span class="line">fmt.Println(&quot;flagvar has value &quot;, flagvar)</span><br></pre></td></tr></table></figure><p>解析后，flags后面的参数可作为slice，flag.Args()。或者独立的一个值，flag.Arg(i)。参数索引，从0到flag.NArg() - 1。</p><p>Command line flag语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-flag</span><br><span class="line">-flag=x</span><br><span class="line">-flag x  // non-boolean flags only</span><br></pre></td></tr></table></figure><p>可以使用一个或两个减号；它们是等价的。最后一种形式不允许用于boolean flags</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd -x *</span><br></pre></td></tr></table></figure><p>其中*是一个Unix shell通配符，如果有一个名为0或false等文件时它将会更改。您必须使用-flag=false形式来关闭boolean flag。</p><p>flag解析在第一个non-flag参数之前（”-“是一个non-flag参数）或终止符“–”之后停止。</p><p>整数flags接受1234，0664，0x1234并且可能是负数。Boolean flags可能是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1, 0, t, f, T, F, true, false, TRUE, FALSE, True, False</span><br></pre></td></tr></table></figure><p>Duration flags接受任何有效的time.ParseDuration。</p><p>默认的一组command-line flags由顶层函数控制。FlagSet类型允许您定义独立的flags集，例如在command-line interface中实现子命令。FlagSet的方法类似于command-line flag集的顶层函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">// These examples demonstrate more intricate uses of the flag package.</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;flag&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// Example 1: A single string flag called &quot;species&quot; with default value &quot;gopher&quot;.</span><br><span class="line">// 示例1：一个名为“species”的字符串flag，默认值为“gopher”。</span><br><span class="line">var species = flag.String(&quot;species&quot;, &quot;gopher&quot;, &quot;the species we are studying&quot;)</span><br><span class="line"></span><br><span class="line">// Example 2: Two flags sharing a variable, so we can have a shorthand.</span><br><span class="line">// The order of initialization is undefined, so make sure both use the</span><br><span class="line">// same default value. They must be set up with an init function.</span><br><span class="line">// 示例2：两个flags共享一个变量，所以我们可以用简写。</span><br><span class="line">// 初始化的顺序是未定义的，所以确保两者都使用相同的默认值。 它们必须用init函数来设置。</span><br><span class="line">var gopherType string</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">const (</span><br><span class="line">defaultGopher = &quot;pocket&quot;</span><br><span class="line">usage         = &quot;the variety of gopher&quot;</span><br><span class="line">)</span><br><span class="line">flag.StringVar(&amp;gopherType, &quot;gopher_type&quot;, defaultGopher, usage)</span><br><span class="line">flag.StringVar(&amp;gopherType, &quot;g&quot;, defaultGopher, usage+&quot; (shorthand)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Example 3: A user-defined flag type, a slice of durations.</span><br><span class="line">type interval []time.Duration</span><br><span class="line"></span><br><span class="line">// String is the method to format the flag&apos;s value, part of the flag.Value interface.</span><br><span class="line">// The String method&apos;s output will be used in diagnostics.</span><br><span class="line">func (i *interval) String() string &#123;</span><br><span class="line">return fmt.Sprint(*i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Set is the method to set the flag value, part of the flag.Value interface.</span><br><span class="line">// Set&apos;s argument is a string to be parsed to set the flag.</span><br><span class="line">// It&apos;s a comma-separated list, so we split it.</span><br><span class="line">func (i *interval) Set(value string) error &#123;</span><br><span class="line">// If we wanted to allow the flag to be set multiple times,</span><br><span class="line">// accumulating values, we would delete this if statement.</span><br><span class="line">// That would permit usages such as</span><br><span class="line">//-deltaT 10s -deltaT 15s</span><br><span class="line">// and other combinations.</span><br><span class="line">if len(*i) &gt; 0 &#123;</span><br><span class="line">return errors.New(&quot;interval flag already set&quot;)</span><br><span class="line">&#125;</span><br><span class="line">for _, dt := range strings.Split(value, &quot;,&quot;) &#123;</span><br><span class="line">duration, err := time.ParseDuration(dt)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">*i = append(*i, duration)</span><br><span class="line">&#125;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Define a flag to accumulate durations. Because it has a special type,</span><br><span class="line">// we need to use the Var function and therefore create the flag during</span><br><span class="line">// init.</span><br><span class="line"></span><br><span class="line">var intervalFlag interval</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">// Tie the command-line flag to the intervalFlag variable and</span><br><span class="line">// set a usage message.</span><br><span class="line">flag.Var(&amp;intervalFlag, &quot;deltaT&quot;, &quot;comma-separated list of intervals to use between events&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// All the interesting pieces are with the variables declared above, but</span><br><span class="line">// to enable the flag package to see the flags defined there, one must</span><br><span class="line">// execute, typically at the start of main (not init!):</span><br><span class="line">//flag.Parse()</span><br><span class="line">// We don&apos;t run it here because this is not a main function and</span><br><span class="line">// the testing suite has already parsed the flags.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文：<a href="https://golang.org/pkg/flag/" target="_blank" rel="noopener">https://golang.org/pkg/flag/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gopkg.in管理import的第三方package</title>
      <link href="/2018/04/18/%E4%BD%BF%E7%94%A8gopkg-in%E7%AE%A1%E7%90%86import%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9package/"/>
      <url>/2018/04/18/%E4%BD%BF%E7%94%A8gopkg-in%E7%AE%A1%E7%90%86import%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9package/</url>
      
        <content type="html"><![CDATA[<p>在近期项目中，想针对Prometheus的ceph_exporter做定制化修改，但是遇到了一些麻烦。</p><p>使用<code>go get github.com/digitalocean/ceph_exporter</code> 命令down下来的代码和GitHub上的master分支或tag中的代码都不一样，这是为什么呢？如果<code>go get</code>指向目标Repository的master分支，那么master分支怎样保证任何时刻都是可用的呢？于是带着疑问开始寻找答案。</p><h3 id="package管理工具"><a href="#package管理工具" class="headerlink" title="package管理工具"></a>package管理工具</h3><p>当你在代码中引用package时，通常使用看起来像URL的导入路径，例如github.com/jpoehls/gophermail。当使用go build构建代码时，Go工具使用此路径在GOPATH中查找这些软件package，如果找不到，则失败。</p><p>如何拉取这些package？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、手动下载。你可以使用git clone这些package到你的GOPATH中。</span><br><span class="line">2、使用go get命令( download and install packages and dependencies )。go get只是简单地将导入路径作为URL来对待，并尝试通过HTTP或HTTPS来下载它。它足够聪明，可以处理Git，Mercurial，Bazaar和Subversion。Go对GitHub和Bitbucket等常用的代码管理站点有特殊的支持，同时也支持自定义URL。</span><br></pre></td></tr></table></figure><p>如何管理GitHub中单个Repository中的多个Versions？</p><p>有一种解决方法，可以让你在同一个Repository中，保存软件package的多个版本，并使用branches/tags来区分它们。<code>go get</code>支持自定义URL，你可以将版本号插入到package的导入路径中。这意味着需要编写一个代理服务，用于解析URL，并将请求代理到存储Repository的branch/tag上。</p><p>幸运的是，有人已经为我们做了这些工作。<a href="http://labix.org/gopkg.in" target="_blank" rel="noopener">GoPkg.in</a>完全符合上述内容。</p><p>例如：</p><p>使用此方法管理gophermail package。这意味着，不是使用github.com/jpoehls/gophermail导入软件package，而是使用gopkg.in/jpoehls/gophermail.v0。.v0是因为gophermail还没有达到1.0。当我发布1.0并声明稳定的API时，导入路径将更改为gopkg.in/jpoehls/gophermail.v1。</p><p>弄到这，好像和下面Prometheus的ceph_exporter输出没太大关系啊。。。。。。。。等我再研究研究。。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# go version</span><br><span class="line">go version go1.10 linux/amd64</span><br><span class="line">[root@centos7 ~]# go get -v github.com/digitalocean/ceph_exporter</span><br><span class="line">github.com/digitalocean/ceph_exporter (download)</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/github.com/ceph/go-ceph/rados</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/github.com/beorn7/perks/quantile</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/github.com/golang/protobuf/proto</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/github.com/prometheus/client_model/go</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/github.com/matttproud/golang_protobuf_extensions/pbutil</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/github.com/prometheus/common/internal/bitbucket.org/ww/goautoneg</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/github.com/prometheus/common/model</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/github.com/prometheus/common/expfmt</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/github.com/prometheus/procfs/xfs</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/github.com/prometheus/procfs</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/github.com/prometheus/client_golang/prometheus</span><br><span class="line">github.com/digitalocean/ceph_exporter/collectors</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/github.com/prometheus/client_golang/prometheus/promhttp</span><br><span class="line">github.com/digitalocean/ceph_exporter/vendor/gopkg.in/yaml.v2</span><br></pre></td></tr></table></figure><p>参考链接：</p><p>【1】<a href="http://zduck.com/2014/go-and-package-versioning" target="_blank" rel="noopener">http://zduck.com/2014/go-and-package-versioning</a><br>【2】<a href="https://stackoverflow.com/questions/24855081/how-do-i-import-a-specific-version-of-a-package-using-go-get" target="_blank" rel="noopener">https://stackoverflow.com/questions/24855081/how-do-i-import-a-specific-version-of-a-package-using-go-get</a></p><p>【3】<a href="https://ieevee.com/tech/2017/07/10/go-import.html" target="_blank" rel="noopener">https://ieevee.com/tech/2017/07/10/go-import.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Vundle管理Vim插件</title>
      <link href="/2018/04/17/%E4%BD%BF%E7%94%A8Vundle%E7%AE%A1%E7%90%86Vim%E6%8F%92%E4%BB%B6/"/>
      <url>/2018/04/17/%E4%BD%BF%E7%94%A8Vundle%E7%AE%A1%E7%90%86Vim%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>工欲善其事，必先利其器。这篇文章记录怎样在Linux上使用Vundle管理Vim插件，提高效率。</p><p>步骤很简单，大体如下：</p><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# yum install -y redhat-lsb</span><br><span class="line">[root@centos7 ~]# lsb_release -a</span><br><span class="line">LSB Version::core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch</span><br><span class="line">Distributor ID:CentOS</span><br><span class="line">Description:CentOS Linux release 7.4.1708 (Core) </span><br><span class="line">Release:7.4.1708</span><br><span class="line">Codename:Core</span><br></pre></td></tr></table></figure><h3 id="Install-vim-and-git"><a href="#Install-vim-and-git" class="headerlink" title="Install vim and git"></a>Install vim and git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# yum install -y git vim</span><br></pre></td></tr></table></figure><h3 id="Set-up-Vundle"><a href="#Set-up-Vundle" class="headerlink" title="Set up Vundle"></a>Set up Vundle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure><h3 id="Configure-Plugins"><a href="#Configure-Plugins" class="headerlink" title="Configure Plugins"></a>Configure Plugins</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim ~/.vimrc</span><br><span class="line">set nocompatible              &quot; be iMproved, required</span><br><span class="line">filetype off                  &quot; required</span><br><span class="line"></span><br><span class="line">&quot; set the runtime path to include Vundle and initialize</span><br><span class="line">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line">&quot; alternatively, pass a path where Vundle should install plugins</span><br><span class="line">&quot;call vundle#begin(&apos;~/some/path/here&apos;)</span><br><span class="line"></span><br><span class="line">&quot; let Vundle manage Vundle, required</span><br><span class="line">Plugin &apos;VundleVim/Vundle.vim&apos;</span><br><span class="line"></span><br><span class="line">&quot; All of your Plugins must be added before the following line</span><br><span class="line">call vundle#end()            &quot; required</span><br><span class="line">filetype plugin indent on    &quot; required</span><br><span class="line">&quot; To ignore plugin indent changes, instead use:</span><br><span class="line">&quot;filetype plugin on</span><br><span class="line">&quot;</span><br><span class="line">&quot; Brief help</span><br><span class="line">&quot; :PluginList       - lists configured plugins</span><br><span class="line">&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span><br><span class="line">&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache</span><br><span class="line">&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span><br><span class="line">&quot;</span><br><span class="line">&quot; see :h vundle for more details or wiki for FAQ</span><br><span class="line">&quot; Put your non-Plugin stuff after this line</span><br></pre></td></tr></table></figure><p>打开~/.vimrc，并添加你要安装的Plugins</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim ~/.vimrc</span><br><span class="line">call vundle#begin()</span><br><span class="line">&quot; 在其之间添加你要安装的Plugins，例如我这里安装一个NERDTree</span><br><span class="line">Plugin &apos;scrooloose/nerdtree&apos;</span><br><span class="line">call vundle#end()</span><br></pre></td></tr></table></figure><h3 id="Install-Plugins"><a href="#Install-Plugins" class="headerlink" title="Install Plugins"></a>Install Plugins</h3><p>启动vim并运行:PluginInstall</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim ~/.vimrc</span><br><span class="line">:PluginInstall</span><br></pre></td></tr></table></figure><p>配置已安装NERDTree插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim ~/.vimrc</span><br><span class="line">添加以下，注意&lt;F2&gt;后面有空格，配置好以后，使用vim打开任意文件就可以使用F2来调出NERDTree了</span><br><span class="line">map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure><p>当然vim不止这一个插件，这里只是介绍一下怎样配置，其他好玩的插件请自己发掘。</p><h3 id="vim常用选项"><a href="#vim常用选项" class="headerlink" title="vim常用选项"></a>vim常用选项</h3><p><a href="http://gohom.win/2015/06/08/Vim-Setup/" target="_blank" rel="noopener">http://gohom.win/2015/06/08/Vim-Setup/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vdbench 文件系统测试</title>
      <link href="/2018/04/12/vdbench-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/04/12/vdbench-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Centos-7-安装vdbench"><a href="#Centos-7-安装vdbench" class="headerlink" title="Centos 7 安装vdbench"></a>Centos 7 安装vdbench</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、首先安装Java JDK和一些工具包，这里使用的是java-1.7.0</span><br><span class="line">[root@cephL ~]# sudo yum install -y java-1.7.0-openjdk java-1.7.0-openjdk-devel unzip</span><br><span class="line">[root@cephL ~]# mkdir vdbench &amp;&amp; cd vdbench</span><br><span class="line">2、把下载后的vdbench拷贝到该目录并解压，这里使用的是vdbench50406</span><br><span class="line">[root@cephL vdbench]# unzip vdbench50406.zip</span><br><span class="line">3、测试是否可以运行</span><br><span class="line">[root@cephL vdbench]# ./vdbench -t</span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">1、准备测试目录</span><br><span class="line">[root@cephL node-1]# pwd</span><br><span class="line">/root/node-1</span><br><span class="line">2、到vdbench目录准备配置文件</span><br><span class="line">[root@cephL ~]# cd /root/vdbench/</span><br><span class="line">[root@cephL vdbench]# vi filesystem.conf</span><br><span class="line">fsd=fsd1,anchor=/root/node-1,depth=2,width=2,files=2,size=128k</span><br><span class="line">fwd=fwd1,fsd=fsd1,operation=read,xfersize=4k,fileio=sequential,fileselect=random,threads=2</span><br><span class="line">rd=rd1,fwd=fwd1,fwdrate=max,format=yes,elapsed=10,interval=1</span><br><span class="line"></span><br><span class="line">该配置文件表示：</span><br><span class="line">第一行：</span><br><span class="line">fsd、fwd、rd：是唯一标识</span><br><span class="line">depth：从/root/node-1目录开始，在其中创建2层深度的目录（深度）</span><br><span class="line">width：从/root/node-1目录开始，每层目录创建2个平级目录（广度）</span><br><span class="line">files：在使用depth和width创建的目录中，最深层每个目录创建2个文件</span><br><span class="line">size：每个文件大小为128k</span><br><span class="line">openflags：</span><br><span class="line">第二行：</span><br><span class="line">operation：值为read，表示每个线程，根据fileselect的值（这里是随机）选择一个文件后，打开该文件进行读取</span><br><span class="line">xfersize：连续读取4k blocks(xfersize=4k)直到文件结束(size=128k)，关闭文件并随机选择另一个文件</span><br><span class="line">fileio：表示文件IO的方式，random或者sequential</span><br><span class="line">fileselect：值为random，表示每个线程随机选择一个文件</span><br><span class="line">threads：值为2，表示启动2个线程（线程默认值为1）</span><br><span class="line">第三行：</span><br><span class="line">fwdrate：每秒有多少file system operations，max为无限制</span><br><span class="line">format：值为yes，表示创建完整的目录结构，包括所有文件初始化到所需的128k大小</span><br><span class="line">elapsed：持续运行时间，默认设置为30（以秒为单位）。注意：至少是interval的2倍，</span><br><span class="line">interval：该参数指定每个报告间隔时间（以秒为单位）</span><br><span class="line"></span><br><span class="line">3、开始一个简单的测试</span><br><span class="line">[root@cephL vdbench]# ./vdbench -f filesystem.conf</span><br><span class="line">4、查看被测目录中生成的测试文件</span><br><span class="line">[root@cephL ~]# tree /root/node-1/ -h</span><br><span class="line">/root/node-1/                         --- depth 0</span><br><span class="line">├── [  68]  no_dismount.txt</span><br><span class="line">├── [  44]  vdb.1_1.dir               --- depth 1  width 1</span><br><span class="line">│   ├── [  50]  vdb.2_1.dir           --- depth 2  width 1</span><br><span class="line">│   │   ├── [128K]  vdb_f0001.file    --- depth 2  width 1  files 1</span><br><span class="line">│   │   └── [128K]  vdb_f0002.file    --- depth 2  width 1  files 2</span><br><span class="line">│   └── [  50]  vdb.2_2.dir           --- depth 2  width 2</span><br><span class="line">│       ├── [128K]  vdb_f0001.file    --- depth 2  width 2  files 1</span><br><span class="line">│       └── [128K]  vdb_f0002.file    --- depth 2  width 2  files 2</span><br><span class="line">├── [  44]  vdb.1_2.dir               --- depth 1  width 2</span><br><span class="line">│   ├── [  50]  vdb.2_1.dir           --- depth 2  width 1</span><br><span class="line">│   │   ├── [128K]  vdb_f0001.file    --- depth 2  width 1  files 1</span><br><span class="line">│   │   └── [128K]  vdb_f0002.file    --- depth 2  width 1  files 2</span><br><span class="line">│   └── [  50]  vdb.2_2.dir           --- depth 2  width 2</span><br><span class="line">│       ├── [128K]  vdb_f0001.file    --- depth 2  width 2  files 1</span><br><span class="line">│       └── [128K]  vdb_f0002.file    --- depth 2  width 2  files 2</span><br><span class="line">└── [ 159]  vdb_control.file</span><br><span class="line"></span><br><span class="line">6 directories, 10 files</span><br></pre></td></tr></table></figure><h2 id="其他常用参数"><a href="#其他常用参数" class="headerlink" title="其他常用参数"></a>其他常用参数</h2><p>openflags</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这个参数可以指定在SD, WD, FSD, FWD, RD中</span><br><span class="line">可用</span><br></pre></td></tr></table></figure><p>sizes（注意这里有s）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">这个参数可以指定在FSD中</span><br><span class="line">该参数指定文件的大小（size），可以指定一个或一组文件的大小（size）。</span><br><span class="line">例如：sizes=(32k,50,64k,50)，其中第一个数字表示文件大小（size），第二个数字表示必须具有此大小（size）的文件的百分比。如果指定一组文件，百分比加起来必须为100。</span><br><span class="line">当您指定sizes=(nnn,0)时，vdbench将创建平均大小（size）为&apos;nnn&apos;字节的文件</span><br><span class="line"></span><br><span class="line">以上标出（size）可能与下面的规则有关，所以保留原文。以下规则个人理解为，如果大于某个size规则（如果有小数点），那么必须是某个规则的倍数。</span><br><span class="line">有一些规则与最终使用的文件大小（size）有关：</span><br><span class="line">如果size &gt; 10m，size将为1m的倍数。（个人理解，size为10.1m是不行的，必须是1m的倍数）</span><br><span class="line">如果size &gt; 1m，size将为100k的倍数。</span><br><span class="line">如果size &gt; 100k，size将为10k的倍数。</span><br><span class="line">如果size &lt; 100k，size将为1k的倍数。</span><br><span class="line"></span><br><span class="line">关于百分比的实验：</span><br><span class="line">实验1</span><br><span class="line">在8个文件中，4个1k的文件，4个2k的文件</span><br><span class="line">[root@cephL vdbench]# vi filesystem.conf</span><br><span class="line">fsd=fsd1,anchor=/root/node-1,depth=2,width=2,files=2,sizes=(1k,50,2k,50)</span><br><span class="line">fwd=fwd1,fsd=fsd1,operation=read,xfersize=4k,fileio=sequential,fileselect=random,threads=2</span><br><span class="line">rd=rd1,fwd=fwd1,fwdrate=max,format=yes,elapsed=10,interval=1</span><br><span class="line"></span><br><span class="line">[root@cephL vdbench]# ./vdbench -f filesystem.conf</span><br><span class="line">[root@cephL ~]# tree node-1/ -h</span><br><span class="line">node-1/</span><br><span class="line">├── [  68]  no_dismount.txt</span><br><span class="line">├── [  44]  vdb.1_1.dir</span><br><span class="line">│   ├── [  50]  vdb.2_1.dir</span><br><span class="line">│   │   ├── [2.0K]  vdb_f0001.file</span><br><span class="line">│   │   └── [1.0K]  vdb_f0002.file</span><br><span class="line">│   └── [  50]  vdb.2_2.dir</span><br><span class="line">│       ├── [1.0K]  vdb_f0001.file</span><br><span class="line">│       └── [2.0K]  vdb_f0002.file</span><br><span class="line">├── [  44]  vdb.1_2.dir</span><br><span class="line">│   ├── [  50]  vdb.2_1.dir</span><br><span class="line">│   │   ├── [1.0K]  vdb_f0001.file</span><br><span class="line">│   │   └── [1.0K]  vdb_f0002.file</span><br><span class="line">│   └── [  50]  vdb.2_2.dir</span><br><span class="line">│       ├── [2.0K]  vdb_f0001.file</span><br><span class="line">│       └── [2.0K]  vdb_f0002.file</span><br><span class="line">└── [ 194]  vdb_control.file</span><br><span class="line"></span><br><span class="line">6 directories, 10 files</span><br><span class="line"></span><br><span class="line">实验2</span><br><span class="line">在8个文件中，1个1k的文件，3个2k的文件，3个3k的文件，1个4k的文件。不知道为什么。。。。。。。。</span><br><span class="line">[root@cephL vdbench]# vi filesystem.conf</span><br><span class="line">fsd=fsd1,anchor=/root/node-1,depth=2,width=2,files=2,sizes=(1k,25,2k,25,3k,25,4k,25)</span><br><span class="line">fwd=fwd1,fsd=fsd1,operation=read,xfersize=4k,fileio=sequential,fileselect=random,threads=2</span><br><span class="line">rd=rd1,fwd=fwd1,fwdrate=max,format=yes,elapsed=10,interval=1</span><br><span class="line"></span><br><span class="line">[root@cephL vdbench]# ./vdbench -f filesystem.conf</span><br><span class="line">[root@cephL ~]# tree node-1/ -h</span><br><span class="line">node-1/</span><br><span class="line">├── [  68]  no_dismount.txt</span><br><span class="line">├── [  44]  vdb.1_1.dir</span><br><span class="line">│   ├── [  50]  vdb.2_1.dir</span><br><span class="line">│   │   ├── [3.0K]  vdb_f0001.file</span><br><span class="line">│   │   └── [2.0K]  vdb_f0002.file</span><br><span class="line">│   └── [  50]  vdb.2_2.dir</span><br><span class="line">│       ├── [1.0K]  vdb_f0001.file</span><br><span class="line">│       └── [3.0K]  vdb_f0002.file</span><br><span class="line">├── [  44]  vdb.1_2.dir</span><br><span class="line">│   ├── [  50]  vdb.2_1.dir</span><br><span class="line">│   │   ├── [2.0K]  vdb_f0001.file</span><br><span class="line">│   │   └── [2.0K]  vdb_f0002.file</span><br><span class="line">│   └── [  50]  vdb.2_2.dir</span><br><span class="line">│       ├── [4.0K]  vdb_f0001.file</span><br><span class="line">│       └── [3.0K]  vdb_f0002.file</span><br><span class="line">└── [ 234]  vdb_control.file</span><br><span class="line"></span><br><span class="line">6 directories, 10 files</span><br></pre></td></tr></table></figure><h1 id="多机测试"><a href="#多机测试" class="headerlink" title="多机测试"></a>多机测试</h1><p>应用场景为多个NFS Client挂在相同NFS Server的读写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hd=default,vdbench=/home/vdbench,user=root,shell=ssh</span><br><span class="line">hd=hd1,system=node1</span><br><span class="line">hd=hd2,system=node2</span><br><span class="line">hd=hd3,system=node3</span><br><span class="line"></span><br><span class="line">fsd=fsd1,anchor=/mnt/test863,depth=1,width=10,files=10000,size=20m,shared=yes</span><br><span class="line">fwd=format,threads=6,xfersize=1m</span><br><span class="line">fwd=default,xfersize=1m,fileio=random,fileselect=random,rdpct=100,threads=6</span><br><span class="line">fwd=fwd1,fsd=fsd1,host=hd1</span><br><span class="line">fwd=fwd2,fsd=fsd1,host=hd2</span><br><span class="line">fwd=fwd3,fsd=fsd1,host=hd3</span><br><span class="line"></span><br><span class="line">rd=rd1,fwd=fwd*,fwdrate=max,format=(restart,only),elapsed=600,interval=1</span><br></pre></td></tr></table></figure><p>参数解析：</p><p>有3台测试节点node1、node2、node3。每台测试节点的/home/vdbench/目录都存在可执行vdbench二进制文件（位置必须相同），使用root用户通过ssh方式连接（节点间需要做ssh免密），每台测试节点的测试目录为/mnt/test863，目录深度为1，最深层目录中的目录宽度为10，最深层每个目录中有10000个文件，每个文件大小20mb</p><p><code>关于shared=yes</code></p><p>随着Vdbench运行多个slaves和可选的多个hosts，slaves和hosts之间关于文件状态的通信变得困难。使所有这些slaves设备相互通信所涉及的开销变得过于昂贵。您不希望一个slave删除另一个slave当前正在读取或写入的文件。因此，Vdbench不允许您跨slaves和hosts共享FSD。</p><p>当然，在你开始使用庞大的文件系统之前，这一切听起来都很棒。 您刚刚填满了500 TB的磁盘文件，然后您决定要与一个或多个远程主机共享该数据。 从头开始重新创建整个文件结构需要很长时间。 该怎么办？</p><p>指定’shared = yes’时，Vdbench将允许您共享文件系统定义（FSD）。 它通过允许每个slave设备仅使用FSD文件结构中定义的每个“第n”文件来实现这一点，其中“n”等于slave数量。（It does this by allowing each slave to use only every ‘nth’ file as is defined in the FSD file structure, where ‘n’ equals the amount of slaves.）</p><p>这意味着不同的host不会互相踩到脚趾，但有一个例外：当您指定’format = yes’时，Vdbench首先删除已存在的文件结构。由于这可能是一个旧的文件结构，Vdbench无法传播文件删除周围，让每个slave删除他的’第n’文件。因此，每个slave设备都会尝试删除所有文件，但如果删除失败则不会生成错误消息（因为不同的slave设备只是删除了它）。这些失败的删除将被计算并报告在“Miscellaneous statistics”中的“FILE_DELETE_SHARED”计数器下。但是，“FILE_DELETES”计数器可以包含高于存在的文件数量的计数。我已经看到多个slaves设备能够同时删除同一个文件而没有操作系统将任何错误传递给Java的情况。</p><p><code>关于rdpct（Read Percentage）</code></p><p>此参数允许您混合读取和写入。 使用operation=read只允许你做read，operation=write只允许你做write。 但是，指定rdpct=，您将能够在同一个选定文件中混合读取和写入。请注意，对于sequential（顺序），这没有多大意义。您可以以读取块1，写入块2，读取块3等。对于随机I/O，这非常有意义。</p><p><code>关于format=</code></p><ul><li><p>no</p><p>不需要任何格式,但现有文件结构必须与 FSD 定义的结构相匹配。</p></li><li><p>yes</p><p>Vdbench 将首先删除当前文件结构,然后再次创建文件结构。然后,它将执行您在 RD 中的请求。</p></li><li><p>restart</p><p>Vdbench将仅创建尚未创建的文件，并且还将扩展未达到其正确大小的文件。 （这是totalsize和workingsetsize可以发挥作用的地方）。</p></li><li><p>only</p><p>与’yes’相同，但Vdbench不会执行当前的RD。</p></li><li><p>dir(ectories)</p><p>与‘yes’相同，但它只会创建目录。</p></li><li><p>clean</p><p>Vdbench只会删除当前的文件结构，而不会执行当前的RD。</p></li><li><p>once</p><p>这将覆盖每个forxxx参数循环完成format的默认行为。</p></li><li><p>limited</p><p>format将在elapsed=seconds之后终止，而不是所有文件或为totalsize=选择的文件已格式化之后终止。</p></li><li><p>complete</p><p>只能与’format=no’一起使用，并且会告诉Vdbench format已经完成，但是Vdbench不应该尝试通过目录搜索来验证每个目录和文件的状态。 当然，如果一个或多个目录或文件丢失或文件未达到其预期大小，结果不可预测。在测试期间删除或创建目录或文件时非常危险。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RocksDB介绍</title>
      <link href="/2018/04/12/RocksDB%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/04/12/RocksDB%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="Welcome-to-RocksDB"><a href="#Welcome-to-RocksDB" class="headerlink" title="Welcome to RocksDB"></a>Welcome to RocksDB</h2><p>RocksDB：A Persistent Key-Value Store for Flash and RAM Storage</p><p>RocksDB是一个嵌入式key-value store C ++库，其中keys和values是任意byte streams。RocksDB由Facebook Database Engineering Team开发和维护，基于LevelDB二次开发，并对LevelDB API提供向后兼容。它支持原子读取和写入。RocksDB借鉴了开源leveldb项目中的重要代码以及Apache HBase的重要思想。最初的代码是从开源的leveldb 1.5中分离出来的。它还建立在Facebook之前在RocksDB开发的代码和想法之上。</p><p>RocksDB针对Flash进行了优化，延迟极低。RocksDB使用Log Structured Database Engine进行存储，完全用C ++编写。一个名为RocksJava的Java版本目前正在开发中。</p><p>RocksDB具有高度灵活的配置选项，可以调整以运行在各种生产环境上的不同设备之上，包括pure memory，Flash，hard disks或HDFS。它支持各种压缩算法并且为production support和debugging提供良好的工具。</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li><p>专门希望存储在本地Flash drives或RAM中，高达几TB数据的应用程序服务器而设计</p></li><li><p>针对fast storage设备，存储small到medium size key-values进行了优化( flash devices 或 in-memory )</p></li><li><p>与CPU数量线性扩展，以便在具有多核的处理器上运行良好</p><h2 id="Features-Not-in-LevelDB"><a href="#Features-Not-in-LevelDB" class="headerlink" title="Features Not in LevelDB"></a>Features Not in LevelDB</h2></li></ul><p>RocksDB引入了几十个新的主要features。不在LevelDB中的feature<a href="https://github.com/facebook/rocksdb/wiki/Features-Not-in-LevelDB" target="_blank" rel="noopener">列表</a></p><h2 id="Assumptions-and-Goals"><a href="#Assumptions-and-Goals" class="headerlink" title="Assumptions and Goals"></a>Assumptions and Goals</h2><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><p>RocksDB设计主要专注于fast storage和server workloads。它应该利用Flash或RAM子系统提供的高速率读/写全部潜力。它应该支持高效的point lookups以及range scans。它应该可配置为支持high random-read workloads，high update workloads或两者的组合（最优解）。其架构应易于调整Read Amplification, Write Amplification 和 Space Amplification。</p><h3 id="Production-Support"><a href="#Production-Support" class="headerlink" title="Production Support"></a>Production Support</h3><h3 id="Compatibility"><a href="#Compatibility" class="headerlink" title="Compatibility"></a>Compatibility</h3>]]></content>
      
      
      
        <tags>
            
            <tag> RocksDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 7 部署Ceph L版</title>
      <link href="/2018/04/10/centos-7-%E9%83%A8%E7%BD%B2ceph-L%E7%89%88/"/>
      <url>/2018/04/10/centos-7-%E9%83%A8%E7%BD%B2ceph-L%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>ceph L版已经发布很久了，官方说默认使用BlueStore作为OSD的存储后端，在Cephalocon APAC 2018上也是讨论的焦点之一。</p><p>提到BlueStore，不得不说一说Ceph的STORAGE DEVICES。</p><h2 id="STORAGE-DEVICES"><a href="#STORAGE-DEVICES" class="headerlink" title="STORAGE DEVICES"></a>STORAGE DEVICES</h2><p>Ceph守护进程将数据存储在磁盘上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ceph OSDs ( Object Storage Daemons )</span><br><span class="line">    Client端的大多数数据写入Ceph后被存储的地方，一般而言，每个OSD都由单一存储设备支持，如传统硬盘（HDD）或固态硬盘（SSD）。</span><br><span class="line">    OSD还可以由多种设备组合，如存储数据的HDD和存储某些元数据的SSD（或SSD的分区）。</span><br><span class="line">    群集中OSD的数量通常取决于你要存储的数据量，还需要考虑每个存储设备的容量以及冗余级别和存储类型（replication或erasure coding）。</span><br><span class="line">Ceph Monitor</span><br><span class="line">    管理关键群集状态，如cluster membership和authentication信息。对于较小的集群，需要几千兆字节（几个GB），然而对于较大的集群，monitor的数据库可以达到几十甚至几百千兆（几十个GB甚至几百个GB）。</span><br></pre></td></tr></table></figure><h2 id="OSD-BACKENDS"><a href="#OSD-BACKENDS" class="headerlink" title="OSD BACKENDS"></a>OSD BACKENDS</h2><p>OSD可以通过两种方式管理存储的数据。从Luminous 12.2.z发行版开始，新的默认（推荐）后端是 BlueStore。在Luminous之前，默认（也是唯一的选择）是 FileStore。</p><h3 id="BLUESTORE"><a href="#BLUESTORE" class="headerlink" title="BLUESTORE"></a>BLUESTORE</h3><p>BlueStore是专门用于Ceph OSD管理磁盘上的数据的专用存储后端。在过去十年间，受到了FileStore管理OSD经验的启发.<br>BlueStore的主要功能包括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">直接管理存储设备 ( Direct management of storage devices )</span><br><span class="line">    BlueStore使用原始块设备或分区。这避免了任何可能限制性能或增加复杂性的抽象层（如像XFS这样的本地文件系统）。</span><br><span class="line"></span><br><span class="line">使用RocksDB进行元数据管理 ( Metadata management with RocksDB )</span><br><span class="line">    为了管理内部元数据，我们嵌入了RocksDB的key/value数据库。例如在磁盘上，从object names到block locations的映射。</span><br><span class="line"></span><br><span class="line">完整的数据和元数据校验 ( Full data and metadata checksumming )</span><br><span class="line">    默认情况下，写入BlueStore的所有数据和元数据都受到一个或多个校验和的保护。没有数据或元数据在未经过验证的情况下，就从磁盘读取或返回给用户。</span><br><span class="line"></span><br><span class="line">内置压缩 ( Inline compression )</span><br><span class="line">    写入的数据在写入磁盘之前可以选择压缩。</span><br><span class="line"></span><br><span class="line">多设备元数据分层 ( Multi-device metadata tiering )</span><br><span class="line">    BlueStore允许将其内部journal（预写日志，write-ahead log）写入单独的高速设备（如SSD，NVMe或NVDIMM）以提高性能。</span><br><span class="line">    如果有大量更快速的存储可用，则内部元数据也可以存储在更快的设备上。</span><br><span class="line"></span><br><span class="line">高效的写时复制 ( Efficient copy-on-write )</span><br><span class="line">    RBD和CephFS快照依赖于copy-on-write clone机制，也在BlueStore中得到了有效的实现。这将为常规快照和erasure coded池提供高效的IO（依靠clone实现高效的two-phase commits）</span><br></pre></td></tr></table></figure><p><a href="http://docs.ceph.com/docs/master/rados/configuration/bluestore-config-ref/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/rados/configuration/bluestore-config-ref/</a><br><a href="http://docs.ceph.com/docs/master/rados/operations/bluestore-migration/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/rados/operations/bluestore-migration/</a></p><h3 id="FILESTORE"><a href="#FILESTORE" class="headerlink" title="FILESTORE"></a>FILESTORE</h3><p>FileStore是在Ceph中存储objects的传统方法。它依赖于标准文件系统（通常是XFS）和某个元数据的key/value数据库（传统上是LevelDB，现在是RocksDB）结合使用。<br>FileStore经过良好测试并广泛用于生产，但由于其整体设计和对传统文件系统存储object数据的依赖性，因此存在许多性能缺陷。<br>尽管FileStore通常能够在大多数与POSIX兼容的文件系统（包括btrfs和ext4）上运行，但我们只建议使用XFS。<br>btrfs和ext4都有已知的bug和缺陷，使用它们可能会导致数据丢失。默认情况下，所有的Ceph提供的工具都将使用XFS。</p><p><a href="http://docs.ceph.com/docs/master/rados/configuration/filestore-config-ref/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/rados/configuration/filestore-config-ref/</a></p><p>在ceph L版代码结构改动比较大，增加了CEPH-MGR向外部监测和管理系统提供额外的监测接口，今天就用虚拟机搭建实验环境玩一玩。</p><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ~]# yum install -y redhat-lsb</span><br><span class="line">[root@cephL ~]# lsb_release -a</span><br><span class="line">LSB Version::core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch</span><br><span class="line">Distributor ID:CentOS</span><br><span class="line">Description:CentOS Linux release 7.4.1708 (Core)</span><br><span class="line">Release:7.4.1708</span><br><span class="line">Codename:Core</span><br><span class="line"></span><br><span class="line">[root@cephL ~]# lsblk</span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0   40G  0 disk</span><br><span class="line">├─sda1            8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2            8:2    0   39G  0 part</span><br><span class="line">  ├─centos-root 253:0    0   36G  0 lvm  /</span><br><span class="line">  └─centos-swap 253:1    0    3G  0 lvm  [SWAP]</span><br><span class="line">sdb               8:16   0   30G  0 disk</span><br><span class="line">sdc               8:32   0   30G  0 disk</span><br><span class="line">sr0              11:0    1 1024M  0 rom</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装pip和ceph-deploy"><a href="#安装pip和ceph-deploy" class="headerlink" title="安装pip和ceph-deploy"></a>安装pip和ceph-deploy</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ~]# curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"</span><br><span class="line">[root@cephL ~]# python get-pip.py</span><br><span class="line">[root@cephL ~]# python -m pip install -U pip</span><br><span class="line">[root@cephL ~]# pip install --upgrade setuptools</span><br><span class="line">[root@cephL ~]# pip install ceph-deploy</span><br><span class="line">[root@cephL ~]# ceph-deploy --version</span><br><span class="line">2.0.0</span><br></pre></td></tr></table></figure><h3 id="安装ceph软件包"><a href="#安装ceph软件包" class="headerlink" title="安装ceph软件包"></a>安装ceph软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ~]# mkdir ceph-deploy &amp;&amp; cd ceph-deploy</span><br><span class="line">[root@cephL ceph-deploy]# ceph-deploy install cephL --release luminous</span><br></pre></td></tr></table></figure><h3 id="开始部署一个新的集群，然后为它写一个CLUSTER-conf和keyring"><a href="#开始部署一个新的集群，然后为它写一个CLUSTER-conf和keyring" class="headerlink" title="开始部署一个新的集群，然后为它写一个CLUSTER.conf和keyring"></a>开始部署一个新的集群，然后为它写一个CLUSTER.conf和keyring</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ceph-deploy]# ceph-deploy new --public-network 192.168.56.101/24  --cluster-network 192.168.56.101/24 cephL</span><br></pre></td></tr></table></figure><h3 id="部署MON"><a href="#部署MON" class="headerlink" title="部署MON"></a>部署MON</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ceph-deploy]# ceph-deploy mon create-initial</span><br><span class="line">[root@cephL ceph-deploy]# ceph-deploy mon create cephL</span><br><span class="line">ceph        1110       1  0 12:57 ?        00:00:01 /usr/bin/ceph-mon -f --cluster ceph --id cephL --setuser ceph --setgroup ceph</span><br></pre></td></tr></table></figure><h3 id="部署OSD"><a href="#部署OSD" class="headerlink" title="部署OSD"></a>部署OSD</h3><p>bluestore方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在创建osd时，L版默认是bluestore</span><br><span class="line">[root@cephL ceph-deploy]# ceph-deploy osd create --data /dev/sdb cephL</span><br><span class="line">ceph        1514       1  0 12:57 ?        00:00:01 /usr/bin/ceph-osd -f --cluster ceph --id 0 --setuser ceph --setgroup ceph</span><br><span class="line">[root@cephL ceph-deploy]# ceph-deploy osd create --data /dev/sdc cephL</span><br><span class="line">ceph        1518       1  0 12:57 ?        00:00:01 /usr/bin/ceph-osd -f --cluster ceph --id 1 --setuser ceph --setgroup ceph</span><br></pre></td></tr></table></figure><p>遇到问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ceph-deploy]# ceph -s</span><br><span class="line">2018-04-10 12:00:19.660298 7fd1fe0ae700 -1 auth: unable to find a keyring on /etc/ceph/ceph.client.admin.keyring,/etc/ceph/ceph.keyring,/etc/ceph/keyring,/etc/ceph/keyring.bin,: (2) No such file or directory</span><br><span class="line">2018-04-10 12:00:19.660310 7fd1fe0ae700 -1 monclient: ERROR: missing keyring, cannot use cephx for authentication</span><br><span class="line">2018-04-10 12:00:19.660312 7fd1fe0ae700  0 librados: client.admin initialization error (2) No such file or directory</span><br><span class="line">[errno 2] error connecting to the cluster</span><br><span class="line"></span><br><span class="line">[root@cephL ceph-deploy]# chmod +r *</span><br><span class="line">[root@cephL ceph-deploy]# cp ceph.client.admin.keyring /etc/ceph/</span><br><span class="line">[root@cephL ceph-deploy]# ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    id:     765752b7-1f77-4d0d-bc18-936b8ad409fd</span><br><span class="line">    health: HEALTH_WARN</span><br><span class="line">            no active mgr</span><br><span class="line"></span><br><span class="line">  services:</span><br><span class="line">    mon: 1 daemons, quorum cephL</span><br><span class="line">    mgr: no daemons active</span><br><span class="line">    osd: 2 osds: 2 up, 2 in</span><br><span class="line"></span><br><span class="line">  data:</span><br><span class="line">    pools:   0 pools, 0 pgs</span><br><span class="line">    objects: 0 objects, 0 bytes</span><br><span class="line">    usage:   0 kB used, 0 kB / 0 kB avail</span><br><span class="line">    pgs:</span><br></pre></td></tr></table></figure><p>filestore方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 如果是filestore则需要对data device和journal device先做GPT partition</span><br><span class="line">--data DATA           The OSD data logical volume (vg/lv) or absolute path to device</span><br><span class="line">--journal JOURNAL     Logical Volume (vg/lv) or path to GPT partition</span><br><span class="line"></span><br><span class="line">[root@cephL ceph-deploy]# fdisk /dev/sdb</span><br><span class="line">WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.</span><br><span class="line">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line">命令(输入 m 获取帮助)：g</span><br><span class="line">Building a new GPT disklabel (GUID: 80097CEF-475B-4161-ACC7-7164F6A39DD2)</span><br><span class="line">命令(输入 m 获取帮助)：n</span><br><span class="line">分区号 (1-128，默认 1)：</span><br><span class="line">第一个扇区 (2048-62914526，默认 2048)：</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-62914526，默认 62914526)：</span><br><span class="line">已创建分区 1</span><br><span class="line">命令(输入 m 获取帮助)：w</span><br><span class="line">The partition table has been altered!</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">正在同步磁盘。</span><br><span class="line"></span><br><span class="line">[root@cephL ceph-deploy]# fdisk /dev/sdc</span><br><span class="line">WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.</span><br><span class="line">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line">命令(输入 m 获取帮助)：g</span><br><span class="line">Building a new GPT disklabel (GUID: 21DFA98C-5BCF-40E7-A120-3DEDEA6600ED)</span><br><span class="line">命令(输入 m 获取帮助)：n</span><br><span class="line">分区号 (1-128，默认 1)：</span><br><span class="line">第一个扇区 (2048-62914526，默认 2048)：</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-62914526，默认 62914526)：</span><br><span class="line">已创建分区 1</span><br><span class="line">命令(输入 m 获取帮助)：w</span><br><span class="line">The partition table has been altered!</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">正在同步磁盘。</span><br><span class="line"></span><br><span class="line">[root@cephL ceph-deploy]# lsblk</span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0   40G  0 disk </span><br><span class="line">├─sda1            8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2            8:2    0   39G  0 part </span><br><span class="line">  ├─centos-root 253:0    0   36G  0 lvm  /</span><br><span class="line">  └─centos-swap 253:1    0    3G  0 lvm  [SWAP]</span><br><span class="line">sdb               8:16   0   30G  0 disk </span><br><span class="line">└─sdb1            8:17   0   30G  0 part </span><br><span class="line">sdc               8:32   0   30G  0 disk </span><br><span class="line">└─sdc1            8:33   0   30G  0 part </span><br><span class="line">sr0              11:0    1 1024M  0 rom  </span><br><span class="line"></span><br><span class="line">[root@cephL ceph-deploy]# ceph-deploy osd create --filestore --fs-type xfs --data /dev/sdb1 --journal /dev/sdc1 cephL</span><br><span class="line">[ceph_deploy.conf][DEBUG ] found configuration file at: /root/.cephdeploy.conf</span><br><span class="line">[ceph_deploy.cli][INFO  ] Invoked (2.0.0): /usr/bin/ceph-deploy osd create --filestore --fs-type xfs --data /dev/sdb1 --journal /dev/sdc1 cephL</span><br><span class="line">[ceph_deploy.cli][INFO  ] ceph-deploy options:</span><br><span class="line">[ceph_deploy.cli][INFO  ]  verbose                       : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  bluestore                     : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x22c7320&gt;</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cluster                       : ceph</span><br><span class="line">[ceph_deploy.cli][INFO  ]  fs_type                       : xfs</span><br><span class="line">[ceph_deploy.cli][INFO  ]  block_wal                     : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  default_release               : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  username                      : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  journal                       : /dev/sdc1</span><br><span class="line">[ceph_deploy.cli][INFO  ]  subcommand                    : create</span><br><span class="line">[ceph_deploy.cli][INFO  ]  host                          : cephL</span><br><span class="line">[ceph_deploy.cli][INFO  ]  filestore                     : True</span><br><span class="line">[ceph_deploy.cli][INFO  ]  func                          : &lt;function osd at 0x225ae60&gt;</span><br><span class="line">[ceph_deploy.cli][INFO  ]  ceph_conf                     : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  zap_disk                      : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  data                          : /dev/sdb1</span><br><span class="line">[ceph_deploy.cli][INFO  ]  block_db                      : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  dmcrypt                       : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  overwrite_conf                : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  dmcrypt_key_dir               : /etc/ceph/dmcrypt-keys</span><br><span class="line">[ceph_deploy.cli][INFO  ]  quiet                         : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  debug                         : False</span><br><span class="line">[ceph_deploy.osd][DEBUG ] Creating OSD on cluster ceph with data device /dev/sdb1</span><br><span class="line">[cephL][DEBUG ] connected to host: cephL </span><br><span class="line">[cephL][DEBUG ] detect platform information from remote host</span><br><span class="line">[cephL][DEBUG ] detect machine type</span><br><span class="line">[cephL][DEBUG ] find the location of an executable</span><br><span class="line">[ceph_deploy.osd][INFO  ] Distro info: CentOS Linux 7.4.1708 Core</span><br><span class="line">[ceph_deploy.osd][DEBUG ] Deploying osd to cephL</span><br><span class="line">[cephL][DEBUG ] write cluster configuration to /etc/ceph/&#123;cluster&#125;.conf</span><br><span class="line">[cephL][DEBUG ] find the location of an executable</span><br><span class="line">[cephL][INFO  ] Running command: /usr/sbin/ceph-volume --cluster ceph lvm create --filestore --data /dev/sdb1 --journal /dev/sdc1</span><br><span class="line">[cephL][DEBUG ] Running command: /bin/ceph-authtool --gen-print-key</span><br><span class="line">[cephL][DEBUG ] Running command: /bin/ceph --cluster ceph --name client.bootstrap-osd --keyring /var/lib/ceph/bootstrap-osd/ceph.keyring -i - osd new 8b7be4a6-b563-434e-b030-132880a10d31</span><br><span class="line">[cephL][DEBUG ] Running command: vgcreate --force --yes ceph-8e2515c1-6170-4299-b82c-a5a47681f946 /dev/sdb1</span><br><span class="line">[cephL][DEBUG ]  stdout: Physical volume "/dev/sdb1" successfully created.</span><br><span class="line">[cephL][DEBUG ]  stdout: Volume group "ceph-8e2515c1-6170-4299-b82c-a5a47681f946" successfully created</span><br><span class="line">[cephL][DEBUG ] Running command: lvcreate --yes -l 100%FREE -n osd-data-8b7be4a6-b563-434e-b030-132880a10d31 ceph-8e2515c1-6170-4299-b82c-a5a47681f946</span><br><span class="line">[cephL][DEBUG ]  stdout: Logical volume "osd-data-8b7be4a6-b563-434e-b030-132880a10d31" created.</span><br><span class="line">[cephL][DEBUG ] Running command: /bin/ceph-authtool --gen-print-key</span><br><span class="line">[cephL][DEBUG ] Running command: mkfs -t xfs -f -i size=2048 /dev/ceph-8e2515c1-6170-4299-b82c-a5a47681f946/osd-data-8b7be4a6-b563-434e-b030-132880a10d31</span><br><span class="line">[cephL][DEBUG ]  stdout: meta-data=/dev/ceph-8e2515c1-6170-4299-b82c-a5a47681f946/osd-data-8b7be4a6-b563-434e-b030-132880a10d31 isize=2048   agcount=4, agsize=1965824 blks</span><br><span class="line">[cephL][DEBUG ]          =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">[cephL][DEBUG ]          =                       crc=1        finobt=0, sparse=0</span><br><span class="line">[cephL][DEBUG ] data     =                       bsize=4096   blocks=7863296, imaxpct=25</span><br><span class="line">[cephL][DEBUG ]          =                       sunit=0      swidth=0 blks</span><br><span class="line">[cephL][DEBUG ] naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line">[cephL][DEBUG ] log      =internal log           bsize=4096   blocks=3839, version=2</span><br><span class="line">[cephL][DEBUG ]          =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">[cephL][DEBUG ] realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">[cephL][DEBUG ] Running command: mount -t xfs -o rw,noatime,inode64 /dev/ceph-8e2515c1-6170-4299-b82c-a5a47681f946/osd-data-8b7be4a6-b563-434e-b030-132880a10d31 /var/lib/ceph/osd/ceph-0</span><br><span class="line">[cephL][DEBUG ] Running command: chown -R ceph:ceph /dev/sdc1</span><br><span class="line">[cephL][DEBUG ] Running command: ln -s /dev/sdc1 /var/lib/ceph/osd/ceph-0/journal</span><br><span class="line">[cephL][DEBUG ] Running command: ceph --cluster ceph --name client.bootstrap-osd --keyring /var/lib/ceph/bootstrap-osd/ceph.keyring mon getmap -o /var/lib/ceph/osd/ceph-0/activate.monmap</span><br><span class="line">[cephL][DEBUG ]  stderr: got monmap epoch 1</span><br><span class="line">[cephL][DEBUG ] Running command: chown -R ceph:ceph /dev/sdc1</span><br><span class="line">[cephL][DEBUG ] Running command: chown -R ceph:ceph /var/lib/ceph/osd/ceph-0/</span><br><span class="line">[cephL][DEBUG ] Running command: ceph-osd --cluster ceph --osd-objectstore filestore --mkfs -i 0 --monmap /var/lib/ceph/osd/ceph-0/activate.monmap --osd-data /var/lib/ceph/osd/ceph-0/ --osd-journal /var/lib/ceph/osd/ceph-0/journal --osd-uuid 8b7be4a6-b563-434e-b030-132880a10d31 --setuser ceph --setgroup ceph</span><br><span class="line">[cephL][DEBUG ]  stderr: 2018-05-07 23:01:34.834993 7f315e466d00 -1 journal check: ondisk fsid 00000000-0000-0000-0000-000000000000 doesn't match expected 8b7be4a6-b563-434e-b030-132880a10d31, invalid (someone else's?) journal</span><br><span class="line">[cephL][DEBUG ]  stderr: 2018-05-07 23:01:34.865621 7f315e466d00 -1 journal do_read_entry(4096): bad header magic</span><br><span class="line">[cephL][DEBUG ] 2018-05-07 23:01:34.865667 7f315e466d00 -1 journal do_read_entry(4096): bad header magic</span><br><span class="line">[cephL][DEBUG ] 2018-05-07 23:01:34.865988 7f315e466d00 -1 read_settings error reading settings: (2) No such file or directory</span><br><span class="line">[cephL][DEBUG ]  stderr: 2018-05-07 23:01:34.916284 7f315e466d00 -1 created object store /var/lib/ceph/osd/ceph-0/ for osd.0 fsid 39f3b85e-ee3c-4d8d-93c2-7f7c8aa47121</span><br><span class="line">[cephL][DEBUG ] Running command: ceph-authtool /var/lib/ceph/osd/ceph-0/keyring --create-keyring --name osd.0 --add-key AQBDavBa0IPpIBAAlQxlaWxNrnTX/uaOMdZEQw==</span><br><span class="line">[cephL][DEBUG ]  stdout: creating /var/lib/ceph/osd/ceph-0/keyring</span><br><span class="line">[cephL][DEBUG ] added entity osd.0 auth auth(auid = 18446744073709551615 key=AQBDavBa0IPpIBAAlQxlaWxNrnTX/uaOMdZEQw== with 0 caps)</span><br><span class="line">[cephL][DEBUG ] Running command: chown -R ceph:ceph /var/lib/ceph/osd/ceph-0/keyring</span><br><span class="line">[cephL][DEBUG ] --&gt; ceph-volume lvm prepare successful for: /dev/sdb1</span><br><span class="line">[cephL][DEBUG ] Running command: ln -snf /dev/sdc1 /var/lib/ceph/osd/ceph-0/journal</span><br><span class="line">[cephL][DEBUG ] Running command: chown -R ceph:ceph /dev/sdc1</span><br><span class="line">[cephL][DEBUG ] Running command: systemctl enable ceph-volume@lvm-0-8b7be4a6-b563-434e-b030-132880a10d31</span><br><span class="line">[cephL][DEBUG ]  stderr: Created symlink from /etc/systemd/system/multi-user.target.wants/ceph-volume@lvm-0-8b7be4a6-b563-434e-b030-132880a10d31.service to /usr/lib/systemd/system/ceph-volume@.service.</span><br><span class="line">[cephL][DEBUG ] Running command: systemctl start ceph-osd@0</span><br><span class="line">[cephL][DEBUG ] --&gt; ceph-volume lvm activate successful for osd ID: 0</span><br><span class="line">[cephL][DEBUG ] --&gt; ceph-volume lvm create successful for: /dev/sdb1</span><br><span class="line">[cephL][INFO  ] checking OSD status...</span><br><span class="line">[cephL][DEBUG ] find the location of an executable</span><br><span class="line">[cephL][INFO  ] Running command: /bin/ceph --cluster=ceph osd stat --format=json</span><br><span class="line">[ceph_deploy.osd][DEBUG ] Host cephL is now ready for osd use.</span><br></pre></td></tr></table></figure><h3 id="移除OSD"><a href="#移除OSD" class="headerlink" title="移除OSD"></a>移除OSD</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使OSD进入out状态</span><br><span class="line">[root@cephL ceph-deploy]# ceph osd out 0</span><br><span class="line">marked out osd.0.</span><br><span class="line"><span class="meta">#</span> 观察数据迁移</span><br><span class="line">[root@cephL ceph-deploy]# ceph -w</span><br><span class="line"><span class="meta">#</span> 停止对应的OSD进程</span><br><span class="line">[root@cephL ceph-deploy]# sudo systemctl stop ceph-osd@0</span><br><span class="line"><span class="meta">#</span> 清除数据</span><br><span class="line">[root@cephL ceph-deploy]# ceph osd purge 0 --yes-i-really-mean-it</span><br><span class="line">purged osd.0</span><br><span class="line"><span class="meta">#</span> 在ceph.conf中移除osd配置</span><br><span class="line">[root@cephL ceph-deploy]# vi /etc/ceph/ceph.conf</span><br></pre></td></tr></table></figure><h3 id="部署CEPH-MGR"><a href="#部署CEPH-MGR" class="headerlink" title="部署CEPH-MGR"></a>部署CEPH-MGR</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">install netstat tool</span><br><span class="line">[root@cephL ~]# yum -y install net-tools</span><br><span class="line"></span><br><span class="line">[root@cephL ceph-deploy]# ceph-deploy mgr create cephL:cephLMGR</span><br><span class="line">ceph        1111       1  0 12:57 ?        00:00:08 /usr/bin/ceph-mgr -f --cluster ceph --id cephLMGR --setuser ceph --setgroup ceph</span><br><span class="line">[root@cephL ceph-deploy]# ceph mgr module enable dashboard</span><br><span class="line"></span><br><span class="line">open 7000 port</span><br><span class="line">[root@cephL ceph-deploy]# sudo firewall-cmd --zone=public --add-port=7000/tcp --permanent</span><br><span class="line">[root@cephL ceph-deploy]# sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>相关命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ceph-deploy]# ceph mgr module ls</span><br><span class="line">[root@cephL ceph-deploy]# ceph mgr services</span><br><span class="line">[root@cephL ceph-deploy]# ceph tell mgr help</span><br></pre></td></tr></table></figure><h3 id="部署MDS并创建CEPH-FS"><a href="#部署MDS并创建CEPH-FS" class="headerlink" title="部署MDS并创建CEPH FS"></a>部署MDS并创建CEPH FS</h3><p><img src="http://docs.ceph.com/docs/master/_images/ditaa-b5a320fc160057a1a7da010b4215489fa66de242.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ceph-deploy]# ceph-deploy mds create cephL</span><br><span class="line">ceph        2150       1  0 13:00 ?        00:00:00 /usr/bin/ceph-mds -f --cluster ceph --id cephL --setuser ceph --setgroup ceph</span><br></pre></td></tr></table></figure><p>Ceph文件系统至少需要两个RADOS pool，一个用于存储数据，一个用于存储元数据。</p><p>配置这些pool时，可以考虑：</p><p>​     对元数据pool使用更多的replication数量，因为该pool中的任何数据丢失都可能导致整个文件系统无法访问。</p><p>​     为元数据pool使用SSD等较低延迟的存储设备，因为这将直接影响客户端上文件系统操作的延迟。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool create cephfs_data &lt;pg_num&gt;</span><br><span class="line">ceph osd pool create cephfs_metadata &lt;pg_num&gt;</span><br><span class="line">例如：</span><br><span class="line">[root@cephL ceph-deploy]# ceph osd pool create cephfs_data 32</span><br><span class="line">[root@cephL ceph-deploy]# ceph osd pool create cephfs_metadata 32</span><br></pre></td></tr></table></figure><p>更改pool的副本数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool set &#123;poolname&#125; size &#123;num-replicas&#125;</span><br><span class="line">例如：</span><br><span class="line">[root@cephL ceph-deploy]# ceph osd pool set cephfs_data size 1</span><br><span class="line">[root@cephL ceph-deploy]# ceph osd pool set cephfs_data size 1</span><br></pre></td></tr></table></figure><p>一旦创建了pool，就可以使用fs new命令启用文件系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ceph fs new &lt;fs_name&gt; &lt;metadata&gt; &lt;data&gt;</span><br><span class="line">例如：</span><br><span class="line">ceph fs new cephFS cephfs_metadata cephfs_data</span><br></pre></td></tr></table></figure><p>一旦创建了文件系统，您的MDS将能够进入active状态。例如，在single MDS system中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cephL ceph-deploy]# ceph mds stat</span><br><span class="line">cephFS-1/1/1 up  &#123;0=cephL=up:active&#125;</span><br></pre></td></tr></table></figure><p>一旦创建了文件系统并且MDS处于active状态，你就可以挂载文件系统了。如果您创建了多个文件系统，在挂载文件系统时，选择使用哪一个。</p><p>如果创建了多个文件系统，并且client在挂载时没有指定挂载哪个文件系统，你可以使用ceph fs set-default命令来设置client默认看到的文件系统。</p><p>挂载CEPH FS ( File System ) 有两种方式：</p><p><strong>KERNEL DRIVER</strong></p><p>要挂载Ceph文件系统，您可以在知道monitor主机IP地址的情况下使用mount命令，或使用mount.ceph utility将monitor主机名解析为IP地址。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /mnt/mycephfs</span><br><span class="line">sudo mount -t ceph 192.168.0.1:6789:/ /mnt/mycephfs</span><br><span class="line">例如：</span><br><span class="line">[root@cephL ceph-deploy]# sudo mount -t ceph 192.168.56.101:6789:/ /mnt/mycephfs</span><br><span class="line">mount error 22 = Invalid argument</span><br><span class="line">Ceph 10.x (Jewel)版本开始，如果使用kernel方式（无论是krbd还是cephFS）官方推荐至少使用4.x的kernel。</span><br><span class="line">如果无法升级linux kernel，那么映射rbd请使用librbd方式，cephFS请使用fuse方式。</span><br></pre></td></tr></table></figure><p>如果挂载Ceph文件系统时开启了cephx authentication，您必须指定user和secret。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t ceph 192.168.0.1:6789:/ /mnt/mycephfs -o name=admin,secret=AQATSKdNGBnwLhAAnNDKnH65FmVKpXZJVasUeQ==</span><br></pre></td></tr></table></figure><p>上述用法在Bash history中留下了secret。更安全的方法是从文件中读取secret。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t ceph 192.168.0.1:6789:/ /mnt/mycephfs -o name=admin,secretfile=/etc/ceph/admin.secret</span><br></pre></td></tr></table></figure><p>如果您有多个文件系统，请使用mds_namespace选项指定要挂载的文件系统，例如-o mds_namespace=myfs</p><p>要卸载Ceph文件系统，可以使用umount命令。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo umount /mnt/mycephfs</span><br><span class="line">提示：在执行此命令之前，请确保您不在挂载的目录中。</span><br></pre></td></tr></table></figure><p><strong>FUSE</strong></p><p>在用户空间（FUSE）中挂载Ceph文件系统之前，请确保客户端主机具有Ceph配置文件的副本以及Ceph元数据服务器的CAPS keyring。</p><p>在您的客户端主机上，将Ceph配置文件从monitor主机复制到/etc/ceph目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/ceph</span><br><span class="line">sudo scp &#123;user&#125;@&#123;server-machine&#125;:/etc/ceph/ceph.conf /etc/ceph/ceph.conf</span><br></pre></td></tr></table></figure><p>在您的客户端主机上，将monitor主机的Ceph keyring复制到/etc/ceph目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo scp &#123;user&#125;@&#123;server-machine&#125;:/etc/ceph/ceph.keyring /etc/ceph/ceph.keyring</span><br></pre></td></tr></table></figure><p>确保Ceph配置文件和keyring在您的客户端机器上设置了适当的权限（例如，chmod 644）。</p><p>要将Ceph文件系统挂在为FUSE，可以使用ceph-fuse命令。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /home/usernname/cephfs</span><br><span class="line">sudo ceph-fuse -m 192.168.0.1:6789 /home/username/cephfs</span><br></pre></td></tr></table></figure><p>如果您拥有多个文件系统，请使用 –client_mds_namespace 命令行参数指定要挂载哪一个文件系统，或者向ceph.conf中添加client_mds_namespace设置。</p><p>要自动挂载ceph-fuse，您可以在system fstab中添加一个条目。此外还可以使用ceph-fuse@.service和ceph-fuse.target systemd units。通常这些unit文件为ceph-fuse描述默认的dependencies和推荐的execution context。例如使用ceph-fuse挂载到/mnt：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start ceph-fuse@/mnt.service</span><br></pre></td></tr></table></figure><p>持久化挂载点可通过以下方式进行设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable ceph-fuse@/mnt.service</span><br></pre></td></tr></table></figure><h3 id="部署RGW"><a href="#部署RGW" class="headerlink" title="部署RGW"></a>部署RGW</h3><p><img src="http://docs.ceph.com/docs/master/_images/ditaa-50d12451eb76c5c72c4574b08f0320b39a42e5f1.png" alt></p><p>Ceph Object Gateway原来叫RADOS Gateway，它是构建在librados之上的对象存储接口，为应用程序提供了一个RESTful gateway，用户可以通过HTTP协议访问Ceph存储集群。</p><p>Ceph Object Storage支持两个接口：</p><ul><li><p>S3-compatible：与Amazon S3 RESTful API中一些子集兼容的接口，提供对象存储功能。</p></li><li><p>Swift-compatible：与OpenStack Swift API中一些子集兼容的接口，提供对象存储功能。</p></li></ul><p>Ceph Object Storage使用Ceph Object Gateway daemon (radosgw)，它是一个HTTP server，用于与Ceph存储集群进行交互。由于它提供了与OpenStack Swift和Amazon S3兼容的接口，因此Ceph Object Gateway具有自己的用户管理。Ceph Object Gateway可以将数据存储在与Ceph Filesystem和Ceph Block Device相同的Ceph存储集群中。但是我相信在生产环境中不会这么做，如果数据量大的话会影响Ceph Filesystem和Ceph Block Device的性能，个人一般会独立出一个Ceph Object Gateway集群。S3和Swift API共享一个通用的namespace，因此您可以使用一个API编写数据并使用另一个API检索它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Note：Ceph Object Storage 不使用 Ceph Metadata Server</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 必须部署MGR，才能部署RGW</span><br><span class="line"></span><br><span class="line">[root@cephL ceph-deploy]# ceph-deploy rgw create cephL:RGW</span><br><span class="line">root        2799       1  0 13:13 ?        00:00:00 /usr/bin/radosgw -f --cluster ceph --name client.rgw.RGW --setuser ceph --setgroup ceph</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重启RGW</span><br><span class="line">[root@cephL ~]# systemctl restart ceph-radosgw@rgw.cephL.service</span><br><span class="line">[root@cephL ~]# systemctl restart ceph-radosgw@rgw</span><br><span class="line"></span><br><span class="line">问题一，这难道是ceph-deploy 2.0.0的坑？</span><br><span class="line">[root@cephL ~]# tailf /var/log/ceph/ceph-client.rgw.log</span><br><span class="line">2018-05-11 22:30:31.999421 7f537c31fe00  0 ceph version 12.2.4 (52085d5249a80c5f5121a76d6288429f35e4e77b) luminous (stable), process (unknown), pid 3450</span><br><span class="line">2018-05-11 22:30:32.021546 7f537c31fe00 -1 auth: unable to find a keyring on /var/lib/ceph/radosgw/ceph-rgw/keyring: (2) No such file or directory</span><br><span class="line">2018-05-11 22:30:32.021561 7f537c31fe00 -1 monclient: ERROR: missing keyring, cannot use cephx for authentication</span><br><span class="line">2018-05-11 22:30:32.021563 7f537c31fe00  0 librados: client.rgw initialization error (2) No such file or directory</span><br><span class="line">2018-05-11 22:30:32.022900 7f537c31fe00 -1 Couldn't init storage provider (RADOS)</span><br><span class="line"></span><br><span class="line">[root@cephL radosgw]# pwd</span><br><span class="line">/var/lib/ceph/radosgw</span><br><span class="line">[root@cephL radosgw]# ls</span><br><span class="line">ceph-rgw.RGW</span><br><span class="line">[root@cephL radosgw]# mv ceph-rgw.RGW  ceph-rgw</span><br></pre></td></tr></table></figure><h3 id="配置变动"><a href="#配置变动" class="headerlink" title="配置变动"></a>配置变动</h3><p>在L版中，删除pool的操作做了强制限制。需要在/etc/ceph/ceph.conf中加入相关参数才允许删除pool。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 允许删除pool，需要添加</span><br><span class="line">mon allow pool delete = true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go命令</title>
      <link href="/2018/04/07/Go%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/04/07/Go%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Go命令"><a href="#Go命令" class="headerlink" title="Go命令"></a>Go命令</h1><p>Go发行版包含了一个名为go的命令，实现Go包和命令的自动下载，编译，安装和测试。</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>Go从开始就明确目标：能够仅使用源代码本身的信息来构建Go代码，而不需要编写makefile或Makefile。</p><p>起初，在没有Go编译器的时候，为了达到自动化构建的目的，Go单独使用一个程序生成makefile。新的go命令的目的使我们回到这个理想。</p><h2 id="Go的惯例"><a href="#Go的惯例" class="headerlink" title="Go的惯例"></a>Go的惯例</h2><p>该go命令要求代码遵循几个关键的惯例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、导入路径源自源码的URL。对于Bitbucket、GitHub、Google Code和Launchpad来说， 其代码仓库的根目录由该仓库的主URL确定，无需 http:// 前缀。 子目录名附加在该路径之后。</span><br><span class="line">例如https://github.com/golang/example这个项目，仓库根目录的导入路径为“github.com/golang/example”。 stringutil 包存储在子目录中，因此它的导入路径为“github.com/golang/example/stringutil”。</span><br><span class="line">2、本地文件系统中存储源码的位置源自导入路径。特别地，首选路径为 $GOPATH/src/&lt;导入路径&gt;。若 $GOPATH 未设置， go命令会回到标准Go包存储源码的地方，即 $GOROOT/src/pkg/&lt;导入路径&gt;。 若 $GOPATH 设置了多个路径，go命令就会尝试这些目录的每一个 &lt;目录&gt;/src/&lt;导入路径&gt;。</span><br><span class="line">3、源码树中的每个目录都对应于单个包。通过将一个目录限定为单个包， 我们无需先指定目录，再从该目录中指定包来创建混合的导入路径了。此外， 大部分文件管理工具和用户界面，都是将目录作为基本工作单元的。 将基本的Go单元—包—同化为文件系统的结构，也就意味着文件系统工具成了Go包的工具。 复制、移动或删除一个包就对应于复制、移动或删除一个目录。</span><br><span class="line">4、包只通过源码中的信息构建。这会让它更容易适应构建环境和条件的改变。 例如，若我们允许额外的配置（如编译器标志或命令行选项等），那么每当构建工具被更改后， 相应的配置也需要更新；它天生还会绑定至特定的工具链。</span><br></pre></td></tr></table></figure><h2 id="go-命令基础"><a href="#go-命令基础" class="headerlink" title="go 命令基础"></a>go 命令基础</h2><p>首先配置GOPATH，进入此目录后，我们就可以添加一些源码了。假设我们想要使用codesearch项目中的索引包， 以及一个左倾红黑树包。我们可以用“go get”子命令安装二者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go get code.google.com/p/codesearch/index</span><br><span class="line">$ go get github.com/petar/GoLLRB/llrb</span><br></pre></td></tr></table></figure><p>这两个包现在已被下载并安装到我们的 $GOPATH 目录中了。该目录树现在包含了 src/code.google.com/p/codesearch/index/ 和 src/github.com/petar/GoLLRB/llrb/ 这两个目录，以及那些库和依赖的已编译包 （在 pkg/ 中)</p><p>“go list”子命令会列出其对应实参的导入路径，而模式”./…” 意为从当前目录（”./“）开始，查找该目录下的所有包（”…”）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yujiangdeMBP-13:go yujiang$ go list ./...</span><br><span class="line">github.com/prometheus/prometheus/cmd/prometheus</span><br><span class="line">github.com/prometheus/prometheus/cmd/promtool</span><br></pre></td></tr></table></figure><p>我们也可以测试这些包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go test ./...</span><br></pre></td></tr></table></figure><p>“go install”子命令会将包的最新副本安装到pkg目录中。由于 go 命令会分析依赖关系，因此，除非该包导入的其它包已过期，否则 “go install” 也会递归地根据依赖关系安装它们。</p><h3 id="go-get"><a href="#go-get" class="headerlink" title="go get"></a>go get</h3><p>可以根据要求和实际情况从互联网上下载或更新指定的代码包及其依赖包，并对它们进行编译和安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# go help get</span><br><span class="line">usage: go get [-d] [-f] [-fix] [-insecure] [-t] [-u] [-v] [build flags] [packages]</span><br></pre></td></tr></table></figure><p>-d标志指示在下载软件包后停止，不安装软件包。</p><p>-f标志仅在设置-u时有效，该标记会让命令程序忽略掉对已下载代码包的导入路径的检查。如果下载并安装的代码包所属的项目是你从别人那里Fork过来的，那么这样做就尤为重要了。</p><p>-fix标志指示命令程序在下载代码包后先执行修正动作，而后再进行编译和安装。</p><p>-insecure标志允许命令程序使用非安全的scheme（如HTTP）去下载指定的代码包。如果你用的代码仓库（如公司内部的Gitlab）没有HTTPS支持，可以添加此标记。请在确定安全的情况下使用它。</p><p>-t标志指示让命令程序同时下载并安装指定的代码包中的测试源码文件中依赖的代码包。</p><p>-u标志指示让命令利用网络来更新已有代码包及其依赖包。默认情况下，该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。</p><p>-v标志启用详细的进度和调试输出。</p><p>-x标志可以看到<code>go get</code>命令执行过程中所使用的所有命令</p><p>Get也接受build flags来控制安装。请参阅<code>go help build</code>。</p><p>当检出一个新的包时，get创建目标目录<code>GOPATH/src/&lt;import-path&gt;</code>。如果GOPATH包含多个条目，get使用第一个条目。欲了解更多详情，请参阅：<code>go help gopath</code>。</p><p>在checkout或update软件包时，请查找与本地安装的Go版本相匹配的branch或tag。最重要的规则是，如果本地安装运行版本“go1”，则搜索名为“go1”的branch或tag。如果不存在这样的版本，它将检索软件包的默认branch。</p><p>当去checkout或update git repository时，它还会更新repository引用的任何git子模块。</p><p>永远不要checksout或update存储在vendor目录中的代码。</p><p>有关指定软件包的更多信息，请参阅<code>go help packages</code>。</p><p>有关<code>go get</code>如何查找要下载的源代码的更多信息，请参阅<code>go help importpath</code>。</p><p>另请参见：<code>go build</code>，<code>go install</code>，<code>go clean</code>。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>【1】<a href="http://wiki.jikexueyuan.com/project/go-command-tutorial/0.3.html" target="_blank" rel="noopener">http://wiki.jikexueyuan.com/project/go-command-tutorial/0.3.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置 Golang 开发环境</title>
      <link href="/2018/04/06/Golang-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/04/06/Golang-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="配置-Golang-开发环境"><a href="#配置-Golang-开发环境" class="headerlink" title="配置 Golang 开发环境"></a>配置 Golang 开发环境</h1><p>1、首先根据你所使用的系统，下载对应的Golang包。</p><p>国内可以在这里下载：<code>https://studygolang.com/dl</code></p><p>2、然后配置Golang的环境变量，配置方法类似于Java环境变量</p><p>持久化方法：编辑 ~/.bash_profile 文件，配置自己的目录，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GOPATH=&quot;/Users/yujiang/go&quot;</span><br><span class="line">GOROOT=&quot;/usr/local/go&quot;</span><br><span class="line"></span><br><span class="line"># 测试段</span><br><span class="line">export GOPATH=&quot;/root/gocodes&quot;</span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOBIN=$GOROOT/bin</span><br><span class="line">export GOPKG=$GOROOT/pkg/tool/linux_amd64 </span><br><span class="line">export GOARCH=amd64</span><br><span class="line">export GOOS=linux</span><br><span class="line">export GOPATH=/Golang</span><br><span class="line">export PATH=$PATH:$GOBIN:$GOPKG:$GOPATH/bin</span><br></pre></td></tr></table></figure><p>使配置生效<br><code>source ~/.bash_profile</code></p><p><strong>主要的环境变量有:</strong></p><p>GOROOT：你所安装的go可执行文件的目录</p><p><code>GOROOT=&quot;/usr/local/go&quot;</code></p><p>GOPATH：是自己的项目所在目录，也就是所谓的工作目录，可以配置多个目录，使用’;’分隔。</p><p>GOPATH如果配置多个目录，使用<code>go install/go get</code>时，会默认匹配第一个目录，后面的忽略。</p><p><code>GOPATH=&quot;/Users/yujiang/go&quot;</code></p><p>3、工作目录结构</p><p>通常在你的工作目录中，包含3个子目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin 存放编译后的二进制文件</span><br><span class="line">src 存放源码文件</span><br><span class="line">pkg 存放编译后的库文件*.a</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DEPLOY A CLUSTER MANUALLY - MANUAL DEPLOYMENT</title>
      <link href="/2017/12/03/DEPLOY-A-CLUSTER-MANUALLY-MANUAL-DEPLOYMENT/"/>
      <url>/2017/12/03/DEPLOY-A-CLUSTER-MANUALLY-MANUAL-DEPLOYMENT/</url>
      
        <content type="html"><![CDATA[<p>所有Ceph集群都至少需要一个monitor，并且至少需要与群集上存储的对象的副本一样多的OSD。 Bootstrapping the initial monitor(s) 是部署Ceph存储集群的第一步。Monitor部署还为整个群集设置了重要的标准，例如池副本的数量，每个OSD的placement groups数量，心跳间隔，是否需要身份验证等。大多数这些值是默认设置的，因此在生产环境设置集群时了解这些值是有用的。</p><p>按照与Installation (Quick)<code>http://docs.ceph.com/docs/master/start/</code>相同的配置，我们将建立一个集群，node1为monitor节点，node2和node3为OSD节点。</p><p><img src="/images/DEPLOY_A_CLUSTER_MANUALLY___MANUAL_DEPLOYMENT.png" alt></p><p><strong>MONITOR BOOTSTRAPPING</strong></p><p>Bootstrapping a monitor（Ceph存储集群，理论上）需要一些东西：</p><ul><li>Unique Identifier: fsid是集群的唯一标识符，当Ceph存储集群主要用于Ceph Filesystem时，代表从日期生成的File System ID</li><li>Cluster Name: Ceph集群有一个集群名称，这是一个没有空格的简单字符串。默认群集名称是ceph，但是您可以指定不同的群集名称。当您使用多个群集时，您需要清楚地了解您正在使用哪个群集，这时覆盖默认的集群名称特别有用。例如，当您在federated architecture中运行多个群集时，群集名称（例如，us-west，us-east）标识当前CLI会话的群集。注：要在命令行接口上标识集群名称，请指定具有群集名称的Ceph配置文件（例如，ceph.conf，us-west.conf，us-east.conf等）。另请参阅CLI使用（ceph –cluster {cluster-name}）。</li><li>Monitor Name: 群集中的每个monitor实例都有唯一的名称。通常情况下，Ceph Monitor名称是主机名（我们推荐每个单独的主机使用一个Ceph Monitor，Ceph OSD Daemons不能混合部署Ceph Monitors）。您可以通过hostname -s检索short hostname。</li><li>Monitor Map: Bootstrapping the initial monitor(s)需要您生成一个monitor map。monitor map需要fsid，群集名称（或使用默认值）以及至少一个主机名和它的IP地址。</li><li>Monitor Keyring: Monitors通过secret key相互通信。当bootstrapping the initial monitor(s)时，您必须生成一个带有monitor secret的keyring并提供它。</li><li>Administrator Keyring: 要使用ceph CLI工具，你必须有一个client.admin user。因此，您必须生成admin user和keyring，并且还必须将client.admin user添加到monitor keyring中。</li></ul><p>上述要求并不意味着一个Ceph配置文件的建立。但是，作为最佳做法，我们建议创建一个Ceph配置文件并使用fsid，mon initial members和mon host配置填充它。</p><p>您也可以在运行时获取并设置所有的monitor settings。但是，Ceph配置文件可能只包含那些覆盖默认值的settings。将settings添加到Ceph配置文件时，这些settings会覆盖默认settings。在Ceph配置文件中维护这些settings可以更容易地维护集群。</p><p>步骤如下：</p><p>1、登录到initial monitor node(s)：</p><pre><code>ssh {hostname}</code></pre><p>For example:</p><pre><code>ssh node1</code></pre><p>2、确保你有一个Ceph配置文件的目录。默认情况下，Ceph使用/etc/ceph。安装ceph时，安装程序将自动创建/etc/ceph目录。</p><pre><code>ls /etc/ceph</code></pre><p>注意：清除群集时，部署工具可能会删除此目录（例如，ceph-deploy purgedata {node-name}, ceph-deploy purge {node-name}）。</p><p>3、创建一个Ceph配置文件。默认情况下，Ceph使用ceph.conf，其中ceph反映了集群名称。</p><pre><code>sudo vim /etc/ceph/ceph.conf</code></pre><p>4、为您的群集生成一个唯一的ID（即fsid）。</p><pre><code>uuidgen</code></pre><p>5、添加唯一的ID到您的Ceph配置文件。</p><pre><code>fsid = {UUID}</code></pre><p>For example:</p><pre><code>fsid = a7f64266-0894-4f1e-a635-d0aeaca0e993</code></pre><p>6、将initial monitor(s)添加到您的Ceph配置文件中。</p><pre><code>mon initial members = {hostname}[,{hostname}]</code></pre><p>For example:</p><pre><code>mon initial members = node1</code></pre><p>7、将initial monitor(s)的IP地址添加到您的Ceph配置文件并保存该文件。</p><pre><code>mon host = {ip-address}[,{ip-address}]</code></pre><p>For example:</p><pre><code>mon host = 192.168.0.1</code></pre><p>注意：您可以使用IPv6地址而不是IPv4地址，但必须将ms bind ipv6设置为true。有关网络配置的详情，请参阅Network Configuration Reference<code>http://docs.ceph.com/docs/master/rados/configuration/network-config-ref/</code>。</p><p>8、为您的群集创建一个keyring并生成一个monitor secret key。</p><pre><code>ceph-authtool --create-keyring /tmp/ceph.mon.keyring --gen-key -n mon. --cap mon &apos;allow *&apos;</code></pre><p>9、生成一个administrator keyring，生成一个client.admin user并将user添加到该keyring中。</p><pre><code>sudo ceph-authtool --create-keyring /etc/ceph/ceph.client.admin.keyring --gen-key -n client.admin --set-uid=0 --cap mon &apos;allow *&apos; --cap osd &apos;allow *&apos; --cap mds &apos;allow *&apos; --cap mgr &apos;allow *&apos;</code></pre><p>10、生成一个bootstrap-osd keyring，生成一个client.bootstrap-osd user并将user添加到该keyring。</p><pre><code>sudo ceph-authtool --create-keyring /var/lib/ceph/bootstrap-osd/ceph.keyring --gen-key -n client.bootstrap-osd --cap mon &apos;profile bootstrap-osd&apos;</code></pre><p>11、将生成的keys添加到ceph.mon.keyring。</p><pre><code>sudo ceph-authtool /tmp/ceph.mon.keyring --import-keyring /etc/ceph/ceph.client.admin.keyringsudo ceph-authtool /tmp/ceph.mon.keyring --import-keyring /var/lib/ceph/bootstrap-osd/ceph.keyring</code></pre><p>12、使用hostname(s), host IP address(es)和FSID生成monitor map。 将其另存为/tmp/monmap：</p><pre><code>monmaptool --create --add {hostname} {ip-address} --fsid {uuid} /tmp/monmap</code></pre><p>For example:</p><pre><code>monmaptool --create --add node1 192.168.0.1 --fsid a7f64266-0894-4f1e-a635-d0aeaca0e993 /tmp/monmap</code></pre><p>13、在monitor host(s)上创建一个默认数据目录（或多个目录）。</p><pre><code>sudo mkdir /var/lib/ceph/mon/{cluster-name}-{hostname}</code></pre><p>For example:</p><pre><code>sudo -u ceph mkdir /var/lib/ceph/mon/ceph-node1</code></pre><p>有关详细信息，请参阅Monitor Config Reference - Data <code>http://docs.ceph.com/docs/master/rados/configuration/mon-config-ref/#data</code>。</p><p>14、向monitor daemon(s)填充monitor map 和 keyring。</p><pre><code>sudo -u ceph ceph-mon [--cluster {cluster-name}] --mkfs -i {hostname} --monmap /tmp/monmap --keyring /tmp/ceph.mon.keyring</code></pre><p>For example:</p><pre><code>sudo -u ceph ceph-mon --mkfs -i node1 --monmap /tmp/monmap --keyring /tmp/ceph.mon.keyring</code></pre><p>15、考虑配置Ceph configuration file。 常用settings包括以下内容：</p><pre><code>[global]fsid = {cluster-id}mon initial members = {hostname}[, {hostname}]mon host = {ip-address}[, {ip-address}]public network = {network}[, {network}]cluster network = {network}[, {network}]auth cluster required = cephxauth service required = cephxauth client required = cephxosd journal size = {n}osd pool default size = {n}  # Write an object n times.osd pool default min size = {n} # Allow writing n copies in a degraded state.osd pool default pg num = {n}osd pool default pgp num = {n}osd crush chooseleaf type = {n}</code></pre><p>在前面的示例中，配置的[global]部分可能如下所示：</p><pre><code>[global]fsid = a7f64266-0894-4f1e-a635-d0aeaca0e993mon initial members = node1mon host = 192.168.0.1public network = 192.168.0.0/24auth cluster required = cephxauth service required = cephxauth client required = cephxosd journal size = 1024osd pool default size = 3osd pool default min size = 2osd pool default pg num = 333osd pool default pgp num = 333osd crush chooseleaf type = 1</code></pre><p>16、touch the done 文件。<br>标记monitor已被创建并准备好启动：</p><pre><code>sudo touch /var/lib/ceph/mon/ceph-node1/done</code></pre><p>17、启动monitor(s).<br>对于大多数发行版，现在通过systemd启动服务：</p><pre><code>sudo systemctl start ceph-mon@node1</code></pre><p>对于Ubuntu Trusty，请使用Upstart：</p><pre><code>sudo start ceph-mon id=node1 [cluster={cluster-name}]</code></pre><p>在这种情况下，要在每次重新启动时启动守护进程，必须创建两个空文件，如下所示：</p><pre><code>sudo touch /var/lib/ceph/mon/{cluster-name}-{hostname}/upstart</code></pre><p>For example:</p><pre><code>sudo touch /var/lib/ceph/mon/ceph-node1/upstart</code></pre><p>对于以前的Debian/CentOS/RHEL，使用sysvinit：</p><pre><code>sudo /etc/init.d/ceph start mon.node1</code></pre><p>18、确认monitor正在运行。</p><pre><code>ceph -s</code></pre><p>您应该看到monitor已启动并正在运行的输出，并且您应该看到一个health error，指出placement groups处于非活动状态（inactive）。它应该看起来像这样：</p><pre><code>cluster:  id:     a7f64266-0894-4f1e-a635-d0aeaca0e993  health: HEALTH_OKservices:  mon: 1 daemons, quorum node1  mgr: node1(active)  osd: 0 osds: 0 up, 0 indata:  pools:   0 pools, 0 pgs  objects: 0 objects, 0 bytes  usage:   0 kB used, 0 kB / 0 kB avail  pgs:</code></pre><p>注意：一旦添加OSD并启动它们后，placement group health errors应该消失。 有关详细信息，请参阅Adding OSDs<code>http://docs.ceph.com/docs/master/install/manual-deployment/#adding-osds</code>。</p><p><strong>MANAGER DAEMON CONFIGURATION</strong></p><p>在运行ceph-mon daemon的每个node上，也应该设置一个ceph-mgr daemon。<br>请参阅ceph-mgr administrator’s guide<code>http://docs.ceph.com/docs/master/mgr/administrator/#mgr-administrator-guide</code></p><p>ADDING OSDS</p><p>一旦你的initial monitor(s)运行，你就应该添加OSD。除非有足够的OSD来处理对象的副本数（例如，osd pool default size = 2至少需要两个OSD），否则您的集群无法达到active + clean状态。在bootstrapping你的monitor之后，您的群集有一个默认的CRUSH map; 然而，CRUSH map没有任何Ceph OSD Daemons映射到Ceph节点。</p><p>SHORT FORM</p><p>Ceph提供了ceph-disk实用程序，它可以用于Ceph的prepare disk,partition或directory。ceph-disk实用程序通过incrementing the index来创建OSD ID。 另外，ceph-disk会将新的OSD添加到主机下的CRUSH map中。执行ceph-disk -h获取CLI详细信息。ceph-disk实用程序可以自动执行下面的Long Form<code>http://docs.ceph.com/docs/master/install/manual-deployment/#long-form</code>的步骤。要使用short form的过程创建前两个OSD，请在node2和node3上执行以下操作：</p><p>1、Prepare the OSD</p><pre><code>ssh {node-name}sudo ceph-disk prepare --cluster {cluster-name} --cluster-uuid {uuid} {data-path} [{journal-path}]</code></pre><p>For example:</p><pre><code>ssh node1sudo ceph-disk prepare --cluster ceph --cluster-uuid a7f64266-0894-4f1e-a635-d0aeaca0e993 --fs-type ext4 /dev/hdd1</code></pre><p>2、Activate the OSD:</p><pre><code>sudo ceph-disk activate {data-path} [--activate-key {path}]</code></pre><p>For example:</p><pre><code>sudo ceph-disk activate /dev/hdd1</code></pre><p>注意：如果Ceph Node上没有/var/lib/ceph/bootstrap-osd/{cluster}.keyring副本，请使用–activate-key参数。</p><p>LONG FORM<br>没有任何帮助工具的好处，使用以下过程创建一个OSD并将其添加到群集和CRUSH map。要使用long form过程创建前两个OSD，请为每个OSD执行以下步骤。<br>注意：这个过程没有描述利用dm-crypt ‘lockbox’部署dm-crypt。<br>1、Connect to the OSD host and become root.</p><pre><code>ssh {node-name}sudo bash</code></pre><p>2、生成OSD的UUID。</p><pre><code>UUID=$(uuidgen)</code></pre><p>3、为OSD生成一个cephx key。</p><pre><code>OSD_SECRET=$(ceph-authtool --gen-print-key)</code></pre><p>4、创建OSD。请注意，如果您需要重新使用以前销毁的OSD ID，OSD ID可以作为ceph osd的附加参数提供。我们假设client.bootstrap-osd key存在于机器上。您也可以在存在该密钥的其他主机上以client.admin身份执行此命令：</p><pre><code>ID=$(echo &quot;{\&quot;cephx_secret\&quot;: \&quot;$OSD_SECRET\&quot;}&quot; | \   ceph osd new $UUID -i - \   -n client.bootstrap-osd -k /var/lib/ceph/bootstrap-osd/ceph.keyring)</code></pre><p>5、在新的OSD上创建默认目录。</p><pre><code>mkdir /var/lib/ceph/osd/ceph-$ID</code></pre><p>6、如果OSD用于OS drive以外的drive（驱动器），准备与Ceph一起使用，并将其mount到您刚刚创建的目录中。</p><pre><code>mkfs.xfs /dev/{DEV}mount /dev/{DEV} /var/lib/ceph/osd/ceph-$ID</code></pre><p>7、将secret（密钥）写入OSD keyring文件。</p><pre><code>ceph-authtool --create-keyring /var/lib/ceph/osd/ceph-$ID/keyring \     --name osd.$ID --add-key $OSD_SECRET</code></pre><p>8、初始化OSD数据目录。</p><pre><code>ceph-osd -i $ID --mkfs --osd-uuid $UUID</code></pre><p>9、Fix ownership.</p><pre><code>chown -R ceph:ceph /var/lib/ceph/osd/ceph-$ID</code></pre><p>10、将OSD添加到Ceph后，OSD将处于您的配置中。 但是，它还没有运行。在它接收数据之前您必须先启动新的OSD。</p><p>For modern systemd distributions:</p><pre><code>systemctl enable ceph-osd@$IDsystemctl start ceph-osd@$ID</code></pre><p>For example:</p><pre><code>systemctl enable ceph-osd@12systemctl start ceph-osd@12</code></pre><p><strong>ADDING MDS</strong></p><p>在下面的说明中，{id}是一个任意的名字，比如机器的主机名。<br>1、创建mds数据目录：</p><pre><code>mkdir -p /var/lib/ceph/mds/{cluster-name}-{id}</code></pre><p>2、创建一个keyring</p><pre><code>ceph-authtool --create-keyring /var/lib/ceph/mds/{cluster-name}-{id}/keyring --gen-key -n mds.{id}</code></pre><p>3、导入keyring并设置caps</p><pre><code>ceph auth add mds.{id} osd &quot;allow rwx&quot; mds &quot;allow&quot; mon &quot;allow profile mds&quot; -i /var/lib/ceph/mds/{cluster}-{id}/keyring</code></pre><p>4、添加到ceph.conf</p><pre><code>[mds.{id}]host = {id}</code></pre><p>5、手动启动daemon</p><pre><code>ceph-mds --cluster {cluster-name} -i {id} -m {mon-hostname}:{mon-port} [-f]</code></pre><p>6、以正确的方式启动daemon（使用ceph.conf entry）</p><pre><code>service ceph start</code></pre><p>7、如果启动daemon失败并出现此错误</p><pre><code>mds.-1.0 ERROR: failed to authenticate: (22) Invalid argument</code></pre><p>确保在ceph.conf中的global部分没有设置keyring; 将其移动到client部分; 或添加keyring setting到特定mds daemon。并验证您看到的key与mds数据目录和ceph auth获取的mds.{id}输出相同。</p><p>8、现在你已经准备好创建一个Ceph filesystem<code>http://docs.ceph.com/docs/master/cephfs/createfs/</code>了。</p><p><strong>SUMMARY</strong></p><p>一旦启动并运行了monitor和两个OSD，您可以通过执行以下操作来观看placement groups peer：</p><pre><code>ceph -w</code></pre><p>要查看tree，请执行以下操作：</p><pre><code>ceph osd tree</code></pre><p>你应该看到如下所示的输出：</p><pre><code>id    weight  type name       up/down reweight-1      2       root default-2      2               host node10       1                       osd.0   up      1-3      1               host node21       1                       osd.1   up      1</code></pre><p>要添加（或删除）其他monitors，请参阅Add/Remove Monitors<code>http://docs.ceph.com/docs/master/rados/operations/add-or-rm-mons/</code>。要添加（或删除）其他Ceph OSD Daemons，请参阅Add/Remove OSDs<code>http://docs.ceph.com/docs/master/rados/operations/add-or-rm-osds/</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-Luminous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CEPH MANAGER DAEMON - RESTful plugin</title>
      <link href="/2017/11/27/CEPH-MANAGER-DAEMON-RESTful-plugin/"/>
      <url>/2017/11/27/CEPH-MANAGER-DAEMON-RESTful-plugin/</url>
      
        <content type="html"><![CDATA[<p>CEPH MANAGER DAEMON - RESTful plugin- RESTFUL PLUGIN</p><p>RESTful module通过SSL-secured连接提供REST API对cluster状态的访问。</p><p><strong>ENABLING</strong></p><p>restful模块启用： </p><pre><code>ceph mgr module enable restful</code></pre><p>在API endpoint 可用之前，您还需要配置SSL certificate（证书）。默认情况下，module将在主机上所有IPv4和IPv6地址的8003端口上接受HTTPS请求。</p><p><strong>SECURING</strong></p><p>所有的restful连接都通过SSL安全保护。您可以使用以下命令生成自签名证书：</p><pre><code>ceph restful create-self-signed-cert</code></pre><p>请注意，对于self-signed certificate（自签名证书），大多数客户端将需要一个flag（标志）来允许连接and/or禁止警告消息。例如，如果ceph-mgr daemon在同一主机上，则：</p><pre><code>curl -k https://localhost:8003/</code></pre><p>为了更安全的部署，应使用由组织认证机构签发的证书。例如，可以使用类似于以下的命令来生成密钥对：</p><pre><code>openssl req -new -nodes -x509 \  -subj &quot;/O=IT/CN=ceph-mgr-restful&quot; \  -days 3650 -keyout restful.key -out restful.crt -extensions v3_ca</code></pre><p>然后restful.crt应由您的organization的CA（证书颁发机构）签名。一旦完成，您可以将其设置为：</p><pre><code>ceph config-key set mgr/restful/$name/crt -i restful.crtceph config-key set mgr/restful/$name/key -i restful.key</code></pre><p>其中$name是ceph-mgr实例的名称（通常是主机名）。如果所有manager实例要共享相同的证书，则可以忽略$name部分：</p><pre><code>ceph config-key set mgr/restful/crt -i restful.crtceph config-key set mgr/restful/key -i restful.key</code></pre><p><strong>CONFIGURING IP AND PORT</strong></p><p>像任何其他RESTful API endpoint一样，restful绑定IP和port。默认情况下，当前active的ceph-mgr daemon将绑定主机上任何可用的IPv4或IPv6地址的8003端口。<br>由于每个ceph-mgr都拥有自己的restful实例，因此也可能需要单独配置它们。IP和端口可以通过配置key facility进行更改：</p><pre><code>ceph config set mgr mgr/restful/$name/server_addr $IPceph config set mgr mgr/restful/$name/server_port $PORT</code></pre><p>其中$name是ceph-mgr守护进程的ID（通常是hostname）。<br>这些设置也可以在集群范围内配置，而不是manager 指定的。例如：</p><pre><code>ceph config set mgr mgr/restful/server_addr $IPceph config set mgr mgr/restful/server_port $PORT</code></pre><p>如果端口没有配置，restful将默认绑定到8003端口。<br>如果没有配置IP地址，restful将绑定到::，这对应于所有可用的IPv4和IPv6地址。</p><p><strong>CREATING AN API USER</strong></p><p>要创建API用户，请运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph restful create-key &lt;username&gt;</span><br></pre></td></tr></table></figure><p>将<code>&lt;username&gt;</code>替换为所需的用户名。 例如，创建一个名为api的用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ceph restful create-key api</span><br><span class="line">52dffd92-a103-4a10-bfce-5b60f48f764e</span><br></pre></td></tr></table></figure><p>从ceph restful create-key api生成的UUID作为用户的密钥。</p><p>要列出所有API密钥，请运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph restful list-keys</span><br></pre></td></tr></table></figure><p>ceph restful list-keys命令将以JSON输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      &quot;api&quot;: &quot;52dffd92-a103-4a10-bfce-5b60f48f764e&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用curl来测试您的API用户。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -k https://api:52dffd92-a103-4a10-bfce-5b60f48f764e@&lt;ceph-mgr&gt;:&lt;port&gt;/server</span><br></pre></td></tr></table></figure><p>在上述情况下，我们使用GET从服务器endpoint获取信息。</p><p><strong>LOAD BALANCER</strong></p><p>请注意，restful只会在当前处于active状态的manager启动。查询Ceph集群状态来查看哪个manager处于active状态（例如，ceph mgr dump）。为了使API可通过一致的URL访问，无论哪个管理器daemon当前处于active状态，您可能需要在前端设置一个负载平衡器，以将流量引导至任何可用的manager  endpoint。</p><p><strong>AVAILABLE METHODS</strong></p><p>您可以导航到/doc endpoint，以获取可用endpoints的完整列表以及为每个endpoints实现的HTTP方法。</p><p>例如，使用<code>/osd/&lt;id&gt; endpoint</code>的PATCH method设置OSD id 1，则可以使用以下curl命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -En &apos;&#123;&quot;up&quot;: true&#125;&apos; | curl --request PATCH --data @- --silent --insecure --user &lt;user&gt; &apos;https://&lt;ceph-mgr&gt;:&lt;port&gt;/osd/1&apos;</span><br></pre></td></tr></table></figure><p>或者您可以使用python这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">&gt;&gt; import requests</span><br><span class="line">&gt;&gt; result = requests.patch(</span><br><span class="line">       &apos;https://&lt;ceph-mgr&gt;:&lt;port&gt;/osd/1&apos;,</span><br><span class="line">       json=&#123;&quot;up&quot;: True&#125;,</span><br><span class="line">       auth=(&quot;&lt;user&gt;&quot;, &quot;&lt;password&gt;&quot;)</span><br><span class="line">   )</span><br><span class="line">&gt;&gt; print result.json()</span><br></pre></td></tr></table></figure><p>restful module中实现的其他一些endpoints包括</p><ul><li><code>/config/cluster</code>: <strong>GET</strong></li><li><code>/config/osd</code>: <strong>GET</strong>, <strong>PATCH</strong></li><li><code>/crush/rule</code>: <strong>GET</strong></li><li><code>/mon</code>: <strong>GET</strong></li><li><code>/osd</code>: <strong>GET</strong></li><li><code>/pool</code>: <strong>GET</strong>, <strong>POST</strong></li><li><code>/pool/&lt;arg&gt;</code>: <strong>DELETE</strong>, <strong>GET</strong>, <strong>PATCH</strong></li><li><code>/request</code>: <strong>DELETE</strong>, <strong>GET</strong>, <strong>POST</strong></li><li><code>/request/&lt;arg&gt;</code>: <strong>DELETE</strong>, <strong>GET</strong></li><li><code>/server</code>: <strong>GET</strong></li></ul><p><strong>THE /REQUEST ENDPOINT</strong></p><p>您可以使用/request endpoint DELETE, POST or PATCH method轮询请求状态。这些方法默认情况下是异步的，因为它们可能需要更长的时间才能完成执行。您可以通过将<code>?wait=1</code>附加到请求url来修改此行为。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-MGR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CEPH MANAGER DAEMON - Local pool plugin</title>
      <link href="/2017/11/26/CEPH-MANAGER-DAEMON-Local-pool-plugin/"/>
      <url>/2017/11/26/CEPH-MANAGER-DAEMON-Local-pool-plugin/</url>
      
        <content type="html"><![CDATA[<p>localpool插件可以自动创建本地化为整个集群子集的RADOS pool。例如，默认情况下，它将为集群中的每个不同rack创建一个pool。对于某些希望在本地以及整个集群内分布一些数据的部署可能非常有用。<br>（个人理解这里的本地有可能是不同RULE下的pool，不同RULE下是否同名pool没有验证是否允许）</p><p><strong>ENABLING</strong></p><p>localpool模块启用：</p><pre><code>ceph mgr module enable localpool</code></pre><p><strong>CONFIGURING</strong></p><p>localpool模块可以支持以下选项：</p><ul><li>subtree（default: rack）: 为哪个CRUSH subtree type模块创建一个池</li></ul><ul><li>failure_domain (default: host) : 我们应该在哪个故障域中分隔数据副本</li></ul><ul><li>pg_num (default: 128) : 为每个pool创建PG的数量</li></ul><ul><li>num_rep (default: 3) : 每个pool的副本数。（目前，pool只支持replicated模式）</li></ul><ul><li>min_size (default: none) : 设置min_size值（如果没有设置此选项，则不会改变Ceph的默认值）</li></ul><ul><li>prefix (default: by-$subtreetype-) : pool名的prefix（前缀）</li></ul><p>通过config-key接口设置这些选项。例如，设置复制2副本，64PG</p><pre><code>ceph config-key set mgr/localpool/num_rep 2ceph config-key set mgr/localpool/pg_num 64</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-MGR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CEPH MANAGER DAEMON - Dashboard plugin</title>
      <link href="/2017/11/25/CEPH-MANAGER-DAEMON-Dashboard-plugin/"/>
      <url>/2017/11/25/CEPH-MANAGER-DAEMON-Dashboard-plugin/</url>
      
        <content type="html"><![CDATA[<p>CEPH MANAGER DAEMON - Dashboard plugin - DASHBOARD PLUGIN<br>Dashboard 插件使用ceph-mgr托管的Web server，可以可视化集群的统计信息。</p><p><strong>ENABLING</strong><br>dashboard模块启用：</p><pre><code>ceph mgr module enable dashboard</code></pre><p><strong>CONFIGURATION</strong></p><p>像大多数Web应用程序一样，dashboard 绑定到主机名和端口。默认情况下，ceph-mgr daemon托管的dashboard（即当前active manager）将绑定到主机上任何可用的IPv4或IPv6地址的7000端口。<br>由于每个ceph-mgr都拥有自己的dashboard instance，因此可能需要单独配置它们。hostname 和port 可以通过配置key facility进行更改：</p><pre><code>ceph config-key set mgr/dashboard/$name/server_addr $IPceph config-key set mgr/dashboard/$name/server_port $PORT</code></pre><p>其中$name是托管此dashboard Web应用程序的ceph-mgr的ID。<br>这些设置也可以在集群范围内配置，而不是管理员特定的。 例如：<br>    ceph config-key set mgr/dashboard/server_addr $IP<br>    ceph config-key set mgr/dashboard/server_port $PORT<br>如果未配置端口，则Web应用程序将绑定到7000端口。<br>如果未配置地址，则Web应用将绑定到::，其对应于所有可用的IPv4和IPv6地址。</p><p>您可以为所有URLs配置prefix：</p><pre><code>ceph config-key set mgr/dashboard/url_prefix $PREFIX</code></pre><p>所以你可以访问dashboard http://$IP:$PORT/$PREFIX/.</p><p><strong>LOAD BALANCER</strong><br>请注意，dashboard 将只在当时处于active状态的管理器上启动。查询Ceph集群状态以查看哪个管理器处于active状态（例如，ceph mgr dump）。为了使仪表板可通过一致的URL访问，无论哪个管理器daemon当前处于active状态，您可能需要在前端设置一个负载平衡器，以将流量引导至任何可用的管理器endpoint。 如果你使用HTTP反向代理转发到dashboard的subpath，则需要配置url_prefix（请参见上文）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-MGR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CEPH MANAGER DAEMON - Installation and Configuration</title>
      <link href="/2017/11/22/CEPH-MANAGER-DAEMON-Installation-and-Configuration/"/>
      <url>/2017/11/22/CEPH-MANAGER-DAEMON-Installation-and-Configuration/</url>
      
        <content type="html"><![CDATA[<p>CEPH MANAGER DAEMON - Installation and Configuration - CEPH-MGR ADMINISTRATOR’S GUIDE</p><p><strong>MANUAL SETUP</strong></p><p>通常，你可以使用ceph-ansible这样的工具来建立一个ceph-mgr守护进程。 下面这些说明描述了如何手动设置ceph-mgr守护进程。</p><p>首先，为守护进程创建一个身份验证密钥：</p><pre><code>ceph auth get-or-create mgr.$name mon &apos;allow profile mgr&apos; osd &apos;allow *&apos; mds &apos;allow *&apos;</code></pre><p>该密钥放置到mgr数据路径中，对于集群名“ceph”和mgr $name为“foo”，该路径将是/var/lib/ceph/mgr/ceph-foo。</p><p>启动ceph-mgr守护进程：</p><pre><code>ceph-mgr -i $name</code></pre><p>通过查看ceph状态的输出来检查mgr是否已经出现，它现在应该包含一个mgr状态行：</p><pre><code>mgr active: $name</code></pre><p><strong>CLIENT AUTHENTICATION</strong></p><p>manager是一个新的守护进程，需要新的CephX功能。 如果您从旧版本的Ceph升级集群，或者使用默认安装/部署工具，则admin client应该自动获得此功能。如果您使用其他地方的工具，则在调用某些ceph集群命令时可能会收到EACCES错误。为了解决这个问题，可以通过修改用户权限来为client的cephx功能添加一个“mgr allow *”。</p><p>（<a href="http://docs.ceph.com/docs/master/rados/operations/user-management/#modify-user-capabilities）" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/rados/operations/user-management/#modify-user-capabilities）</a></p><p><strong>HIGH AVAILABILITY</strong></p><p>一般来说，你应该在每台运行ceph-mon守护进程的主机上设置一个ceph-mgr来达到相同的可用性。默认情况下，首先启动的ceph-mgr实例将被monitors设置为active，而其他的则是standbys。ceph-mgr守护进程中不需要仲裁。如果 active daemon在mon_mgr_beacon_grace（default 30s）规定时间内发送beacon到monitors失败，standby会替代当前active。如果要抢先进行故障切换，可以使用命令ceph mgr fail <mgr name>明确标记ceph-mgr daemon失败。</mgr></p><p><strong>USING MODULES</strong></p><p>使用命令ceph mgr module ls查看哪些模块可用，哪些是当前启用的。使用命令ceph mgr module enable <module>和ceph mgr module disable <module>分别启用模块和禁用模块。<br>如果启用了一个模块，则active ceph-mgr daemon将加载并执行它。当模块在加载时发布它的IP地址，如HTTP server。要查看这些模块的地址，请使用命令ceph mgr services。<br>一些模块也可以实现一个特殊的standby模式，它在standby ceph-mgr daemons以及active daemon。如果client尝试连接到standby，这使得提供服务的模块能够将其client重定向到active daemon。<br>有关每个模块提供的功能的更多信息，请参阅个别管理器模块的文档页面。</module></module></p><p>以下是启用dashboard模块的示例：</p><pre><code>$ ceph mgr module ls{        &quot;enabled_modules&quot;: [                &quot;restful&quot;,                &quot;status&quot;        ],        &quot;disabled_modules&quot;: [                &quot;dashboard&quot;        ]}$ ceph mgr module enable dashboard$ ceph mgr module ls{        &quot;enabled_modules&quot;: [                &quot;restful&quot;,                &quot;status&quot;,                &quot;dashboard&quot;        ],        &quot;disabled_modules&quot;: [        ]}$ ceph mgr services{        &quot;dashboard&quot;: &quot;http://myserver.com:7789/&quot;,        &quot;restful&quot;: &quot;https://myserver.com:8789/&quot;}</code></pre><p><strong>CALLING MODULE COMMANDS</strong></p><p>在模块实现command line hooks的情况下，这些commands将作为普通的Ceph命令来访问：</p><pre><code>ceph &lt;command | help&gt;</code></pre><p>如果你想查看manager处理的命令列表（标准ceph help将显示所有的mon和mgr命令），你可以直接发送一个命令到manager daemon：</p><pre><code>ceph tell mgr help</code></pre><p>注意，没有必要去访问一个特定的mgr instance，mgr将自动选择当前的active daemon。</p><p><strong>CONFIGURATION</strong></p><p>OPTION(mgr_module_path, OPT_STR, CEPH_PKGLIBDIR “/mgr”) // 从哪里加载python模块</p><pre><code>mgr module pathDescription:    Path to load modules fromType:    StringDefault:    &quot;&lt;library dir&gt;/mgr&quot;mgr dataDescription:    Path to load daemon data (such as keyring)Type:    StringDefault:    &quot;/var/lib/ceph/mgr/$cluster-$id&quot;mgr tick periodDescription:    How many seconds between mgr beacons to monitors, and other periodic checks.Type:    IntegerDefault:    5mon mgr beacon graceDescription:    How long after last beacon should a mgr be considered failedType:    IntegerDefault:    30</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH-MGR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vdbench</title>
      <link href="/2017/10/31/vdbench/"/>
      <url>/2017/10/31/vdbench/</url>
      
        <content type="html"><![CDATA[<p>[root@centos001 vdbench]# lsb_release -a<br>LSB Version:    :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch<br>Distributor ID:    CentOS<br>Description:    CentOS Linux release 7.3.1611 (Core)<br>Release:    7.3.1611<br>Codename:    Core</p><h1 id="vdbench单机测试"><a href="#vdbench单机测试" class="headerlink" title="vdbench单机测试"></a>vdbench单机测试</h1><p>1、下载vdbench50406.zip</p><p>2、解压vdbench50406.zip</p><p>3、安装java，jdk<br>[root@centos001 ~]# yum install java-1.8.0-openjdk unzip net-tools iotop -y<br>[root@yujiangcontrol ~]# java -version<br>openjdk version “1.8.0_144”<br>OpenJDK Runtime Environment (build 1.8.0_144-b01)<br>OpenJDK 64-Bit Server VM (build 25.144-b01, mixed mode)</p><p>4、配置vdbench<br>[root@centos001 ~]# unzip vdbench50406.zip<br>[root@centos001 ~]# ./vdbench -t</p><p>5、配置文件<br>[root@centos001 ~]# vi yujiang<br>sd=sd1,lun=/dev/sdb,openflags=o_direct<br>wd=wd1,sd=sd1,seekpct=random,rdpct=0,xfersize=8192<br>rd=rd1,wd=wd*,elapsed=120,interval=10,iorate=max<br>openflags=o_direct 直接对块设备进行读写</p><p>6、执行配置文件<br>[root@centos001 ~]# sudo ./vdbench -f yujiang </p><h1 id="vdbench多机测试"><a href="#vdbench多机测试" class="headerlink" title="vdbench多机测试"></a>vdbench多机测试</h1><p>[root@centos001 vdbench]# cat /etc/hosts<br>192.168.30.100  centos001       centos001.test.com<br>192.168.30.103  plana003        plana003.test.com<br>192.168.30.104  plana004        plana004.test.com<br>192.168.30.105  plana005        plana005.test.com</p><p>1、生成sshkey<br>[root@centos001 vdbench]# ssh-keygen<br>与其他slave节点做ssh互信<br>[root@centos001 vdbench]# ssh-copy-id plana003<br>[root@centos001 vdbench]# ssh-copy-id plana004<br>[root@centos001 vdbench]# ssh-copy-id plana005<br>[root@centos001 vdbench]# ssh plana003.test.com<br>[root@centos001 vdbench]# ssh plana004.test.com<br>[root@centos001 vdbench]# ssh plana005.test.com</p><p>2、把vdbench拷贝到每台slave节点，包括master节点，路径相同<br>/root/vdbench</p><p>3、每台slave机监听，ssh不用监听<br>[root@plana003 vdbench]# ./vdbench rsh<br>[root@plana004 vdbench]# ./vdbench rsh<br>[root@plana005 vdbench]# ./vdbench rsh</p><p>备注：<br>Host Definition (HD)<br>These parameters are ONLY needed when running Vdbench in a multi-host environment or if you want to override the number of JVMs used in a single-host environment.<br>See also Host Definition parameter detail.</p><p>hd=default Sets defaults for all HDs that are entered later<br>hd=localhost Sets values for the current host<br>hd=host_label Specify a host label.<br>system=host_name Host IP address or network name, e.g. xyz.customer.com<br>vdbench=vdbench_dir_name Where to find Vdbench on a remote host if different from current.<br>jvms=nnn How many slaves to use. See Multi JVM execution.<br>shell=rsh | ssh | vdbench How to start a Vdbench slave on a remote system.<br>user=xxxx Userid on remote system Required.<br>clients=nn This host will simulate the running of multiple ‘clients’. Very  useful if you want to simulate numerous clients for file servers  without having all the hardware.<br>mount=”mount xxx …” This mount command is issued on the target host after the  possibly needed mount directories have been created.<br>rg=name Unique name for this Replay Group (RG).<br>devices=(xxx,yyy,….) The device numbers from Swat’s flatfile.bin.gz to be replayed.</p><p>Storage Definition (SD)<br>See also Storage Definition Parameter Detail.<br>This set of parameters identifies each physical or logical volume manager volume or file system  file used in the requested workload. Of course, with a file system file, the file system takes the  responsibility of all I/O: reads and writes can and will be cached (see also openflags=) and  Vdbench will not have control over physical I/O. However, Vdbench can be used to test file  system file performance (See also File system testing).<br>Example: sd=sd1,lun=/dev/rdsk/cxt0d0s0,threads=8</p><p>sd=default Sets defaults for all SDs that are entered later.<br>sd=name Unique name for this Storage Definition (SD).<br>host=name Name of host where this SD can be found. Default ‘localhost’<br>lun=lun_name Name of raw disk or file system file.<br>align=nnn Generate logical byte address in ‘nnn’ byte boundaries, not using default ‘xfersize’ boundaries.<br>count=(nn,mm) Creates a sequence of SD parameters.<br>hitarea=nn See read hit percentage for an explanation. Default 1m.<br>journal=xxx Directory name for journal file for data validation<br>offset=nnn At which offset in a lun to start I/O.<br>openflags=(flag,..) Pass specific flags when opening a lun or file<br>range=(nn,mm) Use only a subset ‘range=nn’: Limit Seek Range of this SD.<br>replay=(group,..) Replay Group(s) using this SD.<br>replay=(nnn,..) Device number(s) to select for Swat Vdbench replay<br>resetbus=nnn Issue ioctl (USCSI_RESET_ALL) every nnn seconds. Solaris only<br>resetlun=nnn Issue ioctl (USCSI_RESET) every nnn seconds. Solaris only<br>size=nn Size of the raw disk or file to use for workload. Optional unless you  want Vdbench to create a disk file for you.<br>streams=(nn,mm) Create independent sequential streams on the same device.<br>threads=nn Maximum number of concurrent outstanding I/O for this SD. Default 8</p><p>Workload Definition (WD)<br>See also Workload Definition Parameter Detail.<br>The Workload Definition parameters describe what kind of workload must be executed using the storage definitions entered.<br>Example: wd=wd1,sd=(sd1,sd2),rdpct=100,xfersize=4k</p><p>wd=default Sets defaults for all WDs that are entered later.<br>wd=name Unique name for this Workload Definition (WD)<br>sd=xx Name(s) of Storage Definition(s) to use<br>host=host_label Which host to run this workload on. Default localhost.<br>iorate=nn Requested fixed I/O rate for this workload.<br>openflags=(flag,..) Pass specific flags when opening a lun or file.<br>priority=nn I/O priority to be used for this workload.<br>range=(nn,nn) Limit seek range to a defined range within an SD.<br>rdpct=nn Read percentage. Default 100.<br>rhpct=nn Read hit percentage. Default 0.<br>seekpct=nn Percentage of random seeks. Default seekpct=100 or seekpct=random.<br>skew=nn Percentage of skew that this workload receives from the total I/O  rate.<br>stride=(min,max) To allow for skip-sequential I/O.<br>threads=nn Only available during SD concatenation.<br>whpct=nn Write hit percentage. Default 0.<br>xfersize=nn Data transfer size. Default 4k.<br>xfersize=(n,m,n,m,..) Specify a distribution list with percentages.<br>xfersize=(min,max,align) Generate xfersize as a random value between min and max.</p><p>Run Definition (RD)<br>See also Run Definition Parameter Detail.<br>The Run Definition parameters define which of the earlier defined workloads need to be  executed, what I/O rates need to be generated, and how long the workload will run. One Run  Definition can result in multiple actual workloads, depending on the parameters used.<br>Example: rd=run1,wd=(wd1,wd2),iorate=1000,elapsed=60,interval=5<br>There is a separate list of RD parameters for file system testing.</p><p>rd=default Sets defaults for all RDs that are entered later.<br>rd=name Unique name for this Run Definition (RD).<br>wd=xx Workload Definitions to use for this run.<br>sd=xxx Which SDs to use for this run (Optional).<br>curve=(nn,nn,..) Data points to generate when creating a performance curve.<br>distribution=(x[,variable] I/O inter arrival time calculations: exponential, uniform, or  deterministic. Default exponential.<br>elapsed=nn Elapsed time for this run in seconds. Default 30 seconds.<br>maxdata=nnn Stop the run after nnn bytes have been read or written, e.g.<br>maxdata=200g. Vdbench will stop at the lower of elapsed= and maxdata=.<br>endcmd=cmd Execute command or script at the end of the last run<br>(for)compratio=nn Multiple runs for each compression percentage.<br>(for)hitarea=nn Multiple runs for each hit area size.<br>(for)hpct=nn Multiple runs for each read hit percentage.<br>(for)rdpct=nn Multiple runs for each read percentage.<br>(for)seekpct=nn Multiple runs for each seek percentage.<br>(for)threads=nn Multiple runs for each thread count.<br>(for)whpct=nn Multiple runs for each write hit percentage.<br>(for)xfersize=nn Multiple runs for each data transfer size.<br>Most forxxx parameters may be abbreviated to their regular name, e.g. xfersize=(..,..)<br>interval=nn Reporting interval in seconds. Default ‘min(elapsed/2,60)’<br>iorate=(nn,nn,nn,…) One or more I/O rates.<br>iorate=curve Create a performance curve.<br>iorate=max Run an uncontrolled workload.<br>iorate=(nn,ss,…) nn,ss: pairs of I/O rates and seconds of duration for this I/O  rate. See also ‘distribution=variable’.<br>openflags=xxxx Pass specific flags when opening a lun or file<br>pause=nn Sleep ‘nn’ seconds before starting next run.<br>replay=(filename,split=split_dir,repeat=nn)<br>-‘filename’: Replay file name used for Swat Vdbench replay</p><ul><li>‘split_dir’: directory used to do the replay file split.</li><li>‘nn’: how often to repeat the replay.<br>startcmd=cmd Execute command or script at the beginning of the first run<br>warmup=nn Override warmup period.</li></ul><p>1、多slave host不同块设备<br>For instance if a lun is /dev/rdsk/a on hosta but it is named /dev/rdsk/b on hostb then you’ll have to tell Vdbench about it.<br>sd=sd1,lun=/dev/rdsk/a,host=hosta,lun=/dev/rdsk/b,host=hostb<br>By default Vdbench assumes that the lun names on each host are identical.</p><p>2、<br>[root@centos001 vdbench]# cat example5<br>hd=default,vdbench=/root/vdbench,user=root,shell=ssh<br>hd=plana003,system=plana003.test.com<br>hd=plana004,system=plana004.test.com<br>hd=plana005,system=plana005.test.com</p><p>sd=sd1,host=<em>,lun=/dev/sdb,size=10m,openflags=o_direct<br>wd=wd1,sd=sd</em>,rdpct=100,xf=4k<br>rd=rd1,wd=wd1,el=3,in=1,io=10,warmup=30<br>解释：<br>hd=default以下hd都使用后面的默认值<br>vdbench到每台slave机的相同目录寻找vdbench程序<br>user以root用户登录远程slave机<br>shell以ssh协议登录<br>hd=plana003远程slave机标签<br>system=plana003.test.com ip地址或者配置hosts文件，用来ssh连接slave机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">root@node1:/home/simth/config# cat vdbenchcase1.config</span><br><span class="line">hd=default,vdbench=/home/simth,user=root,shell=ssh</span><br><span class="line">hd=hd1,system=node1</span><br><span class="line">hd=hd2,system=node2</span><br><span class="line">hd=hd3,system=node3</span><br><span class="line"></span><br><span class="line">fsd=sd1,anchor=/home/node-1/node-1-rbd-1,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd2,anchor=/home/node-1/node-1-rbd-2,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd3,anchor=/home/node-1/node-1-rbd-3,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd4,anchor=/home/node-1/node-1-rbd-4,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd5,anchor=/home/node-1/node-1-rbd-5,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd6,anchor=/home/node-1/node-1-rbd-6,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd7,anchor=/home/node-1/node-1-rbd-7,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd8,anchor=/home/node-1/node-1-rbd-8,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd9,anchor=/home/node-1/node-1-rbd-9,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd10,anchor=/home/node-1/node-1-rbd-10,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line"></span><br><span class="line">fwd=wd1,fsd=sd*,hd=hd1,operation=write,threads=1,fileio=sequential,fileselect=random,xfersize=16k</span><br><span class="line">fwd=wd2,fsd=sd*,hd=hd2,operation=write,threads=1,fileio=sequential,fileselect=random,xfersize=16k</span><br><span class="line">fwd=wd3,fsd=sd*,hd=hd3,operation=write,threads=1,fileio=sequential,fileselect=random,xfersize=16k</span><br><span class="line"></span><br><span class="line">rd=rd1,fwd=wd*,fwdrate=max,format=clean,interval=1</span><br><span class="line">rd=rd2,fwd=wd*,fwdrate=122,format=restart,elapse=3600,maxdata=1800G,interval=5,warmup=30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hd=default,vdbench=/home/simth,user=root,shell=ssh</span><br><span class="line">hd=hd1,system=node1</span><br><span class="line">hd=hd2,system=node2</span><br><span class="line">hd=hd3,system=node3</span><br><span class="line"></span><br><span class="line">fsd=sd1,anchor=/home/node-1/node-1-rbd-1,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd2,anchor=/home/node-1/node-1-rbd-2,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd3,anchor=/home/node-1/node-1-rbd-3,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd4,anchor=/home/node-1/node-1-rbd-4,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd5,anchor=/home/node-1/node-1-rbd-5,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd6,anchor=/home/node-1/node-1-rbd-6,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd7,anchor=/home/node-1/node-1-rbd-7,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd8,anchor=/home/node-1/node-1-rbd-8,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd9,anchor=/home/node-1/node-1-rbd-9,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd10,anchor=/home/node-1/node-1-rbd-10,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line"></span><br><span class="line">fwd=wd1,fsd=sd*,hd=hd1,operation=read,threads=1,fileio=sequential,fileselect=random,xfersize=1024k</span><br><span class="line">fwd=wd2,fsd=sd*,hd=hd2,operation=read,threads=1,fileio=sequential,fileselect=random,xfersize=1024k</span><br><span class="line">fwd=wd3,fsd=sd*,hd=hd3,operation=read,threads=1,fileio=sequential,fileselect=random,xfersize=1024k</span><br><span class="line"></span><br><span class="line">*rd=rd1,fwd=wd*,fwdrate=max,format=clean,interval=1</span><br><span class="line">rd=rd2,fwd=wd*,fwdrate=690,format=restart,elapse=3600,maxdata=1800G,interval=5,warmup=30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hd=default,vdbench=/home/simth,user=root,shell=ssh</span><br><span class="line">hd=hd1,system=node1</span><br><span class="line">hd=hd2,system=node2</span><br><span class="line">hd=hd3,system=node3</span><br><span class="line"></span><br><span class="line">fsd=sd1,anchor=/home/node-1/node-1-rbd-1,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd2,anchor=/home/node-1/node-1-rbd-2,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd3,anchor=/home/node-1/node-1-rbd-3,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd4,anchor=/home/node-1/node-1-rbd-4,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd5,anchor=/home/node-1/node-1-rbd-5,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd6,anchor=/home/node-1/node-1-rbd-6,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd7,anchor=/home/node-1/node-1-rbd-7,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd8,anchor=/home/node-1/node-1-rbd-8,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd9,anchor=/home/node-1/node-1-rbd-9,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd10,anchor=/home/node-1/node-1-rbd-10,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line"></span><br><span class="line">fwd=wd1,fsd=sd*,hd=hd1,operation=write,fileio=random,threads=8,fileselect=random,xfersize=8k</span><br><span class="line">fwd=wd2,fsd=sd*,hd=hd2,operation=write,fileio=random,threads=8,fileselect=random,xfersize=8k</span><br><span class="line">fwd=wd3,fsd=sd*,hd=hd3,operation=write,fileio=random,threads=8,fileselect=random,xfersize=8k</span><br><span class="line"></span><br><span class="line">*rd=rd1,fwd=wd*,fwdrate=max,format=clean,interval=1</span><br><span class="line">rd=rd2,fwd=wd*,fwdrate=1014,format=restart,elapse=3600,maxdata=1800G,interval=5,warmup=30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hd=default,vdbench=/home/simth,user=root,shell=ssh</span><br><span class="line">hd=hd1,system=node1</span><br><span class="line">hd=hd2,system=node2</span><br><span class="line">hd=hd3,system=node3</span><br><span class="line"></span><br><span class="line">fsd=sd1,anchor=/home/node-1/node-1-rbd-1,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd2,anchor=/home/node-1/node-1-rbd-2,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd3,anchor=/home/node-1/node-1-rbd-3,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd4,anchor=/home/node-1/node-1-rbd-4,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd5,anchor=/home/node-1/node-1-rbd-5,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd6,anchor=/home/node-1/node-1-rbd-6,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd7,anchor=/home/node-1/node-1-rbd-7,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd8,anchor=/home/node-1/node-1-rbd-8,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd9,anchor=/home/node-1/node-1-rbd-9,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line">fsd=sd10,anchor=/home/node-1/node-1-rbd-10,openflags=o_direct,depth=3,width=3,files=3300,size=(2M,100),shared=yes</span><br><span class="line"></span><br><span class="line">fwd=wd1,fsd=sd*,hd=hd1,operation=read,fileio=random,threads=8,fileselect=random,xfersize=8k</span><br><span class="line">fwd=wd2,fsd=sd*,hd=hd2,operation=read,fileio=random,threads=8,fileselect=random,xfersize=8k</span><br><span class="line">fwd=wd3,fsd=sd*,hd=hd3,operation=read,fileio=random,threads=8,fileselect=random,xfersize=8k</span><br><span class="line"></span><br><span class="line">*rd=rd1,fwd=wd*,fwdrate=max,format=clean,interval=1</span><br><span class="line">rd=rd2,fwd=wd*,fwdrate=11826,format=restart,elapse=3600,maxdata=1800G,interval=5,warmup=30</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch(1)</title>
      <link href="/2017/09/17/ElasticSearch-1/"/>
      <url>/2017/09/17/ElasticSearch-1/</url>
      
        <content type="html"><![CDATA[<p>ElasticSearch入门<br>笔记来自：<a href="http://www.imooc.com/video/15762" target="_blank" rel="noopener">http://www.imooc.com/video/15762</a></p><h2 id="ElasticSearch简介"><a href="#ElasticSearch简介" class="headerlink" title="ElasticSearch简介"></a>ElasticSearch简介</h2><p>1、什么是ElasticSearch？</p><pre><code>基于Apache Lucene构建的开源搜索引擎采用Java编写，提供简单易用的RESTFul API轻松的横向扩展，可支持PB级的结构化或非结构化数据处理</code></pre><p>2、应用场景</p><pre><code>海量数据分析引擎站内搜索引擎数据仓库</code></pre><p>3、一线公司实际应用场景</p><pre><code>英国卫报 - 实时分析公众对文章的回应维基百科、GitHub - 站内实时搜索百度 - 实时日志监控平台等等...</code></pre><p>4、前置知识</p><pre><code>熟悉用Maven构建项目了解Spiring Boot的基本使用</code></pre><p>5、环境要求</p><pre><code>IDE工具 IntelliJ IDEA、Eclipse等常规用IDE即可Java JDK1.8其他依赖 Maven、NodeJs（6.0以上）</code></pre><p>6、课程简介</p><pre><code>安装基础概念基本用法高级查询实战演练课程总结</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、版本问题</p><pre><code>版本历史 1.x-&gt;2.x-&gt;5.x版本选择 5.x</code></pre><p>2、单实例安装<br>（1）官网下载elasticsearch</p><pre><code>https://www.elastic.co/cn/yujiang@ubuntu001:~$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.0.tar.gz</code></pre><p>（2）解压并修改配置文件</p><pre><code>yujiang@ubuntu001:~$ tar zxvf elasticsearch-5.6.0.tar.gzyujiang@ubuntu001:~$ cd elasticsearch-5.6.0/yujiang@ubuntu001:~/elasticsearch-5.6.0$ vi config/elasticsearch.yml添加network.host: 192.168.30.134</code></pre><p>（3）启动elasticsearch</p><pre><code>yujiang@ubuntu001:~$ sudo sysctl -w vm.max_map_count=262144或yujiang@ubuntu001:~$ sudo vi /etc/sysctl.confvm.max_map_count=262144yujiang@ubuntu001:~/elasticsearch-5.6.0$ sh ./bin/elasticsearch</code></pre><p>（4）打开浏览器</p><pre><code>http://192.168.30.134:9200/</code></pre><p>3、实用插件Head安装<br>（1）安装nodejs</p><pre><code>yujiang@ubuntu001:~$ wget https://nodejs.org/dist/v6.11.3/node-v6.11.3-linux-x64.tar.xzyujiang@ubuntu001:~$ xz -d node-v6.11.3-linux-x64.tar.xz yujiang@ubuntu001:~$ tar -xvf node-v6.11.3-linux-x64.tar yujiang@ubuntu001:~$ sudo ln -s /home/yujiang/node-v6.11.3-linux-x64/bin/node  /usr/bin/node yujiang@ubuntu001:~$ sudo ln -s /home/yujiang/node-v6.11.3-linux-x64/bin/npm  /usr/bin/npm </code></pre><p>（2）修改ElasticSearch配置文件，支持跨域，并在后台运行ElasticSearch</p><pre><code>yujiang@ubuntu001:~/elasticsearch-5.6.0$ vi config/elasticsearch.yml添加http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;yujiang@ubuntu001:~/elasticsearch-5.6.0$ sh ./bin/elasticsearch -d</code></pre><p>（3）运行elasticsearch-head</p><pre><code>https://github.com/mobz/elasticsearch-headyujiang@ubuntu001:~$ wget https://github.com/mobz/elasticsearch-head/archive/master.zipyujiang@ubuntu001:~$ unzip master.zipyujiang@ubuntu001:~$ cd elasticsearch-head-master/yujiang@ubuntu001:~/elasticsearch-head-master$ npm installyujiang@ubuntu001:~/elasticsearch-head-master$ npm run start</code></pre><p>（4）打开浏览器</p><pre><code>http://192.168.30.134:9100/web页面输入http://192.168.30.134:9200/</code></pre><p>4、分布式安装</p><p>（1）master节点修改配置文件</p><pre><code>yujiang@ubuntu001:~/elasticsearch-5.6.0$ vi config/elasticsearch.yml添加 cluster.name: esclusternode.name: masternode.master: true</code></pre><p>（2）slave节点修改配置文件</p><pre><code>cluster.name: esclusternode.name: slave1network.host: 192.168.30.135#http.port: 8200discovery.zen.ping.unicast.hosts: [&quot;192.168.30.134&quot;]yujiang@ubuntu002:~/elasticsearch-5.6.0$ sh ./bin/elasticsearch</code></pre><p>（3）安装java jdk</p><pre><code>yujiang@ubuntu002:~$ sudo add-apt-repository ppa:openjdk-r/ppayujiang@ubuntu002:~$ sudo apt-get update yujiang@ubuntu002:~$ sudo apt-get install -f openjdk-8-jdkyujiang@ubuntu002:~$ java -versionopenjdk version &quot;1.8.0_131&quot;OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-2ubuntu1.16.04.3-b11)OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)</code></pre><h2 id="ElasticSearch基础概念"><a href="#ElasticSearch基础概念" class="headerlink" title="ElasticSearch基础概念"></a>ElasticSearch基础概念</h2><p>集群和节点</p><pre><code>master + slave1 + slave2 + slave...n</code></pre><p>索引</p><pre><code>含有相同属性的文档集合</code></pre><p>类型</p><pre><code>索引可以定义一个或多个类型，文档必须属于一个类型</code></pre><p>文档</p><pre><code>文档是可以被索引的基本数据单位</code></pre><p>分片</p><pre><code>每个索引都有多个分片，每个分片是一个Lucene索引分片的好处，加入一个索引的数据量很大，就会造成硬盘压力很大，就会出现搜索瓶颈，可以将索引分成多个分片，从而分担压力，还允许用户进行水平的扩展和拆分，及分布式的操作，可以提高搜索和其他操作的效率</code></pre><p>备份</p><pre><code>拷贝一份分片就完成了分片的备份当一个主分片失败或者出现问题时，备份分片可以代替工作，从而提高了es的可用性。备份的分片还可以执行搜索的操作，以分摊搜索的压力。es在创建索引时会创建5和分片和1个备份，数量可以修改，分片只有在创建索引的时候指定而不能在后期进行修改，备份是可以动态修改的</code></pre><h2 id="ElasticSearch的基本用法"><a href="#ElasticSearch的基本用法" class="headerlink" title="ElasticSearch的基本用法"></a>ElasticSearch的基本用法</h2><p>RESTFul API</p><p>（1）API基本格式</p><pre><code>http://&lt;ip&gt;:&lt;port&gt;/&lt;索引&gt;/&lt;类型&gt;/&lt;文档id&gt;</code></pre><p>（2）常用HTTP动词</p><pre><code>GET/PUT/POST/DELETE</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambdas</title>
      <link href="/2017/09/11/Lambdas/"/>
      <url>/2017/09/11/Lambdas/</url>
      
        <content type="html"><![CDATA[<p>C++11 introduced lambdas, allowing the definition of inline functionality, which can be used as a parameter or a local object.Lambdas change the way the C++ standard library is used.</p><p>Syntax of Lambdas<br>A lambda is a definition of functionality that can be defined inside statements and expressions. Thus, you can use a lambda as an inline function.<br>The minimal lambda function has no parameters and simply does something. For example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[] &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello lambda"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can call it directly: <a href="...">…</a>mutable_opt throwSpec_opt-&gt;retType_opt{…}</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[] &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello lambda"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125; (); <span class="comment">// prints ‘‘hello lambda’’</span></span><br></pre></td></tr></table></figure><p>or pass it to objects to get called:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> l = [] &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello lambda"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">l(); <span class="comment">// prints ‘‘hello lambda’’</span></span><br></pre></td></tr></table></figure><p>lambda introducer，capture to access nonstatic outside objects inside the lambda.static objects such as std::cout can be used<br>  |<br><a href="...">…</a>mutable_opt throwSpec_opt-&gt;retType_opt<br>       |<br>     all of them are optional,bug if one of them occurs,the parentheses for the parameters are mandatory<br>mutable关系到[…]中的数据是否可以被改写（objects are passed by value,but inside the function object defined by the lambda, you have write access to the passed value.）,可以取用外部变量<br>(…)函数的参数<br>retType,without any specific definition of the return type, it is deduced from the return value.<br>you can specify a capture to access data of outer scope that is not passed as an argument:<br>[=]means that the outer scope is passed to the lambda by value.<br>[&amp;]means that the outer scope is passed to the lambda by reference.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ex:</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y=<span class="number">42</span>;</span><br><span class="line"><span class="keyword">auto</span> qqq=[x,&amp;y]&#123;...&#125;<span class="comment">//[=,&amp;y]to pass y by reference and all other objects by value.y是by reference并且允许使用所有objects by value</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//The type of a lambda is an anouymous function object (or functor)</span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//objects are passed by value, but inside the functionnn object defined by the lambda, you have write access to the passed value.</span></span><br><span class="line"><span class="keyword">auto</span> f = [id]()<span class="keyword">mutable</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"id: "</span> &lt;&lt; id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">++id; <span class="comment">//如果没写mutable,难道不能++id;吗?</span></span><br><span class="line">&#125;;</span><br><span class="line">id = <span class="number">42</span>;</span><br><span class="line">f();    <span class="comment">//0</span></span><br><span class="line">f();    <span class="comment">//1</span></span><br><span class="line">f();    <span class="comment">//2</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//42</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Functor</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> id;   <span class="comment">//copy of outside id</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"id: "</span> &lt;&lt; id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">++id;    <span class="comment">//OK</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Functor f;</span><br><span class="line"></span><br><span class="line"><span class="comment">//[&amp;id]</span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> f = [&amp;id](<span class="keyword">int</span> param) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"id: "</span> &lt;&lt; id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"param: "</span> &lt;&lt; param &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">++id;</span><br><span class="line">++param;</span><br><span class="line">&#125;;</span><br><span class="line">id = <span class="number">42</span>;</span><br><span class="line">f(<span class="number">7</span>);<span class="comment">//id:42,param:7</span></span><br><span class="line">f(<span class="number">7</span>);<span class="comment">//id:43,param:7</span></span><br><span class="line">f(<span class="number">7</span>);<span class="comment">//id:44,param:7</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//id:45</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无mutable,[Error] increment of read-only variable 'id'</span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> f = [id]() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"id: "</span> &lt;&lt; id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">++id;</span><br><span class="line">&#125;;</span><br><span class="line">id = <span class="number">42</span>;</span><br><span class="line">f();</span><br><span class="line">f();</span><br><span class="line">f();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> f = [id]()<span class="keyword">mutable</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"id: "</span> &lt;&lt; id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">++id;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">5</span>;<span class="comment">//可以声明变量</span></span><br><span class="line"><span class="keyword">int</span> y = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">return</span> id;<span class="comment">//可以返回数值</span></span><br><span class="line">&#125;;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>Here is what compiler generates for lambda’s:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、</span><br><span class="line"><span class="keyword">int</span> tobefound = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">auto</span> lambda1 = [tobefound](<span class="keyword">int</span> val)&#123;<span class="keyword">return</span> val == tobefound;&#125;;</span><br><span class="line"><span class="number">2</span>、</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnNamedLocalFunction</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> localVar;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">UnNamedLocalFunction(<span class="keyword">int</span> var):localVar(var)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val == localVar;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">UnNamedLocalFunction <span class="title">lambda2</span><span class="params">(tobefound)</span></span>;</span><br><span class="line"><span class="keyword">bool</span> b1 = lambda1(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">bool</span> b2 = lambda2(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Cpp2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CppImprovement</title>
      <link href="/2017/09/07/CppImprovement/"/>
      <url>/2017/09/07/CppImprovement/</url>
      
        <content type="html"><![CDATA[<h2 id="Spaces-in-Template-Expressions"><a href="#Spaces-in-Template-Expressions" class="headerlink" title="Spaces in Template Expressions"></a>Spaces in Template Expressions</h2><p>The requirement to put a space between two closing template expressions has gone</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; &gt;; <span class="comment">// OK in each C++ version</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&gt;;  <span class="comment">// OK since C++11</span></span><br></pre></td></tr></table></figure><h2 id="nullptr-and-std-nullptr-t"><a href="#nullptr-and-std-nullptr-t" class="headerlink" title="nullptr and std::nullptr_t"></a>nullptr and std::nullptr_t</h2><p>C++11 lets you use nullptr instead of 0 or NULL to specify that a pointer refers to no value (which differs from having an undefined value). This new feature especially helps to avoid mistakes that occurred when a null pointer was interpreted as an integral value. For example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br><span class="line">f(<span class="number">0</span>); <span class="comment">// calls f(int)</span></span><br><span class="line">f(<span class="literal">NULL</span>); <span class="comment">// calls f(int) if NULL is 0, ambiguous otherwise</span></span><br><span class="line">f(<span class="literal">nullptr</span>); <span class="comment">// calls f(void*)</span></span><br></pre></td></tr></table></figure><p>nullptr is a new keyword. It automatically converts into each pointer type but not to any integral type. It has type std::nullptr_t, defined in <cstddef> (see Section 5.8.1, page 161), so you can now even overload operations for the case that a null pointer is passed. Note that std::nullptr_t counts as a fundamental data type (see Section 5.4.2, page 127).</cstddef></p><h2 id="Automatic-Type-Deduction-with-auto"><a href="#Automatic-Type-Deduction-with-auto" class="headerlink" title="Automatic Type Deduction with auto"></a>Automatic Type Deduction with auto</h2><p>With C++11, you can declare a variable or an object without specifying its specific type by using auto.<br>For example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">42</span>; <span class="comment">// i has type int</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">auto</span> d = f(); <span class="comment">// d has type double</span></span><br></pre></td></tr></table></figure><p>The type of a variable declared with auto is deduced from its initializer. Thus, an initialization is required: auto i; // ERROR: can’t dedulce the type of i Additional qualifiers are allowed.<br>For example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">auto</span> vat = <span class="number">0.19</span>;</span><br></pre></td></tr></table></figure><p>Using auto is especially useful where the type is a pretty long and/or complicated expression.<br>For example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> pos = v.begin(); <span class="comment">// pos has type vector&lt;string&gt;::iterator</span></span><br><span class="line"><span class="keyword">auto</span> l = [] (<span class="keyword">int</span> x) -&gt; <span class="keyword">bool</span> &#123; <span class="comment">// l has the type of a lambda</span></span><br><span class="line">..., <span class="comment">// taking an int and returning a bool</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The latter is an object, representing a lambda</p><h2 id="Uniform-Initialization-and-Initializer-Lists"><a href="#Uniform-Initialization-and-Initializer-Lists" class="headerlink" title="Uniform Initialization and Initializer Lists"></a>Uniform Initialization and Initializer Lists</h2><p>Before C++11, programmers, especially novices, could easily become confused by the question of how to initialize a variable or an object. Initialization could happen with parentheses, braces, and/or assignment operators.<br>For this reason, C++11 introduced the concept of uniform initialization, which means that for any initialization, you can use one common syntax. This syntax uses braces, so the following is possible now:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> values[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span> &#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; cities &#123;</span><br><span class="line"><span class="string">"Berlin"</span>, <span class="string">"New York"</span>, <span class="string">"London"</span>, <span class="string">"Braunschweig"</span>, <span class="string">"Cairo"</span>, <span class="string">"Cologne"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; c&#123;<span class="number">4.0</span>,<span class="number">3.0</span>&#125;; <span class="comment">// equivalent to c(4.0,3.0)</span></span><br></pre></td></tr></table></figure><p>其实是利用一个事实：编译器看到{t1,t2…tn}便做出一个关联至一个initializer_list<t>,它关联至一个array&lt;T,n&gt;。调用函数（例如ctor）时该array内的元素可被编译器分解逐一传给函数。但若函数参数是个initializer_list<t>，调用者却不能给予数个T参数然后以为它们会被自动转为一个initializer_list<t>传入）</t></t></t></p><p>std::vector<a href="std::string" target="_blank" rel="noopener">std::string</a> cities {“Berlin”, “New York”, “London”, “Braunschweig”, “Cairo”, “Cologne”};，这形成一个initializer_list<string>,背后有个array&lt;string,6&gt;。调用vector<string>ctors时编译器找到一个vector<string>ctor接受initializer_list<string>。所有容器皆有类似于此ctor。</string></string></string></string></p><p>std::complex<double> c{4.0,3.0}; // equivalent to c(4.0,3.0)<br>这形成一个initializer_list<double>，背后有个array&lt;double,2&gt;。调用complex<double>ctor时该array内的2个元素被分解传给ctor。complex<double>并无任何ctor接受initializer_list</double></double></double></double></p><p>An initializer list forces so-called value initialization, which means that even local variables of fundamental data types, which usually have an undefined initial value, are initialized by zero (or nullptr, if it is a pointer):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i; <span class="comment">// i has undefined value</span></span><br><span class="line"><span class="keyword">int</span> j&#123;&#125;; <span class="comment">// j is initialized by 0</span></span><br><span class="line"><span class="keyword">int</span>* p; <span class="comment">// p has undefined value</span></span><br><span class="line"><span class="keyword">int</span>* q&#123;&#125;; <span class="comment">// q is initialized by nullptr</span></span><br></pre></td></tr></table></figure><p>Note, however, that narrowing initializations — those that reduce precision or where the supplied value gets modified— are not possible with braces. For example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">x1</span><span class="params">(<span class="number">5.3</span>)</span></span>; <span class="comment">// OK, but OUCH: x1 becomes 5</span></span><br><span class="line"><span class="keyword">int</span> x2 = <span class="number">5.3</span>; <span class="comment">// OK, but OUCH: x2 becomes 5</span></span><br><span class="line"><span class="keyword">int</span> x3&#123;<span class="number">5.0</span>&#125;; <span class="comment">// ERROR: narrowing</span></span><br><span class="line"><span class="keyword">int</span> x4 = &#123;<span class="number">5.3</span>&#125;; <span class="comment">// ERROR: narrowing</span></span><br><span class="line"><span class="keyword">char</span> c1&#123;<span class="number">7</span>&#125;; <span class="comment">// OK: even though 7 is an int, this is not narrowing</span></span><br><span class="line"><span class="keyword">char</span> c2&#123;<span class="number">99999</span>&#125;; <span class="comment">// ERROR: narrowing (if 99999 doesn’t fit into a char)</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1 &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; <span class="comment">// OK</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2 &#123; <span class="number">1</span>, <span class="number">2.3</span>, <span class="number">4</span>, <span class="number">5.6</span> &#125;; <span class="comment">// ERROR: narrowing doubles to ints</span></span><br></pre></td></tr></table></figure><p>To support the concept of initializer lists for user-defined types, C++11 provides the class template std::initializer_list&lt;&gt;. It can be used to support initializations by a list of values or in any other place where you want to process just a list of values. For example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span> <span class="params">(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt; vals)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> p=vals.begin(); p!=vals.end(); ++p) &#123; <span class="comment">// process a list of values</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print (&#123;<span class="number">12</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>&#125;); <span class="comment">// pass a list of values to print()</span></span><br><span class="line">传给<span class="built_in">initializer_list</span>者，一定必须也是个<span class="built_in">initializer_list</span>(<span class="keyword">or</span>&#123;&#125;形式)</span><br></pre></td></tr></table></figure><p>cpp1.0(none explicit one argument ctor 才可以做隐式转换)<br>explicit for ctors taking one argument<br>cpp2.0<br>explicit for ctors taking more than one argument</p><h2 id="range-based-for-statement"><a href="#range-based-for-statement" class="headerlink" title="range-based for statement"></a>range-based for statement</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( decl : coll ) &#123;</span><br><span class="line">  statement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i : &#123; <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125; ) &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vec;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">auto</span> elem : vec ) &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; elem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">auto</span>&amp; elem : vec ) &#123;</span><br><span class="line">  elem *= <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that no explicit type conversions are possible when elements are initialized as decl inside the for loop. Thus, the following does not compile:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">C</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span></span>; <span class="comment">// explicit(!) type conversion from strings</span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; vs;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> C&amp; elem : vs) &#123; <span class="comment">// ERROR, no conversion from string to C defined</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; elem &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="default-delete"><a href="#default-delete" class="headerlink" title="=default,=delete"></a>=default,=delete</h2><p>如果你自行定义了一个ctor，那么编译器就不会再给你一个default ctor。<br>如果你强制加上=default，就可以重新获得并使用default ctor。</p><h2 id="Alias-Template-template-typedef"><a href="#Alias-Template-template-typedef" class="headerlink" title="Alias Template ( template typedef )"></a>Alias Template ( template typedef )</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> Vec = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T,MyAlloc&lt;T&gt;&gt;;   <span class="comment">//standard vector using own allocator</span></span><br><span class="line">Vec&lt;<span class="keyword">int</span>&gt; coll;</span><br><span class="line">is  equivalent to <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,MyAlloc&lt;<span class="keyword">int</span>&gt;&gt; coll;</span><br><span class="line">It is <span class="keyword">not</span> possible to partially <span class="keyword">or</span> explicitly specialize an alias <span class="keyword">template</span>.</span><br></pre></td></tr></table></figure><h2 id="Type-Alias-similar-to-typedef"><a href="#Type-Alias-similar-to-typedef" class="headerlink" title="Type Alias (similar to typedef)"></a>Type Alias (similar to typedef)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//type alias,identical to</span></span><br><span class="line"><span class="comment">//typedef void (*func)(int,int);</span></span><br><span class="line"><span class="keyword">using</span> func = <span class="keyword">void</span>(*)(<span class="keyword">int</span>,<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//the name 'func' now denotes a pointer to function: void example(int,int)&#123;&#125;</span></span><br><span class="line">func fn = example;</span><br></pre></td></tr></table></figure><h2 id="noexcept"><a href="#noexcept" class="headerlink" title="noexcept"></a>noexcept</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;   ==&gt;   <span class="keyword">void</span> foo() <span class="keyword">noexcept</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>declares that foo() won’t throw. If an exception is not handled locally inside foo() — thus, if foo() throws — the program is terminated, calling std::terminate(), which by default calls std::abort().</p><p>You can even specify a condition under which a function throws no exception. For example, for any type Type, the global swap() usually is defined as follows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">(Type&amp; x, Type&amp; y)</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(x.swap(y)))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x.swap(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here, inside noexcept(…), you can specify a Boolean condition under which no exception gets thrown: Specifying noexcept without condition is a short form of specifying noexcept(true).</p><p><a href="https://stackoverflow.com/questions/8001823/how-to-enforce-move-semantics-when-a-vector-grows" target="_blank" rel="noopener">https://stackoverflow.com/questions/8001823/how-to-enforce-move-semantics-when-a-vector-grows</a></p><h2 id="override"><a href="#override" class="headerlink" title="override"></a>override</h2><p>告诉编译器，子类要override父类的成员函数，让编译器帮助检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struce Base&#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc</span><span class="params">(<span class="keyword">float</span>)</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Derived2</span> :</span> Base &#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc</span><span class="params">(<span class="keyword">int</span>)</span> override</span>&#123;&#125; <span class="comment">//[Error] marked override,bug does not override </span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc</span><span class="params">(<span class="keyword">float</span>)</span> override</span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base1</span> <span class="title">final</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Derived1</span> :</span> Base1&#123;&#125;;<span class="comment">//[Error] cannot derive from 'final' base 'Base1' in derived type 'Derived1'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base2</span>&#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> final</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Derived2</span> :</span> Base2&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;<span class="comment">//[Error] overriding final function 'virtual void Base2::f()'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h2><p>By using the new decltype keyword, you can let the compiler find out the type of an expression. This is the realization of the often requested typeof feature. However, the existing typeof implementations were inconsistent and incomplete, so C++11 introduced a new keyword. For example:<br>GNU C++中的typeof并不是标准库的一部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">float</span>&gt; coll;</span><br><span class="line"><span class="keyword">decltype</span>(coll)::value_type elem;</span><br><span class="line"></span><br><span class="line">这样写（before C++<span class="number">11</span>）</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">float</span>&gt;::value_type elem;</span><br></pre></td></tr></table></figure><p>One application of decltype is to declare return types (see below). Another is to use it in metaprogramming (see Section 5.4.1, page 125) or to pass the type of a lambda (see Section 10.3.4, page 504).</p><p>defines a type equivalent to the type of an expression</p><p>应用：<br>1、decltype,used to declare return types<br>Sometimes, the return type of a function depends on an expression processed with the arguments.<br>However, something like</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="keyword">decltype</span>(x+y) add(T1 x, T2 y);</span><br></pre></td></tr></table></figure><p>was not possible before C++11, because the return expression uses objects not introduced or in scope yet.<br>But with C++11, you can alternatively declare the return type of a function behind the parameter list:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">auto add(T1 x, T2 y) -&gt; decltype(x+y);</span><br></pre></td></tr></table></figure><p>This uses the same syntax as for lambdas to declare return types<br>[…] (…) mutable_opt throwSpec_opt -&gt;retType_opt {…}<br>2、decltype, to used in metaprogramming<br>3、decltype, pass the type of a lambda<br>面对lambda，我们手上往往只有object，没有type。要获得其type就得借助于decltype。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> cmp = [](<span class="keyword">const</span> Persion&amp; p1, <span class="keyword">const</span> Person&amp; p2) &#123;</span><br><span class="line"><span class="keyword">return</span> p1.lastname() &lt; p2.lastname() ||</span><br><span class="line">(p1.lastname() == p2.lastname() &amp;&amp;</span><br><span class="line">p1.firstname() &lt; p2.firstname());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;Person, <span class="keyword">decltype</span>(cmp)&gt;coll(cmp);</span><br></pre></td></tr></table></figure><p>笔记来自 <a href="http://boolan.com/" target="_blank" rel="noopener">http://boolan.com/</a>  侯捷C++新标准C++11/14<br>内容引自《The C++ standard Library A Tutorial and reference》</p>]]></content>
      
      
      
        <tags>
            
            <tag> Cpp2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CppVariadicTemplates</title>
      <link href="/2017/09/07/CppVariadicTemplates/"/>
      <url>/2017/09/07/CppVariadicTemplates/</url>
      
        <content type="html"><![CDATA[<p>数量不定的模板参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">首先确定编译器是否支持C++<span class="number">11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __cplusplus &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VariadicTemplates特性最大的特点是可以用在函数递归（函数自己调用自己才叫recursive递归），tuple的做法</p>]]></content>
      
      
      
        <tags>
            
            <tag> Cpp2.0 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
